(self["webpackChunkmapsbundle"] = self["webpackChunkmapsbundle"] || []).push([["vendors-node_modules_opening_hours_build_opening_hours_js"],{

/***/ "./node_modules/i18next/dist/cjs/i18next.js":
/*!**************************************************!*\
  !*** ./node_modules/i18next/dist/cjs/i18next.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


const isString = obj => typeof obj === 'string';
const defer = () => {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
};
const makeString = object => {
  if (object == null) return '';
  return '' + object;
};
const copy = (a, s, t) => {
  a.forEach(m => {
    if (s[m]) t[m] = s[m];
  });
};
const lastOfPathSeparatorRegExp = /###/g;
const cleanKey = key => key && key.indexOf('###') > -1 ? key.replace(lastOfPathSeparatorRegExp, '.') : key;
const canNotTraverseDeeper = object => !object || isString(object);
const getLastOfPath = (object, path, Empty) => {
  const stack = !isString(path) ? path : path.split('.');
  let stackIndex = 0;
  while (stackIndex < stack.length - 1) {
    if (canNotTraverseDeeper(object)) return {};
    const key = cleanKey(stack[stackIndex]);
    if (!object[key] && Empty) object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
    ++stackIndex;
  }
  if (canNotTraverseDeeper(object)) return {};
  return {
    obj: object,
    k: cleanKey(stack[stackIndex])
  };
};
const setPath = (object, path, newValue) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  if (obj !== undefined || path.length === 1) {
    obj[k] = newValue;
    return;
  }
  let e = path[path.length - 1];
  let p = path.slice(0, path.length - 1);
  let last = getLastOfPath(object, p, Object);
  while (last.obj === undefined && p.length) {
    e = `${p[p.length - 1]}.${e}`;
    p = p.slice(0, p.length - 1);
    last = getLastOfPath(object, p, Object);
    if (last?.obj && typeof last.obj[`${last.k}.${e}`] !== 'undefined') {
      last.obj = undefined;
    }
  }
  last.obj[`${last.k}.${e}`] = newValue;
};
const pushPath = (object, path, newValue, concat) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  obj[k] = obj[k] || [];
  obj[k].push(newValue);
};
const getPath = (object, path) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path);
  if (!obj) return undefined;
  if (!Object.prototype.hasOwnProperty.call(obj, k)) return undefined;
  return obj[k];
};
const getPathWithDefaults = (data, defaultData, key) => {
  const value = getPath(data, key);
  if (value !== undefined) {
    return value;
  }
  return getPath(defaultData, key);
};
const deepExtend = (target, source, overwrite) => {
  for (const prop in source) {
    if (prop !== '__proto__' && prop !== 'constructor') {
      if (prop in target) {
        if (isString(target[prop]) || target[prop] instanceof String || isString(source[prop]) || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
};
const regexEscape = str => str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
var _entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;'
};
const escape = data => {
  if (isString(data)) {
    return data.replace(/[&<>"'\/]/g, s => _entityMap[s]);
  }
  return data;
};
class RegExpCache {
  constructor(capacity) {
    this.capacity = capacity;
    this.regExpMap = new Map();
    this.regExpQueue = [];
  }
  getRegExp(pattern) {
    const regExpFromCache = this.regExpMap.get(pattern);
    if (regExpFromCache !== undefined) {
      return regExpFromCache;
    }
    const regExpNew = new RegExp(pattern);
    if (this.regExpQueue.length === this.capacity) {
      this.regExpMap.delete(this.regExpQueue.shift());
    }
    this.regExpMap.set(pattern, regExpNew);
    this.regExpQueue.push(pattern);
    return regExpNew;
  }
}
const chars = [' ', ',', '?', '!', ';'];
const looksLikeObjectPathRegExpCache = new RegExpCache(20);
const looksLikeObjectPath = (key, nsSeparator, keySeparator) => {
  nsSeparator = nsSeparator || '';
  keySeparator = keySeparator || '';
  const possibleChars = chars.filter(c => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);
  if (possibleChars.length === 0) return true;
  const r = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map(c => c === '?' ? '\\?' : c).join('|')})`);
  let matched = !r.test(key);
  if (!matched) {
    const ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
};
const deepFind = function (obj, path) {
  let keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
  if (!obj) return undefined;
  if (obj[path]) {
    if (!Object.prototype.hasOwnProperty.call(obj, path)) return undefined;
    return obj[path];
  }
  const tokens = path.split(keySeparator);
  let current = obj;
  for (let i = 0; i < tokens.length;) {
    if (!current || typeof current !== 'object') {
      return undefined;
    }
    let next;
    let nextPath = '';
    for (let j = i; j < tokens.length; ++j) {
      if (j !== i) {
        nextPath += keySeparator;
      }
      nextPath += tokens[j];
      next = current[nextPath];
      if (next !== undefined) {
        if (['string', 'number', 'boolean'].indexOf(typeof next) > -1 && j < tokens.length - 1) {
          continue;
        }
        i += j - i + 1;
        break;
      }
    }
    current = next;
  }
  return current;
};
const getCleanedCode = code => code?.replace('_', '-');

const consoleLogger = {
  type: 'logger',
  log(args) {
    this.output('log', args);
  },
  warn(args) {
    this.output('warn', args);
  },
  error(args) {
    this.output('error', args);
  },
  output(type, args) {
    console?.[type]?.apply?.(console, args);
  }
};
class Logger {
  constructor(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.init(concreteLogger, options);
  }
  init(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.prefix = options.prefix || 'i18next:';
    this.logger = concreteLogger || consoleLogger;
    this.options = options;
    this.debug = options.debug;
  }
  log() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return this.forward(args, 'log', '', true);
  }
  warn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return this.forward(args, 'warn', '', true);
  }
  error() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return this.forward(args, 'error', '');
  }
  deprecate() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
  }
  forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug) return null;
    if (isString(args[0])) args[0] = `${prefix}${this.prefix} ${args[0]}`;
    return this.logger[lvl](args);
  }
  create(moduleName) {
    return new Logger(this.logger, {
      ...{
        prefix: `${this.prefix}:${moduleName}:`
      },
      ...this.options
    });
  }
  clone(options) {
    options = options || this.options;
    options.prefix = options.prefix || this.prefix;
    return new Logger(this.logger, options);
  }
}
var baseLogger = new Logger();

class EventEmitter {
  constructor() {
    this.observers = {};
  }
  on(events, listener) {
    events.split(' ').forEach(event => {
      if (!this.observers[event]) this.observers[event] = new Map();
      const numListeners = this.observers[event].get(listener) || 0;
      this.observers[event].set(listener, numListeners + 1);
    });
    return this;
  }
  off(event, listener) {
    if (!this.observers[event]) return;
    if (!listener) {
      delete this.observers[event];
      return;
    }
    this.observers[event].delete(listener);
  }
  emit(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (this.observers[event]) {
      const cloned = Array.from(this.observers[event].entries());
      cloned.forEach(_ref => {
        let [observer, numTimesAdded] = _ref;
        for (let i = 0; i < numTimesAdded; i++) {
          observer(...args);
        }
      });
    }
    if (this.observers['*']) {
      const cloned = Array.from(this.observers['*'].entries());
      cloned.forEach(_ref2 => {
        let [observer, numTimesAdded] = _ref2;
        for (let i = 0; i < numTimesAdded; i++) {
          observer.apply(observer, [event, ...args]);
        }
      });
    }
  }
}

class ResourceStore extends EventEmitter {
  constructor(data) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      ns: ['translation'],
      defaultNS: 'translation'
    };
    super();
    this.data = data || {};
    this.options = options;
    if (this.options.keySeparator === undefined) {
      this.options.keySeparator = '.';
    }
    if (this.options.ignoreJSONStructure === undefined) {
      this.options.ignoreJSONStructure = true;
    }
  }
  addNamespaces(ns) {
    if (this.options.ns.indexOf(ns) < 0) {
      this.options.ns.push(ns);
    }
  }
  removeNamespaces(ns) {
    const index = this.options.ns.indexOf(ns);
    if (index > -1) {
      this.options.ns.splice(index, 1);
    }
  }
  getResource(lng, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    const ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let path;
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
    } else {
      path = [lng, ns];
      if (key) {
        if (Array.isArray(key)) {
          path.push(...key);
        } else if (isString(key) && keySeparator) {
          path.push(...key.split(keySeparator));
        } else {
          path.push(key);
        }
      }
    }
    const result = getPath(this.data, path);
    if (!result && !ns && !key && lng.indexOf('.') > -1) {
      lng = path[0];
      ns = path[1];
      key = path.slice(2).join('.');
    }
    if (result || !ignoreJSONStructure || !isString(key)) return result;
    return deepFind(this.data?.[lng]?.[ns], key, keySeparator);
  }
  addResource(lng, ns, key, value) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
      silent: false
    };
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    let path = [lng, ns];
    if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      value = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    setPath(this.data, path, value);
    if (!options.silent) this.emit('added', lng, ns, key, value);
  }
  addResources(lng, ns, resources) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
      silent: false
    };
    for (const m in resources) {
      if (isString(resources[m]) || Array.isArray(resources[m])) this.addResource(lng, ns, m, resources[m], {
        silent: true
      });
    }
    if (!options.silent) this.emit('added', lng, ns, resources);
  }
  addResourceBundle(lng, ns, resources, deep, overwrite) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
      silent: false,
      skipCopy: false
    };
    let path = [lng, ns];
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      deep = resources;
      resources = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    let pack = getPath(this.data, path) || {};
    if (!options.skipCopy) resources = JSON.parse(JSON.stringify(resources));
    if (deep) {
      deepExtend(pack, resources, overwrite);
    } else {
      pack = {
        ...pack,
        ...resources
      };
    }
    setPath(this.data, path, pack);
    if (!options.silent) this.emit('added', lng, ns, resources);
  }
  removeResourceBundle(lng, ns) {
    if (this.hasResourceBundle(lng, ns)) {
      delete this.data[lng][ns];
    }
    this.removeNamespaces(ns);
    this.emit('removed', lng, ns);
  }
  hasResourceBundle(lng, ns) {
    return this.getResource(lng, ns) !== undefined;
  }
  getResourceBundle(lng, ns) {
    if (!ns) ns = this.options.defaultNS;
    return this.getResource(lng, ns);
  }
  getDataByLanguage(lng) {
    return this.data[lng];
  }
  hasLanguageSomeTranslations(lng) {
    const data = this.getDataByLanguage(lng);
    const n = data && Object.keys(data) || [];
    return !!n.find(v => data[v] && Object.keys(data[v]).length > 0);
  }
  toJSON() {
    return this.data;
  }
}

var postProcessor = {
  processors: {},
  addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle(processors, value, key, options, translator) {
    processors.forEach(processor => {
      value = this.processors[processor]?.process(value, key, options, translator) ?? value;
    });
    return value;
  }
};

const checkedLoadedFor = {};
const shouldHandleAsObject = res => !isString(res) && typeof res !== 'boolean' && typeof res !== 'number';
class Translator extends EventEmitter {
  constructor(services) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super();
    copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, this);
    this.options = options;
    if (this.options.keySeparator === undefined) {
      this.options.keySeparator = '.';
    }
    this.logger = baseLogger.create('translator');
  }
  changeLanguage(lng) {
    if (lng) this.language = lng;
  }
  exists(key) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      interpolation: {}
    };
    if (key == null) {
      return false;
    }
    const resolved = this.resolve(key, options);
    return resolved?.res !== undefined;
  }
  extractFromKey(key, options) {
    let nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === undefined) nsSeparator = ':';
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    let namespaces = options.ns || this.options.defaultNS || [];
    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
      const m = key.match(this.interpolator.nestingRegexp);
      if (m && m.length > 0) {
        return {
          key,
          namespaces: isString(namespaces) ? [namespaces] : namespaces
        };
      }
      const parts = key.split(nsSeparator);
      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
      key = parts.join(keySeparator);
    }
    return {
      key,
      namespaces: isString(namespaces) ? [namespaces] : namespaces
    };
  }
  translate(keys, options, lastKey) {
    if (typeof options !== 'object' && this.options.overloadTranslationOptionHandler) {
      options = this.options.overloadTranslationOptionHandler(arguments);
    }
    if (typeof options === 'object') options = {
      ...options
    };
    if (!options) options = {};
    if (keys == null) return '';
    if (!Array.isArray(keys)) keys = [String(keys)];
    const returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    const {
      key,
      namespaces
    } = this.extractFromKey(keys[keys.length - 1], options);
    const namespace = namespaces[namespaces.length - 1];
    const lng = options.lng || this.language;
    const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (lng?.toLowerCase() === 'cimode') {
      if (appendNamespaceToCIMode) {
        const nsSeparator = options.nsSeparator || this.options.nsSeparator;
        if (returnDetails) {
          return {
            res: `${namespace}${nsSeparator}${key}`,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace,
            usedParams: this.getUsedParamsDetails(options)
          };
        }
        return `${namespace}${nsSeparator}${key}`;
      }
      if (returnDetails) {
        return {
          res: key,
          usedKey: key,
          exactUsedKey: key,
          usedLng: lng,
          usedNS: namespace,
          usedParams: this.getUsedParamsDetails(options)
        };
      }
      return key;
    }
    const resolved = this.resolve(keys, options);
    let res = resolved?.res;
    const resUsedKey = resolved?.usedKey || key;
    const resExactUsedKey = resolved?.exactUsedKey || key;
    const noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
    const joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
    const needsPluralHandling = options.count !== undefined && !isString(options.count);
    const hasDefaultValue = Translator.hasDefaultValue(options);
    const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
    const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {
      ordinal: false
    }) : '';
    const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0;
    const defaultValue = needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] || options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;
    let resForObjHndl = res;
    if (handleAsObjectInI18nFormat && !res && hasDefaultValue) {
      resForObjHndl = defaultValue;
    }
    const handleAsObject = shouldHandleAsObject(resForObjHndl);
    const resType = Object.prototype.toString.apply(resForObjHndl);
    if (handleAsObjectInI18nFormat && resForObjHndl && handleAsObject && noObject.indexOf(resType) < 0 && !(isString(joinArrays) && Array.isArray(resForObjHndl))) {
      if (!options.returnObjects && !this.options.returnObjects) {
        if (!this.options.returnedObjectHandler) {
          this.logger.warn('accessing an object - but returnObjects options is not enabled!');
        }
        const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, resForObjHndl, {
          ...options,
          ns: namespaces
        }) : `key '${key} (${this.language})' returned an object instead of string.`;
        if (returnDetails) {
          resolved.res = r;
          resolved.usedParams = this.getUsedParamsDetails(options);
          return resolved;
        }
        return r;
      }
      if (keySeparator) {
        const resTypeIsArray = Array.isArray(resForObjHndl);
        const copy = resTypeIsArray ? [] : {};
        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
        for (const m in resForObjHndl) {
          if (Object.prototype.hasOwnProperty.call(resForObjHndl, m)) {
            const deepKey = `${newKeyToUse}${keySeparator}${m}`;
            if (hasDefaultValue && !res) {
              copy[m] = this.translate(deepKey, {
                ...options,
                defaultValue: shouldHandleAsObject(defaultValue) ? defaultValue[m] : undefined,
                ...{
                  joinArrays: false,
                  ns: namespaces
                }
              });
            } else {
              copy[m] = this.translate(deepKey, {
                ...options,
                ...{
                  joinArrays: false,
                  ns: namespaces
                }
              });
            }
            if (copy[m] === deepKey) copy[m] = resForObjHndl[m];
          }
        }
        res = copy;
      }
    } else if (handleAsObjectInI18nFormat && isString(joinArrays) && Array.isArray(res)) {
      res = res.join(joinArrays);
      if (res) res = this.extendTranslation(res, keys, options, lastKey);
    } else {
      let usedDefault = false;
      let usedKey = false;
      if (!this.isValidLookup(res) && hasDefaultValue) {
        usedDefault = true;
        res = defaultValue;
      }
      if (!this.isValidLookup(res)) {
        usedKey = true;
        res = key;
      }
      const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
      if (usedKey || usedDefault || updateMissing) {
        this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
        if (keySeparator) {
          const fk = this.resolve(key, {
            ...options,
            keySeparator: false
          });
          if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
        }
        let lngs = [];
        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
        if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
          for (let i = 0; i < fallbackLngs.length; i++) {
            lngs.push(fallbackLngs[i]);
          }
        } else if (this.options.saveMissingTo === 'all') {
          lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
        } else {
          lngs.push(options.lng || this.language);
        }
        const send = (l, k, specificDefaultValue) => {
          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
          if (this.options.missingKeyHandler) {
            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
          } else if (this.backendConnector?.saveMissing) {
            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
          }
          this.emit('missingKey', l, namespace, k, res);
        };
        if (this.options.saveMissing) {
          if (this.options.saveMissingPlurals && needsPluralHandling) {
            lngs.forEach(language => {
              const suffixes = this.pluralResolver.getSuffixes(language, options);
              if (needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                suffixes.push(`${this.options.pluralSeparator}zero`);
              }
              suffixes.forEach(suffix => {
                send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);
              });
            });
          } else {
            send(lngs, key, defaultValue);
          }
        }
      }
      res = this.extendTranslation(res, keys, options, resolved, lastKey);
      if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;
      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
        res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : undefined);
      }
    }
    if (returnDetails) {
      resolved.res = res;
      resolved.usedParams = this.getUsedParamsDetails(options);
      return resolved;
    }
    return res;
  }
  extendTranslation(res, key, options, resolved, lastKey) {
    var _this = this;
    if (this.i18nFormat?.parse) {
      res = this.i18nFormat.parse(res, {
        ...this.options.interpolation.defaultVariables,
        ...options
      }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
        resolved
      });
    } else if (!options.skipInterpolation) {
      if (options.interpolation) this.interpolator.init({
        ...options,
        ...{
          interpolation: {
            ...this.options.interpolation,
            ...options.interpolation
          }
        }
      });
      const skipOnVariables = isString(res) && (options?.interpolation?.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let nestBef;
      if (skipOnVariables) {
        const nb = res.match(this.interpolator.nestingRegexp);
        nestBef = nb && nb.length;
      }
      let data = options.replace && !isString(options.replace) ? options.replace : options;
      if (this.options.interpolation.defaultVariables) data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
      res = this.interpolator.interpolate(res, data, options.lng || this.language || resolved.usedLng, options);
      if (skipOnVariables) {
        const na = res.match(this.interpolator.nestingRegexp);
        const nestAft = na && na.length;
        if (nestBef < nestAft) options.nest = false;
      }
      if (!options.lng && resolved && resolved.res) options.lng = this.language || resolved.usedLng;
      if (options.nest !== false) res = this.interpolator.nest(res, function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (lastKey?.[0] === args[0] && !options.context) {
          _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
          return null;
        }
        return _this.translate(...args, key);
      }, options);
      if (options.interpolation) this.interpolator.reset();
    }
    const postProcess = options.postProcess || this.options.postProcess;
    const postProcessorNames = isString(postProcess) ? [postProcess] : postProcess;
    if (res != null && postProcessorNames?.length && options.applyPostProcessor !== false) {
      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
        i18nResolved: {
          ...resolved,
          usedParams: this.getUsedParamsDetails(options)
        },
        ...options
      } : options, this);
    }
    return res;
  }
  resolve(keys) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let found;
    let usedKey;
    let exactUsedKey;
    let usedLng;
    let usedNS;
    if (isString(keys)) keys = [keys];
    keys.forEach(k => {
      if (this.isValidLookup(found)) return;
      const extracted = this.extractFromKey(k, options);
      const key = extracted.key;
      usedKey = key;
      let namespaces = extracted.namespaces;
      if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
      const needsPluralHandling = options.count !== undefined && !isString(options.count);
      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0;
      const needsContextHandling = options.context !== undefined && (isString(options.context) || typeof options.context === 'number') && options.context !== '';
      const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);
      namespaces.forEach(ns => {
        if (this.isValidLookup(found)) return;
        usedNS = ns;
        if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils?.hasLoadedNamespace && !this.utils?.hasLoadedNamespace(usedNS)) {
          checkedLoadedFor[`${codes[0]}-${ns}`] = true;
          this.logger.warn(`key "${usedKey}" for languages "${codes.join(', ')}" won't get resolved as namespace "${usedNS}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
        }
        codes.forEach(code => {
          if (this.isValidLookup(found)) return;
          usedLng = code;
          const finalKeys = [key];
          if (this.i18nFormat?.addLookupKeys) {
            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
          } else {
            let pluralSuffix;
            if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);
            const zeroSuffix = `${this.options.pluralSeparator}zero`;
            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (needsPluralHandling) {
              finalKeys.push(key + pluralSuffix);
              if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
              }
              if (needsZeroSuffixLookup) {
                finalKeys.push(key + zeroSuffix);
              }
            }
            if (needsContextHandling) {
              const contextKey = `${key}${this.options.contextSeparator}${options.context}`;
              finalKeys.push(contextKey);
              if (needsPluralHandling) {
                finalKeys.push(contextKey + pluralSuffix);
                if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                if (needsZeroSuffixLookup) {
                  finalKeys.push(contextKey + zeroSuffix);
                }
              }
            }
          }
          let possibleKey;
          while (possibleKey = finalKeys.pop()) {
            if (!this.isValidLookup(found)) {
              exactUsedKey = possibleKey;
              found = this.getResource(code, ns, possibleKey, options);
            }
          }
        });
      });
    });
    return {
      res: found,
      usedKey,
      exactUsedKey,
      usedLng,
      usedNS
    };
  }
  isValidLookup(res) {
    return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
  }
  getResource(code, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    if (this.i18nFormat?.getResource) return this.i18nFormat.getResource(code, ns, key, options);
    return this.resourceStore.getResource(code, ns, key, options);
  }
  getUsedParamsDetails() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const optionsKeys = ['defaultValue', 'ordinal', 'context', 'replace', 'lng', 'lngs', 'fallbackLng', 'ns', 'keySeparator', 'nsSeparator', 'returnObjects', 'returnDetails', 'joinArrays', 'postProcess', 'interpolation'];
    const useOptionsReplaceForData = options.replace && !isString(options.replace);
    let data = useOptionsReplaceForData ? options.replace : options;
    if (useOptionsReplaceForData && typeof options.count !== 'undefined') {
      data.count = options.count;
    }
    if (this.options.interpolation.defaultVariables) {
      data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
    }
    if (!useOptionsReplaceForData) {
      data = {
        ...data
      };
      for (const key of optionsKeys) {
        delete data[key];
      }
    }
    return data;
  }
  static hasDefaultValue(options) {
    const prefix = 'defaultValue';
    for (const option in options) {
      if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
        return true;
      }
    }
    return false;
  }
}

class LanguageUtil {
  constructor(options) {
    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create('languageUtils');
  }
  getScriptPartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf('-') < 0) return null;
    const p = code.split('-');
    if (p.length === 2) return null;
    p.pop();
    if (p[p.length - 1].toLowerCase() === 'x') return null;
    return this.formatLanguageCode(p.join('-'));
  }
  getLanguagePartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf('-') < 0) return code;
    const p = code.split('-');
    return this.formatLanguageCode(p[0]);
  }
  formatLanguageCode(code) {
    if (isString(code) && code.indexOf('-') > -1) {
      let formattedCode;
      try {
        formattedCode = Intl.getCanonicalLocales(code)[0];
      } catch (e) {}
      if (formattedCode && this.options.lowerCaseLng) {
        formattedCode = formattedCode.toLowerCase();
      }
      if (formattedCode) return formattedCode;
      if (this.options.lowerCaseLng) {
        return code.toLowerCase();
      }
      return code;
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
  }
  isSupportedCode(code) {
    if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
      code = this.getLanguagePartFromCode(code);
    }
    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
  }
  getBestMatchFromCodes(codes) {
    if (!codes) return null;
    let found;
    codes.forEach(code => {
      if (found) return;
      const cleanedLng = this.formatLanguageCode(code);
      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
    });
    if (!found && this.options.supportedLngs) {
      codes.forEach(code => {
        if (found) return;
        const lngOnly = this.getLanguagePartFromCode(code);
        if (this.isSupportedCode(lngOnly)) return found = lngOnly;
        found = this.options.supportedLngs.find(supportedLng => {
          if (supportedLng === lngOnly) return supportedLng;
          if (supportedLng.indexOf('-') < 0 && lngOnly.indexOf('-') < 0) return;
          if (supportedLng.indexOf('-') > 0 && lngOnly.indexOf('-') < 0 && supportedLng.substring(0, supportedLng.indexOf('-')) === lngOnly) return supportedLng;
          if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
        });
      });
    }
    if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
    return found;
  }
  getFallbackCodes(fallbacks, code) {
    if (!fallbacks) return [];
    if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
    if (isString(fallbacks)) fallbacks = [fallbacks];
    if (Array.isArray(fallbacks)) return fallbacks;
    if (!code) return fallbacks.default || [];
    let found = fallbacks[code];
    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
    if (!found) found = fallbacks[this.formatLanguageCode(code)];
    if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
    if (!found) found = fallbacks.default;
    return found || [];
  }
  toResolveHierarchy(code, fallbackCode) {
    const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
    const codes = [];
    const addCode = c => {
      if (!c) return;
      if (this.isSupportedCode(c)) {
        codes.push(c);
      } else {
        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);
      }
    };
    if (isString(code) && (code.indexOf('-') > -1 || code.indexOf('_') > -1)) {
      if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
      if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
      if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
    } else if (isString(code)) {
      addCode(this.formatLanguageCode(code));
    }
    fallbackCodes.forEach(fc => {
      if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
    });
    return codes;
  }
}

const suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
const dummyRule = {
  select: count => count === 1 ? 'one' : 'other',
  resolvedOptions: () => ({
    pluralCategories: ['one', 'other']
  })
};
class PluralResolver {
  constructor(languageUtils) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create('pluralResolver');
    this.pluralRulesCache = {};
  }
  addRule(lng, obj) {
    this.rules[lng] = obj;
  }
  clearCache() {
    this.pluralRulesCache = {};
  }
  getRule(code) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const cleanedCode = getCleanedCode(code === 'dev' ? 'en' : code);
    const type = options.ordinal ? 'ordinal' : 'cardinal';
    const cacheKey = JSON.stringify({
      cleanedCode,
      type
    });
    if (cacheKey in this.pluralRulesCache) {
      return this.pluralRulesCache[cacheKey];
    }
    let rule;
    try {
      rule = new Intl.PluralRules(cleanedCode, {
        type
      });
    } catch (err) {
      if (!Intl) {
        this.logger.error('No Intl support, please use an Intl polyfill!');
        return dummyRule;
      }
      if (!code.match(/-|_/)) return dummyRule;
      const lngPart = this.languageUtils.getLanguagePartFromCode(code);
      rule = this.getRule(lngPart, options);
    }
    this.pluralRulesCache[cacheKey] = rule;
    return rule;
  }
  needsPlural(code) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let rule = this.getRule(code, options);
    if (!rule) rule = this.getRule('dev', options);
    return rule?.resolvedOptions().pluralCategories.length > 1;
  }
  getPluralFormsOfKey(code, key) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return this.getSuffixes(code, options).map(suffix => `${key}${suffix}`);
  }
  getSuffixes(code) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let rule = this.getRule(code, options);
    if (!rule) rule = this.getRule('dev', options);
    if (!rule) return [];
    return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map(pluralCategory => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${pluralCategory}`);
  }
  getSuffix(code, count) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const rule = this.getRule(code, options);
    if (rule) {
      return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${rule.select(count)}`;
    }
    this.logger.warn(`no plural rule found for: ${code}`);
    return this.getSuffix('dev', count, options);
  }
}

const deepFindWithDefaults = function (data, defaultData, key) {
  let keySeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';
  let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  let path = getPathWithDefaults(data, defaultData, key);
  if (!path && ignoreJSONStructure && isString(key)) {
    path = deepFind(data, key, keySeparator);
    if (path === undefined) path = deepFind(defaultData, key, keySeparator);
  }
  return path;
};
const regexSafe = val => val.replace(/\$/g, '$$$$');
class Interpolator {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.logger = baseLogger.create('interpolator');
    this.options = options;
    this.format = options?.interpolation?.format || (value => value);
    this.init(options);
  }
  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!options.interpolation) options.interpolation = {
      escapeValue: true
    };
    const {
      escape: escape$1,
      escapeValue,
      useRawValueToEscape,
      prefix,
      prefixEscaped,
      suffix,
      suffixEscaped,
      formatSeparator,
      unescapeSuffix,
      unescapePrefix,
      nestingPrefix,
      nestingPrefixEscaped,
      nestingSuffix,
      nestingSuffixEscaped,
      nestingOptionsSeparator,
      maxReplaces,
      alwaysFormat
    } = options.interpolation;
    this.escape = escape$1 !== undefined ? escape$1 : escape;
    this.escapeValue = escapeValue !== undefined ? escapeValue : true;
    this.useRawValueToEscape = useRawValueToEscape !== undefined ? useRawValueToEscape : false;
    this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || '{{';
    this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || '}}';
    this.formatSeparator = formatSeparator || ',';
    this.unescapePrefix = unescapeSuffix ? '' : unescapePrefix || '-';
    this.unescapeSuffix = this.unescapePrefix ? '' : unescapeSuffix || '';
    this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape('$t(');
    this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(')');
    this.nestingOptionsSeparator = nestingOptionsSeparator || ',';
    this.maxReplaces = maxReplaces || 1000;
    this.alwaysFormat = alwaysFormat !== undefined ? alwaysFormat : false;
    this.resetRegExp();
  }
  reset() {
    if (this.options) this.init(this.options);
  }
  resetRegExp() {
    const getOrResetRegExp = (existingRegExp, pattern) => {
      if (existingRegExp?.source === pattern) {
        existingRegExp.lastIndex = 0;
        return existingRegExp;
      }
      return new RegExp(pattern, 'g');
    };
    this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
    this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
    this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
  }
  interpolate(str, data, lng, options) {
    let match;
    let value;
    let replaces;
    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    const handleFormat = key => {
      if (key.indexOf(this.formatSeparator) < 0) {
        const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(path, undefined, lng, {
          ...options,
          ...data,
          interpolationkey: key
        }) : path;
      }
      const p = key.split(this.formatSeparator);
      const k = p.shift().trim();
      const f = p.join(this.formatSeparator).trim();
      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
        ...options,
        ...data,
        interpolationkey: k
      });
    };
    this.resetRegExp();
    const missingInterpolationHandler = options?.missingInterpolationHandler || this.options.missingInterpolationHandler;
    const skipOnVariables = options?.interpolation?.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    const todos = [{
      regex: this.regexpUnescape,
      safeValue: val => regexSafe(val)
    }, {
      regex: this.regexp,
      safeValue: val => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
    }];
    todos.forEach(todo => {
      replaces = 0;
      while (match = todo.regex.exec(str)) {
        const matchedVar = match[1].trim();
        value = handleFormat(matchedVar);
        if (value === undefined) {
          if (typeof missingInterpolationHandler === 'function') {
            const temp = missingInterpolationHandler(str, match, options);
            value = isString(temp) ? temp : '';
          } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
            value = '';
          } else if (skipOnVariables) {
            value = match[0];
            continue;
          } else {
            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
            value = '';
          }
        } else if (!isString(value) && !this.useRawValueToEscape) {
          value = makeString(value);
        }
        const safeValue = todo.safeValue(value);
        str = str.replace(match[0], safeValue);
        if (skipOnVariables) {
          todo.regex.lastIndex += value.length;
          todo.regex.lastIndex -= match[0].length;
        } else {
          todo.regex.lastIndex = 0;
        }
        replaces++;
        if (replaces >= this.maxReplaces) {
          break;
        }
      }
    });
    return str;
  }
  nest(str, fc) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let match;
    let value;
    let clonedOptions;
    const handleHasOptions = (key, inheritedOptions) => {
      const sep = this.nestingOptionsSeparator;
      if (key.indexOf(sep) < 0) return key;
      const c = key.split(new RegExp(`${sep}[ ]*{`));
      let optionsString = `{${c[1]}`;
      key = c[0];
      optionsString = this.interpolate(optionsString, clonedOptions);
      const matchedSingleQuotes = optionsString.match(/'/g);
      const matchedDoubleQuotes = optionsString.match(/"/g);
      if ((matchedSingleQuotes?.length ?? 0) % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
        optionsString = optionsString.replace(/'/g, '"');
      }
      try {
        clonedOptions = JSON.parse(optionsString);
        if (inheritedOptions) clonedOptions = {
          ...inheritedOptions,
          ...clonedOptions
        };
      } catch (e) {
        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);
        return `${key}${sep}${optionsString}`;
      }
      if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
      return key;
    };
    while (match = this.nestingRegexp.exec(str)) {
      let formatters = [];
      clonedOptions = {
        ...options
      };
      clonedOptions = clonedOptions.replace && !isString(clonedOptions.replace) ? clonedOptions.replace : clonedOptions;
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      let doReduce = false;
      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
        const r = match[1].split(this.formatSeparator).map(elem => elem.trim());
        match[1] = r.shift();
        formatters = r;
        doReduce = true;
      }
      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
      if (value && match[0] === str && !isString(value)) return value;
      if (!isString(value)) value = makeString(value);
      if (!value) {
        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
        value = '';
      }
      if (doReduce) {
        value = formatters.reduce((v, f) => this.format(v, f, options.lng, {
          ...options,
          interpolationkey: match[1].trim()
        }), value.trim());
      }
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  }
}

const parseFormatStr = formatStr => {
  let formatName = formatStr.toLowerCase().trim();
  const formatOptions = {};
  if (formatStr.indexOf('(') > -1) {
    const p = formatStr.split('(');
    formatName = p[0].toLowerCase().trim();
    const optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === 'currency' && optStr.indexOf(':') < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      const opts = optStr.split(';');
      opts.forEach(opt => {
        if (opt) {
          const [key, ...rest] = opt.split(':');
          const val = rest.join(':').trim().replace(/^'+|'+$/g, '');
          const trimmedKey = key.trim();
          if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
          if (val === 'false') formatOptions[trimmedKey] = false;
          if (val === 'true') formatOptions[trimmedKey] = true;
          if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
        }
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
};
const createCachedFormatter = fn => {
  const cache = {};
  return (val, lng, options) => {
    let optForCache = options;
    if (options && options.interpolationkey && options.formatParams && options.formatParams[options.interpolationkey] && options[options.interpolationkey]) {
      optForCache = {
        ...optForCache,
        [options.interpolationkey]: undefined
      };
    }
    const key = lng + JSON.stringify(optForCache);
    let formatter = cache[key];
    if (!formatter) {
      formatter = fn(getCleanedCode(lng), options);
      cache[key] = formatter;
    }
    return formatter(val);
  };
};
class Formatter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.logger = baseLogger.create('formatter');
    this.options = options;
    this.formats = {
      number: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      }),
      currency: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt,
          style: 'currency'
        });
        return val => formatter.format(val);
      }),
      datetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.DateTimeFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      }),
      relativetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.RelativeTimeFormat(lng, {
          ...opt
        });
        return val => formatter.format(val, opt.range || 'day');
      }),
      list: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.ListFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      })
    };
    this.init(options);
  }
  init(services) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      interpolation: {}
    };
    this.formatSeparator = options.interpolation.formatSeparator || ',';
  }
  add(name, fc) {
    this.formats[name.toLowerCase().trim()] = fc;
  }
  addCached(name, fc) {
    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
  }
  format(value, format, lng) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    const formats = format.split(this.formatSeparator);
    if (formats.length > 1 && formats[0].indexOf('(') > 1 && formats[0].indexOf(')') < 0 && formats.find(f => f.indexOf(')') > -1)) {
      const lastIndex = formats.findIndex(f => f.indexOf(')') > -1);
      formats[0] = [formats[0], ...formats.splice(1, lastIndex)].join(this.formatSeparator);
    }
    const result = formats.reduce((mem, f) => {
      const {
        formatName,
        formatOptions
      } = parseFormatStr(f);
      if (this.formats[formatName]) {
        let formatted = mem;
        try {
          const valOptions = options?.formatParams?.[options.interpolationkey] || {};
          const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
          formatted = this.formats[formatName](mem, l, {
            ...formatOptions,
            ...options,
            ...valOptions
          });
        } catch (error) {
          this.logger.warn(error);
        }
        return formatted;
      } else {
        this.logger.warn(`there was no format function for ${formatName}`);
      }
      return mem;
    }, value);
    return result;
  }
}

const removePending = (q, name) => {
  if (q.pending[name] !== undefined) {
    delete q.pending[name];
    q.pendingCount--;
  }
};
class Connector extends EventEmitter {
  constructor(backend, store, services) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    super();
    this.backend = backend;
    this.store = store;
    this.services = services;
    this.languageUtils = services.languageUtils;
    this.options = options;
    this.logger = baseLogger.create('backendConnector');
    this.waitingReads = [];
    this.maxParallelReads = options.maxParallelReads || 10;
    this.readingCalls = 0;
    this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
    this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
    this.state = {};
    this.queue = [];
    this.backend?.init?.(services, options.backend, options);
  }
  queueLoad(languages, namespaces, options, callback) {
    const toLoad = {};
    const pending = {};
    const toLoadLanguages = {};
    const toLoadNamespaces = {};
    languages.forEach(lng => {
      let hasAllNamespaces = true;
      namespaces.forEach(ns => {
        const name = `${lng}|${ns}`;
        if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
          this.state[name] = 2;
        } else if (this.state[name] < 0) ; else if (this.state[name] === 1) {
          if (pending[name] === undefined) pending[name] = true;
        } else {
          this.state[name] = 1;
          hasAllNamespaces = false;
          if (pending[name] === undefined) pending[name] = true;
          if (toLoad[name] === undefined) toLoad[name] = true;
          if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
        }
      });
      if (!hasAllNamespaces) toLoadLanguages[lng] = true;
    });
    if (Object.keys(toLoad).length || Object.keys(pending).length) {
      this.queue.push({
        pending,
        pendingCount: Object.keys(pending).length,
        loaded: {},
        errors: [],
        callback
      });
    }
    return {
      toLoad: Object.keys(toLoad),
      pending: Object.keys(pending),
      toLoadLanguages: Object.keys(toLoadLanguages),
      toLoadNamespaces: Object.keys(toLoadNamespaces)
    };
  }
  loaded(name, err, data) {
    const s = name.split('|');
    const lng = s[0];
    const ns = s[1];
    if (err) this.emit('failedLoading', lng, ns, err);
    if (!err && data) {
      this.store.addResourceBundle(lng, ns, data, undefined, undefined, {
        skipCopy: true
      });
    }
    this.state[name] = err ? -1 : 2;
    if (err && data) this.state[name] = 0;
    const loaded = {};
    this.queue.forEach(q => {
      pushPath(q.loaded, [lng], ns);
      removePending(q, name);
      if (err) q.errors.push(err);
      if (q.pendingCount === 0 && !q.done) {
        Object.keys(q.loaded).forEach(l => {
          if (!loaded[l]) loaded[l] = {};
          const loadedKeys = q.loaded[l];
          if (loadedKeys.length) {
            loadedKeys.forEach(n => {
              if (loaded[l][n] === undefined) loaded[l][n] = true;
            });
          }
        });
        q.done = true;
        if (q.errors.length) {
          q.callback(q.errors);
        } else {
          q.callback();
        }
      }
    });
    this.emit('loaded', loaded);
    this.queue = this.queue.filter(q => !q.done);
  }
  read(lng, ns, fcName) {
    let tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    let wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.retryTimeout;
    let callback = arguments.length > 5 ? arguments[5] : undefined;
    if (!lng.length) return callback(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng,
        ns,
        fcName,
        tried,
        wait,
        callback
      });
      return;
    }
    this.readingCalls++;
    const resolver = (err, data) => {
      this.readingCalls--;
      if (this.waitingReads.length > 0) {
        const next = this.waitingReads.shift();
        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
      }
      if (err && data && tried < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    };
    const fc = this.backend[fcName].bind(this.backend);
    if (fc.length === 2) {
      try {
        const r = fc(lng, ns);
        if (r && typeof r.then === 'function') {
          r.then(data => resolver(null, data)).catch(resolver);
        } else {
          resolver(null, r);
        }
      } catch (err) {
        resolver(err);
      }
      return;
    }
    return fc(lng, ns, resolver);
  }
  prepareLoading(languages, namespaces) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let callback = arguments.length > 3 ? arguments[3] : undefined;
    if (!this.backend) {
      this.logger.warn('No backend was added via i18next.use. Will not load resources.');
      return callback && callback();
    }
    if (isString(languages)) languages = this.languageUtils.toResolveHierarchy(languages);
    if (isString(namespaces)) namespaces = [namespaces];
    const toLoad = this.queueLoad(languages, namespaces, options, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length) callback();
      return null;
    }
    toLoad.toLoad.forEach(name => {
      this.loadOne(name);
    });
  }
  load(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {}, callback);
  }
  reload(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {
      reload: true
    }, callback);
  }
  loadOne(name) {
    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    const s = name.split('|');
    const lng = s[0];
    const ns = s[1];
    this.read(lng, ns, 'read', undefined, undefined, (err, data) => {
      if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
      if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
      this.loaded(name, err, data);
    });
  }
  saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    let clb = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : () => {};
    if (this.services?.utils?.hasLoadedNamespace && !this.services?.utils?.hasLoadedNamespace(namespace)) {
      this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
      return;
    }
    if (key === undefined || key === null || key === '') return;
    if (this.backend?.create) {
      const opts = {
        ...options,
        isUpdate
      };
      const fc = this.backend.create.bind(this.backend);
      if (fc.length < 6) {
        try {
          let r;
          if (fc.length === 5) {
            r = fc(languages, namespace, key, fallbackValue, opts);
          } else {
            r = fc(languages, namespace, key, fallbackValue);
          }
          if (r && typeof r.then === 'function') {
            r.then(data => clb(null, data)).catch(clb);
          } else {
            clb(null, r);
          }
        } catch (err) {
          clb(err);
        }
      } else {
        fc(languages, namespace, key, fallbackValue, clb, opts);
      }
    }
    if (!languages || !languages[0]) return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  }
}

const get = () => ({
  debug: false,
  initAsync: true,
  ns: ['translation'],
  defaultNS: ['translation'],
  fallbackLng: ['dev'],
  fallbackNS: false,
  supportedLngs: false,
  nonExplicitSupportedLngs: false,
  load: 'all',
  preload: false,
  simplifyPluralSuffix: true,
  keySeparator: '.',
  nsSeparator: ':',
  pluralSeparator: '_',
  contextSeparator: '_',
  partialBundledLanguages: false,
  saveMissing: false,
  updateMissing: false,
  saveMissingTo: 'fallback',
  saveMissingPlurals: true,
  missingKeyHandler: false,
  missingInterpolationHandler: false,
  postProcess: false,
  postProcessPassResolved: false,
  returnNull: false,
  returnEmptyString: true,
  returnObjects: false,
  joinArrays: false,
  returnedObjectHandler: false,
  parseMissingKeyHandler: false,
  appendNamespaceToMissingKey: false,
  appendNamespaceToCIMode: false,
  overloadTranslationOptionHandler: args => {
    let ret = {};
    if (typeof args[1] === 'object') ret = args[1];
    if (isString(args[1])) ret.defaultValue = args[1];
    if (isString(args[2])) ret.tDescription = args[2];
    if (typeof args[2] === 'object' || typeof args[3] === 'object') {
      const options = args[3] || args[2];
      Object.keys(options).forEach(key => {
        ret[key] = options[key];
      });
    }
    return ret;
  },
  interpolation: {
    escapeValue: true,
    format: value => value,
    prefix: '{{',
    suffix: '}}',
    formatSeparator: ',',
    unescapePrefix: '-',
    nestingPrefix: '$t(',
    nestingSuffix: ')',
    nestingOptionsSeparator: ',',
    maxReplaces: 1000,
    skipOnVariables: true
  }
});
const transformOptions = options => {
  if (isString(options.ns)) options.ns = [options.ns];
  if (isString(options.fallbackLng)) options.fallbackLng = [options.fallbackLng];
  if (isString(options.fallbackNS)) options.fallbackNS = [options.fallbackNS];
  if (options.supportedLngs?.indexOf?.('cimode') < 0) {
    options.supportedLngs = options.supportedLngs.concat(['cimode']);
  }
  if (typeof options.initImmediate === 'boolean') options.initAsync = options.initImmediate;
  return options;
};

const noop = () => {};
const bindMemberFunctions = inst => {
  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach(mem => {
    if (typeof inst[mem] === 'function') {
      inst[mem] = inst[mem].bind(inst);
    }
  });
};
class I18n extends EventEmitter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : undefined;
    super();
    this.options = transformOptions(options);
    this.services = {};
    this.logger = baseLogger;
    this.modules = {
      external: []
    };
    bindMemberFunctions(this);
    if (callback && !this.isInitialized && !options.isClone) {
      if (!this.options.initAsync) {
        this.init(options, callback);
        return this;
      }
      setTimeout(() => {
        this.init(options, callback);
      }, 0);
    }
  }
  init() {
    var _this = this;
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : undefined;
    this.isInitializing = true;
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    if (options.defaultNS == null && options.ns) {
      if (isString(options.ns)) {
        options.defaultNS = options.ns;
      } else if (options.ns.indexOf('translation') < 0) {
        options.defaultNS = options.ns[0];
      }
    }
    const defOpts = get();
    this.options = {
      ...defOpts,
      ...this.options,
      ...transformOptions(options)
    };
    this.options.interpolation = {
      ...defOpts.interpolation,
      ...this.options.interpolation
    };
    if (options.keySeparator !== undefined) {
      this.options.userDefinedKeySeparator = options.keySeparator;
    }
    if (options.nsSeparator !== undefined) {
      this.options.userDefinedNsSeparator = options.nsSeparator;
    }
    const createClassOnDemand = ClassOrObject => {
      if (!ClassOrObject) return null;
      if (typeof ClassOrObject === 'function') return new ClassOrObject();
      return ClassOrObject;
    };
    if (!this.options.isClone) {
      if (this.modules.logger) {
        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        baseLogger.init(null, this.options);
      }
      let formatter;
      if (this.modules.formatter) {
        formatter = this.modules.formatter;
      } else {
        formatter = Formatter;
      }
      const lu = new LanguageUtil(this.options);
      this.store = new ResourceStore(this.options.resources, this.options);
      const s = this.services;
      s.logger = baseLogger;
      s.resourceStore = this.store;
      s.languageUtils = lu;
      s.pluralResolver = new PluralResolver(lu, {
        prepend: this.options.pluralSeparator,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      });
      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
        s.formatter = createClassOnDemand(formatter);
        s.formatter.init(s, this.options);
        this.options.interpolation.format = s.formatter.format.bind(s.formatter);
      }
      s.interpolator = new Interpolator(this.options);
      s.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      };
      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
      s.backendConnector.on('*', function (event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _this.emit(event, ...args);
      });
      if (this.modules.languageDetector) {
        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
        if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
      }
      if (this.modules.i18nFormat) {
        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
        if (s.i18nFormat.init) s.i18nFormat.init(this);
      }
      this.translator = new Translator(this.services, this.options);
      this.translator.on('*', function (event) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        _this.emit(event, ...args);
      });
      this.modules.external.forEach(m => {
        if (m.init) m.init(this);
      });
    }
    this.format = this.options.interpolation.format;
    if (!callback) callback = noop;
    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
    }
    if (!this.services.languageDetector && !this.options.lng) {
      this.logger.warn('init: no languageDetector is used and no lng is defined');
    }
    const storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
    storeApi.forEach(fcName => {
      this[fcName] = function () {
        return _this.store[fcName](...arguments);
      };
    });
    const storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
    storeApiChained.forEach(fcName => {
      this[fcName] = function () {
        _this.store[fcName](...arguments);
        return _this;
      };
    });
    const deferred = defer();
    const load = () => {
      const finish = (err, t) => {
        this.isInitializing = false;
        if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn('init: i18next is already initialized. You should call init just once!');
        this.isInitialized = true;
        if (!this.options.isClone) this.logger.log('initialized', this.options);
        this.emit('initialized', this.options);
        deferred.resolve(t);
        callback(err, t);
      };
      if (this.languages && !this.isInitialized) return finish(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, finish);
    };
    if (this.options.resources || !this.options.initAsync) {
      load();
    } else {
      setTimeout(load, 0);
    }
    return deferred;
  }
  loadResources(language) {
    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
    let usedCallback = callback;
    const usedLng = isString(language) ? language : this.language;
    if (typeof language === 'function') usedCallback = language;
    if (!this.options.resources || this.options.partialBundledLanguages) {
      if (usedLng?.toLowerCase() === 'cimode' && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
      const toLoad = [];
      const append = lng => {
        if (!lng) return;
        if (lng === 'cimode') return;
        const lngs = this.services.languageUtils.toResolveHierarchy(lng);
        lngs.forEach(l => {
          if (l === 'cimode') return;
          if (toLoad.indexOf(l) < 0) toLoad.push(l);
        });
      };
      if (!usedLng) {
        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        fallbacks.forEach(l => append(l));
      } else {
        append(usedLng);
      }
      this.options.preload?.forEach?.(l => append(l));
      this.services.backendConnector.load(toLoad, this.options.ns, e => {
        if (!e && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
        usedCallback(e);
      });
    } else {
      usedCallback(null);
    }
  }
  reloadResources(lngs, ns, callback) {
    const deferred = defer();
    if (typeof lngs === 'function') {
      callback = lngs;
      lngs = undefined;
    }
    if (typeof ns === 'function') {
      callback = ns;
      ns = undefined;
    }
    if (!lngs) lngs = this.languages;
    if (!ns) ns = this.options.ns;
    if (!callback) callback = noop;
    this.services.backendConnector.reload(lngs, ns, err => {
      deferred.resolve();
      callback(err);
    });
    return deferred;
  }
  use(module) {
    if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
    if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
    if (module.type === 'backend') {
      this.modules.backend = module;
    }
    if (module.type === 'logger' || module.log && module.warn && module.error) {
      this.modules.logger = module;
    }
    if (module.type === 'languageDetector') {
      this.modules.languageDetector = module;
    }
    if (module.type === 'i18nFormat') {
      this.modules.i18nFormat = module;
    }
    if (module.type === 'postProcessor') {
      postProcessor.addPostProcessor(module);
    }
    if (module.type === 'formatter') {
      this.modules.formatter = module;
    }
    if (module.type === '3rdParty') {
      this.modules.external.push(module);
    }
    return this;
  }
  setResolvedLanguage(l) {
    if (!l || !this.languages) return;
    if (['cimode', 'dev'].indexOf(l) > -1) return;
    for (let li = 0; li < this.languages.length; li++) {
      const lngInLngs = this.languages[li];
      if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;
      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
        this.resolvedLanguage = lngInLngs;
        break;
      }
    }
  }
  changeLanguage(lng, callback) {
    var _this2 = this;
    this.isLanguageChangingTo = lng;
    const deferred = defer();
    this.emit('languageChanging', lng);
    const setLngProps = l => {
      this.language = l;
      this.languages = this.services.languageUtils.toResolveHierarchy(l);
      this.resolvedLanguage = undefined;
      this.setResolvedLanguage(l);
    };
    const done = (err, l) => {
      if (l) {
        setLngProps(l);
        this.translator.changeLanguage(l);
        this.isLanguageChangingTo = undefined;
        this.emit('languageChanged', l);
        this.logger.log('languageChanged', l);
      } else {
        this.isLanguageChangingTo = undefined;
      }
      deferred.resolve(function () {
        return _this2.t(...arguments);
      });
      if (callback) callback(err, function () {
        return _this2.t(...arguments);
      });
    };
    const setLng = lngs => {
      if (!lng && !lngs && this.services.languageDetector) lngs = [];
      const l = isString(lngs) ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
      if (l) {
        if (!this.language) {
          setLngProps(l);
        }
        if (!this.translator.language) this.translator.changeLanguage(l);
        this.services.languageDetector?.cacheUserLanguage?.(l);
      }
      this.loadResources(l, err => {
        done(err, l);
      });
    };
    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
      setLng(this.services.languageDetector.detect());
    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
      if (this.services.languageDetector.detect.length === 0) {
        this.services.languageDetector.detect().then(setLng);
      } else {
        this.services.languageDetector.detect(setLng);
      }
    } else {
      setLng(lng);
    }
    return deferred;
  }
  getFixedT(lng, ns, keyPrefix) {
    var _this3 = this;
    const fixedT = function (key, opts) {
      let options;
      if (typeof opts !== 'object') {
        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
          rest[_key3 - 2] = arguments[_key3];
        }
        options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
      } else {
        options = {
          ...opts
        };
      }
      options.lng = options.lng || fixedT.lng;
      options.lngs = options.lngs || fixedT.lngs;
      options.ns = options.ns || fixedT.ns;
      if (options.keyPrefix !== '') options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
      const keySeparator = _this3.options.keySeparator || '.';
      let resultKey;
      if (options.keyPrefix && Array.isArray(key)) {
        resultKey = key.map(k => `${options.keyPrefix}${keySeparator}${k}`);
      } else {
        resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;
      }
      return _this3.t(resultKey, options);
    };
    if (isString(lng)) {
      fixedT.lng = lng;
    } else {
      fixedT.lngs = lng;
    }
    fixedT.ns = ns;
    fixedT.keyPrefix = keyPrefix;
    return fixedT;
  }
  t() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return this.translator?.translate(...args);
  }
  exists() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    return this.translator?.exists(...args);
  }
  setDefaultNamespace(ns) {
    this.options.defaultNS = ns;
  }
  hasLoadedNamespace(ns) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!this.isInitialized) {
      this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
      return false;
    }
    if (!this.languages || !this.languages.length) {
      this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
      return false;
    }
    const lng = options.lng || this.resolvedLanguage || this.languages[0];
    const fallbackLng = this.options ? this.options.fallbackLng : false;
    const lastLng = this.languages[this.languages.length - 1];
    if (lng.toLowerCase() === 'cimode') return true;
    const loadNotPending = (l, n) => {
      const loadState = this.services.backendConnector.state[`${l}|${n}`];
      return loadState === -1 || loadState === 0 || loadState === 2;
    };
    if (options.precheck) {
      const preResult = options.precheck(this, loadNotPending);
      if (preResult !== undefined) return preResult;
    }
    if (this.hasResourceBundle(lng, ns)) return true;
    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
    return false;
  }
  loadNamespaces(ns, callback) {
    const deferred = defer();
    if (!this.options.ns) {
      if (callback) callback();
      return Promise.resolve();
    }
    if (isString(ns)) ns = [ns];
    ns.forEach(n => {
      if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);
    });
    this.loadResources(err => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  loadLanguages(lngs, callback) {
    const deferred = defer();
    if (isString(lngs)) lngs = [lngs];
    const preloaded = this.options.preload || [];
    const newLngs = lngs.filter(lng => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
    if (!newLngs.length) {
      if (callback) callback();
      return Promise.resolve();
    }
    this.options.preload = preloaded.concat(newLngs);
    this.loadResources(err => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  dir(lng) {
    if (!lng) lng = this.resolvedLanguage || (this.languages?.length > 0 ? this.languages[0] : this.language);
    if (!lng) return 'rtl';
    const rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
    const languageUtils = this.services?.languageUtils || new LanguageUtil(get());
    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
  }
  static createInstance() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : undefined;
    return new I18n(options, callback);
  }
  cloneInstance() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
    const forkResourceStore = options.forkResourceStore;
    if (forkResourceStore) delete options.forkResourceStore;
    const mergedOptions = {
      ...this.options,
      ...options,
      ...{
        isClone: true
      }
    };
    const clone = new I18n(mergedOptions);
    if (options.debug !== undefined || options.prefix !== undefined) {
      clone.logger = clone.logger.clone(options);
    }
    const membersToCopy = ['store', 'services', 'language'];
    membersToCopy.forEach(m => {
      clone[m] = this[m];
    });
    clone.services = {
      ...this.services
    };
    clone.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    if (forkResourceStore) {
      const clonedData = Object.keys(this.store.data).reduce((prev, l) => {
        prev[l] = {
          ...this.store.data[l]
        };
        return Object.keys(prev[l]).reduce((acc, n) => {
          acc[n] = {
            ...prev[l][n]
          };
          return acc;
        }, {});
      }, {});
      clone.store = new ResourceStore(clonedData, mergedOptions);
      clone.services.resourceStore = clone.store;
    }
    clone.translator = new Translator(clone.services, mergedOptions);
    clone.translator.on('*', function (event) {
      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        args[_key6 - 1] = arguments[_key6];
      }
      clone.emit(event, ...args);
    });
    clone.init(mergedOptions, callback);
    clone.translator.options = mergedOptions;
    clone.translator.backendConnector.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    return clone;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
}
const instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;

module.exports = instance;


/***/ }),

/***/ "./node_modules/opening_hours/build/opening_hours.js":
/*!***********************************************************!*\
  !*** ./node_modules/opening_hours/build/opening_hours.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

(function (global, factory) {
   true ? module.exports = factory(__webpack_require__(/*! suncalc */ "./node_modules/suncalc/suncalc.js"), __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/cjs/i18next.js")) :
  0;
})(this, (function (SunCalc, i18next) { 'use strict';

  var data$D = { PH:[ { name:"Año Nuevo",
        fixed_date:[ 1,
          1 ] },
      { name:"Carnaval",
        variable_date:"easter",
        offset:-48 },
      { name:"Carnaval",
        variable_date:"easter",
        offset:-47 },
      { name:"Día Nacional de la Memoria por la Verdad y la Justicia",
        fixed_date:[ 3,
          24 ] },
      { name:"Viernes Santo",
        variable_date:"easter",
        offset:-2 },
      { name:"Feriado con fines turísticos",
        fixed_date:[ 4,
          1 ] },
      { name:"Día del Veterano y de los Caídos en la Guerra de Malvinas",
        fixed_date:[ 4,
          2 ] },
      { name:"Día del Trabajador",
        fixed_date:[ 5,
          1 ] },
      { name:"Día de la Revolución de Mayo",
        fixed_date:[ 5,
          25 ] },
      { name:"Paso a la Inmortalidad del Gral. Don Martín Miguel de Güemes",
        fixed_date:[ 6,
          17 ] },
      { name:"Paso a la Inmortalidad del General Manuel Belgrano",
        fixed_date:[ 6,
          20 ] },
      { name:"Feriado con fines turísticos",
        fixed_date:[ 6,
          21 ] },
      { name:"Día de la Independencia",
        fixed_date:[ 7,
          9 ] },
      { name:"Paso a la Inmortalidad del Gral. José de San Martín",
        fixed_date:[ 8,
          17 ] },
      { name:"Feriado con fines turísticos",
        fixed_date:[ 10,
          11 ] },
      { name:"Día del Respeto a la Diversidad Cultural",
        fixed_date:[ 10,
          12 ] },
      { name:"Día de la Soberanía Nacional",
        fixed_date:[ 11,
          18 ] },
      { name:"Inmaculada Concepción de María",
        fixed_date:[ 12,
          8 ] },
      { name:"Navidad",
        fixed_date:[ 12,
          25 ] } ] };
  data$D.PH;

  var data$C = { PH:[ { name:"Neujahrstag",
        fixed_date:[ 1,
          1 ] },
      { name:"Heilige Drei Könige",
        fixed_date:[ 1,
          6 ] },
      { name:"Ostermontag",
        variable_date:"easter",
        offset:1 },
      { name:"Staatsfeiertag",
        fixed_date:[ 5,
          1 ] },
      { name:"Christi Himmelfahrt",
        variable_date:"easter",
        offset:39 },
      { name:"Pfingstmontag",
        variable_date:"easter",
        offset:50 },
      { name:"Fronleichnam",
        variable_date:"easter",
        offset:60 },
      { name:"Mariä Himmelfahrt",
        fixed_date:[ 8,
          15 ] },
      { name:"Nationalfeiertag",
        fixed_date:[ 10,
          26 ] },
      { name:"Allerheiligen",
        fixed_date:[ 11,
          1 ] },
      { name:"Mariä Empfängnis",
        fixed_date:[ 12,
          8 ] },
      { name:"Christtag",
        fixed_date:[ 12,
          25 ] },
      { name:"Stefanitag",
        fixed_date:[ 12,
          26 ] } ],
    SH:[ { 2017:[ 4,
          8,
          4,
          18 ],
        2018:[ 3,
          24,
          4,
          3 ],
        2019:[ 4,
          13,
          4,
          23 ],
        2020:[ 4,
          4,
          4,
          14 ],
        2021:[ 3,
          27,
          4,
          6 ],
        2022:[ 4,
          9,
          4,
          19 ],
        2023:[ 4,
          1,
          4,
          11 ],
        2024:[ 3,
          23,
          4,
          2 ],
        name:"Osterferien" },
      { 2017:[ 6,
          3,
          6,
          6 ],
        2018:[ 5,
          19,
          5,
          22 ],
        2019:[ 6,
          8,
          6,
          11 ],
        2020:[ 5,
          30,
          6,
          2 ],
        2021:[ 5,
          22,
          5,
          25 ],
        2022:[ 6,
          4,
          6,
          7 ],
        2023:[ 5,
          57,
          5,
          30 ],
        2024:[ 5,
          18,
          5,
          21 ],
        name:"Pfingstferien" },
      { 2016:[ 11,
          2 ],
        2017:[ 11,
          2 ],
        2018:[ 11,
          2 ],
        2019:[ 11,
          2 ],
        2020:[ 11,
          2 ],
        2021:[ 11,
          2 ],
        2022:[ 11,
          2 ],
        2023:[ 11,
          2 ],
        name:"Allerseelen" },
      { 2016:[ 12,
          24,
          1,
          7 ],
        2017:[ 12,
          24,
          1,
          6 ],
        2018:[ 12,
          24,
          1,
          6 ],
        2019:[ 12,
          23,
          1,
          6 ],
        2020:[ 12,
          24,
          1,
          6 ],
        2021:[ 12,
          24,
          1,
          6 ],
        2022:[ 12,
          24,
          1,
          6 ],
        2023:[ 12,
          24,
          1,
          6 ],
        name:"Weihnachtsferien" } ],
    Burgenland:{ _state_code:1,
      SH:[ { 2016:[ 2,
            8,
            2,
            13 ],
          2017:[ 2,
            13,
            2,
            18 ],
          2018:[ 2,
            12,
            2,
            17 ],
          2019:[ 2,
            11,
            2,
            16 ],
          2020:[ 2,
            10,
            2,
            15 ],
          2021:[ 2,
            8,
            2,
            13 ],
          name:"Semesterferien" },
        { 2016:[ 7,
            2,
            9,
            3 ],
          2017:[ 7,
            1,
            9,
            3 ],
          2018:[ 6,
            30,
            9,
            2 ],
          2019:[ 6,
            29,
            9,
            1 ],
          2020:[ 7,
            4,
            9,
            6 ],
          2021:[ 7,
            3,
            9,
            4 ],
          name:"Sommerferien" } ] },
    "Kärnten":{ _state_code:2,
      SH:[ { 2016:[ 2,
            8,
            2,
            13 ],
          2017:[ 2,
            13,
            2,
            18 ],
          2018:[ 2,
            12,
            2,
            17 ],
          2019:[ 2,
            11,
            2,
            16 ],
          2020:[ 2,
            10,
            2,
            15 ],
          2021:[ 2,
            8,
            2,
            13 ],
          name:"Semesterferien" },
        { 2016:[ 7,
            9,
            9,
            10 ],
          2017:[ 7,
            8,
            9,
            10 ],
          2018:[ 7,
            7,
            9,
            9 ],
          2019:[ 7,
            6,
            9,
            8 ],
          2020:[ 7,
            11,
            9,
            13 ],
          2021:[ 7,
            10,
            9,
            11 ],
          name:"Sommerferien" } ] },
    "Niederösterreich":{ _state_code:3,
      SH:[ { 2016:[ 2,
            1,
            2,
            6 ],
          2017:[ 2,
            6,
            2,
            11 ],
          2018:[ 2,
            5,
            2,
            10 ],
          2019:[ 2,
            4,
            2,
            9 ],
          2020:[ 2,
            3,
            2,
            8 ],
          2021:[ 2,
            1,
            2,
            6 ],
          name:"Semesterferien" },
        { 2016:[ 7,
            2,
            9,
            3 ],
          2017:[ 7,
            1,
            9,
            3 ],
          2018:[ 6,
            30,
            9,
            2 ],
          2019:[ 6,
            29,
            9,
            1 ],
          2020:[ 7,
            4,
            9,
            6 ],
          2021:[ 7,
            3,
            9,
            4 ],
          name:"Sommerferien" } ] },
    "Oberösterreich":{ _state_code:4,
      SH:[ { 2016:[ 2,
            15,
            2,
            20 ],
          2017:[ 2,
            20,
            2,
            25 ],
          2018:[ 2,
            19,
            2,
            24 ],
          2019:[ 2,
            18,
            2,
            23 ],
          2020:[ 2,
            17,
            2,
            22 ],
          2021:[ 2,
            15,
            2,
            20 ],
          name:"Semesterferien" },
        { 2016:[ 7,
            9,
            9,
            10 ],
          2017:[ 7,
            8,
            9,
            10 ],
          2018:[ 7,
            7,
            9,
            9 ],
          2019:[ 7,
            6,
            9,
            8 ],
          2020:[ 7,
            11,
            9,
            13 ],
          2021:[ 7,
            10,
            9,
            11 ],
          name:"Sommerferien" } ] },
    Salzburg:{ _state_code:5,
      SH:[ { 2016:[ 2,
            8,
            2,
            13 ],
          2017:[ 2,
            13,
            2,
            18 ],
          2018:[ 2,
            12,
            2,
            17 ],
          2019:[ 2,
            11,
            2,
            16 ],
          2020:[ 2,
            10,
            2,
            15 ],
          2021:[ 2,
            8,
            2,
            13 ],
          name:"Semesterferien" },
        { 2016:[ 7,
            9,
            9,
            10 ],
          2017:[ 7,
            8,
            9,
            10 ],
          2018:[ 7,
            7,
            9,
            9 ],
          2019:[ 7,
            6,
            9,
            8 ],
          2020:[ 7,
            11,
            9,
            13 ],
          2021:[ 7,
            10,
            9,
            11 ],
          name:"Sommerferien" } ] },
    Steiermark:{ _state_code:6,
      SH:[ { 2016:[ 2,
            15,
            2,
            20 ],
          2017:[ 2,
            20,
            2,
            25 ],
          2018:[ 2,
            19,
            2,
            24 ],
          2019:[ 2,
            18,
            2,
            23 ],
          2020:[ 2,
            17,
            2,
            22 ],
          2021:[ 2,
            15,
            2,
            20 ],
          name:"Semesterferien" },
        { 2016:[ 7,
            9,
            9,
            10 ],
          2017:[ 7,
            8,
            9,
            10 ],
          2018:[ 7,
            7,
            9,
            9 ],
          2019:[ 7,
            6,
            9,
            8 ],
          2020:[ 7,
            11,
            9,
            13 ],
          2021:[ 7,
            10,
            9,
            12 ],
          name:"Sommerferien" } ] },
    Tirol:{ _state_code:7,
      SH:[ { 2016:[ 2,
            8,
            2,
            13 ],
          2017:[ 2,
            13,
            2,
            18 ],
          2018:[ 2,
            12,
            2,
            17 ],
          2019:[ 2,
            11,
            2,
            16 ],
          2020:[ 2,
            10,
            2,
            15 ],
          2021:[ 2,
            8,
            2,
            13 ],
          name:"Semesterferien" },
        { 2016:[ 7,
            9,
            9,
            10 ],
          2017:[ 7,
            8,
            9,
            10 ],
          2018:[ 7,
            7,
            9,
            9 ],
          2019:[ 7,
            6,
            9,
            8 ],
          2020:[ 7,
            11,
            9,
            13 ],
          2021:[ 7,
            10,
            9,
            11 ],
          name:"Sommerferien" } ] },
    Vorarlberg:{ _state_code:8,
      SH:[ { 2016:[ 2,
            15,
            2,
            20 ],
          2017:[ 2,
            13,
            2,
            18 ],
          2018:[ 2,
            5,
            2,
            10 ],
          2019:[ 2,
            11,
            2,
            16 ],
          2020:[ 2,
            10,
            2,
            15 ],
          2021:[ 2,
            8,
            2,
            13 ],
          name:"Semesterferien" },
        { 2016:[ 7,
            9,
            9,
            10 ],
          2017:[ 7,
            8,
            9,
            10 ],
          2018:[ 7,
            7,
            9,
            9 ],
          2019:[ 7,
            6,
            9,
            8 ],
          2020:[ 7,
            11,
            9,
            13 ],
          2021:[ 7,
            10,
            9,
            11 ],
          name:"Sommerferien" } ] },
    Wien:{ _state_code:9,
      SH:[ { 2016:[ 2,
            1,
            2,
            6 ],
          2017:[ 2,
            6,
            2,
            11 ],
          2018:[ 2,
            5,
            2,
            10 ],
          2019:[ 2,
            4,
            2,
            9 ],
          2020:[ 2,
            3,
            2,
            8 ],
          2021:[ 2,
            1,
            2,
            6 ],
          name:"Semesterferien" },
        { 2016:[ 7,
            2,
            9,
            3 ],
          2017:[ 7,
            1,
            9,
            3 ],
          2018:[ 6,
            30,
            9,
            2 ],
          2019:[ 6,
            29,
            9,
            1 ],
          2020:[ 7,
            4,
            9,
            6 ],
          2021:[ 7,
            3,
            9,
            4 ],
          name:"Sommerferien" } ] } };
  data$C.PH;
  data$C.SH;
  data$C.Burgenland;
  data$C.Salzburg;
  data$C.Steiermark;
  data$C.Tirol;
  data$C.Vorarlberg;
  data$C.Wien;

  var data$B = { PH:[ { name:"New Years Day",
        fixed_date:[ 1,
          1 ] },
      { name:"Australia Day",
        fixed_date:[ 1,
          26 ] },
      { name:"Good Friday",
        variable_date:"easter",
        offset:-2 },
      { name:"Easter Monday",
        variable_date:"easter",
        offset:1 },
      { name:"ANZAC Day",
        fixed_date:[ 4,
          25 ] },
      { name:"Christmas Day",
        fixed_date:[ 12,
          25 ] },
      { name:"Boxing Day",
        fixed_date:[ 12,
          26 ] } ],
    "Australian Capital Territory":{ _state_code:"act",
      PH:[ { name:"New Years Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Australia Day",
          fixed_date:[ 1,
            26 ] },
        { name:"Canberra Day",
          variable_date:"firstMarchMonday",
          offset:7 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Saturday",
          variable_date:"easter",
          offset:-1 },
        { name:"Easter Sunday",
          variable_date:"easter" },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"ANZAC Day",
          fixed_date:[ 4,
            25 ] },
        { name:"Reconciliation Day",
          variable_date:"lastMayMonday" },
        { name:"Queens Birthday",
          variable_date:"firstJuneMonday",
          offset:7 },
        { name:"Family and Community Day",
          variable_date:"lastSeptemberMonday" },
        { name:"Labour Day",
          variable_date:"firstOctoberMonday" },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    "New South Wales":{ _state_code:"nsw",
      PH:[ { name:"New Years Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Australia Day",
          fixed_date:[ 1,
            26 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Saturday",
          variable_date:"easter",
          offset:-1 },
        { name:"Easter Sunday",
          variable_date:"easter" },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"ANZAC Day",
          fixed_date:[ 4,
            25 ] },
        { name:"Queens Birthday",
          variable_date:"firstJuneMonday",
          offset:7 },
        { name:"Labour Day",
          variable_date:"firstOctoberMonday" },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    "Northern Territory":{ _state_code:"nt",
      PH:[ { name:"New Years Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Australia Day",
          fixed_date:[ 1,
            26 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Saturday",
          variable_date:"easter",
          offset:-1 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"ANZAC Day",
          fixed_date:[ 4,
            25 ] },
        { name:"May Day",
          variable_date:"firstMayMonday" },
        { name:"Queens Birthday",
          variable_date:"firstJuneMonday",
          offset:7 },
        { name:"Picnic Day",
          variable_date:"firstAugustMonday" },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    Queensland:{ _state_code:"qld",
      PH:[ { name:"New Years Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Australia Day",
          fixed_date:[ 1,
            26 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Saturday",
          variable_date:"easter",
          offset:-1 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"ANZAC Day",
          fixed_date:[ 4,
            25 ] },
        { name:"Labour Day",
          variable_date:"firstMayMonday" },
        { name:"Queens Birthday",
          variable_date:"firstOctoberMonday" },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    "South Australia":{ _state_code:"sa",
      PH:[ { name:"New Years Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Australia Day",
          fixed_date:[ 1,
            26 ] },
        { name:"Adelaide Cup",
          variable_date:"firstMarchMonday",
          offset:7 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Saturday",
          variable_date:"easter",
          offset:-1 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"ANZAC Day",
          fixed_date:[ 4,
            25 ] },
        { name:"Queens Birthday",
          variable_date:"firstJuneMonday",
          offset:7 },
        { name:"Labour Day",
          variable_date:"firstOctoberMonday" },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    Tasmania:{ _state_code:"tas",
      PH:[ { name:"New Years Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Australia Day",
          fixed_date:[ 1,
            26 ] },
        { name:"Eight Hours Day",
          variable_date:"firstMarchMonday",
          offset:7 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"ANZAC Day",
          fixed_date:[ 4,
            25 ] },
        { name:"Queens Birthday",
          variable_date:"firstJuneMonday",
          offset:7 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    Victoria:{ _state_code:"vic",
      PH:[ { name:"New Years Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Australia Day",
          fixed_date:[ 1,
            26 ] },
        { name:"Labour Day",
          variable_date:"firstMarchMonday",
          offset:7 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Saturday",
          variable_date:"easter",
          offset:-1 },
        { name:"Easter Sunday",
          variable_date:"easter" },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"ANZAC Day",
          fixed_date:[ 4,
            25 ] },
        { name:"Queens Birthday",
          variable_date:"firstJuneMonday",
          offset:7 },
        { name:"AFL Grand Final",
          variable_date:"lastSeptemberFriday" },
        { name:"Melbourne Cup",
          variable_date:"firstNovemberTuesday" },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    "Western Australia":{ _state_code:"wa",
      PH:[ { name:"New Years Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Australia Day",
          fixed_date:[ 1,
            26 ] },
        { name:"Labour Day",
          variable_date:"firstMarchMonday" },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"ANZAC Day",
          fixed_date:[ 4,
            25 ] },
        { name:"Western Australia Day",
          variable_date:"firstJuneMonday" },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] } };
  data$B.PH;
  data$B.Queensland;
  data$B.Tasmania;
  data$B.Victoria;

  var data$A = { PH:[ { name:"Nieuwjaar - Jour de l'an",
        fixed_date:[ 1,
          1 ] },
      { name:"Paasmaandag - Lundi de Pâques",
        variable_date:"easter",
        offset:1 },
      { name:"Dag van de Arbeid - Fête du Travail",
        fixed_date:[ 5,
          1 ] },
      { name:"Onze-Lieve-Heer-Hemelvaart - Jeudi de l'Ascensionn",
        variable_date:"easter",
        offset:39 },
      { name:"Pinkstermaandag - Lundi de Pentecôte",
        variable_date:"easter",
        offset:50 },
      { name:"Nationale feestdag van België - Fête nationale",
        fixed_date:[ 7,
          21 ] },
      { name:"Onze-Lieve-Vrouw-Hemelvaart - Assomption",
        fixed_date:[ 8,
          15 ] },
      { name:"Allerheiligen - Toussaint",
        fixed_date:[ 11,
          1 ] },
      { name:"Wapenstilstand - Armistice",
        fixed_date:[ 11,
          11 ] },
      { name:"Kerstmis - Noël",
        fixed_date:[ 12,
          25 ] } ],
    SH:[ { 2020:[ 2,
          24,
          3,
          1 ],
        2021:[ 2,
          15,
          2,
          21 ],
        2022:[ 2,
          28,
          3,
          6 ],
        2023:[ 2,
          20,
          2,
          26 ],
        2024:[ 2,
          12,
          2,
          18 ],
        2025:[ 3,
          3,
          3,
          9 ],
        2026:[ 2,
          16,
          2,
          22 ],
        name:"Krokusvakantie - Vacances de carnaval" },
      { 2020:[ 4,
          6,
          4,
          19 ],
        2021:[ 4,
          5,
          4,
          18 ],
        2022:[ 4,
          4,
          4,
          18 ],
        2023:[ 4,
          3,
          4,
          16 ],
        2024:[ 4,
          1,
          4,
          14 ],
        2025:[ 4,
          7,
          4,
          21 ],
        2026:[ 4,
          6,
          4,
          19 ],
        name:"Paasvakantie - Vacances de pâques" },
      { 2020:[ 7,
          1,
          8,
          31 ],
        2021:[ 7,
          1,
          8,
          31 ],
        2022:[ 7,
          1,
          8,
          31 ],
        2023:[ 7,
          1,
          8,
          31 ],
        2024:[ 7,
          1,
          8,
          31 ],
        2025:[ 7,
          1,
          8,
          31 ],
        2026:[ 7,
          1,
          8,
          31 ],
        name:"Zomervakantie - Vacances d'été" },
      { 2019:[ 10,
          28,
          11,
          3 ],
        2020:[ 11,
          2,
          11,
          15 ],
        2021:[ 11,
          1,
          11,
          7 ],
        2022:[ 10,
          31,
          11,
          6 ],
        2023:[ 10,
          30,
          11,
          5 ],
        2024:[ 10,
          28,
          11,
          3 ],
        2025:[ 10,
          27,
          11,
          2 ],
        name:"Herfstvakantie - Vacances automne" },
      { 2019:[ 12,
          23,
          1,
          5 ],
        2020:[ 12,
          21,
          1,
          3 ],
        2021:[ 12,
          27,
          1,
          9 ],
        2022:[ 12,
          26,
          1,
          8 ],
        2023:[ 12,
          25,
          1,
          7 ],
        2024:[ 12,
          23,
          1,
          5 ],
        2025:[ 12,
          22,
          1,
          4 ],
        name:"Kerstvakantie - Vacances de Noël" } ] };
  data$A.PH;
  data$A.SH;

  var data$z = { PH:[ { name:"Ano Novo",
        fixed_date:[ 1,
          1 ] },
      { name:"Carnaval",
        variable_date:"easter",
        offset:-47 },
      { name:"Sexta-feira santa",
        variable_date:"easter",
        offset:-2 },
      { name:"Tiradentes",
        fixed_date:[ 4,
          21 ] },
      { name:"Dia do Trabalhador",
        fixed_date:[ 5,
          1 ] },
      { name:"Corpus Christi",
        variable_date:"easter",
        offset:60 },
      { name:"Independência",
        fixed_date:[ 9,
          7 ] },
      { name:"Nossa Senhora Aparecida",
        fixed_date:[ 10,
          12 ] },
      { name:"Finados",
        fixed_date:[ 11,
          2 ] },
      { name:"Proclamação da República",
        fixed_date:[ 11,
          15 ] },
      { name:"Natal",
        fixed_date:[ 12,
          25 ] } ],
    Acre:{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Dia do evangélico",
          fixed_date:[ 1,
            23 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Alusivo ao Dia Internacional da Mulher",
          fixed_date:[ 3,
            8 ] },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Aniversário do estado",
          fixed_date:[ 6,
            15 ] },
        { name:"Dia da Amazônia",
          fixed_date:[ 9,
            5 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Assinatura do Tratado de Petrópolis",
          fixed_date:[ 11,
            17 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    Alagoas:{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"São João",
          fixed_date:[ 6,
            24 ] },
        { name:"São Pedro",
          fixed_date:[ 6,
            29 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Emancipação política",
          fixed_date:[ 9,
            16 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Morte de Zumbi dos Palmares",
          fixed_date:[ 11,
            20 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Amapá":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Dia de São José",
          fixed_date:[ 3,
            19 ] },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Data Magna do estado",
          fixed_date:[ 9,
            13 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    Amazonas:{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Data Magna do estado",
          fixed_date:[ 9,
            5 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Dia da Consciência Negra",
          fixed_date:[ 11,
            20 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    Bahia:{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Data magna do estado",
          fixed_date:[ 2,
            7 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Ceará":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Data magna do estado",
          fixed_date:[ 3,
            25 ] },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Distrito Federal":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Dia do evangélico",
          fixed_date:[ 11,
            30 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Espírito Santo":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Data magna do estado",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Goiás":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Maranhão":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Data magna do estado",
          fixed_date:[ 7,
            28 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Mato Grosso":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Dia da Consciência Negra",
          fixed_date:[ 11,
            20 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Mato Grosso do Sul":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Criação do estado",
          fixed_date:[ 10,
            11 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Minas Gerais":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Data magna do estado",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Pará":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Data magna do estado",
          fixed_date:[ 8,
            15 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Paraíba":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Homenagem a João Pessoa",
          fixed_date:[ 7,
            26 ] },
        { name:"Data magna do estado",
          fixed_date:[ 8,
            5 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Paraná":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Data magna do estado",
          fixed_date:[ 12,
            19 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    Pernambuco:{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Data magna do estado",
          variable_date:"firstMarchSunday" },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Piauí":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Data magna do estado",
          fixed_date:[ 10,
            19 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Rio de Janeiro":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Dia da Consciência Negra",
          fixed_date:[ 11,
            20 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Rio Grande do Norte":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"São Jorge",
          fixed_date:[ 4,
            23 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Mártires de Cunhaú e Uruaçu",
          fixed_date:[ 10,
            3 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Rio Grande do Sul":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Proclamação da República Rio-Grandense",
          fixed_date:[ 9,
            20 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Rondônia":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Data magna do estado",
          fixed_date:[ 1,
            4 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Dia do evangélico",
          fixed_date:[ 6,
            18 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    Roraima:{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Data magna do estado",
          fixed_date:[ 10,
            5 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "Santa Catarina":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Data magna do estado",
          fixed_date:[ 8,
            11 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Santa Catarina de Alexandria",
          fixed_date:[ 11,
            25 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    "São Paulo":{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Data magna do estado",
          fixed_date:[ 7,
            9 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    Sergipe:{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Aniversário de Aracaju",
          fixed_date:[ 3,
            17 ] },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"São João",
          fixed_date:[ 6,
            24 ] },
        { name:"Data magna do estado",
          fixed_date:[ 7,
            8 ] },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Nossa Senhora da Conceição",
          fixed_date:[ 12,
            8 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] },
    Tocantins:{ PH:[ { name:"Ano Novo",
          fixed_date:[ 1,
            1 ] },
        { name:"Carnaval",
          variable_date:"easter",
          offset:-47 },
        { name:"Autonomia do estado",
          fixed_date:[ 3,
            18 ] },
        { name:"Sexta-feira santa",
          variable_date:"easter",
          offset:-2 },
        { name:"Tiradentes",
          fixed_date:[ 4,
            21 ] },
        { name:"Dia do Trabalhador",
          fixed_date:[ 5,
            1 ] },
        { name:"Corpus Christi",
          variable_date:"easter",
          offset:60 },
        { name:"Independência",
          fixed_date:[ 9,
            7 ] },
        { name:"Nossa Senhora da Natividade",
          fixed_date:[ 9,
            8 ] },
        { name:"Criação do estado",
          fixed_date:[ 10,
            5 ] },
        { name:"Nossa Senhora Aparecida",
          fixed_date:[ 10,
            12 ] },
        { name:"Finados",
          fixed_date:[ 11,
            2 ] },
        { name:"Proclamação da República",
          fixed_date:[ 11,
            15 ] },
        { name:"Natal",
          fixed_date:[ 12,
            25 ] } ] } };
  data$z.PH;
  data$z.Acre;
  data$z.Alagoas;
  data$z.Amazonas;
  data$z.Bahia;
  data$z.Pernambuco;
  data$z.Roraima;
  data$z.Sergipe;
  data$z.Tocantins;

  var data$y = { PH:[ { name:"New Year's Day",
        fixed_date:[ 1,
          1 ] },
      { name:"Good Friday",
        variable_date:"easter",
        offset:-2 },
      { name:"Canada Day",
        variable_date:"canadaDay" },
      { name:"Labour Day",
        variable_date:"firstSeptemberMonday" },
      { name:"Christmas Day",
        fixed_date:[ 12,
          25 ] } ],
    Alberta:{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Alberta Family Day",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"Heritage Day",
          variable_date:"firstAugustMonday" },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    "British Columbia":{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Family Day",
          variable_date:"firstFebruaryMonday",
          offset:7 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"British Columbia Day",
          variable_date:"firstAugustMonday" },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Manitoba:{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Louis Riel Day",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"Civic Holiday",
          variable_date:"firstAugustMonday" },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    "New Brunswick":{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"New Brunswick Day",
          variable_date:"firstAugustMonday" },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    "Newfoundland and Labrador":{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Saint Patrick's Day",
          fixed_date:[ 3,
            17 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Saint George's Day",
          fixed_date:[ 4,
            23 ] },
        { name:"Discovery Day",
          fixed_date:[ 6,
            24 ] },
        { name:"Memorial Day",
          fixed_date:[ 7,
            1 ] },
        { name:"Orangemen's Day",
          fixed_date:[ 7,
            12 ] },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Armistice Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    "Northwest Territories":{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"National Aboriginal Day",
          fixed_date:[ 6,
            21 ] },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"Civic Holiday",
          variable_date:"firstAugustMonday" },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    "Nova Scotia":{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"Natal Day",
          variable_date:"firstAugustMonday" },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    Nunavut:{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"Nunavut Day",
          fixed_date:[ 7,
            9 ] },
        { name:"Civic Holiday",
          variable_date:"firstAugustMonday" },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Ontario:{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Family Day",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"August Civic Public Holiday",
          variable_date:"firstAugustMonday" },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    "Prince Edward Island":{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Islander Day",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"Civic Holiday",
          variable_date:"firstAugustMonday" },
        { name:"Gold Cup Parade Day",
          variable_date:"firstAugustMonday",
          offset:18 },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    Quebec:{ PH:[ { name:"Jour de l'an",
          fixed_date:[ 1,
            1 ] },
        { name:"Vendredi saint",
          variable_date:"easter",
          offset:-2 },
        { name:"Lundi de Pâques",
          variable_date:"easter",
          offset:1 },
        { name:"Journée nationale des patriotes",
          variable_date:"victoriaDay" },
        { name:"Fête nationale du Québec",
          fixed_date:[ 6,
            24 ] },
        { name:"Fête du Canada",
          variable_date:"canadaDay" },
        { name:"Fête du Travail",
          variable_date:"firstSeptemberMonday" },
        { name:"Jour de l'Action de grâce",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Noël",
          fixed_date:[ 12,
            25 ] } ] },
    Saskatchewan:{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Family Day",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"Saskatchewan Day",
          variable_date:"firstAugustMonday" },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Yukon:{ PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Heritage Day",
          variable_date:"lastFebruarySunday",
          offset:-2 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"Victoria Day",
          variable_date:"victoriaDay" },
        { name:"Canada Day",
          variable_date:"canadaDay" },
        { name:"Discovery Day",
          variable_date:"firstAugustMonday",
          offset:14 },
        { name:"Labour Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Thanksgiving",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Remembrance Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] } };
  data$y.PH;
  data$y.Alberta;
  data$y.Manitoba;
  data$y.Nunavut;
  data$y.Ontario;
  data$y.Quebec;
  data$y.Saskatchewan;
  data$y.Yukon;

  var data$x = { PH:[ { name:"Neujahrstag/Nouvel an/Capo d'anno",
        fixed_date:[ 1,
          1 ] },
      { name:"Berchtoldstag/2 janvier",
        fixed_date:[ 1,
          2 ],
        only_states:[ "Zürich",
          "Bern",
          "Luzern",
          "Obwalden",
          "Nidwalden",
          "Glarus",
          "Zug",
          "Freiburg",
          "Solothurn",
          "Schaffhausen",
          "Graubünden",
          "Aargau",
          "Thurgau",
          "Waadt",
          "Neuenburg",
          "Genf",
          "Jura",
          "Sankt Gallen",
          "Wallis" ] },
      { name:"Heilige Drei Könige/Epifania",
        fixed_date:[ 1,
          6 ],
        only_states:[ "Uri",
          "Schwyz",
          "Graubünden",
          "Tessin" ] },
      { name:"Instauration de la République",
        fixed_date:[ 3,
          1 ],
        only_states:[ "Neuenburg" ] },
      { name:"Josefstag/Saint-Joseph/San Giuseppe",
        fixed_date:[ 3,
          19 ],
        only_states:[ "Luzern",
          "Uri",
          "Schwyz",
          "Nidwalden",
          "Zug",
          "Graubünden",
          "Tessin",
          "Wallis" ] },
      { name:"Karfreitag/Vendredi saint",
        variable_date:"easter",
        offset:-2,
        only_states:[ "Zürich",
          "Bern",
          "Luzern",
          "Uri",
          "Schwyz",
          "Obwalden",
          "Nidwalden",
          "Glarus",
          "Zug",
          "Freiburg",
          "Solothurn",
          "Basel-Stadt",
          "Basel-Landschaft",
          "Schaffhausen",
          "Appenzell Ausserrhoden",
          "Appenzell Innerrhoden",
          "Sankt Gallen",
          "Graubünden",
          "Aargau",
          "Thurgau",
          "Waadt",
          "Neuenburg",
          "Genf",
          "Jura" ] },
      { name:"Ostermontag/Lundi de Pâques/Lunedi di Pasqua",
        variable_date:"easter",
        offset:1,
        only_states:[ "Zürich",
          "Bern",
          "Luzern",
          "Uri",
          "Schwyz",
          "Obwalden",
          "Nidwalden",
          "Glarus",
          "Zug",
          "Freiburg",
          "Solothurn",
          "Basel-Stadt",
          "Basel-Landschaft",
          "Schaffhausen",
          "Appenzell Ausserrhoden",
          "Appenzell Innerrhoden",
          "Sankt Gallen",
          "Graubünden",
          "Aargau",
          "Thurgau",
          "Tessin",
          "Waadt",
          "Neuenburg",
          "Genf",
          "Jura",
          "Wallis" ] },
      { name:"Tag der Arbeit/Festa dei lavoratori",
        fixed_date:[ 5,
          1 ],
        only_states:[ "Zürich",
          "Freiburg",
          "Solothurn",
          "Basel-Stadt",
          "Basel-Landschaft",
          "Schaffhausen",
          "Aargau",
          "Thurgau",
          "Tessin",
          "Neuenburg",
          "Jura" ] },
      { name:"Auffahrt/Ascension/Ascensione",
        variable_date:"easter",
        offset:39 },
      { name:"Pfingstmontag/Lundi de Pentecôte/Lunedi di Pentecoste",
        variable_date:"easter",
        offset:50,
        only_states:[ "Zürich",
          "Bern",
          "Luzern",
          "Uri",
          "Schwyz",
          "Obwalden",
          "Nidwalden",
          "Glarus",
          "Zug",
          "Freiburg",
          "Solothurn",
          "Basel-Stadt",
          "Basel-Landschaft",
          "Schaffhausen",
          "Appenzell Ausserrhoden",
          "Appenzell Innerrhoden",
          "Sankt Gallen",
          "Graubünden",
          "Aargau",
          "Thurgau",
          "Tessin",
          "Waadt",
          "Neuenburg",
          "Genf",
          "Jura",
          "Wallis" ] },
      { name:"Fronleichnam/Fête-Dieu/Corpus domini",
        variable_date:"easter",
        offset:60,
        only_states:[ "Luzern",
          "Uri",
          "Schwyz",
          "Obwalden",
          "Nidwalden",
          "Zug",
          "Freiburg",
          "Solothurn",
          "Basel-Landschaft",
          "Appenzell Innerrhoden",
          "Graubünden",
          "Aargau",
          "Tessin",
          "Wallis",
          "Neuenburg",
          "Jura" ] },
      { name:"Commémoration du plébiscite jurassien",
        fixed_date:[ 6,
          23 ],
        only_states:[ "Jura" ] },
      { name:"San Pietro e Paolo",
        fixed_date:[ 6,
          29 ],
        only_states:[ "Tessin" ] },
      { name:"Bundesfeiertag/Jour de la fête nationale/Giorno festivo federale",
        fixed_date:[ 8,
          1 ] },
      { name:"Mariä Himmelfahrt/Assomption/Assunzione",
        fixed_date:[ 8,
          15 ],
        only_states:[ "Luzern",
          "Uri",
          "Schwyz",
          "Obwalden",
          "Nidwalden",
          "Zug",
          "Freiburg",
          "Solothurn",
          "Basel-Landschaft",
          "Appenzell Innerrhoden",
          "Graubünden",
          "Aargau",
          "Tessin",
          "Wallis",
          "Jura" ] },
      { name:"Mauritiustag",
        fixed_date:[ 9,
          22 ],
        only_states:[ "Appenzell Innerrhoden" ] },
      { name:"Bruderklausenfest",
        fixed_date:[ 9,
          25 ],
        only_states:[ "Obwalden" ] },
      { name:"Allerheiligen/Toussaint/Ognissanti",
        fixed_date:[ 11,
          1 ],
        only_states:[ "Luzern",
          "Uri",
          "Schwyz",
          "Obwalden",
          "Nidwalden",
          "Glarus",
          "Zug",
          "Freiburg",
          "Solothurn",
          "Appenzell Innerrhoden",
          "Sankt Gallen",
          "Graubünden",
          "Aargau",
          "Tessin",
          "Wallis",
          "Jura" ] },
      { name:"Mariä Empfängnis/Immaculée Conception/Ognissanti",
        fixed_date:[ 12,
          8 ],
        only_states:[ "Luzern",
          "Uri",
          "Schwyz",
          "Obwalden",
          "Nidwalden",
          "Zug",
          "Freiburg",
          "Solothurn",
          "Appenzell Innerrhoden",
          "Graubünden",
          "Aargau",
          "Tessin",
          "Wallis" ] },
      { name:"Weihnachtstag/Noël/Natale",
        fixed_date:[ 12,
          25 ] },
      { name:"Stephanstag/Saint-Etienne/Santo Stefano",
        fixed_date:[ 12,
          26 ],
        only_states:[ "Zürich",
          "Bern",
          "Luzern",
          "Uri",
          "Schwyz",
          "Obwalden",
          "Nidwalden",
          "Glarus",
          "Zug",
          "Freiburg",
          "Solothurn",
          "Basel-Stadt",
          "Basel-Landschaft",
          "Schaffhausen",
          "Appenzell Ausserrhoden",
          "Appenzell Innerrhoden",
          "Sankt Gallen",
          "Graubünden",
          "Aargau",
          "Thurgau",
          "Tessin",
          "Wallis" ] },
      { name:"Restauration de la République",
        fixed_date:[ 12,
          31 ],
        only_states:[ "Genf" ] } ],
    Aargau:{ _state_code:"ag" },
    "Appenzell Ausserrhoden":{ _state_code:"ar" },
    "Appenzell Innerrhoden":{ _state_code:"ai" },
    "Basel-Landschaft":{ _state_code:"bl" },
    "Basel-Stadt":{ _state_code:"bs" },
    Bern:{ _state_code:"be" },
    Freiburg:{ _state_code:"fr" },
    Genf:{ _state_code:"ge" },
    Glarus:{ _state_code:"gl" },
    "Graubünden":{ _state_code:"gr" },
    Jura:{ _state_code:"ju" },
    Luzern:{ _state_code:"lu" },
    Neuenburg:{ _state_code:"ne" },
    Nidwalden:{ _state_code:"nw" },
    Obwalden:{ _state_code:"ow" },
    Schaffhausen:{ _state_code:"sh" },
    Schwyz:{ _state_code:"sz" },
    Solothurn:{ _state_code:"so" },
    "Sankt Gallen":{ _state_code:"sg" },
    Tessin:{ _state_code:"ti" },
    Thurgau:{ _state_code:"tg" },
    Uri:{ _state_code:"ur" },
    Waadt:{ _state_code:"vd" },
    Wallis:{ _state_code:"vs" },
    Zug:{ _state_code:"zg" },
    "Zürich":{ _state_code:"zh" } };
  data$x.PH;
  data$x.Aargau;
  data$x.Bern;
  data$x.Freiburg;
  data$x.Genf;
  data$x.Glarus;
  data$x.Jura;
  data$x.Luzern;
  data$x.Neuenburg;
  data$x.Nidwalden;
  data$x.Obwalden;
  data$x.Schaffhausen;
  data$x.Schwyz;
  data$x.Solothurn;
  data$x.Tessin;
  data$x.Thurgau;
  data$x.Uri;
  data$x.Waadt;
  data$x.Wallis;
  data$x.Zug;

  var data$w = { PH:[ { name:"Fête du 1ᵉʳ janvier",
        fixed_date:[ 1,
          1 ] },
      { name:"Lundi de Pâques",
        variable_date:"easter",
        offset:1 },
      { name:"Fête du travail",
        fixed_date:[ 5,
          1 ] },
      { name:"Lendemain de la Fête du travail",
        variable_date:"nextMo-Sa01May" },
      { name:"Jour de l’Ascension",
        variable_date:"easter",
        offset:39 },
      { name:"Lundi de la Pentecôte",
        variable_date:"easter",
        offset:50 },
      { name:"Fête nationale",
        fixed_date:[ 8,
          7 ] },
      { name:"Lendemain de la Fête nationale",
        variable_date:"nextMo-Sa07August" },
      { name:"Fête de l’Assomption",
        fixed_date:[ 8,
          15 ] },
      { name:"Fête de la Toussaint",
        fixed_date:[ 11,
          1 ] },
      { name:"Journée Nationale de la Paix",
        fixed_date:[ 11,
          15 ] },
      { name:"Fête de Noël",
        fixed_date:[ 12,
          25 ] },
      { name:"Lendemain de la Fête de Noël",
        variable_date:"nextMo-Sa25December" } ] };
  data$w.PH;

  var data$v = { PH:[ { name:"元旦",
        fixed_date:[ 1,
          1 ] },
      { name:"妇女节",
        fixed_date:[ 3,
          8 ] },
      { name:"劳动节",
        fixed_date:[ 5,
          1 ] },
      { name:"青年节",
        fixed_date:[ 5,
          4 ] },
      { name:"儿童节",
        fixed_date:[ 6,
          1 ] },
      { name:"国庆节",
        fixed_date:[ 10,
          1 ] },
      { name:"国庆节休息日",
        fixed_date:[ 10,
          2 ] },
      { name:"国庆节休息日",
        fixed_date:[ 10,
          3 ] } ],
    "西藏自治区":{ PH:[ { name:"元旦",
          fixed_date:[ 1,
            1 ] },
        { name:"西藏百万农奴解放纪念日",
          fixed_date:[ 3,
            28 ] },
        { name:"妇女节",
          fixed_date:[ 3,
            8 ] },
        { name:"劳动节",
          fixed_date:[ 5,
            1 ] },
        { name:"青年节",
          fixed_date:[ 5,
            4 ] },
        { name:"儿童节",
          fixed_date:[ 6,
            1 ] },
        { name:"国庆节",
          fixed_date:[ 10,
            1 ] },
        { name:"国庆节休息日",
          fixed_date:[ 10,
            2 ] },
        { name:"国庆节休息日",
          fixed_date:[ 10,
            3 ] } ] } };
  data$v.PH;

  var data$u = { PH:[ { name:"Den obnovy samostatného českého státu",
        fixed_date:[ 1,
          1 ] },
      { name:"Velký pátek",
        variable_date:"easter",
        offset:-2 },
      { name:"Velikonoční pondělí",
        variable_date:"easter",
        offset:1 },
      { name:"Svátek práce",
        fixed_date:[ 5,
          1 ] },
      { name:"Den vítězství",
        fixed_date:[ 5,
          8 ] },
      { name:"Den slovanských věrozvěstů Cyrila a Metoděje",
        fixed_date:[ 7,
          5 ] },
      { name:"Den upálení mistra Jana Husa",
        fixed_date:[ 7,
          6 ] },
      { name:"Den české státnosti",
        fixed_date:[ 9,
          28 ] },
      { name:"Den vzniku samostatného československého státu",
        fixed_date:[ 10,
          28 ] },
      { name:"Den boje za svobodu a demokracii",
        fixed_date:[ 11,
          17 ] },
      { name:"Štědrý den",
        fixed_date:[ 12,
          24 ] },
      { name:"1. svátek vánoční",
        fixed_date:[ 12,
          25 ] },
      { name:"2. svátek vánoční",
        fixed_date:[ 12,
          26 ] } ] };
  data$u.PH;

  var data$t = { PH:[ { name:"Neujahrstag",
        fixed_date:[ 1,
          1 ] },
      { name:"Heilige Drei Könige",
        fixed_date:[ 1,
          6 ],
        only_states:[ "Baden-Württemberg",
          "Bayern",
          "Sachsen-Anhalt" ] },
      { name:"Frauentag",
        fixed_date:[ 3,
          8 ],
        only_states:[ "Berlin" ] },
      { name:"Tag der Arbeit",
        fixed_date:[ 5,
          1 ] },
      { name:"Karfreitag",
        variable_date:"easter",
        offset:-2 },
      { name:"Ostersonntag",
        variable_date:"easter",
        only_states:[ "Brandenburg" ] },
      { name:"Ostermontag",
        variable_date:"easter",
        offset:1 },
      { name:"Christi Himmelfahrt",
        variable_date:"easter",
        offset:39 },
      { name:"Pfingstsonntag",
        variable_date:"easter",
        offset:49,
        only_states:[ "Brandenburg" ] },
      { name:"Pfingstmontag",
        variable_date:"easter",
        offset:50 },
      { name:"Fronleichnam",
        variable_date:"easter",
        offset:60,
        only_states:[ "Baden-Württemberg",
          "Bayern",
          "Hessen",
          "Nordrhein-Westfalen",
          "Rheinland-Pfalz",
          "Saarland" ] },
      { name:"Mariä Himmelfahrt",
        fixed_date:[ 8,
          15 ],
        only_states:[ "Saarland" ] },
      { name:"Weltkindertag",
        fixed_date:[ 9,
          20 ],
        only_states:[ "Thüringen" ] },
      { name:"Tag der Deutschen Einheit",
        fixed_date:[ 10,
          3 ] },
      { name:"Reformationstag",
        fixed_date:[ 10,
          31 ],
        only_states:[ "Brandenburg",
          "Bremen",
          "Hamburg",
          "Mecklenburg-Vorpommern",
          "Niedersachsen",
          "Sachsen",
          "Sachsen-Anhalt",
          "Schleswig-Holstein",
          "Thüringen" ] },
      { name:"Allerheiligen",
        fixed_date:[ 11,
          1 ],
        only_states:[ "Baden-Württemberg",
          "Bayern",
          "Nordrhein-Westfalen",
          "Rheinland-Pfalz",
          "Saarland" ] },
      { name:"Buß- und Bettag",
        variable_date:"nextWednesday16Nov",
        only_states:[ "Sachsen" ] },
      { name:"1. Weihnachtstag",
        fixed_date:[ 12,
          25 ] },
      { name:"2. Weihnachtstag",
        fixed_date:[ 12,
          26 ] } ],
    "Baden-Württemberg":{ _state_code:"bw",
      SH:[ { 2012:[ 4,
            2,
            4,
            13 ],
          2013:[ 3,
            25,
            4,
            5 ],
          2014:[ 4,
            14,
            4,
            25 ],
          2015:[ 3,
            30,
            4,
            10 ],
          2016:[ 3,
            24,
            3,
            24,
            3,
            29,
            4,
            2 ],
          2017:[ 4,
            10,
            4,
            21 ],
          2018:[ 3,
            26,
            4,
            6 ],
          2019:[ 4,
            15,
            4,
            27 ],
          2020:[ 4,
            6,
            4,
            18 ],
          2024:[ 3,
            23,
            4,
            5 ],
          2025:[ 4,
            14,
            4,
            26 ],
          name:"Osterferien" },
        { 2012:[ 5,
            29,
            6,
            9 ],
          2013:[ 5,
            21,
            6,
            1 ],
          2014:[ 6,
            10,
            6,
            21 ],
          2015:[ 5,
            26,
            6,
            6 ],
          2016:[ 5,
            17,
            5,
            28 ],
          2017:[ 6,
            6,
            6,
            16 ],
          2018:[ 5,
            22,
            6,
            2 ],
          2019:[ 6,
            11,
            6,
            21 ],
          2020:[ 6,
            2,
            6,
            13 ],
          2024:[ 5,
            21,
            5,
            31 ],
          2025:[ 6,
            10,
            6,
            20 ],
          name:"Pfingstferien" },
        { 2012:[ 7,
            26,
            9,
            8 ],
          2013:[ 7,
            25,
            9,
            7 ],
          2014:[ 7,
            31,
            9,
            13 ],
          2015:[ 7,
            30,
            9,
            12 ],
          2016:[ 7,
            28,
            9,
            10 ],
          2017:[ 7,
            27,
            9,
            9 ],
          2018:[ 7,
            26,
            9,
            8 ],
          2019:[ 7,
            29,
            9,
            10 ],
          2020:[ 7,
            30,
            9,
            12 ],
          2021:[ 7,
            29,
            9,
            11 ],
          2022:[ 7,
            28,
            9,
            10 ],
          2023:[ 7,
            27,
            9,
            9 ],
          2024:[ 7,
            25,
            9,
            7 ],
          2025:[ 7,
            31,
            9,
            13 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            29,
            11,
            2 ],
          2013:[ 10,
            28,
            10,
            30 ],
          2014:[ 10,
            27,
            10,
            30 ],
          2015:[ 10,
            31,
            10,
            31,
            11,
            2,
            11,
            6 ],
          2016:[ 10,
            31,
            10,
            31,
            11,
            2,
            11,
            4 ],
          2017:[ 10,
            30,
            11,
            3 ],
          2018:[ 10,
            29,
            11,
            2 ],
          2019:[ 10,
            28,
            10,
            30 ],
          2024:[ 10,
            28,
            10,
            30,
            10,
            31,
            10,
            31 ],
          2025:[ 10,
            27,
            10,
            30,
            10,
            31,
            10,
            31 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            5 ],
          2012:[ 12,
            24,
            1,
            5 ],
          2013:[ 12,
            23,
            1,
            4 ],
          2014:[ 12,
            22,
            1,
            5 ],
          2015:[ 12,
            23,
            1,
            9 ],
          2016:[ 12,
            23,
            1,
            7 ],
          2017:[ 12,
            22,
            1,
            5 ],
          2018:[ 12,
            24,
            1,
            5 ],
          2019:[ 12,
            23,
            1,
            4 ],
          2024:[ 12,
            23,
            1,
            4 ],
          2025:[ 12,
            22,
            1,
            5 ],
          name:"Weihnachtsferien" } ] },
    Bayern:{ _state_code:"by",
      SH:[ { 2012:[ 2,
            20,
            2,
            24 ],
          2013:[ 2,
            11,
            2,
            15 ],
          2014:[ 3,
            3,
            3,
            7 ],
          2015:[ 2,
            16,
            2,
            20 ],
          2016:[ 2,
            8,
            2,
            12 ],
          2017:[ 2,
            27,
            3,
            3 ],
          2018:[ 2,
            12,
            2,
            16 ],
          2019:[ 3,
            4,
            3,
            8 ],
          2020:[ 2,
            24,
            2,
            28 ],
          2021:[ 2,
            15,
            2,
            19 ],
          2022:[ 2,
            28,
            3,
            4 ],
          2023:[ 2,
            20,
            2,
            24 ],
          2024:[ 2,
            12,
            2,
            16 ],
          2025:[ 3,
            3,
            3,
            7 ],
          name:"Winterferien" },
        { 2012:[ 4,
            2,
            4,
            14 ],
          2013:[ 3,
            25,
            4,
            6 ],
          2014:[ 4,
            14,
            4,
            26 ],
          2015:[ 3,
            30,
            4,
            11 ],
          2016:[ 3,
            21,
            4,
            1 ],
          2017:[ 4,
            10,
            4,
            22 ],
          2018:[ 3,
            26,
            4,
            7 ],
          2019:[ 4,
            15,
            4,
            27 ],
          2020:[ 4,
            6,
            4,
            18 ],
          2021:[ 3,
            29,
            4,
            10 ],
          2022:[ 4,
            11,
            4,
            23 ],
          2023:[ 4,
            3,
            4,
            15 ],
          2024:[ 3,
            25,
            4,
            6 ],
          2025:[ 4,
            14,
            4,
            25 ],
          name:"Osterferien" },
        { 2012:[ 5,
            29,
            6,
            9 ],
          2013:[ 5,
            21,
            5,
            31 ],
          2014:[ 6,
            10,
            6,
            21 ],
          2015:[ 5,
            26,
            6,
            5 ],
          2016:[ 5,
            17,
            5,
            28 ],
          2017:[ 6,
            6,
            6,
            16 ],
          2018:[ 5,
            22,
            6,
            2 ],
          2019:[ 6,
            11,
            6,
            21 ],
          2020:[ 6,
            2,
            6,
            13 ],
          2021:[ 5,
            25,
            6,
            4 ],
          2022:[ 6,
            7,
            6,
            18 ],
          2023:[ 5,
            30,
            6,
            9 ],
          2024:[ 5,
            21,
            6,
            1 ],
          2025:[ 6,
            10,
            6,
            20 ],
          name:"Pfingstferien" },
        { 2012:[ 8,
            1,
            9,
            12 ],
          2013:[ 7,
            31,
            9,
            11 ],
          2014:[ 7,
            30,
            9,
            15 ],
          2015:[ 8,
            1,
            9,
            14 ],
          2016:[ 7,
            30,
            9,
            12 ],
          2017:[ 7,
            29,
            9,
            11 ],
          2018:[ 7,
            30,
            9,
            10 ],
          2019:[ 7,
            29,
            9,
            9 ],
          2020:[ 7,
            27,
            9,
            7 ],
          2021:[ 7,
            30,
            9,
            13 ],
          2022:[ 8,
            1,
            9,
            12 ],
          2023:[ 7,
            31,
            9,
            11 ],
          2024:[ 7,
            29,
            9,
            9 ],
          2025:[ 8,
            1,
            9,
            15 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            29,
            11,
            3 ],
          2013:[ 10,
            28,
            10,
            31 ],
          2014:[ 10,
            27,
            10,
            31,
            11,
            19,
            11,
            19 ],
          2015:[ 11,
            2,
            11,
            7,
            11,
            18,
            11,
            18 ],
          2016:[ 10,
            31,
            11,
            4,
            11,
            16,
            11,
            16 ],
          2017:[ 10,
            30,
            11,
            3,
            11,
            22,
            11,
            22 ],
          2018:[ 10,
            29,
            11,
            2,
            11,
            21,
            11,
            21 ],
          2019:[ 10,
            28,
            10,
            31,
            11,
            20,
            11,
            20 ],
          2020:[ 10,
            31,
            11,
            6,
            11,
            18,
            11,
            18 ],
          2021:[ 11,
            2,
            11,
            5,
            11,
            17,
            11,
            17 ],
          2022:[ 10,
            31,
            11,
            4,
            11,
            16,
            11,
            16 ],
          2023:[ 10,
            30,
            11,
            3,
            11,
            22,
            11,
            22 ],
          2024:[ 10,
            28,
            10,
            31,
            11,
            20,
            11,
            20 ],
          2025:[ 11,
            3,
            11,
            7,
            11,
            19,
            11,
            19 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            27,
            1,
            5 ],
          2012:[ 12,
            24,
            1,
            5 ],
          2013:[ 12,
            23,
            1,
            4 ],
          2014:[ 12,
            24,
            1,
            5 ],
          2015:[ 12,
            24,
            1,
            5 ],
          2016:[ 12,
            24,
            1,
            5 ],
          2017:[ 12,
            23,
            1,
            5 ],
          2018:[ 12,
            22,
            1,
            5 ],
          2019:[ 12,
            23,
            1,
            4 ],
          2020:[ 12,
            23,
            1,
            9 ],
          2021:[ 12,
            24,
            1,
            8 ],
          2022:[ 12,
            24,
            1,
            7 ],
          2023:[ 12,
            23,
            1,
            5 ],
          2024:[ 12,
            23,
            1,
            3 ],
          2025:[ 12,
            22,
            1,
            5 ],
          name:"Weihnachtsferien" } ] },
    Berlin:{ _state_code:"be",
      SH:[ { 2012:[ 1,
            30,
            2,
            4 ],
          2013:[ 2,
            4,
            2,
            9 ],
          2014:[ 2,
            3,
            2,
            8 ],
          2015:[ 2,
            2,
            2,
            7 ],
          2016:[ 2,
            1,
            2,
            6 ],
          2017:[ 1,
            30,
            2,
            3 ],
          2018:[ 2,
            5,
            2,
            10 ],
          2019:[ 2,
            4,
            2,
            9 ],
          2020:[ 2,
            3,
            2,
            8 ],
          2021:[ 2,
            1,
            2,
            6 ],
          2022:[ 1,
            29,
            2,
            5 ],
          2023:[ 1,
            30,
            2,
            4 ],
          2024:[ 2,
            5,
            2,
            10 ],
          2025:[ 2,
            3,
            2,
            8 ],
          name:"Winterferien" },
        { 2012:[ 4,
            2,
            4,
            14,
            4,
            30,
            4,
            30 ],
          2013:[ 3,
            25,
            4,
            6 ],
          2014:[ 4,
            14,
            4,
            26,
            5,
            2,
            5,
            2 ],
          2015:[ 3,
            30,
            4,
            11 ],
          2016:[ 3,
            21,
            4,
            2 ],
          2017:[ 4,
            10,
            4,
            18 ],
          2018:[ 3,
            26,
            4,
            6 ],
          2019:[ 4,
            15,
            4,
            26 ],
          2020:[ 4,
            6,
            4,
            17 ],
          2021:[ 3,
            29,
            4,
            10 ],
          2022:[ 4,
            11,
            4,
            23 ],
          2023:[ 4,
            3,
            4,
            14 ],
          2024:[ 3,
            25,
            4,
            5 ],
          2025:[ 4,
            14,
            4,
            25,
            5,
            2,
            5,
            2,
            5,
            30,
            5,
            30 ],
          name:"Osterferien" },
        { 2012:[ 5,
            18,
            5,
            18 ],
          2013:[ 5,
            10,
            5,
            10,
            5,
            21,
            5,
            21 ],
          2014:[ 5,
            30,
            5,
            30 ],
          2015:[ 5,
            15,
            5,
            15,
            5,
            26,
            5,
            26 ],
          2016:[ 5,
            6,
            5,
            6,
            5,
            17,
            5,
            18 ],
          2017:[ 5,
            24,
            5,
            24,
            5,
            26,
            5,
            26,
            6,
            6,
            6,
            9 ],
          2018:[ 4,
            30,
            4,
            30,
            5,
            11,
            5,
            11,
            5,
            22,
            5,
            22 ],
          2019:[ 5,
            31,
            5,
            31,
            6,
            11,
            6,
            11 ],
          2020:[ 5,
            22,
            5,
            22 ],
          2021:[ 5,
            14,
            5,
            14 ],
          2022:[ 5,
            27,
            5,
            27,
            6,
            7,
            6,
            7 ],
          2023:[ 5,
            19,
            5,
            19,
            5,
            30,
            5,
            30 ],
          2024:[ 5,
            10,
            5,
            10 ],
          2025:[ 6,
            10,
            6,
            10 ],
          name:"Pfingstferien" },
        { 2012:[ 6,
            20,
            8,
            3 ],
          2013:[ 6,
            19,
            8,
            2 ],
          2014:[ 7,
            9,
            8,
            22 ],
          2015:[ 7,
            16,
            8,
            28 ],
          2016:[ 7,
            21,
            9,
            2 ],
          2017:[ 7,
            20,
            9,
            1 ],
          2018:[ 7,
            5,
            8,
            17 ],
          2019:[ 6,
            20,
            8,
            2 ],
          2020:[ 6,
            25,
            8,
            7 ],
          2021:[ 6,
            24,
            8,
            6 ],
          2022:[ 7,
            7,
            8,
            19 ],
          2023:[ 7,
            13,
            8,
            25 ],
          2024:[ 7,
            18,
            8,
            30 ],
          2025:[ 7,
            24,
            9,
            6 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            1,
            10,
            13 ],
          2013:[ 9,
            30,
            10,
            12 ],
          2014:[ 10,
            20,
            11,
            1 ],
          2015:[ 10,
            19,
            10,
            31 ],
          2016:[ 10,
            17,
            10,
            28 ],
          2017:[ 10,
            2,
            10,
            2,
            10,
            23,
            11,
            4 ],
          2018:[ 10,
            22,
            11,
            2 ],
          2019:[ 10,
            4,
            10,
            4,
            10,
            7,
            10,
            19 ],
          2020:[ 10,
            12,
            10,
            24 ],
          2021:[ 10,
            11,
            10,
            23 ],
          2022:[ 10,
            24,
            11,
            5 ],
          2023:[ 10,
            2,
            10,
            2,
            10,
            23,
            11,
            4 ],
          2024:[ 10,
            4,
            10,
            4,
            10,
            21,
            11,
            2 ],
          2025:[ 10,
            20,
            11,
            1 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            3 ],
          2012:[ 12,
            24,
            1,
            4 ],
          2013:[ 12,
            23,
            1,
            3 ],
          2014:[ 12,
            22,
            1,
            2 ],
          2015:[ 12,
            23,
            1,
            2 ],
          2016:[ 12,
            23,
            1,
            3 ],
          2017:[ 12,
            21,
            1,
            2 ],
          2018:[ 12,
            22,
            1,
            5 ],
          2019:[ 12,
            23,
            1,
            4 ],
          2020:[ 12,
            21,
            1,
            2 ],
          2021:[ 12,
            23,
            12,
            31 ],
          2022:[ 12,
            22,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            5 ],
          2024:[ 12,
            23,
            12,
            31 ],
          2025:[ 12,
            22,
            1,
            2 ],
          name:"Weihnachtsferien" } ] },
    Brandenburg:{ _state_code:"bb",
      SH:[ { 2012:[ 1,
            30,
            2,
            4 ],
          2013:[ 2,
            4,
            2,
            9 ],
          2014:[ 2,
            3,
            2,
            8 ],
          2015:[ 2,
            2,
            2,
            7 ],
          2016:[ 2,
            1,
            2,
            6 ],
          2017:[ 1,
            30,
            2,
            4 ],
          2018:[ 2,
            5,
            2,
            10 ],
          2019:[ 2,
            4,
            2,
            9 ],
          2020:[ 2,
            3,
            2,
            8 ],
          2021:[ 2,
            1,
            2,
            6 ],
          2022:[ 1,
            31,
            2,
            5 ],
          2023:[ 1,
            30,
            2,
            3 ],
          2024:[ 2,
            5,
            2,
            9 ],
          2025:[ 2,
            3,
            2,
            8 ],
          name:"Winterferien" },
        { 2012:[ 4,
            4,
            4,
            14,
            4,
            30,
            4,
            30 ],
          2013:[ 3,
            27,
            4,
            6 ],
          2014:[ 4,
            16,
            4,
            26,
            5,
            2,
            5,
            2 ],
          2015:[ 4,
            1,
            4,
            11 ],
          2016:[ 3,
            23,
            4,
            2 ],
          2017:[ 4,
            10,
            4,
            22 ],
          2018:[ 3,
            26,
            4,
            6 ],
          2019:[ 4,
            15,
            4,
            26 ],
          2020:[ 4,
            6,
            4,
            17 ],
          2021:[ 3,
            29,
            4,
            9 ],
          2022:[ 4,
            11,
            4,
            23 ],
          2023:[ 4,
            3,
            4,
            14 ],
          2024:[ 3,
            25,
            4,
            5 ],
          2025:[ 4,
            14,
            4,
            25,
            5,
            2,
            5,
            2,
            5,
            30,
            5,
            30 ],
          name:"Osterferien" },
        { 2012:[ 5,
            18,
            5,
            18 ],
          2013:[ 5,
            10,
            5,
            10 ],
          2014:[ 5,
            30,
            5,
            30 ],
          2015:[ 5,
            15,
            5,
            15 ],
          2016:[ 5,
            6,
            5,
            6,
            5,
            17,
            5,
            17 ],
          2017:[ 5,
            26,
            5,
            26 ],
          2018:[ 4,
            30,
            4,
            30,
            5,
            11,
            5,
            11 ],
          2019:[ 5,
            31,
            5,
            31 ],
          2020:[ 5,
            22,
            5,
            22 ],
          2021:[ 5,
            14,
            5,
            14 ],
          2022:[ 5,
            27,
            5,
            27 ],
          2023:[ 5,
            19,
            5,
            19 ],
          2024:[ 5,
            10,
            5,
            10 ],
          2025:[ 6,
            10,
            6,
            10 ],
          name:"Pfingstferien" },
        { 2012:[ 6,
            21,
            8,
            3 ],
          2013:[ 6,
            20,
            8,
            2 ],
          2014:[ 7,
            10,
            8,
            22 ],
          2015:[ 7,
            16,
            8,
            28 ],
          2016:[ 7,
            21,
            9,
            3 ],
          2017:[ 7,
            20,
            9,
            1 ],
          2018:[ 7,
            5,
            8,
            18 ],
          2019:[ 6,
            20,
            8,
            3 ],
          2020:[ 6,
            25,
            8,
            8 ],
          2021:[ 6,
            24,
            8,
            7 ],
          2022:[ 7,
            7,
            8,
            20 ],
          2023:[ 7,
            13,
            8,
            26 ],
          2024:[ 7,
            18,
            8,
            31 ],
          2025:[ 7,
            24,
            9,
            6 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            1,
            10,
            13 ],
          2013:[ 9,
            30,
            10,
            12,
            11,
            1,
            11,
            1 ],
          2014:[ 10,
            20,
            11,
            1 ],
          2015:[ 10,
            19,
            10,
            30 ],
          2016:[ 10,
            17,
            10,
            28 ],
          2017:[ 10,
            2,
            10,
            2,
            10,
            23,
            11,
            4 ],
          2018:[ 10,
            22,
            11,
            2 ],
          2019:[ 10,
            4,
            10,
            18,
            11,
            1,
            11,
            1 ],
          2020:[ 10,
            12,
            10,
            24 ],
          2021:[ 10,
            11,
            10,
            23 ],
          2022:[ 10,
            24,
            11,
            5 ],
          2023:[ 10,
            2,
            10,
            2,
            10,
            23,
            11,
            4 ],
          2024:[ 10,
            4,
            10,
            4,
            10,
            21,
            11,
            2 ],
          2025:[ 10,
            20,
            11,
            1 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            3 ],
          2012:[ 12,
            24,
            1,
            4 ],
          2013:[ 12,
            23,
            1,
            3 ],
          2014:[ 12,
            22,
            1,
            2 ],
          2015:[ 12,
            23,
            1,
            2 ],
          2016:[ 12,
            23,
            1,
            3 ],
          2017:[ 12,
            21,
            1,
            2 ],
          2018:[ 12,
            21,
            1,
            5 ],
          2019:[ 12,
            23,
            1,
            3 ],
          2020:[ 12,
            21,
            1,
            2 ],
          2021:[ 12,
            23,
            12,
            31 ],
          2022:[ 12,
            22,
            1,
            3 ],
          2023:[ 12,
            23,
            1,
            5 ],
          2024:[ 12,
            23,
            12,
            31 ],
          2025:[ 12,
            22,
            1,
            2 ],
          name:"Weihnachtsferien" } ] },
    Bremen:{ _state_code:"hb",
      SH:[ { 2012:[ 1,
            30,
            1,
            31 ],
          2013:[ 1,
            31,
            2,
            1 ],
          2014:[ 1,
            30,
            1,
            31 ],
          2015:[ 2,
            2,
            2,
            3 ],
          2016:[ 1,
            28,
            1,
            29 ],
          2017:[ 1,
            30,
            1,
            31 ],
          2018:[ 2,
            1,
            2,
            2 ],
          2019:[ 1,
            31,
            2,
            1 ],
          2020:[ 2,
            3,
            2,
            4 ],
          2021:[ 2,
            1,
            2,
            2 ],
          2022:[ 1,
            31,
            2,
            1 ],
          2023:[ 1,
            30,
            1,
            31 ],
          2024:[ 2,
            1,
            2,
            2 ],
          2025:[ 2,
            3,
            2,
            4 ],
          name:"Winterferien" },
        { 2012:[ 3,
            26,
            4,
            11,
            4,
            30,
            4,
            30 ],
          2013:[ 3,
            16,
            4,
            2 ],
          2014:[ 4,
            3,
            4,
            22,
            5,
            2,
            5,
            2 ],
          2015:[ 3,
            25,
            4,
            10 ],
          2016:[ 3,
            18,
            4,
            2 ],
          2017:[ 4,
            10,
            4,
            22 ],
          2018:[ 3,
            19,
            4,
            3 ],
          2019:[ 4,
            6,
            4,
            23 ],
          2020:[ 3,
            28,
            4,
            14 ],
          2021:[ 3,
            27,
            4,
            10 ],
          2022:[ 4,
            4,
            4,
            19 ],
          2023:[ 3,
            27,
            4,
            11 ],
          2024:[ 3,
            18,
            4,
            2 ],
          2025:[ 4,
            7,
            4,
            19 ],
          name:"Osterferien" },
        { 2012:[ 5,
            18,
            5,
            18,
            5,
            29,
            5,
            29 ],
          2013:[ 5,
            10,
            5,
            10,
            5,
            21,
            5,
            21 ],
          2014:[ 5,
            30,
            5,
            30,
            6,
            10,
            6,
            10 ],
          2015:[ 5,
            15,
            5,
            15,
            5,
            26,
            5,
            26 ],
          2016:[ 5,
            6,
            5,
            6,
            5,
            17,
            5,
            17 ],
          2017:[ 5,
            26,
            5,
            26,
            6,
            6,
            6,
            6 ],
          2018:[ 4,
            30,
            4,
            30,
            5,
            11,
            5,
            11,
            5,
            22,
            5,
            22 ],
          2019:[ 5,
            31,
            5,
            31,
            6,
            11,
            6,
            11 ],
          2020:[ 5,
            22,
            5,
            22,
            6,
            2,
            6,
            2 ],
          2021:[ 5,
            14,
            5,
            14,
            5,
            25,
            5,
            25 ],
          2022:[ 5,
            27,
            5,
            27,
            6,
            7,
            6,
            7 ],
          2023:[ 5,
            19,
            5,
            19,
            5,
            30,
            5,
            30 ],
          2024:[ 5,
            10,
            5,
            10,
            5,
            21,
            5,
            21 ],
          2025:[ 4,
            30,
            4,
            30,
            5,
            2,
            5,
            2,
            5,
            30,
            5,
            30,
            6,
            10,
            6,
            10 ],
          name:"Pfingstferien" },
        { 2012:[ 7,
            23,
            8,
            31 ],
          2013:[ 6,
            27,
            8,
            7 ],
          2014:[ 7,
            31,
            9,
            10 ],
          2015:[ 7,
            23,
            9,
            2 ],
          2016:[ 6,
            23,
            8,
            3 ],
          2017:[ 6,
            22,
            8,
            2 ],
          2018:[ 6,
            28,
            8,
            8 ],
          2019:[ 7,
            4,
            8,
            14 ],
          2020:[ 7,
            16,
            8,
            26 ],
          2021:[ 7,
            22,
            9,
            1 ],
          2022:[ 7,
            14,
            8,
            24 ],
          2023:[ 7,
            6,
            8,
            16 ],
          2024:[ 6,
            24,
            8,
            2 ],
          2025:[ 7,
            3,
            8,
            13 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            22,
            11,
            3 ],
          2013:[ 10,
            4,
            10,
            18 ],
          2014:[ 10,
            27,
            11,
            8 ],
          2015:[ 10,
            19,
            10,
            31 ],
          2016:[ 10,
            4,
            10,
            15 ],
          2017:[ 10,
            2,
            10,
            14,
            10,
            30,
            10,
            30 ],
          2018:[ 10,
            1,
            10,
            13 ],
          2019:[ 10,
            4,
            10,
            18 ],
          2020:[ 10,
            12,
            10,
            24 ],
          2021:[ 10,
            18,
            10,
            30 ],
          2022:[ 10,
            17,
            10,
            29 ],
          2023:[ 10,
            2,
            10,
            2,
            10,
            16,
            10,
            28 ],
          2024:[ 10,
            4,
            10,
            19,
            11,
            1,
            11,
            1 ],
          2025:[ 10,
            13,
            10,
            25 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            4 ],
          2012:[ 12,
            24,
            1,
            5 ],
          2013:[ 12,
            23,
            1,
            3 ],
          2014:[ 12,
            22,
            1,
            5 ],
          2015:[ 12,
            23,
            1,
            6 ],
          2016:[ 12,
            21,
            1,
            6 ],
          2017:[ 12,
            22,
            1,
            6 ],
          2018:[ 12,
            24,
            1,
            4 ],
          2019:[ 12,
            21,
            1,
            6 ],
          2020:[ 12,
            23,
            1,
            8 ],
          2021:[ 12,
            23,
            1,
            8 ],
          2022:[ 12,
            23,
            1,
            6 ],
          2023:[ 12,
            23,
            1,
            5 ],
          2024:[ 12,
            23,
            1,
            4 ],
          2025:[ 12,
            22,
            1,
            5 ],
          name:"Weihnachtsferien" } ] },
    Hamburg:{ _state_code:"hh",
      SH:[ { 2012:[ 1,
            30,
            1,
            30 ],
          2013:[ 2,
            1,
            2,
            1 ],
          2014:[ 1,
            31,
            1,
            31 ],
          2015:[ 1,
            30,
            1,
            30 ],
          2016:[ 1,
            29,
            1,
            29 ],
          2017:[ 1,
            30,
            1,
            30 ],
          2018:[ 2,
            2,
            2,
            2 ],
          2019:[ 2,
            1,
            2,
            1 ],
          2020:[ 1,
            31,
            1,
            31 ],
          2021:[ 1,
            29,
            1,
            29 ],
          2022:[ 1,
            28,
            1,
            28 ],
          2023:[ 1,
            27,
            1,
            27 ],
          2024:[ 2,
            2,
            2,
            2 ],
          2025:[ 1,
            31,
            1,
            31 ],
          name:"Winterferien" },
        { 2012:[ 3,
            5,
            3,
            16 ],
          2013:[ 3,
            4,
            3,
            15 ],
          2014:[ 3,
            3,
            3,
            14 ],
          2015:[ 3,
            2,
            3,
            13 ],
          2016:[ 3,
            7,
            3,
            18 ],
          2017:[ 3,
            6,
            3,
            17 ],
          2018:[ 3,
            5,
            3,
            16,
            4,
            30,
            4,
            30 ],
          2019:[ 3,
            4,
            3,
            15 ],
          2020:[ 3,
            2,
            3,
            13 ],
          2021:[ 3,
            1,
            3,
            12 ],
          2022:[ 3,
            7,
            3,
            18 ],
          2023:[ 3,
            6,
            3,
            17 ],
          2024:[ 3,
            18,
            3,
            28 ],
          2025:[ 3,
            10,
            3,
            21 ],
          name:"Osterferien" },
        { 2012:[ 4,
            30,
            5,
            4,
            5,
            18,
            5,
            18 ],
          2013:[ 5,
            2,
            5,
            10 ],
          2014:[ 4,
            28,
            5,
            2,
            5,
            30,
            5,
            30 ],
          2015:[ 5,
            11,
            5,
            15 ],
          2016:[ 5,
            6,
            5,
            6,
            5,
            17,
            5,
            20 ],
          2017:[ 5,
            22,
            5,
            26 ],
          2018:[ 5,
            7,
            5,
            11 ],
          2019:[ 5,
            13,
            5,
            17,
            5,
            31,
            5,
            31 ],
          2020:[ 5,
            4,
            5,
            8 ],
          2021:[ 5,
            10,
            5,
            14 ],
          2022:[ 5,
            23,
            5,
            27 ],
          2023:[ 5,
            15,
            5,
            19 ],
          2024:[ 5,
            21,
            5,
            24 ],
          2025:[ 5,
            2,
            5,
            2,
            5,
            26,
            5,
            30 ],
          name:"Pfingstferien" },
        { 2012:[ 6,
            21,
            8,
            1 ],
          2013:[ 6,
            20,
            7,
            31 ],
          2014:[ 7,
            10,
            8,
            20 ],
          2015:[ 7,
            16,
            8,
            26 ],
          2016:[ 7,
            21,
            8,
            31 ],
          2017:[ 7,
            20,
            8,
            30 ],
          2018:[ 7,
            5,
            8,
            15 ],
          2019:[ 6,
            27,
            8,
            7 ],
          2020:[ 6,
            25,
            8,
            5 ],
          2021:[ 6,
            24,
            8,
            4 ],
          2022:[ 7,
            7,
            8,
            17 ],
          2023:[ 7,
            13,
            8,
            23 ],
          2024:[ 7,
            18,
            8,
            28 ],
          2025:[ 7,
            24,
            9,
            3 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            1,
            10,
            12 ],
          2013:[ 9,
            30,
            10,
            11 ],
          2014:[ 10,
            13,
            10,
            24 ],
          2015:[ 10,
            19,
            10,
            30 ],
          2016:[ 10,
            17,
            10,
            28 ],
          2017:[ 10,
            2,
            10,
            2,
            10,
            16,
            10,
            27 ],
          2018:[ 10,
            1,
            10,
            12 ],
          2019:[ 10,
            4,
            10,
            18 ],
          2020:[ 10,
            5,
            10,
            16 ],
          2021:[ 10,
            4,
            10,
            15 ],
          2022:[ 10,
            10,
            10,
            21 ],
          2023:[ 10,
            2,
            10,
            2,
            10,
            16,
            10,
            27 ],
          2024:[ 10,
            4,
            10,
            4,
            10,
            21,
            11,
            1 ],
          2025:[ 10,
            20,
            10,
            31 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            27,
            1,
            6 ],
          2012:[ 12,
            21,
            1,
            4 ],
          2013:[ 12,
            19,
            1,
            3 ],
          2014:[ 12,
            22,
            1,
            6 ],
          2015:[ 12,
            21,
            1,
            1 ],
          2016:[ 12,
            27,
            1,
            6 ],
          2017:[ 12,
            22,
            1,
            5 ],
          2018:[ 12,
            20,
            1,
            4 ],
          2019:[ 12,
            23,
            1,
            3 ],
          2020:[ 12,
            21,
            1,
            4 ],
          2021:[ 12,
            23,
            1,
            4 ],
          2022:[ 12,
            23,
            1,
            6 ],
          2023:[ 12,
            22,
            1,
            5 ],
          2024:[ 12,
            20,
            1,
            3 ],
          2025:[ 12,
            17,
            1,
            2 ],
          name:"Weihnachtsferien" } ] },
    Hessen:{ _state_code:"he",
      SH:[ { 2012:[ 4,
            2,
            4,
            14 ],
          2013:[ 3,
            25,
            4,
            6 ],
          2014:[ 4,
            14,
            4,
            26 ],
          2015:[ 3,
            30,
            4,
            11 ],
          2016:[ 3,
            29,
            4,
            9 ],
          2017:[ 4,
            3,
            4,
            15 ],
          2018:[ 3,
            26,
            4,
            7 ],
          2019:[ 4,
            14,
            4,
            27 ],
          2020:[ 4,
            6,
            4,
            18 ],
          2021:[ 4,
            6,
            4,
            16 ],
          2022:[ 4,
            11,
            4,
            23 ],
          2023:[ 4,
            3,
            4,
            22 ],
          2024:[ 3,
            25,
            4,
            13 ],
          2025:[ 4,
            7,
            4,
            21 ],
          name:"Osterferien" },
        { 2012:[ 7,
            2,
            8,
            10 ],
          2013:[ 7,
            8,
            8,
            16 ],
          2014:[ 7,
            28,
            9,
            5 ],
          2015:[ 7,
            27,
            9,
            4 ],
          2016:[ 7,
            18,
            8,
            26 ],
          2017:[ 7,
            3,
            8,
            11 ],
          2018:[ 6,
            25,
            8,
            3 ],
          2019:[ 7,
            1,
            8,
            9 ],
          2020:[ 7,
            6,
            8,
            14 ],
          2021:[ 7,
            19,
            8,
            27 ],
          2022:[ 7,
            25,
            9,
            2 ],
          2023:[ 7,
            24,
            9,
            1 ],
          2024:[ 7,
            15,
            8,
            23 ],
          2025:[ 7,
            7,
            8,
            15 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            15,
            10,
            27 ],
          2013:[ 10,
            14,
            10,
            26 ],
          2014:[ 10,
            20,
            11,
            1 ],
          2015:[ 10,
            19,
            10,
            31 ],
          2016:[ 10,
            17,
            10,
            29 ],
          2017:[ 10,
            9,
            10,
            21 ],
          2018:[ 10,
            1,
            10,
            13 ],
          2019:[ 9,
            30,
            10,
            12 ],
          2020:[ 10,
            5,
            10,
            17 ],
          2021:[ 10,
            11,
            10,
            23 ],
          2022:[ 10,
            24,
            10,
            29 ],
          2023:[ 10,
            23,
            10,
            28 ],
          2024:[  ],
          2025:[ 10,
            6,
            10,
            18 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            21,
            1,
            6 ],
          2012:[ 12,
            24,
            1,
            12 ],
          2013:[ 12,
            23,
            1,
            11 ],
          2014:[ 12,
            22,
            1,
            10 ],
          2015:[ 12,
            23,
            1,
            9 ],
          2016:[ 12,
            22,
            1,
            7 ],
          2017:[ 12,
            24,
            1,
            13 ],
          2018:[ 12,
            24,
            1,
            12 ],
          2019:[ 12,
            23,
            1,
            11 ],
          2020:[ 12,
            21,
            1,
            9 ],
          2021:[ 12,
            23,
            1,
            8 ],
          2022:[ 12,
            22,
            1,
            7 ],
          2023:[ 12,
            27,
            1,
            13 ],
          2024:[  ],
          2025:[ 12,
            22,
            1,
            10 ],
          name:"Weihnachtsferien" } ] },
    "Mecklenburg-Vorpommern":{ _state_code:"mv",
      SH:[ { 2012:[ 2,
            6,
            2,
            17 ],
          2013:[ 2,
            4,
            2,
            15 ],
          2014:[ 2,
            3,
            2,
            15 ],
          2015:[ 2,
            2,
            2,
            14 ],
          2016:[ 2,
            1,
            2,
            13 ],
          2017:[ 2,
            6,
            2,
            18 ],
          2018:[ 2,
            5,
            2,
            16 ],
          2019:[ 2,
            4,
            2,
            15 ],
          2020:[ 2,
            10,
            2,
            21 ],
          2021:[ 2,
            6,
            2,
            19 ],
          2022:[ 2,
            5,
            2,
            17 ],
          2023:[ 2,
            6,
            2,
            18 ],
          2024:[ 2,
            5,
            2,
            16 ],
          2025:[ 2,
            3,
            2,
            14 ],
          name:"Winterferien" },
        { 2012:[ 4,
            2,
            4,
            11 ],
          2013:[ 3,
            25,
            4,
            3 ],
          2014:[ 4,
            14,
            4,
            23 ],
          2015:[ 3,
            30,
            4,
            8 ],
          2016:[ 3,
            21,
            3,
            30 ],
          2017:[ 4,
            10,
            4,
            19 ],
          2018:[ 3,
            26,
            4,
            4 ],
          2019:[ 4,
            15,
            4,
            24 ],
          2020:[ 4,
            6,
            4,
            15 ],
          2021:[ 3,
            29,
            4,
            7 ],
          2022:[ 4,
            11,
            4,
            20 ],
          2023:[ 4,
            3,
            4,
            12 ],
          2024:[ 3,
            25,
            4,
            3 ],
          2025:[ 4,
            14,
            4,
            23,
            5,
            30,
            5,
            30 ],
          name:"Osterferien" },
        { 2012:[ 5,
            25,
            5,
            29 ],
          2013:[ 5,
            17,
            5,
            21 ],
          2014:[ 6,
            6,
            6,
            10 ],
          2015:[ 5,
            22,
            5,
            26 ],
          2016:[ 5,
            14,
            5,
            17 ],
          2017:[ 6,
            2,
            6,
            6 ],
          2018:[ 5,
            11,
            5,
            11,
            5,
            18,
            5,
            22 ],
          2019:[ 5,
            22,
            5,
            22,
            6,
            7,
            6,
            11 ],
          2020:[ 5,
            22,
            5,
            22,
            5,
            29,
            6,
            2 ],
          2021:[ 5,
            14,
            5,
            14,
            5,
            21,
            5,
            25 ],
          2022:[ 5,
            27,
            5,
            27,
            6,
            3,
            6,
            7 ],
          2023:[ 5,
            19,
            5,
            19,
            5,
            26,
            5,
            30 ],
          2024:[ 5,
            10,
            5,
            10,
            5,
            17,
            5,
            21 ],
          2025:[ 6,
            6,
            6,
            10 ],
          name:"Pfingstferien" },
        { 2012:[ 6,
            23,
            8,
            4 ],
          2013:[ 6,
            22,
            8,
            3 ],
          2014:[ 7,
            14,
            8,
            23 ],
          2015:[ 7,
            20,
            8,
            29 ],
          2016:[ 7,
            25,
            9,
            3 ],
          2017:[ 7,
            24,
            9,
            2 ],
          2018:[ 7,
            9,
            8,
            18 ],
          2019:[ 7,
            1,
            8,
            10 ],
          2020:[ 6,
            22,
            8,
            1 ],
          2021:[ 6,
            21,
            7,
            31 ],
          2022:[ 7,
            4,
            8,
            13 ],
          2023:[ 7,
            17,
            8,
            26 ],
          2024:[ 7,
            22,
            8,
            31 ],
          2025:[ 7,
            28,
            9,
            6 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            1,
            10,
            5 ],
          2013:[ 10,
            14,
            10,
            19 ],
          2014:[ 10,
            20,
            10,
            25 ],
          2015:[ 10,
            24,
            10,
            30 ],
          2016:[ 10,
            24,
            10,
            28 ],
          2017:[ 10,
            2,
            10,
            2,
            10,
            23,
            10,
            30 ],
          2018:[ 10,
            8,
            10,
            13,
            11,
            1,
            11,
            2 ],
          2019:[ 10,
            4,
            10,
            4,
            10,
            7,
            10,
            12,
            11,
            1,
            11,
            1 ],
          2020:[ 10,
            5,
            10,
            10,
            11,
            2,
            11,
            3 ],
          2021:[ 10,
            2,
            10,
            9,
            11,
            1,
            11,
            2 ],
          2022:[ 10,
            10,
            10,
            14,
            11,
            1,
            11,
            2 ],
          2023:[ 10,
            9,
            10,
            14,
            10,
            30,
            10,
            30,
            11,
            1,
            11,
            1 ],
          2024:[ 10,
            4,
            10,
            4,
            10,
            21,
            10,
            26,
            11,
            1,
            11,
            1 ],
          2025:[ 10,
            2,
            10,
            2,
            10,
            20,
            10,
            25,
            11,
            3,
            11,
            3 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            3 ],
          2012:[ 12,
            21,
            1,
            4 ],
          2013:[ 12,
            23,
            1,
            3 ],
          2014:[ 12,
            22,
            1,
            2 ],
          2015:[ 12,
            21,
            1,
            2 ],
          2016:[ 12,
            22,
            1,
            2 ],
          2017:[ 12,
            21,
            1,
            3 ],
          2018:[ 12,
            24,
            1,
            5 ],
          2019:[ 12,
            23,
            1,
            4 ],
          2020:[ 12,
            21,
            1,
            2 ],
          2021:[ 12,
            22,
            12,
            31 ],
          2022:[ 12,
            22,
            1,
            2 ],
          2023:[ 12,
            21,
            1,
            3 ],
          2024:[ 12,
            23,
            1,
            6 ],
          2025:[ 12,
            22,
            1,
            5 ],
          name:"Weihnachtsferien" } ] },
    Niedersachsen:{ _state_code:"ni",
      SH:[ { 2012:[ 1,
            30,
            1,
            31 ],
          2013:[ 1,
            31,
            2,
            1 ],
          2014:[ 1,
            30,
            1,
            31 ],
          2015:[ 2,
            2,
            2,
            3 ],
          2016:[ 1,
            28,
            1,
            29 ],
          2017:[ 1,
            30,
            1,
            31 ],
          2018:[ 2,
            1,
            2,
            2 ],
          2019:[ 1,
            31,
            2,
            1 ],
          2020:[ 2,
            3,
            2,
            4 ],
          2021:[ 2,
            1,
            2,
            2 ],
          2022:[ 1,
            31,
            2,
            1 ],
          2023:[ 1,
            30,
            1,
            31 ],
          2024:[ 2,
            1,
            2,
            2 ],
          2025:[ 2,
            3,
            2,
            4 ],
          name:"Winterferien" },
        { 2012:[ 3,
            26,
            4,
            11,
            4,
            30,
            4,
            30 ],
          2013:[ 3,
            16,
            4,
            2 ],
          2014:[ 4,
            3,
            4,
            22,
            5,
            2,
            5,
            2 ],
          2015:[ 3,
            25,
            4,
            10 ],
          2016:[ 3,
            18,
            4,
            2 ],
          2017:[ 4,
            10,
            4,
            22 ],
          2018:[ 3,
            19,
            4,
            3 ],
          2019:[ 4,
            8,
            4,
            23 ],
          2020:[ 3,
            30,
            4,
            14 ],
          2021:[ 3,
            29,
            4,
            9 ],
          2022:[ 4,
            4,
            4,
            19 ],
          2023:[ 3,
            27,
            4,
            11 ],
          2024:[ 3,
            18,
            4,
            2 ],
          2025:[ 4,
            7,
            4,
            19,
            4,
            30,
            4,
            30 ],
          name:"Osterferien" },
        { 2012:[ 5,
            18,
            5,
            18,
            5,
            29,
            5,
            29 ],
          2013:[ 5,
            10,
            5,
            10,
            5,
            21,
            5,
            21 ],
          2014:[ 5,
            30,
            5,
            30,
            6,
            10,
            6,
            10 ],
          2015:[ 5,
            15,
            5,
            15,
            5,
            26,
            5,
            26 ],
          2016:[ 5,
            6,
            5,
            6,
            5,
            17,
            5,
            17 ],
          2017:[ 5,
            26,
            5,
            26,
            6,
            6,
            6,
            6 ],
          2018:[ 4,
            30,
            4,
            30,
            5,
            11,
            5,
            11,
            5,
            22,
            5,
            22 ],
          2019:[ 5,
            31,
            5,
            31,
            6,
            11,
            6,
            11 ],
          2020:[ 5,
            22,
            5,
            22,
            6,
            2,
            6,
            2 ],
          2021:[ 5,
            14,
            5,
            14,
            5,
            25,
            5,
            25 ],
          2022:[ 5,
            27,
            5,
            27,
            6,
            7,
            6,
            7 ],
          2023:[ 5,
            19,
            5,
            19,
            5,
            30,
            5,
            30 ],
          2024:[ 5,
            10,
            5,
            10,
            5,
            21,
            5,
            21 ],
          2025:[ 5,
            2,
            5,
            2,
            5,
            30,
            5,
            30,
            6,
            10,
            6,
            10 ],
          name:"Pfingstferien" },
        { 2012:[ 7,
            23,
            8,
            31 ],
          2013:[ 6,
            27,
            8,
            7 ],
          2014:[ 7,
            31,
            9,
            10 ],
          2015:[ 7,
            23,
            9,
            2 ],
          2016:[ 6,
            23,
            8,
            3 ],
          2017:[ 6,
            22,
            8,
            2 ],
          2018:[ 6,
            28,
            8,
            8 ],
          2019:[ 7,
            4,
            8,
            14 ],
          2020:[ 7,
            16,
            8,
            26 ],
          2021:[ 7,
            22,
            9,
            1 ],
          2022:[ 7,
            14,
            8,
            24 ],
          2023:[ 7,
            6,
            8,
            16 ],
          2024:[ 6,
            24,
            8,
            2 ],
          2025:[ 7,
            3,
            8,
            13 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            22,
            11,
            3 ],
          2013:[ 10,
            4,
            10,
            18 ],
          2014:[ 10,
            27,
            11,
            8 ],
          2015:[ 10,
            19,
            10,
            31 ],
          2016:[ 10,
            4,
            10,
            15 ],
          2017:[ 10,
            2,
            10,
            13,
            10,
            30,
            10,
            30 ],
          2018:[ 10,
            1,
            10,
            12 ],
          2019:[ 10,
            4,
            10,
            18 ],
          2020:[ 10,
            12,
            10,
            23 ],
          2021:[ 10,
            18,
            10,
            29 ],
          2022:[ 10,
            17,
            10,
            28 ],
          2023:[ 10,
            2,
            10,
            2,
            10,
            16,
            10,
            27 ],
          2024:[ 10,
            4,
            10,
            19,
            11,
            1,
            11,
            1 ],
          2025:[ 10,
            13,
            10,
            25 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            4 ],
          2012:[ 12,
            24,
            1,
            5 ],
          2013:[ 12,
            23,
            1,
            3 ],
          2014:[ 12,
            22,
            1,
            5 ],
          2015:[ 12,
            23,
            1,
            6 ],
          2016:[ 12,
            21,
            1,
            6 ],
          2017:[ 12,
            22,
            1,
            5 ],
          2018:[ 12,
            24,
            1,
            4 ],
          2019:[ 12,
            23,
            1,
            6 ],
          2020:[ 12,
            23,
            1,
            8 ],
          2021:[ 12,
            23,
            1,
            7 ],
          2022:[ 12,
            23,
            1,
            6 ],
          2023:[ 12,
            27,
            1,
            5 ],
          2024:[ 12,
            23,
            1,
            4 ],
          2025:[ 12,
            22,
            1,
            5 ],
          name:"Weihnachtsferien" } ] },
    "Nordrhein-Westfalen":{ _state_code:"nw",
      SH:[ { 2012:[ 4,
            2,
            4,
            14 ],
          2013:[ 3,
            25,
            4,
            6 ],
          2014:[ 4,
            14,
            4,
            26 ],
          2015:[ 3,
            30,
            4,
            11 ],
          2016:[ 3,
            21,
            4,
            2 ],
          2017:[ 4,
            10,
            4,
            22 ],
          2018:[ 3,
            26,
            4,
            7 ],
          2019:[ 4,
            15,
            4,
            27 ],
          2020:[ 4,
            6,
            4,
            18 ],
          2021:[ 3,
            29,
            4,
            10 ],
          2022:[ 4,
            11,
            4,
            23 ],
          2023:[ 4,
            3,
            4,
            15 ],
          2024:[ 3,
            25,
            4,
            6 ],
          2025:[ 4,
            14,
            4,
            26 ],
          name:"Osterferien" },
        { 2012:[ 5,
            29,
            5,
            29 ],
          2013:[ 5,
            21,
            5,
            21 ],
          2014:[ 6,
            10,
            6,
            10 ],
          2015:[ 5,
            26,
            5,
            26 ],
          2016:[ 5,
            17,
            5,
            17 ],
          2017:[ 6,
            6,
            6,
            6 ],
          2018:[ 5,
            22,
            5,
            25 ],
          2019:[ 6,
            11,
            6,
            11 ],
          2020:[ 6,
            2,
            6,
            2 ],
          2021:[ 5,
            25,
            5,
            25 ],
          2023:[ 5,
            30,
            5,
            30 ],
          2024:[ 5,
            21,
            5,
            21 ],
          2025:[ 6,
            10,
            6,
            10 ],
          name:"Pfingstferien" },
        { 2012:[ 7,
            9,
            8,
            21 ],
          2013:[ 7,
            22,
            9,
            3 ],
          2014:[ 7,
            7,
            8,
            19 ],
          2015:[ 6,
            29,
            8,
            11 ],
          2016:[ 7,
            11,
            8,
            23 ],
          2017:[ 7,
            17,
            8,
            29 ],
          2018:[ 7,
            16,
            8,
            28 ],
          2019:[ 7,
            15,
            8,
            27 ],
          2020:[ 6,
            29,
            8,
            11 ],
          2021:[ 7,
            5,
            8,
            17 ],
          2022:[ 6,
            27,
            8,
            9 ],
          2023:[ 6,
            22,
            8,
            4 ],
          2024:[ 7,
            8,
            8,
            20 ],
          2025:[ 7,
            14,
            8,
            26 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            8,
            10,
            20 ],
          2013:[ 10,
            21,
            11,
            2 ],
          2014:[ 10,
            6,
            10,
            18 ],
          2015:[ 10,
            5,
            10,
            17 ],
          2016:[ 10,
            10,
            10,
            21 ],
          2017:[ 10,
            23,
            11,
            4 ],
          2018:[ 10,
            15,
            10,
            27 ],
          2019:[ 10,
            14,
            10,
            26 ],
          2020:[ 10,
            12,
            10,
            24 ],
          2021:[ 10,
            11,
            10,
            23 ],
          2022:[ 10,
            4,
            10,
            15 ],
          2023:[ 10,
            2,
            10,
            14 ],
          2024:[ 10,
            14,
            10,
            26 ],
          2025:[ 10,
            13,
            10,
            25 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            6 ],
          2012:[ 12,
            21,
            1,
            4 ],
          2013:[ 12,
            23,
            1,
            7 ],
          2014:[ 12,
            22,
            1,
            6 ],
          2015:[ 12,
            23,
            1,
            6 ],
          2016:[ 12,
            23,
            1,
            6 ],
          2017:[ 12,
            27,
            1,
            6 ],
          2018:[ 12,
            21,
            1,
            4 ],
          2019:[ 12,
            23,
            1,
            6 ],
          2020:[ 12,
            23,
            1,
            6 ],
          2021:[ 12,
            24,
            1,
            8 ],
          2022:[ 12,
            23,
            1,
            6 ],
          2023:[ 12,
            21,
            1,
            5 ],
          2024:[ 12,
            23,
            1,
            6 ],
          2025:[ 12,
            22,
            1,
            6 ],
          name:"Weihnachtsferien" } ] },
    "Rheinland-Pfalz":{ _state_code:"rp",
      SH:[ { 2019:[ 2,
            25,
            3,
            1 ],
          2020:[ 2,
            17,
            2,
            21 ],
          2022:[ 2,
            21,
            2,
            25 ],
          2024:[  ],
          2025:[  ],
          name:"Winterferien" },
        { 2012:[ 3,
            29,
            4,
            13 ],
          2013:[ 3,
            20,
            4,
            5 ],
          2014:[ 4,
            11,
            4,
            25 ],
          2015:[ 3,
            26,
            4,
            10 ],
          2016:[ 3,
            18,
            4,
            1 ],
          2017:[ 4,
            10,
            4,
            21 ],
          2018:[ 3,
            26,
            4,
            6 ],
          2019:[ 4,
            23,
            4,
            30 ],
          2020:[ 4,
            9,
            4,
            17 ],
          2021:[ 3,
            29,
            4,
            6 ],
          2022:[ 4,
            13,
            4,
            22 ],
          2023:[ 4,
            3,
            4,
            6 ],
          2024:[ 3,
            25,
            4,
            2 ],
          2025:[ 4,
            14,
            4,
            25 ],
          name:"Osterferien" },
        { 2021:[ 5,
            25,
            6,
            2 ],
          2023:[ 5,
            30,
            6,
            7 ],
          2024:[ 5,
            21,
            5,
            29 ],
          2025:[  ],
          name:"Pfingstferien" },
        { 2012:[ 7,
            2,
            8,
            10 ],
          2013:[ 7,
            8,
            8,
            16 ],
          2014:[ 7,
            28,
            9,
            5 ],
          2015:[ 7,
            27,
            9,
            4 ],
          2016:[ 7,
            18,
            8,
            26 ],
          2017:[ 7,
            3,
            8,
            11 ],
          2018:[ 6,
            25,
            8,
            3 ],
          2019:[ 7,
            1,
            8,
            9 ],
          2020:[ 7,
            6,
            8,
            14 ],
          2021:[ 7,
            19,
            8,
            27 ],
          2022:[ 7,
            25,
            9,
            2 ],
          2023:[ 7,
            24,
            9,
            1 ],
          2024:[ 7,
            15,
            8,
            23 ],
          2025:[ 7,
            7,
            8,
            15 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            1,
            10,
            12 ],
          2013:[ 10,
            4,
            10,
            18 ],
          2014:[ 10,
            20,
            10,
            31 ],
          2015:[ 10,
            19,
            10,
            30 ],
          2016:[ 10,
            10,
            10,
            21 ],
          2017:[ 10,
            2,
            10,
            13 ],
          2018:[ 10,
            1,
            10,
            12 ],
          2019:[ 9,
            30,
            10,
            11 ],
          2020:[ 10,
            12,
            10,
            23 ],
          2021:[ 10,
            11,
            10,
            22 ],
          2022:[ 10,
            17,
            10,
            31 ],
          2023:[ 10,
            16,
            10,
            27 ],
          2024:[ 10,
            14,
            10,
            25 ],
          2025:[ 10,
            13,
            10,
            24 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            22,
            1,
            6 ],
          2012:[ 12,
            20,
            1,
            4 ],
          2013:[ 12,
            23,
            1,
            7 ],
          2014:[ 12,
            22,
            1,
            7 ],
          2015:[ 12,
            23,
            1,
            8 ],
          2016:[ 12,
            22,
            1,
            6 ],
          2017:[ 12,
            22,
            1,
            9 ],
          2018:[ 12,
            20,
            1,
            4 ],
          2019:[ 12,
            23,
            1,
            6 ],
          2020:[ 12,
            21,
            12,
            31 ],
          2021:[ 12,
            23,
            12,
            31 ],
          2022:[ 12,
            23,
            1,
            2 ],
          2023:[ 12,
            27,
            1,
            5 ],
          2024:[ 12,
            23,
            1,
            8 ],
          2025:[ 12,
            22,
            1,
            7 ],
          name:"Weihnachtsferien" } ] },
    Saarland:{ _state_code:"sl",
      SH:[ { 2012:[ 2,
            20,
            2,
            25 ],
          2013:[ 2,
            11,
            2,
            16 ],
          2014:[ 3,
            3,
            3,
            8 ],
          2015:[ 2,
            16,
            2,
            21 ],
          2016:[ 2,
            8,
            2,
            13 ],
          2017:[ 2,
            27,
            3,
            4 ],
          2018:[ 2,
            12,
            2,
            17 ],
          2019:[ 2,
            25,
            3,
            5 ],
          2020:[ 2,
            17,
            2,
            25 ],
          2021:[ 2,
            15,
            2,
            19 ],
          2022:[ 2,
            21,
            3,
            1 ],
          2023:[ 2,
            20,
            2,
            24 ],
          2024:[ 2,
            12,
            2,
            16 ],
          2025:[ 2,
            24,
            3,
            4 ],
          name:"Winterferien" },
        { 2012:[ 4,
            2,
            4,
            14 ],
          2013:[ 3,
            25,
            4,
            6 ],
          2014:[ 4,
            14,
            4,
            26 ],
          2015:[ 3,
            30,
            4,
            11 ],
          2016:[ 3,
            29,
            4,
            9 ],
          2017:[ 4,
            10,
            4,
            22 ],
          2018:[ 3,
            26,
            4,
            6 ],
          2019:[ 4,
            17,
            4,
            26 ],
          2020:[ 4,
            14,
            4,
            24 ],
          2021:[ 3,
            29,
            4,
            7 ],
          2022:[ 4,
            14,
            4,
            22 ],
          2023:[ 4,
            3,
            4,
            12 ],
          2024:[ 3,
            25,
            4,
            5 ],
          2025:[ 4,
            14,
            4,
            25 ],
          name:"Osterferien" },
        { 2021:[ 5,
            25,
            5,
            28 ],
          2022:[ 6,
            7,
            6,
            10 ],
          2023:[ 5,
            30,
            6,
            2 ],
          2024:[ 5,
            21,
            5,
            24 ],
          2025:[  ],
          name:"Pfingstferien" },
        { 2012:[ 7,
            2,
            8,
            14 ],
          2013:[ 7,
            8,
            8,
            17 ],
          2014:[ 7,
            28,
            9,
            6 ],
          2015:[ 7,
            27,
            9,
            5 ],
          2016:[ 7,
            18,
            8,
            27 ],
          2017:[ 7,
            3,
            8,
            14 ],
          2018:[ 6,
            25,
            8,
            3 ],
          2019:[ 7,
            1,
            8,
            9 ],
          2020:[ 7,
            6,
            8,
            14 ],
          2021:[ 7,
            19,
            8,
            27 ],
          2022:[ 7,
            25,
            9,
            2 ],
          2023:[ 7,
            24,
            9,
            1 ],
          2024:[ 7,
            15,
            8,
            23 ],
          2025:[ 7,
            7,
            8,
            14 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            22,
            11,
            3 ],
          2013:[ 10,
            21,
            11,
            2 ],
          2014:[ 10,
            20,
            10,
            31 ],
          2015:[ 10,
            19,
            10,
            31 ],
          2016:[ 10,
            10,
            10,
            22 ],
          2017:[ 10,
            2,
            10,
            14 ],
          2018:[ 10,
            1,
            10,
            12 ],
          2019:[ 10,
            7,
            10,
            18 ],
          2020:[ 10,
            12,
            10,
            23 ],
          2021:[ 10,
            18,
            10,
            29 ],
          2022:[ 10,
            24,
            11,
            4 ],
          2023:[ 10,
            23,
            11,
            3 ],
          2024:[ 10,
            14,
            10,
            25 ],
          2025:[ 10,
            13,
            10,
            24 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            4 ],
          2012:[ 12,
            24,
            1,
            5 ],
          2013:[ 12,
            20,
            1,
            4 ],
          2014:[ 12,
            22,
            1,
            7 ],
          2015:[ 12,
            21,
            1,
            2 ],
          2016:[ 12,
            19,
            12,
            31 ],
          2017:[ 12,
            21,
            1,
            5 ],
          2018:[ 12,
            20,
            1,
            4 ],
          2019:[ 12,
            23,
            1,
            3 ],
          2020:[ 12,
            21,
            12,
            31 ],
          2021:[ 12,
            23,
            1,
            3 ],
          2022:[ 12,
            22,
            1,
            4 ],
          2023:[ 12,
            21,
            1,
            2 ],
          2024:[ 12,
            23,
            1,
            3 ],
          2025:[ 12,
            22,
            1,
            2 ],
          name:"Weihnachtsferien" } ] },
    Sachsen:{ _state_code:"sn",
      SH:[ { 2012:[ 2,
            13,
            2,
            25 ],
          2013:[ 2,
            4,
            2,
            15 ],
          2014:[ 2,
            17,
            3,
            1 ],
          2015:[ 2,
            9,
            2,
            21 ],
          2016:[ 2,
            8,
            2,
            20 ],
          2017:[ 2,
            13,
            2,
            24 ],
          2018:[ 2,
            12,
            2,
            23 ],
          2019:[ 2,
            18,
            3,
            2 ],
          2020:[ 2,
            10,
            2,
            22 ],
          2021:[ 2,
            8,
            2,
            20 ],
          2022:[ 2,
            12,
            2,
            26 ],
          2023:[ 2,
            13,
            2,
            24 ],
          2024:[ 2,
            12,
            2,
            23 ],
          2025:[ 2,
            17,
            3,
            1 ],
          name:"Winterferien" },
        { 2012:[ 4,
            6,
            4,
            14 ],
          2013:[ 3,
            29,
            4,
            6 ],
          2014:[ 4,
            18,
            4,
            26 ],
          2015:[ 4,
            2,
            4,
            11 ],
          2016:[ 3,
            25,
            4,
            2 ],
          2017:[ 4,
            13,
            4,
            22 ],
          2018:[ 3,
            29,
            4,
            6 ],
          2019:[ 4,
            19,
            4,
            26 ],
          2020:[ 4,
            10,
            4,
            18 ],
          2021:[ 4,
            2,
            4,
            10 ],
          2022:[ 4,
            15,
            4,
            23 ],
          2023:[ 4,
            7,
            4,
            15 ],
          2024:[ 3,
            28,
            4,
            5 ],
          2025:[ 4,
            18,
            4,
            25,
            5,
            30,
            5,
            30 ],
          name:"Osterferien" },
        { 2012:[ 5,
            18,
            5,
            18 ],
          2013:[ 5,
            10,
            5,
            10,
            5,
            18,
            5,
            22 ],
          2014:[ 5,
            30,
            5,
            30 ],
          2015:[ 5,
            15,
            5,
            15 ],
          2016:[ 5,
            6,
            5,
            6 ],
          2017:[ 5,
            26,
            5,
            26 ],
          2018:[ 5,
            11,
            5,
            11,
            5,
            19,
            5,
            22 ],
          2019:[ 5,
            31,
            5,
            31 ],
          2020:[ 5,
            22,
            5,
            22 ],
          2021:[ 5,
            14,
            5,
            14 ],
          2022:[ 5,
            27,
            5,
            27 ],
          2023:[ 5,
            19,
            5,
            19 ],
          2024:[ 5,
            10,
            5,
            10,
            5,
            18,
            5,
            21 ],
          2025:[  ],
          name:"Pfingstferien" },
        { 2012:[ 7,
            23,
            8,
            31 ],
          2013:[ 7,
            15,
            8,
            23 ],
          2014:[ 7,
            21,
            8,
            29 ],
          2015:[ 7,
            13,
            8,
            21 ],
          2016:[ 6,
            27,
            8,
            5 ],
          2017:[ 6,
            26,
            8,
            4 ],
          2018:[ 7,
            2,
            8,
            10 ],
          2019:[ 7,
            8,
            8,
            16 ],
          2020:[ 7,
            20,
            8,
            28 ],
          2021:[ 7,
            26,
            9,
            3 ],
          2022:[ 7,
            18,
            8,
            26 ],
          2023:[ 7,
            10,
            8,
            18 ],
          2024:[ 6,
            20,
            7,
            31 ],
          2025:[ 6,
            28,
            8,
            8 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            22,
            11,
            2 ],
          2013:[ 10,
            21,
            11,
            1 ],
          2014:[ 10,
            20,
            10,
            31 ],
          2015:[ 10,
            12,
            10,
            24 ],
          2016:[ 10,
            3,
            10,
            15 ],
          2017:[ 10,
            2,
            10,
            14,
            10,
            30,
            10,
            30 ],
          2018:[ 10,
            8,
            10,
            20 ],
          2019:[ 10,
            14,
            10,
            25 ],
          2020:[ 10,
            19,
            10,
            31 ],
          2021:[ 10,
            18,
            10,
            30 ],
          2022:[ 10,
            17,
            10,
            29 ],
          2023:[ 10,
            2,
            10,
            14,
            10,
            30,
            10,
            30 ],
          2024:[ 10,
            7,
            10,
            19 ],
          2025:[ 10,
            6,
            10,
            18 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            2 ],
          2012:[ 12,
            22,
            1,
            2 ],
          2013:[ 12,
            21,
            1,
            3 ],
          2014:[ 12,
            22,
            1,
            3 ],
          2015:[ 12,
            21,
            1,
            2 ],
          2016:[ 12,
            23,
            1,
            2 ],
          2017:[ 12,
            23,
            1,
            2 ],
          2018:[ 12,
            22,
            1,
            4 ],
          2019:[ 12,
            21,
            1,
            3 ],
          2020:[ 12,
            23,
            1,
            2 ],
          2021:[ 12,
            23,
            1,
            1 ],
          2022:[ 12,
            22,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            2 ],
          2024:[ 12,
            23,
            1,
            3 ],
          2025:[ 12,
            22,
            1,
            2 ],
          name:"Weihnachtsferien" } ] },
    "Sachsen-Anhalt":{ _state_code:"st",
      SH:[ { 2012:[ 2,
            4,
            2,
            11 ],
          2013:[ 2,
            1,
            2,
            8 ],
          2014:[ 2,
            1,
            2,
            12 ],
          2015:[ 2,
            2,
            2,
            14 ],
          2016:[ 2,
            1,
            2,
            10 ],
          2017:[ 2,
            4,
            2,
            11 ],
          2018:[ 2,
            5,
            2,
            9 ],
          2019:[ 2,
            11,
            2,
            15 ],
          2020:[ 2,
            10,
            2,
            14 ],
          2021:[ 2,
            8,
            2,
            13 ],
          2022:[ 2,
            12,
            2,
            19 ],
          2023:[ 2,
            6,
            2,
            11 ],
          2024:[ 2,
            5,
            2,
            10 ],
          2025:[ 1,
            27,
            1,
            31 ],
          name:"Winterferien" },
        { 2012:[ 4,
            2,
            4,
            7 ],
          2013:[ 3,
            25,
            3,
            30 ],
          2014:[ 4,
            14,
            4,
            17 ],
          2015:[ 4,
            2,
            4,
            2 ],
          2016:[ 3,
            24,
            3,
            24 ],
          2017:[ 4,
            10,
            4,
            13 ],
          2018:[ 3,
            26,
            3,
            31,
            4,
            30,
            4,
            30 ],
          2019:[ 4,
            18,
            4,
            30 ],
          2020:[ 4,
            6,
            4,
            11 ],
          2021:[ 3,
            29,
            4,
            3 ],
          2022:[ 4,
            11,
            4,
            16 ],
          2023:[ 4,
            3,
            4,
            8 ],
          2024:[ 3,
            25,
            3,
            30 ],
          2025:[ 4,
            7,
            4,
            19 ],
          name:"Osterferien" },
        { 2012:[ 5,
            18,
            5,
            25 ],
          2013:[ 5,
            10,
            5,
            18 ],
          2014:[ 5,
            30,
            6,
            7 ],
          2015:[ 5,
            15,
            5,
            23 ],
          2016:[ 5,
            6,
            5,
            14 ],
          2017:[ 5,
            26,
            5,
            26 ],
          2018:[ 5,
            11,
            5,
            19 ],
          2019:[ 5,
            31,
            6,
            1 ],
          2020:[ 5,
            18,
            5,
            30 ],
          2021:[ 5,
            10,
            5,
            22 ],
          2022:[ 5,
            23,
            5,
            28 ],
          2023:[ 5,
            15,
            5,
            19 ],
          2024:[ 5,
            21,
            5,
            24 ],
          2025:[ 5,
            30,
            5,
            30 ],
          name:"Pfingstferien" },
        { 2012:[ 7,
            23,
            9,
            5 ],
          2013:[ 7,
            15,
            8,
            28 ],
          2014:[ 7,
            21,
            9,
            3 ],
          2015:[ 7,
            13,
            8,
            26 ],
          2016:[ 6,
            27,
            8,
            10 ],
          2017:[ 6,
            26,
            8,
            9 ],
          2018:[ 6,
            28,
            8,
            8 ],
          2019:[ 7,
            4,
            8,
            14 ],
          2020:[ 7,
            16,
            8,
            26 ],
          2021:[ 7,
            22,
            9,
            1 ],
          2022:[ 7,
            14,
            8,
            24 ],
          2023:[ 7,
            6,
            8,
            16 ],
          2024:[ 6,
            24,
            8,
            3 ],
          2025:[ 6,
            28,
            8,
            8 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            29,
            11,
            2 ],
          2013:[ 10,
            21,
            10,
            25 ],
          2014:[ 10,
            27,
            10,
            30 ],
          2015:[ 10,
            17,
            10,
            24 ],
          2016:[ 10,
            4,
            10,
            15 ],
          2017:[ 10,
            2,
            10,
            13,
            10,
            30,
            10,
            30 ],
          2018:[ 10,
            1,
            10,
            12 ],
          2019:[ 10,
            4,
            10,
            11,
            11,
            1,
            11,
            1 ],
          2020:[ 10,
            19,
            10,
            24 ],
          2021:[ 10,
            25,
            10,
            30 ],
          2022:[ 10,
            24,
            11,
            4 ],
          2023:[ 10,
            2,
            10,
            2,
            10,
            16,
            10,
            30 ],
          2024:[ 9,
            30,
            10,
            12,
            11,
            1,
            11,
            1 ],
          2025:[ 10,
            13,
            10,
            25 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            22,
            1,
            7 ],
          2012:[ 12,
            19,
            1,
            4 ],
          2013:[ 12,
            21,
            1,
            3 ],
          2014:[ 12,
            22,
            1,
            5 ],
          2015:[ 12,
            21,
            1,
            5 ],
          2016:[ 12,
            19,
            1,
            2 ],
          2017:[ 12,
            21,
            1,
            3 ],
          2018:[ 12,
            19,
            1,
            4 ],
          2019:[ 12,
            23,
            1,
            4 ],
          2020:[ 12,
            19,
            1,
            5 ],
          2021:[ 12,
            22,
            1,
            8 ],
          2022:[ 12,
            21,
            1,
            5 ],
          2023:[ 12,
            21,
            1,
            3 ],
          2024:[ 12,
            23,
            1,
            4 ],
          2025:[ 12,
            22,
            1,
            5 ],
          name:"Weihnachtsferien" } ] },
    "Schleswig-Holstein":{ _state_code:"sh",
      SH:[ { 2012:[ 3,
            30,
            4,
            13 ],
          2013:[ 3,
            25,
            4,
            9 ],
          2014:[ 4,
            16,
            5,
            2 ],
          2015:[ 4,
            1,
            4,
            17 ],
          2016:[ 3,
            24,
            4,
            9 ],
          2017:[ 4,
            7,
            4,
            21 ],
          2018:[ 3,
            29,
            4,
            13 ],
          2019:[ 4,
            4,
            4,
            18 ],
          2020:[ 3,
            30,
            4,
            17 ],
          2021:[ 4,
            1,
            4,
            16 ],
          2022:[ 4,
            4,
            4,
            16 ],
          2023:[ 4,
            6,
            4,
            22 ],
          2024:[ 4,
            2,
            4,
            19 ],
          2025:[ 4,
            11,
            4,
            25,
            5,
            2,
            5,
            2 ],
          name:"Osterferien" },
        { 2012:[ 5,
            18,
            5,
            18 ],
          2013:[ 5,
            10,
            5,
            10 ],
          2014:[ 5,
            30,
            5,
            30 ],
          2015:[ 5,
            15,
            5,
            15 ],
          2016:[ 5,
            6,
            5,
            6 ],
          2017:[ 5,
            26,
            5,
            26 ],
          2018:[ 5,
            11,
            5,
            11 ],
          2019:[ 5,
            31,
            5,
            31 ],
          2020:[ 5,
            22,
            5,
            22 ],
          2021:[ 5,
            14,
            5,
            14 ],
          2022:[ 5,
            27,
            5,
            27 ],
          2023:[ 5,
            19,
            5,
            20 ],
          2024:[ 5,
            10,
            5,
            11 ],
          2025:[ 5,
            30,
            5,
            30 ],
          name:"Pfingstferien" },
        { 2012:[ 6,
            25,
            8,
            4 ],
          2013:[ 6,
            24,
            8,
            3 ],
          2014:[ 7,
            14,
            8,
            23 ],
          2015:[ 7,
            20,
            8,
            29 ],
          2016:[ 7,
            25,
            9,
            3 ],
          2017:[ 7,
            24,
            9,
            2 ],
          2018:[ 7,
            9,
            8,
            18 ],
          2019:[ 7,
            1,
            8,
            10 ],
          2020:[ 6,
            29,
            8,
            8 ],
          2021:[ 6,
            21,
            7,
            31 ],
          2022:[ 7,
            4,
            8,
            13 ],
          2023:[ 7,
            17,
            8,
            26 ],
          2024:[ 7,
            22,
            8,
            31 ],
          2025:[ 7,
            28,
            9,
            6 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            4,
            10,
            19 ],
          2013:[ 10,
            4,
            10,
            18 ],
          2014:[ 10,
            13,
            10,
            25 ],
          2015:[ 10,
            19,
            10,
            31 ],
          2016:[ 10,
            17,
            10,
            29 ],
          2017:[ 10,
            16,
            10,
            27 ],
          2018:[ 10,
            1,
            10,
            19 ],
          2019:[ 10,
            4,
            10,
            18 ],
          2020:[ 10,
            5,
            10,
            17 ],
          2021:[ 10,
            4,
            10,
            16 ],
          2022:[ 10,
            10,
            10,
            21 ],
          2023:[ 10,
            16,
            10,
            27 ],
          2024:[ 10,
            4,
            10,
            4,
            10,
            21,
            11,
            1 ],
          2025:[ 10,
            20,
            10,
            30,
            11,
            28,
            11,
            28 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            6 ],
          2012:[ 12,
            24,
            1,
            5 ],
          2013:[ 12,
            23,
            1,
            6 ],
          2014:[ 12,
            22,
            1,
            6 ],
          2015:[ 12,
            21,
            1,
            6 ],
          2016:[ 12,
            23,
            1,
            6 ],
          2017:[ 12,
            21,
            1,
            6 ],
          2018:[ 12,
            21,
            1,
            4 ],
          2019:[ 12,
            23,
            1,
            6 ],
          2020:[ 12,
            21,
            1,
            6 ],
          2021:[ 12,
            23,
            1,
            8 ],
          2022:[ 12,
            23,
            1,
            7 ],
          2023:[ 12,
            27,
            1,
            6 ],
          2024:[ 12,
            19,
            1,
            7 ],
          2025:[ 12,
            19,
            1,
            6 ],
          name:"Weihnachtsferien" },
        { 2024:[  ],
          2025:[ 2,
            3,
            2,
            3 ],
          name:"Winterferien" } ] },
    "Thüringen":{ _state_code:"th",
      SH:[ { 2012:[ 2,
            6,
            2,
            11 ],
          2013:[ 2,
            18,
            2,
            23 ],
          2014:[ 2,
            17,
            2,
            22 ],
          2015:[ 2,
            2,
            2,
            7 ],
          2016:[ 2,
            1,
            2,
            6 ],
          2017:[ 2,
            6,
            2,
            11 ],
          2018:[ 2,
            5,
            2,
            9 ],
          2019:[ 2,
            11,
            2,
            15 ],
          2020:[ 2,
            10,
            2,
            14 ],
          2021:[ 2,
            8,
            2,
            13 ],
          2022:[ 2,
            12,
            2,
            19 ],
          2023:[ 2,
            13,
            2,
            17 ],
          2024:[ 2,
            12,
            2,
            16 ],
          2025:[ 2,
            3,
            2,
            8 ],
          name:"Winterferien" },
        { 2012:[ 4,
            2,
            4,
            13 ],
          2013:[ 3,
            25,
            4,
            6 ],
          2014:[ 4,
            19,
            5,
            2 ],
          2015:[ 3,
            30,
            4,
            11 ],
          2016:[ 3,
            24,
            4,
            2 ],
          2017:[ 4,
            10,
            4,
            21 ],
          2018:[ 3,
            26,
            4,
            7 ],
          2019:[ 4,
            15,
            4,
            27 ],
          2020:[ 4,
            6,
            4,
            18 ],
          2021:[ 3,
            29,
            4,
            10 ],
          2022:[ 4,
            11,
            4,
            23 ],
          2023:[ 4,
            3,
            4,
            15 ],
          2024:[ 3,
            25,
            4,
            6 ],
          2025:[ 4,
            7,
            4,
            19 ],
          name:"Osterferien" },
        { 2012:[ 5,
            25,
            5,
            29 ],
          2013:[ 5,
            10,
            5,
            10 ],
          2014:[ 5,
            30,
            5,
            30 ],
          2015:[ 5,
            15,
            5,
            15 ],
          2016:[ 5,
            6,
            5,
            6 ],
          2017:[ 5,
            26,
            5,
            26 ],
          2018:[ 5,
            11,
            5,
            11 ],
          2019:[ 5,
            31,
            5,
            31 ],
          2020:[ 5,
            22,
            5,
            22 ],
          2021:[ 5,
            14,
            5,
            14 ],
          2022:[ 5,
            27,
            5,
            27 ],
          2023:[ 5,
            19,
            5,
            19 ],
          2024:[ 5,
            10,
            5,
            10 ],
          2025:[ 5,
            30,
            5,
            30 ],
          name:"Pfingstferien" },
        { 2012:[ 7,
            23,
            8,
            31 ],
          2013:[ 7,
            15,
            8,
            23 ],
          2014:[ 7,
            21,
            8,
            29 ],
          2015:[ 7,
            13,
            8,
            21 ],
          2016:[ 6,
            27,
            8,
            10 ],
          2017:[ 6,
            26,
            8,
            9 ],
          2018:[ 7,
            2,
            8,
            11 ],
          2019:[ 7,
            8,
            8,
            17 ],
          2020:[ 7,
            20,
            8,
            29 ],
          2021:[ 7,
            26,
            9,
            4 ],
          2022:[ 7,
            18,
            8,
            27 ],
          2023:[ 7,
            10,
            8,
            19 ],
          2024:[ 6,
            20,
            7,
            31 ],
          2025:[ 6,
            28,
            8,
            8 ],
          name:"Sommerferien" },
        { 2012:[ 10,
            22,
            11,
            3 ],
          2013:[ 10,
            21,
            11,
            2 ],
          2014:[ 10,
            6,
            10,
            18 ],
          2015:[ 10,
            5,
            10,
            17 ],
          2016:[ 10,
            10,
            10,
            22 ],
          2017:[ 10,
            2,
            10,
            14 ],
          2018:[ 10,
            1,
            10,
            13 ],
          2019:[ 10,
            7,
            10,
            19 ],
          2020:[ 10,
            17,
            10,
            30 ],
          2021:[ 10,
            25,
            11,
            6 ],
          2022:[ 10,
            17,
            10,
            29 ],
          2023:[ 10,
            2,
            10,
            14 ],
          2024:[ 9,
            30,
            10,
            12 ],
          2025:[ 10,
            6,
            10,
            18 ],
          name:"Herbstferien" },
        { 2011:[ 12,
            23,
            1,
            1 ],
          2012:[ 12,
            24,
            1,
            5 ],
          2013:[ 12,
            23,
            1,
            4 ],
          2014:[ 12,
            22,
            1,
            3 ],
          2015:[ 12,
            23,
            1,
            2 ],
          2016:[ 12,
            23,
            12,
            31 ],
          2017:[ 12,
            22,
            1,
            5 ],
          2018:[ 12,
            21,
            1,
            4 ],
          2019:[ 12,
            21,
            1,
            3 ],
          2020:[ 12,
            23,
            1,
            2 ],
          2021:[ 12,
            23,
            12,
            31 ],
          2022:[ 12,
            22,
            1,
            3 ],
          2023:[ 12,
            22,
            1,
            5 ],
          2024:[ 12,
            23,
            1,
            3 ],
          2025:[ 12,
            22,
            1,
            3 ],
          name:"Weihnachtsferien" } ] } };
  data$t.PH;
  data$t.Bayern;
  data$t.Berlin;
  data$t.Brandenburg;
  data$t.Bremen;
  data$t.Hamburg;
  data$t.Hessen;
  data$t.Niedersachsen;
  data$t.Saarland;
  data$t.Sachsen;

  var data$s = { PH:[ { name:"Nytårsdag",
        fixed_date:[ 1,
          1 ] },
      { name:"Skærtorsdag",
        variable_date:"easter",
        offset:-3 },
      { name:"Langfredag",
        variable_date:"easter",
        offset:-2 },
      { name:"Påskedag",
        variable_date:"easter" },
      { name:"2. Påskedag",
        variable_date:"easter",
        offset:1 },
      { name:"Store Bededag",
        variable_date:"easter",
        offset:26 },
      { name:"Kristi Himmelfartsdag",
        variable_date:"easter",
        offset:39 },
      { name:"Pinsedag",
        variable_date:"easter",
        offset:49 },
      { name:"2. Pinsedag",
        variable_date:"easter",
        offset:50 },
      { name:"Grundlovsdag",
        fixed_date:[ 6,
          5 ] },
      { name:"Juleaftensdag",
        fixed_date:[ 12,
          24 ] },
      { name:"Juledag",
        fixed_date:[ 12,
          25 ] },
      { name:"2. Juledag",
        fixed_date:[ 12,
          26 ] } ] };
  data$s.PH;

  var data$r = { PH:[ { name:"Cap d'Any",
        fixed_date:[ 1,
          1 ],
        only_states:[ "Cataluña" ] },
      { name:"Año Nuevo",
        fixed_date:[ 1,
          1 ] },
      { name:"Reis",
        fixed_date:[ 1,
          6 ],
        only_states:[ "Cataluña" ] },
      { name:"Epifanía del Señor",
        fixed_date:[ 1,
          6 ] },
      { name:"Día de Andalucía",
        fixed_date:[ 2,
          28 ],
        only_states:[ "Andalucía" ] },
      { name:"Dia de les Illes Balears",
        fixed_date:[ 3,
          1 ],
        only_states:[ "Islas Baleares" ] },
      { name:"Sant Josep",
        fixed_date:[ 3,
          19 ],
        only_states:[ "Comunidad Valenciana" ] },
      { name:"San José",
        fixed_date:[ 3,
          19 ],
        only_states:[ "Murcia" ] },
      { name:"Jueve Santo",
        variable_date:"easter",
        offset:-3,
        only_states:[ "Andalucía",
          "Aragón",
          "Castilla y León",
          "Castilla-La Mancha",
          "Canarias",
          "Extremadura",
          "Galicia",
          "Islas Baleares",
          "La Rioja",
          "Comunidad de Madrid",
          "Región de Murcia",
          "Navarra",
          "Asturias",
          "País Vasco",
          "Cantabria",
          "Ceuta",
          "Melilla" ] },
      { name:"Divendres Sant",
        variable_date:"easter",
        offset:-2,
        only_states:[ "Cataluña",
          "Comunidad Valenciana",
          "Islas Baleares" ] },
      { name:"Viernes Santo",
        variable_date:"easter",
        offset:-2 },
      { name:"Dilluns de Pasqua Florida",
        variable_date:"easter",
        offset:1,
        only_states:[ "Cataluña",
          "Comunidad Valenciana",
          "Islas Baleares" ] },
      { name:"Lunes de Pascua de Resurrección",
        variable_date:"easter",
        offset:1,
        only_states:[ "País Vasco",
          "Navarra" ] },
      { name:"Día de Aragón",
        fixed_date:[ 4,
          23 ],
        only_states:[ "Aragón" ] },
      { name:"Día de Castilla y León",
        fixed_date:[ 4,
          23 ],
        only_states:[ "Castilla y León" ] },
      { name:"Festa del Treball",
        fixed_date:[ 5,
          1 ],
        only_states:[ "Cataluña",
          "Comunidad Valenciana",
          "Islas Baleares" ] },
      { name:"Fiesta del Trabajo",
        fixed_date:[ 5,
          1 ] },
      { name:"Fiesta de la Comunidad de Madrid",
        fixed_date:[ 5,
          2 ],
        only_states:[ "Comunidad de Madrid" ] },
      { name:"Día das Letras Galegas",
        fixed_date:[ 5,
          2 ],
        only_states:[ "Galicia" ] },
      { name:"Día de Canarias",
        fixed_date:[ 5,
          30 ],
        only_states:[ "Canarias" ] },
      { name:"Día de la Región Castilla-La Mancha",
        fixed_date:[ 5,
          31 ],
        only_states:[ "Castilla-La Mancha" ] },
      { name:"Día de la Región de Murcia",
        fixed_date:[ 6,
          9 ],
        only_states:[ "Región de Murcia" ] },
      { name:"Día de la Rioja",
        fixed_date:[ 6,
          9 ],
        only_states:[ "La Rioja" ] },
      { name:"San Antonio",
        fixed_date:[ 6,
          13 ],
        only_states:[ "Ceuta" ] },
      { name:"Sant Joan",
        fixed_date:[ 6,
          24 ],
        only_states:[ "Cataluña" ] },
      { name:"San Juan",
        fixed_date:[ 6,
          24 ],
        only_states:[ "Ceuta" ] },
      { name:"Santiago Apóstol",
        fixed_date:[ 7,
          25 ],
        only_states:[ "Galicia" ] },
      { name:"Santa María de África",
        fixed_date:[ 8,
          6 ],
        only_states:[ "Ceuta" ] },
      { name:"l'Assumpció",
        fixed_date:[ 8,
          15 ],
        only_states:[ "Cataluña" ] },
      { name:"Asunción de la Virgen",
        fixed_date:[ 8,
          15 ] },
      { name:"Día de Ceuta",
        fixed_date:[ 9,
          2 ],
        only_states:[ "Ceuta" ] },
      { name:"Día de Asturias",
        fixed_date:[ 9,
          8 ],
        only_states:[ "Asturias" ] },
      { name:"Día de Extremadura",
        fixed_date:[ 9,
          8 ],
        only_states:[ "Extremadura" ] },
      { name:"Diada Nacional de Catalunya",
        fixed_date:[ 9,
          11 ],
        only_states:[ "Cataluña" ] },
      { name:"Día de Cantabria",
        fixed_date:[ 9,
          17 ],
        only_states:[ "Cantabria" ] },
      { name:"Día de Melilla",
        fixed_date:[ 9,
          15 ],
        only_states:[ "Melilla" ] },
      { name:"Dia de la Comunitat Valenciana",
        fixed_date:[ 10,
          9 ],
        only_states:[ "Comunidad Valenciana" ] },
      { name:"Festa Nacional d'Espanya",
        fixed_date:[ 10,
          12 ],
        only_states:[ "Cataluña" ] },
      { name:"Fiesta Nacional de España",
        fixed_date:[ 10,
          12 ] },
      { name:"Euskadi Eguna",
        fixed_date:[ 10,
          25 ],
        only_states:[ "País Vasco" ] },
      { name:"Tots Sants",
        fixed_date:[ 11,
          1 ],
        only_states:[ "Cataluña",
          "Comunidad Valenciana",
          "Islas Baleares" ] },
      { name:"Todos los Santos",
        fixed_date:[ 11,
          1 ] },
      { name:"Día de la Constitución Española",
        fixed_date:[ 12,
          6 ] },
      { name:"La Puríssima",
        fixed_date:[ 12,
          8 ],
        only_states:[ "Cataluña",
          "Comunidad Valenciana",
          "Islas Baleares" ] },
      { name:"La Immaculada Concepción",
        fixed_date:[ 12,
          8 ] },
      { name:"Nadal",
        fixed_date:[ 12,
          25 ],
        only_states:[ "Cataluña",
          "Comunidad Valenciana",
          "Islas Baleares" ] },
      { name:"Natividad del Señor",
        fixed_date:[ 12,
          25 ] },
      { name:"Sant Esteve",
        fixed_date:[ 12,
          26 ],
        only_states:[ "Cataluña" ] } ],
    "Andalucía":{ _state_code:"an" },
    "Aragón":{ _state_code:"ar" },
    "Castilla y León":{ _state_code:"cl" },
    "Castilla-La Mancha":{ _state_code:"cm" },
    Canarias:{ _state_code:"cn" },
    "Cataluña":{ _state_code:"ct" },
    Extremadura:{ _state_code:"ex" },
    Galicia:{ _state_code:"ga" },
    "Islas Baleares":{ _state_code:"ib" },
    "La Rioja":{ _state_code:"ri" },
    "Comunidad de Madrid":{ _state_code:"md" },
    "Región de Murcia":{ _state_code:"mc" },
    Navarra:{ _state_code:"nc" },
    Asturias:{ _state_code:"as" },
    "País Vasco":{ _state_code:"pv" },
    Cantabria:{ _state_code:"cb" },
    "Comunidad Valenciana":{ _state_code:"vc" },
    Ceuta:{ _state_code:"ce" },
    Melilla:{ _state_code:"ml" } };
  data$r.PH;
  data$r.Canarias;
  data$r.Extremadura;
  data$r.Galicia;
  data$r.Navarra;
  data$r.Asturias;
  data$r.Cantabria;
  data$r.Ceuta;
  data$r.Melilla;

  var data$q = { PH:[ { name:"uudenvuodenpäivä - nyårsdagen",
        fixed_date:[ 1,
          1 ] },
      { name:"loppiainen - trettondedagen",
        fixed_date:[ 1,
          6 ] },
      { name:"pitkäperjantai - långfredagen",
        variable_date:"easter",
        offset:-2 },
      { name:"pääsiäispäivä - påskdagen",
        variable_date:"easter" },
      { name:"toinen pääsiäispäivä - annandag påsk",
        variable_date:"easter",
        offset:1 },
      { name:"vappu - första maj",
        fixed_date:[ 5,
          1 ] },
      { name:"helatorstai - Kristi himmelsfärdsdag",
        variable_date:"easter",
        offset:39 },
      { name:"helluntai - pingst",
        variable_date:"easter",
        offset:49 },
      { name:"juhannuspäivä - midsommardagen",
        variable_date:"nextSaturday20Jun" },
      { name:"pyhäinpäivä - alla helgons dag",
        variable_date:"nextSaturday31Oct" },
      { name:"itsenäisyyspäivä - självständighetsdagen",
        fixed_date:[ 12,
          6 ] },
      { name:"joulupäivä - juldagen",
        fixed_date:[ 12,
          25 ] },
      { name:"toinen joulupäivä - annandag jul",
        fixed_date:[ 12,
          26 ] } ] };
  data$q.PH;

  var data$p = { PH:[ { name:"Jour de l'an",
        fixed_date:[ 1,
          1 ] },
      { name:"Vendredi saint",
        variable_date:"easter",
        offset:-2,
        only_states:[ "Moselle",
          "Bas-Rhin",
          "Haut-Rhin",
          "Guadeloupe",
          "Martinique",
          "Polynésie française" ] },
      { name:"Lundi de Pâques",
        variable_date:"easter",
        offset:1 },
      { name:"Abolition de l'esclavage (Mayotte)",
        fixed_date:[ 4,
          27 ],
        only_states:[ "Mayotte" ] },
      { name:"Saint-Pierre-Chanel",
        fixed_date:[ 4,
          28 ],
        only_states:[ "Wallis-et-Futuna" ] },
      { name:"Fête du Travail",
        fixed_date:[ 5,
          1 ] },
      { name:"Fête de la Victoire",
        fixed_date:[ 5,
          8 ] },
      { name:"Abolition de l'esclavage (Martinique)",
        fixed_date:[ 5,
          22 ],
        only_states:[ "Martinique" ] },
      { name:"Abolition de l'esclavage (Guadeloupe)",
        fixed_date:[ 5,
          27 ],
        only_states:[ "Guadeloupe" ] },
      { name:"Abolition de l'esclavage (Saint-Martin)",
        fixed_date:[ 5,
          28 ],
        only_states:[ "Saint-Martin (France)" ] },
      { name:"Jeudi de l'Ascension",
        variable_date:"easter",
        offset:39 },
      { name:"Lundi de Pentecôte",
        variable_date:"easter",
        offset:50 },
      { name:"Abolition de l'esclavage (Guyane)",
        fixed_date:[ 6,
          10 ],
        only_states:[ "Guyane" ] },
      { name:"Fête de l'autonomie",
        fixed_date:[ 6,
          29 ],
        only_states:[ "Polynésie française" ] },
      { name:"Fête nationale",
        fixed_date:[ 7,
          14 ] },
      { name:"Fête Victor Schoelcher",
        fixed_date:[ 7,
          21 ],
        only_states:[ "Guadeloupe",
          "Martinique" ] },
      { name:"Fête du Territoire",
        fixed_date:[ 7,
          29 ],
        only_states:[ "Wallis-et-Futuna" ] },
      { name:"Assomption",
        fixed_date:[ 8,
          15 ] },
      { name:"Fête de la citoyenneté",
        fixed_date:[ 9,
          24 ],
        only_states:[ "Nouvelle-Calédonie" ] },
      { name:"Abolition de l'esclavage (Saint-Barthélemy)",
        fixed_date:[ 10,
          9 ],
        only_states:[ "Saint-Barthélemy" ] },
      { name:"Toussaint",
        fixed_date:[ 11,
          1 ] },
      { name:"Armistice",
        fixed_date:[ 11,
          11 ] },
      { name:"Abolition de l'esclavage (Réunion)",
        fixed_date:[ 12,
          20 ],
        only_states:[ "Réunion" ] },
      { name:"Noël",
        fixed_date:[ 12,
          25 ] },
      { name:"Saint-Étienne ",
        fixed_date:[ 12,
          26 ],
        only_states:[ "Moselle",
          "Bas-Rhin",
          "Haut-Rhin" ] } ],
    "Auvergne-Rhône-Alpes":{ _state_code:"ara",
      SH:[ { 2018:[ 2,
            11,
            2,
            25 ],
          2019:[ 2,
            17,
            3,
            3 ],
          2020:[ 2,
            23,
            3,
            8 ],
          2021:[ 2,
            7,
            2,
            21 ],
          2022:[ 2,
            12,
            2,
            27 ],
          2023:[ 2,
            4,
            2,
            19 ],
          2024:[ 2,
            17,
            3,
            3 ],
          2025:[ 2,
            22,
            3,
            9 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            8,
            4,
            22 ],
          2019:[ 4,
            14,
            4,
            28 ],
          2020:[ 4,
            19,
            5,
            3 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            16,
            5,
            1 ],
          2023:[ 4,
            8,
            4,
            23 ],
          2024:[ 4,
            13,
            4,
            28 ],
          2025:[ 4,
            19,
            5,
            4 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    "Bourgogne-Franche-Comté":{ _state_code:"bfc",
      SH:[ { 2018:[ 2,
            11,
            2,
            25 ],
          2019:[ 2,
            17,
            3,
            3 ],
          2020:[ 2,
            23,
            3,
            8 ],
          2021:[ 2,
            7,
            2,
            21 ],
          2022:[ 2,
            12,
            2,
            27 ],
          2023:[ 2,
            4,
            2,
            19 ],
          2024:[ 2,
            17,
            3,
            3 ],
          2025:[ 2,
            22,
            3,
            9 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            8,
            4,
            22 ],
          2019:[ 4,
            14,
            4,
            28 ],
          2020:[ 4,
            19,
            5,
            3 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            16,
            5,
            1 ],
          2023:[ 4,
            8,
            4,
            23 ],
          2024:[ 4,
            13,
            4,
            28 ],
          2025:[ 4,
            19,
            5,
            4 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    "Nouvelle-Aquitaine":{ _state_code:"naq",
      SH:[ { 2018:[ 2,
            11,
            2,
            25 ],
          2019:[ 2,
            17,
            3,
            3 ],
          2020:[ 2,
            23,
            3,
            8 ],
          2021:[ 2,
            7,
            2,
            21 ],
          2022:[ 2,
            12,
            2,
            27 ],
          2023:[ 2,
            4,
            2,
            19 ],
          2024:[ 2,
            17,
            3,
            3 ],
          2025:[ 2,
            22,
            3,
            9 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            8,
            4,
            22 ],
          2019:[ 4,
            14,
            4,
            28 ],
          2020:[ 4,
            19,
            5,
            3 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            16,
            5,
            1 ],
          2023:[ 4,
            8,
            4,
            23 ],
          2024:[ 4,
            13,
            4,
            28 ],
          2025:[ 4,
            19,
            5,
            4 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    Bretagne:{ _state_code:"bre",
      SH:[ { 2018:[ 2,
            25,
            3,
            11 ],
          2019:[ 2,
            10,
            2,
            24 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            21,
            3,
            7 ],
          2022:[ 2,
            5,
            2,
            20 ],
          2023:[ 2,
            11,
            2,
            26 ],
          2024:[ 2,
            24,
            3,
            10 ],
          2025:[ 2,
            8,
            2,
            23 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            22,
            5,
            6 ],
          2019:[ 4,
            7,
            4,
            22 ],
          2020:[ 4,
            12,
            4,
            26 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            9,
            4,
            24 ],
          2023:[ 4,
            15,
            5,
            1 ],
          2024:[ 4,
            20,
            5,
            5 ],
          2025:[ 4,
            5,
            4,
            21 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    "Centre-Val de Loire":{ _state_code:"cvl",
      SH:[ { 2018:[ 2,
            25,
            3,
            11 ],
          2019:[ 2,
            10,
            2,
            24 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            21,
            3,
            7 ],
          2022:[ 2,
            5,
            2,
            20 ],
          2023:[ 2,
            11,
            2,
            26 ],
          2024:[ 2,
            24,
            3,
            10 ],
          2025:[ 2,
            8,
            2,
            23 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            22,
            5,
            6 ],
          2019:[ 4,
            7,
            4,
            22 ],
          2020:[ 4,
            12,
            4,
            26 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            9,
            4,
            24 ],
          2023:[ 4,
            15,
            5,
            1 ],
          2024:[ 4,
            20,
            5,
            5 ],
          2025:[ 4,
            5,
            4,
            21 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    "Grand Est":{ _state_code:"ges",
      SH:[ { 2018:[ 2,
            25,
            3,
            11 ],
          2019:[ 2,
            10,
            2,
            24 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            21,
            3,
            7 ],
          2022:[ 2,
            5,
            2,
            20 ],
          2023:[ 2,
            11,
            2,
            26 ],
          2024:[ 2,
            24,
            3,
            10 ],
          2025:[ 2,
            8,
            2,
            23 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            22,
            5,
            6 ],
          2019:[ 4,
            7,
            4,
            22 ],
          2020:[ 4,
            12,
            4,
            26 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            9,
            4,
            24 ],
          2023:[ 4,
            15,
            5,
            1 ],
          2024:[ 4,
            20,
            5,
            5 ],
          2025:[ 4,
            5,
            4,
            21 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    "Hauts-de-France":{ _state_code:"hdf",
      SH:[ { 2018:[ 2,
            25,
            3,
            11 ],
          2019:[ 2,
            10,
            2,
            24 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            21,
            3,
            7 ],
          2022:[ 2,
            5,
            2,
            20 ],
          2023:[ 2,
            11,
            2,
            26 ],
          2024:[ 2,
            24,
            3,
            10 ],
          2025:[ 2,
            8,
            2,
            23 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            22,
            5,
            6 ],
          2019:[ 4,
            7,
            4,
            22 ],
          2020:[ 4,
            12,
            4,
            26 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            9,
            4,
            24 ],
          2023:[ 4,
            15,
            5,
            1 ],
          2024:[ 4,
            20,
            5,
            5 ],
          2025:[ 4,
            5,
            4,
            21 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    Normandie:{ _state_code:"nor",
      SH:[ { 2018:[ 2,
            25,
            3,
            11 ],
          2019:[ 2,
            10,
            2,
            24 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            21,
            3,
            7 ],
          2022:[ 2,
            5,
            2,
            20 ],
          2023:[ 2,
            11,
            2,
            26 ],
          2024:[ 2,
            24,
            3,
            10 ],
          2025:[ 2,
            8,
            2,
            23 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            22,
            5,
            6 ],
          2019:[ 4,
            7,
            4,
            22 ],
          2020:[ 4,
            12,
            4,
            26 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            9,
            4,
            24 ],
          2023:[ 4,
            15,
            5,
            1 ],
          2024:[ 4,
            20,
            5,
            5 ],
          2025:[ 4,
            5,
            4,
            21 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    "Pays de la Loire":{ _state_code:"pdl",
      SH:[ { 2018:[ 2,
            25,
            3,
            11 ],
          2019:[ 2,
            10,
            2,
            24 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            21,
            3,
            7 ],
          2022:[ 2,
            5,
            2,
            20 ],
          2023:[ 2,
            11,
            2,
            26 ],
          2024:[ 2,
            24,
            3,
            10 ],
          2025:[ 2,
            8,
            2,
            23 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            22,
            5,
            6 ],
          2019:[ 4,
            7,
            4,
            22 ],
          2020:[ 4,
            12,
            4,
            26 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            9,
            4,
            24 ],
          2023:[ 4,
            15,
            5,
            1 ],
          2024:[ 4,
            20,
            5,
            5 ],
          2025:[ 4,
            5,
            4,
            21 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    "Provence-Alpes-Côte d'Azur":{ _state_code:"pac",
      SH:[ { 2018:[ 2,
            25,
            3,
            11 ],
          2019:[ 2,
            10,
            2,
            24 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            21,
            3,
            7 ],
          2022:[ 2,
            5,
            2,
            20 ],
          2023:[ 2,
            11,
            2,
            26 ],
          2024:[ 2,
            24,
            3,
            10 ],
          2025:[ 2,
            8,
            2,
            23 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            22,
            5,
            6 ],
          2019:[ 4,
            7,
            4,
            22 ],
          2020:[ 4,
            12,
            4,
            26 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            9,
            4,
            24 ],
          2023:[ 4,
            15,
            5,
            1 ],
          2024:[ 4,
            20,
            5,
            5 ],
          2025:[ 4,
            5,
            4,
            21 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    "Île-de-France":{ _state_code:"idf",
      SH:[ { 2018:[ 2,
            18,
            3,
            4 ],
          2019:[ 2,
            24,
            3,
            10 ],
          2020:[ 2,
            9,
            2,
            23 ],
          2021:[ 2,
            14,
            2,
            28 ],
          2022:[ 2,
            19,
            3,
            6 ],
          2023:[ 2,
            18,
            3,
            5 ],
          2024:[ 2,
            10,
            2,
            25 ],
          2025:[ 2,
            15,
            3,
            2 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            15,
            4,
            29 ],
          2019:[ 4,
            21,
            5,
            5 ],
          2020:[ 4,
            5,
            4,
            19 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            23,
            5,
            8 ],
          2023:[ 4,
            22,
            5,
            8 ],
          2024:[ 4,
            6,
            4,
            21 ],
          2025:[ 4,
            12,
            4,
            27 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    Occitanie:{ _state_code:"occ",
      SH:[ { 2018:[ 2,
            18,
            3,
            4 ],
          2019:[ 2,
            24,
            3,
            10 ],
          2020:[ 2,
            9,
            2,
            23 ],
          2021:[ 2,
            14,
            2,
            28 ],
          2022:[ 2,
            19,
            3,
            6 ],
          2023:[ 2,
            18,
            3,
            5 ],
          2024:[ 2,
            10,
            2,
            25 ],
          2025:[ 2,
            15,
            3,
            2 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            15,
            4,
            29 ],
          2019:[ 4,
            21,
            5,
            5 ],
          2020:[ 4,
            5,
            4,
            19 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            23,
            5,
            8 ],
          2023:[ 4,
            22,
            5,
            8 ],
          2024:[ 4,
            6,
            4,
            21 ],
          2025:[ 4,
            12,
            4,
            27 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          2024:[ 5,
            8,
            5,
            12 ],
          2025:[ 2,
            18,
            6,
            1 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            5,
            9,
            1 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          2024:[ 7,
            6,
            9,
            1 ],
          2025:[ 7,
            5,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          2023:[ 10,
            21,
            11,
            5 ],
          2024:[ 10,
            19,
            11,
            3 ],
          2025:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          2021:[ 12,
            19,
            1,
            2 ],
          2022:[ 12,
            17,
            1,
            2 ],
          2023:[ 12,
            23,
            1,
            7 ],
          2024:[ 12,
            21,
            1,
            5 ],
          2025:[ 12,
            20,
            1,
            4 ],
          name:"Vacances de Noël" } ] },
    Corse:{ _state_code:"cor",
      SH:[ { 2018:[ 2,
            27,
            3,
            11 ],
          2019:[ 2,
            24,
            3,
            10 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            14,
            2,
            28 ],
          2022:[ 2,
            19,
            3,
            6 ],
          2023:[ 2,
            18,
            3,
            5 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            24,
            5,
            6 ],
          2019:[ 4,
            21,
            5,
            5 ],
          2020:[ 4,
            19,
            5,
            3 ],
          2021:[ 4,
            11,
            4,
            25 ],
          2022:[ 4,
            23,
            5,
            8 ],
          2023:[ 4,
            15,
            5,
            1 ],
          name:"Vacances de Printemps" },
        { 2018:[ 5,
            10,
            5,
            10 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            14,
            5,
            16 ],
          2023:[ 5,
            17,
            5,
            21 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            11,
            9,
            4 ],
          2019:[ 7,
            7,
            9,
            2 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            8,
            8,
            30 ],
          2022:[ 7,
            8,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            24,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            1 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          name:"Vacances de Noël" } ] },
    Guadeloupe:{ _state_code:"gua",
      SH:[ { 2018:[ 2,
            9,
            2,
            21 ],
          2019:[ 2,
            24,
            3,
            10 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            10,
            2,
            21 ],
          2022:[ 2,
            19,
            3,
            6 ],
          2023:[ 2,
            11,
            2,
            26 ],
          name:"Vacances de Carnaval" },
        { 2018:[ 3,
            25,
            4,
            8 ],
          2019:[ 4,
            19,
            5,
            1 ],
          2020:[ 4,
            9,
            4,
            22 ],
          2021:[ 3,
            28,
            4,
            11 ],
          2022:[ 4,
            13,
            4,
            24 ],
          2023:[ 4,
            1,
            4,
            16 ],
          name:"Vacances de Pâques" },
        { 2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            28,
            5,
            29 ],
          2022:[ 5,
            27,
            5,
            27 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            7,
            9,
            3 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            6,
            8,
            30 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          name:"Grandes Vacances" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          name:"Vacances de Noël" } ] },
    "Saint-Martin (France)":{ _state_code:"mf",
      SH:[ { 2018:[ 2,
            9,
            2,
            21 ],
          2019:[ 2,
            24,
            3,
            10 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            10,
            2,
            21 ],
          2023:[ 2,
            11,
            2,
            26 ],
          name:"Vacances de Carnaval" },
        { 2018:[ 3,
            25,
            4,
            8 ],
          2019:[ 4,
            19,
            5,
            1 ],
          2020:[ 4,
            9,
            4,
            22 ],
          2021:[ 3,
            28,
            4,
            11 ],
          2023:[ 4,
            1,
            4,
            16 ],
          name:"Vacances de Pâques" },
        { 2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            25,
            5,
            27 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            7,
            9,
            3 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            6,
            8,
            30 ],
          2023:[ 7,
            8,
            9,
            3 ],
          name:"Grandes Vacances" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          name:"Vacances de Noël" } ] },
    "Saint-Barthélemy":{ _state_code:"bl",
      SH:[ { 2018:[ 2,
            9,
            2,
            21 ],
          2019:[ 2,
            24,
            3,
            10 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            10,
            2,
            21 ],
          2023:[ 2,
            11,
            2,
            26 ],
          name:"Vacances de Carnaval" },
        { 2018:[ 3,
            25,
            4,
            8 ],
          2019:[ 4,
            19,
            5,
            1 ],
          2020:[ 4,
            9,
            4,
            22 ],
          2021:[ 3,
            28,
            4,
            11 ],
          2023:[ 4,
            1,
            4,
            16 ],
          name:"Vacances de Pâques" },
        { 2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            7,
            9,
            3 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            6,
            8,
            30 ],
          2023:[ 7,
            8,
            9,
            3 ],
          name:"Grandes Vacances" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            18,
            11,
            2 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            6 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          name:"Vacances de Noël" } ] },
    Guyane:{ _state_code:"guf",
      SH:[ { 2018:[ 2,
            11,
            2,
            25 ],
          2019:[ 2,
            24,
            3,
            10 ],
          2020:[ 2,
            16,
            3,
            1 ],
          2021:[ 2,
            14,
            2,
            28 ],
          2022:[ 2,
            19,
            3,
            6 ],
          2023:[ 2,
            18,
            3,
            5 ],
          name:"Vacances de Carnaval" },
        { 2018:[ 3,
            30,
            4,
            15 ],
          2019:[ 4,
            19,
            5,
            1 ],
          2020:[ 4,
            10,
            4,
            26 ],
          2021:[ 4,
            2,
            4,
            18 ],
          2022:[ 4,
            14,
            5,
            1 ],
          2023:[ 4,
            5,
            4,
            19 ],
          name:"Vacances de Pâques" },
        { 2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            13,
            5,
            16 ],
          2022:[ 5,
            25,
            5,
            29 ],
          2023:[ 5,
            13,
            5,
            21 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            9,
            2 ],
          2019:[ 7,
            9,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            4,
            8,
            31 ],
          2022:[ 7,
            9,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          name:"Grandes Vacances" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            25,
            11,
            8 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            5 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          name:"Vacances de Noël" } ] },
    Martinique:{ _state_code:"mtq",
      SH:[ { 2018:[ 2,
            8,
            2,
            18 ],
          2019:[ 2,
            24,
            3,
            10 ],
          2020:[ 2,
            23,
            3,
            8 ],
          2021:[ 2,
            7,
            2,
            21 ],
          2022:[ 2,
            19,
            3,
            6 ],
          2023:[ 2,
            11,
            2,
            26 ],
          name:"Vacances de Carnaval" },
        { 2018:[ 3,
            25,
            4,
            8 ],
          2019:[ 4,
            14,
            4,
            28 ],
          2020:[ 4,
            5,
            4,
            19 ],
          2021:[ 3,
            28,
            4,
            11 ],
          2022:[ 4,
            9,
            4,
            24 ],
          2023:[ 4,
            1,
            4,
            16 ],
          name:"Vacances de Pâques" },
        { 2018:[ 5,
            8,
            5,
            13 ],
          2019:[ 5,
            30,
            6,
            2 ],
          2020:[ 5,
            14,
            5,
            15 ],
          2022:[ 5,
            27,
            5,
            27 ],
          2023:[ 5,
            17,
            5,
            21 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            7,
            9,
            3 ],
          2019:[ 7,
            7,
            9,
            1 ],
          2020:[ 7,
            5,
            8,
            31 ],
          2021:[ 7,
            7,
            8,
            30 ],
          2022:[ 7,
            7,
            8,
            31 ],
          2023:[ 7,
            8,
            9,
            3 ],
          name:"Grandes Vacances" },
        { 2018:[ 10,
            21,
            11,
            4 ],
          2019:[ 10,
            20,
            11,
            3 ],
          2020:[ 10,
            25,
            11,
            8 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            23,
            1,
            5 ],
          2019:[ 12,
            22,
            1,
            5 ],
          2020:[ 12,
            20,
            1,
            3 ],
          name:"Vacances de Noël" } ] },
    Mayotte:{ _state_code:"may",
      SH:[ { 2018:[ 2,
            25,
            3,
            11 ],
          2019:[ 2,
            24,
            3,
            10 ],
          2020:[ 3,
            1,
            3,
            15 ],
          2021:[ 2,
            28,
            3,
            14 ],
          2022:[ 2,
            26,
            3,
            13 ],
          2023:[ 2,
            18,
            3,
            5 ],
          name:"Vacances de Carnaval" },
        { 2018:[ 5,
            6,
            5,
            13 ],
          2019:[ 4,
            27,
            5,
            5 ],
          2020:[ 5,
            3,
            5,
            10 ],
          2021:[ 5,
            1,
            5,
            16 ],
          2022:[ 4,
            30,
            5,
            15 ],
          2023:[ 4,
            22,
            5,
            8 ],
          name:"Vacances de Pâques" },
        { 2020:[ 5,
            21,
            5,
            24 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 7,
            8,
            8,
            22 ],
          2019:[ 7,
            7,
            8,
            22 ],
          2020:[ 7,
            5,
            8,
            23 ],
          2021:[ 7,
            7,
            8,
            22 ],
          2022:[ 7,
            6,
            8,
            23 ],
          2023:[ 7,
            8,
            8,
            22 ],
          name:"Grandes Vacances" },
        { 2018:[ 10,
            7,
            10,
            21 ],
          2019:[ 10,
            13,
            10,
            27 ],
          2020:[ 10,
            11,
            10,
            25 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            9,
            1,
            6 ],
          2019:[ 12,
            15,
            1,
            12 ],
          2020:[ 12,
            13,
            1,
            10 ],
          name:"Vacances de Noël" } ] },
    "La Réunion":{ _state_code:"lre",
      SH:[ { 2018:[ 3,
            11,
            3,
            25 ],
          2019:[ 3,
            10,
            3,
            24 ],
          2020:[ 3,
            8,
            3,
            22 ],
          2021:[ 3,
            7,
            3,
            21 ],
          2022:[ 3,
            12,
            3,
            27 ],
          2023:[ 3,
            11,
            3,
            26 ],
          name:"Vacances après 3ème période" },
        { 2018:[ 5,
            6,
            5,
            16 ],
          2019:[ 5,
            8,
            5,
            19 ],
          2020:[ 5,
            1,
            5,
            13 ],
          2021:[ 5,
            5,
            5,
            16 ],
          2022:[ 5,
            14,
            5,
            29 ],
          2023:[ 5,
            13,
            5,
            29 ],
          name:"Vacances après 4ème période" },
        { 2018:[ 7,
            8,
            8,
            16 ],
          2019:[ 7,
            7,
            8,
            15 ],
          2020:[ 7,
            8,
            8,
            15 ],
          2022:[ 7,
            9,
            8,
            15 ],
          2023:[ 7,
            8,
            9,
            16 ],
          name:"Vacances hiver austral" },
        { 2018:[ 10,
            14,
            10,
            28 ],
          2019:[ 10,
            13,
            10,
            27 ],
          2020:[ 10,
            11,
            11,
            25 ],
          name:"Vacances après 1ère période" },
        { 2018:[ 12,
            23,
            1,
            27 ],
          2019:[ 12,
            20,
            1,
            26 ],
          2020:[ 12,
            20,
            1,
            24 ],
          name:"Vacances été austral" } ] },
    "Nouvelle-Calédonie":{ _state_code:"nc",
      SH:[ { 2018:[ 4,
            7,
            4,
            15 ],
          2019:[ 4,
            6,
            4,
            14 ],
          2020:[ 4,
            4,
            4,
            13 ],
          2021:[ 4,
            3,
            4,
            18 ],
          2022:[ 4,
            2,
            4,
            16 ],
          2023:[ 4,
            2,
            4,
            16 ],
          name:"Vacances 1ère période" },
        { 2018:[ 6,
            9,
            6,
            24 ],
          2019:[ 6,
            8,
            6,
            23 ],
          2020:[ 6,
            6,
            6,
            21 ],
          2021:[ 6,
            5,
            6,
            20 ],
          2022:[ 6,
            4,
            6,
            18 ],
          2023:[ 4,
            2,
            4,
            16 ],
          name:"Vacances 2ème période" },
        { 2018:[ 8,
            11,
            8,
            26 ],
          2019:[ 8,
            10,
            8,
            25 ],
          2020:[ 8,
            8,
            8,
            23 ],
          2021:[ 8,
            7,
            8,
            22 ],
          2022:[ 8,
            6,
            8,
            20 ],
          2023:[ 8,
            5,
            8,
            20 ],
          name:"Vacances 3ème période" },
        { 2018:[ 10,
            13,
            10,
            18 ],
          2019:[ 10,
            12,
            10,
            27 ],
          2020:[ 10,
            10,
            10,
            25 ],
          2021:[ 10,
            9,
            10,
            24 ],
          2022:[ 10,
            8,
            10,
            22 ],
          2023:[ 10,
            7,
            10,
            22 ],
          name:"Vacances 4ème période" },
        { 2018:[ 12,
            15,
            2,
            17 ],
          2019:[ 12,
            14,
            2,
            16 ],
          2020:[ 12,
            18,
            2,
            14 ],
          2021:[ 12,
            18,
            2,
            13 ],
          2022:[ 12,
            17,
            2,
            12 ],
          2023:[ 12,
            16,
            2,
            11 ],
          name:"Vacances d'Été" } ] },
    "Polynésie française":{ _state_code:"pf",
      SH:[ { 2018:[ 2,
            18,
            2,
            25 ],
          2019:[ 2,
            17,
            2,
            24 ],
          2020:[ 2,
            16,
            2,
            23 ],
          2021:[ 2,
            21,
            2,
            28 ],
          2022:[ 2,
            19,
            2,
            27 ],
          2023:[ 2,
            19,
            2,
            25 ],
          name:"Vacances de février" },
        { 2018:[ 3,
            30,
            4,
            15 ],
          2019:[ 4,
            7,
            4,
            22 ],
          2020:[ 3,
            29,
            4,
            13 ],
          2021:[ 4,
            6,
            4,
            18 ],
          2022:[ 4,
            2,
            4,
            18 ],
          2023:[ 4,
            2,
            4,
            15 ],
          name:"Vacances d'avril" },
        { 2018:[ 5,
            20,
            5,
            27 ],
          2019:[ 5,
            26,
            6,
            2 ],
          2020:[ 5,
            17,
            5,
            24 ],
          2021:[ 5,
            25,
            5,
            30 ],
          2022:[ 5,
            21,
            5,
            29 ],
          2023:[ 5,
            21,
            5,
            26 ],
          name:"Vacances de mai" },
        { 2018:[ 7,
            7,
            8,
            15 ],
          2019:[ 7,
            7,
            8,
            13 ],
          2020:[ 7,
            5,
            8,
            9 ],
          2021:[ 7,
            3,
            8,
            8 ],
          2022:[ 7,
            2,
            8,
            7 ],
          2023:[ 7,
            2,
            8,
            6 ],
          name:"Grandes Vacances" },
        { 2018:[ 9,
            16,
            9,
            23 ],
          2019:[ 9,
            15,
            9,
            22 ],
          2020:[ 9,
            13,
            9,
            20 ],
          2021:[ 9,
            12,
            9,
            19 ],
          2022:[ 9,
            10,
            9,
            18 ],
          name:"Vacances de septembre" },
        { 2018:[ 10,
            28,
            11,
            11 ],
          2019:[ 10,
            27,
            11,
            11 ],
          2020:[ 10,
            25,
            11,
            8 ],
          2021:[ 10,
            24,
            11,
            7 ],
          2022:[ 10,
            22,
            11,
            6 ],
          name:"Vacances d'octobre-novembre" },
        { 2018:[ 12,
            16,
            1,
            13 ],
          2019:[ 12,
            15,
            1,
            12 ],
          2020:[ 12,
            13,
            1,
            10 ],
          2021:[ 12,
            12,
            1,
            9 ],
          2022:[ 12,
            10,
            1,
            8 ],
          name:"Vacances de Noël" } ] },
    "Saint-Pierre-et-Miquelon":{ _state_code:"pm",
      SH:[ { 2018:[ 2,
            24,
            3,
            11 ],
          2019:[ 2,
            16,
            3,
            3 ],
          2020:[ 2,
            22,
            3,
            8 ],
          2021:[ 2,
            19,
            3,
            7 ],
          name:"Vacances d'Hiver" },
        { 2018:[ 4,
            28,
            5,
            13 ],
          2019:[ 4,
            20,
            5,
            5 ],
          2020:[ 4,
            18,
            5,
            3 ],
          2021:[ 4,
            24,
            5,
            9 ],
          2022:[ 4,
            15,
            5,
            1 ],
          name:"Vacances de Printemps" },
        { 2020:[ 5,
            21,
            5,
            24 ],
          2021:[ 5,
            13,
            5,
            16 ],
          2022:[ 5,
            26,
            5,
            29 ],
          name:"Pont de l'Ascension" },
        { 2018:[ 6,
            30,
            9,
            6 ],
          2019:[ 7,
            4,
            9,
            4 ],
          2020:[ 7,
            4,
            9,
            2 ],
          2021:[ 7,
            3,
            9,
            1 ],
          2022:[ 7,
            1,
            8,
            31 ],
          name:"Vacances d'Été" },
        { 2018:[ 10,
            27,
            11,
            4 ],
          2019:[ 10,
            26,
            11,
            5 ],
          2020:[ 10,
            22,
            11,
            1 ],
          name:"Vacances de la Toussaint" },
        { 2018:[ 12,
            22,
            1,
            6 ],
          2019:[ 12,
            21,
            1,
            5 ],
          2020:[ 12,
            19,
            1,
            3 ],
          name:"Vacances de Noël" } ] },
    "Wallis-et-Futuna":{ _state_code:"wf",
      SH:[ { 2018:[ 4,
            1,
            4,
            15 ],
          2019:[ 3,
            31,
            4,
            14 ],
          2020:[ 3,
            29,
            4,
            13 ],
          2021:[ 4,
            3,
            4,
            18 ],
          name:"Vacances 1ère période" },
        { 2018:[ 6,
            8,
            6,
            24 ],
          2019:[ 6,
            9,
            6,
            23 ],
          2020:[ 6,
            5,
            6,
            21 ],
          2021:[ 6,
            5,
            6,
            20 ],
          name:"Vacances 2ème période" },
        { 2018:[ 8,
            10,
            8,
            26 ],
          2019:[ 8,
            11,
            8,
            25 ],
          2020:[ 8,
            9,
            8,
            23 ],
          2021:[ 8,
            7,
            8,
            22 ],
          name:"Vacances 3ème période" },
        { 2018:[ 10,
            14,
            10,
            28 ],
          2019:[ 10,
            13,
            10,
            27 ],
          2020:[ 10,
            11,
            10,
            25 ],
          2021:[ 10,
            9,
            10,
            24 ],
          name:"Vacances 4ème période" },
        { 2018:[ 12,
            16,
            2,
            10 ],
          2019:[ 12,
            15,
            2,
            9 ],
          2020:[ 12,
            13,
            2,
            14 ],
          2021:[ 12,
            18,
            2,
            19 ],
          name:"Vacances d'Été" } ] } };
  data$p.PH;
  data$p.Bretagne;
  data$p.Normandie;
  data$p.Occitanie;
  data$p.Corse;
  data$p.Guadeloupe;
  data$p.Guyane;
  data$p.Martinique;
  data$p.Mayotte;

  var data$o = { England:{ PH:[ { name:"New Year’s Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"Early May bank holiday",
          variable_date:"firstMayMonday" },
        { name:"Spring bank holiday",
          variable_date:"lastMayMonday" },
        { name:"Summer bank holiday",
          variable_date:"lastAugustMonday" },
        { name:"Christmas",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] },
    Wales:{ PH:[ { name:"New Year’s Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"Early May bank holiday",
          variable_date:"firstMayMonday" },
        { name:"Spring bank holiday",
          variable_date:"lastMayMonday" },
        { name:"Summer bank holiday",
          variable_date:"lastAugustMonday" },
        { name:"Christmas",
          fixed_date:[ 12,
            25 ] },
        { name:"Boxing Day",
          fixed_date:[ 12,
            26 ] } ] } };
  data$o.England;
  data$o.Wales;

  var data$n = { PH:[ { name:"Πρωτοχρονιά",
        fixed_date:[ 1,
          1 ] },
      { name:"Θεοφάνια",
        fixed_date:[ 1,
          6 ] },
      { name:"Καθαρά Δευτέρα",
        variable_date:"orthodox easter",
        offset:-48 },
      { name:"25η Μαρτίου",
        fixed_date:[ 3,
          25 ] },
      { name:"Μεγάλη Παρασκευή",
        variable_date:"orthodox easter",
        offset:-2 },
      { name:"Πάσχα",
        variable_date:"orthodox easter",
        offset:0 },
      { name:"Δευτέρα του Πάσχα",
        variable_date:"orthodox easter",
        offset:1 },
      { name:"Πρωτομαγιά",
        fixed_date:[ 5,
          1 ] },
      { name:"Κοίμηση της Θεοτόκου",
        fixed_date:[ 8,
          15 ] },
      { name:"28η Οκτωβρίου",
        fixed_date:[ 10,
          28 ] },
      { name:"Χριστούγεννα",
        fixed_date:[ 12,
          25 ] },
      { name:"2η μέρα Χριστουγέννων",
        fixed_date:[ 12,
          26 ] } ],
    SH:[ { 2019:[ 1,
          30,
          1,
          30 ],
        2020:[ 1,
          30,
          1,
          30 ],
        name:"Τριών Ιεραρχών" },
      { 2019:[ 4,
          22,
          5,
          6 ],
        2020:[ 4,
          13,
          4,
          26 ],
        name:"Πάσχα" },
      { 2019:[ 6,
          17,
          6,
          17 ],
        2020:[ 6,
          8,
          6,
          8 ],
        name:"Αγίου Πνεύματος" },
      { 2019:[ 7,
          1,
          8,
          31 ],
        2020:[ 7,
          1,
          8,
          31 ],
        name:"Καλοκαίρι" },
      { 2019:[ 11,
          17,
          11,
          17 ],
        name:"Πολυτεχνείο" },
      { 2018:[ 12,
          24,
          1,
          7 ],
        2019:[ 12,
          24,
          1,
          7 ],
        2020:[ 12,
          24,
          1,
          7 ],
        name:"Χριστούγεννα" } ] };
  data$n.PH;
  data$n.SH;

  var data$m = { PH:[ { name:"Nova godina",
        fixed_date:[ 1,
          1 ] },
      { name:"Sveta tri kralja",
        fixed_date:[ 1,
          6 ] },
      { name:"Uskršnji ponedjeljak",
        variable_date:"easter",
        offset:1 },
      { name:"Praznik rada",
        fixed_date:[ 5,
          1 ] },
      { name:"Tijelovo",
        variable_date:"easter",
        offset:60 },
      { name:"Dan antifašističke borbe",
        fixed_date:[ 6,
          22 ] },
      { name:"Dan pobjede i domovinske zahvalnosti",
        fixed_date:[ 8,
          5 ] },
      { name:"Velika Gospa",
        fixed_date:[ 8,
          15 ] },
      { name:"Svi sveti",
        fixed_date:[ 11,
          1 ] },
      { name:"Dan sjećanja na žrtve Domovinskog rata",
        fixed_date:[ 11,
          18 ] },
      { name:"Božić",
        fixed_date:[ 12,
          25 ] },
      { name:"Sveti Stjepan",
        fixed_date:[ 12,
          26 ] } ],
    SH:[ { 2022:[ 2,
          21,
          2,
          27 ],
        2023:[ 2,
          20,
          2,
          26 ],
        name:"Drugi dio zimskog odmora" },
      { 2022:[ 4,
          14,
          4,
          24 ],
        2023:[ 4,
          6,
          4,
          16 ],
        name:"Proljetni odmor" },
      { 2022:[ 6,
          23,
          9,
          3 ],
        2023:[ 6,
          23,
          9,
          4 ],
        name:"Ljetni praznici" },
      { 2021:[ 11,
          2,
          11,
          3 ],
        2022:[ 10,
          31,
          11,
          1 ],
        name:"Jesenski odmor" },
      { 2021:[ 12,
          24,
          1,
          9 ],
        2022:[ 12,
          27,
          1,
          8 ],
        name:"Prvi dio zimskog odmora" } ] };
  data$m.PH;
  data$m.SH;

  var data$l = { PH:[ { name:"újév",
        fixed_date:[ 1,
          1 ] },
      { name:"az 1848-as forradalom ünnepe",
        fixed_date:[ 3,
          15 ] },
      { name:"nagypéntek",
        variable_date:"easter",
        offset:-2 },
      { name:"húsvétvasárnap",
        variable_date:"easter" },
      { name:"húsvéthétfő",
        variable_date:"easter",
        offset:1 },
      { name:"pünkösdvasárnap",
        variable_date:"easter",
        offset:49 },
      { name:"pünkösdhétfő",
        variable_date:"easter",
        offset:50 },
      { name:"a munka ünnepe",
        fixed_date:[ 5,
          1 ] },
      { name:"az államalapítás ünnepe",
        fixed_date:[ 8,
          20 ] },
      { name:"az 1956-os forradalom ünnepe",
        fixed_date:[ 10,
          23 ] },
      { name:"mindenszentek",
        fixed_date:[ 11,
          1 ] },
      { name:"karácsony",
        fixed_date:[ 12,
          25 ] },
      { name:"karácsony másnap",
        fixed_date:[ 12,
          26 ] } ],
    SH:[ { 2014:[ 10,
          23,
          11,
          2 ],
        2015:[ 10,
          23,
          11,
          1 ],
        2016:[ 10,
          29,
          11,
          6 ],
        2017:[ 10,
          28,
          11,
          5 ],
        2018:[ 10,
          27,
          11,
          4 ],
        2019:[ 10,
          26,
          11,
          3 ],
        2020:[ 10,
          23,
          11,
          1 ],
        2021:[ 10,
          23,
          11,
          1 ],
        2023:[ 10,
          28,
          11,
          5 ],
        2024:[ 10,
          26,
          11,
          3 ],
        name:"őszi szünet" },
      { 2014:[ 12,
          20,
          1,
          4 ],
        2015:[ 12,
          19,
          1,
          3 ],
        2016:[ 12,
          22,
          1,
          2 ],
        2017:[ 12,
          23,
          1,
          2 ],
        2018:[ 12,
          22,
          1,
          2 ],
        2019:[ 12,
          21,
          1,
          5 ],
        2020:[ 12,
          19,
          1,
          3 ],
        2021:[ 12,
          22,
          1,
          2 ],
        2022:[ 12,
          22,
          1,
          8 ],
        2023:[ 12,
          22,
          1,
          7 ],
        2024:[ 12,
          21,
          1,
          5 ],
        name:"téli szünet" },
      { 2015:[ 4,
          2,
          4,
          7 ],
        2016:[ 3,
          24,
          3,
          29 ],
        2017:[ 4,
          13,
          4,
          18 ],
        2018:[ 3,
          29,
          4,
          3 ],
        2019:[ 4,
          18,
          4,
          23 ],
        2020:[ 4,
          7,
          4,
          14 ],
        2021:[ 4,
          1,
          4,
          6 ],
        2022:[ 4,
          14,
          4,
          19 ],
        2023:[ 4,
          6,
          4,
          11 ],
        2024:[ 3,
          28,
          4,
          7 ],
        2025:[ 4,
          17,
          4,
          27 ],
        name:"tavaszi szünet" },
      { 2015:[ 6,
          16,
          8,
          31 ],
        2016:[ 6,
          16,
          8,
          31 ],
        2017:[ 6,
          16,
          8,
          31 ],
        2018:[ 6,
          16,
          9,
          2 ],
        2019:[ 6,
          15,
          9,
          1 ],
        2020:[ 6,
          16,
          8,
          31 ],
        2021:[ 6,
          16,
          8,
          31 ],
        2022:[ 6,
          16,
          8,
          31 ],
        2023:[ 6,
          17,
          8,
          31 ],
        2024:[ 6,
          22,
          9,
          1 ],
        2025:[ 6,
          21,
          8,
          31 ],
        name:"nyári szünet" } ] };
  data$l.PH;
  data$l.SH;

  var data$k = { PH:[ { name:"New Year’s Day",
        fixed_date:[ 1,
          1 ] },
      { name:"St Patrick’s Day",
        fixed_date:[ 3,
          17 ] },
      { name:"St Patrick’s Day",
        variable_date:"nextMo-Fr17March" },
      { name:"Good Friday",
        variable_date:"easter",
        offset:-2 },
      { name:"Easter Monday",
        variable_date:"easter",
        offset:1 },
      { name:"May Bank Holiday",
        variable_date:"firstMayMonday" },
      { name:"June Bank Holiday",
        variable_date:"firstJuneMonday" },
      { name:"August Bank Holiday",
        variable_date:"firstAugustMonday" },
      { name:"October Bank Holiday (Halloween)",
        variable_date:"lastOctoberMonday" },
      { name:"Christmas",
        fixed_date:[ 12,
          25 ] },
      { name:"St Stephen’s Day",
        fixed_date:[ 12,
          26 ] },
      { name:"Bank Holiday",
        fixed_date:[ 12,
          27 ] } ] };
  data$k.PH;

  var data$j = { PH:[ { name:"Capodanno",
        fixed_date:[ 1,
          1 ] },
      { name:"Epifania",
        fixed_date:[ 1,
          6 ] },
      { name:"Liberazione dal nazifascismo (1945)",
        fixed_date:[ 4,
          25 ] },
      { name:"Pasqua",
        variable_date:"easter" },
      { name:"Lunedì di Pasqua",
        variable_date:"easter",
        offset:1 },
      { name:"Festa del lavoro",
        fixed_date:[ 5,
          1 ] },
      { name:"Festa della Repubblica",
        fixed_date:[ 6,
          2 ] },
      { name:"Assunzione di Maria",
        fixed_date:[ 8,
          15 ] },
      { name:"Ognissanti",
        fixed_date:[ 11,
          1 ] },
      { name:"Immacolata Concezione",
        fixed_date:[ 12,
          8 ] },
      { name:"Natale di Gesù",
        fixed_date:[ 12,
          25 ] },
      { name:"Santo Stefano",
        fixed_date:[ 12,
          26 ] } ] };
  data$j.PH;

  var data$i = { PH:[ { name:"元日",
        fixed_date:[ 1,
          1 ] },
      { name:"成人の日",
        variable_date:"firstJanuaryMonday",
        offset:7 },
      { name:"建国記念の日",
        fixed_date:[ 2,
          11 ] },
      { name:"天皇誕生日",
        fixed_date:[ 2,
          23 ] },
      { name:"昭和の日",
        fixed_date:[ 4,
          29 ] },
      { name:"憲法記念日",
        fixed_date:[ 5,
          3 ] },
      { name:"みどりの日",
        fixed_date:[ 5,
          4 ] },
      { name:"こどもの日",
        fixed_date:[ 5,
          5 ] },
      { name:"海の日",
        variable_date:"firstJulyMonday",
        offset:14 },
      { name:"山の日",
        fixed_date:[ 8,
          11 ] },
      { name:"敬老の日",
        variable_date:"firstSeptemberMonday",
        offset:14 },
      { name:"スポーツの日",
        variable_date:"firstNovemberMonday",
        offset:7 },
      { name:"文化の日",
        fixed_date:[ 11,
          3 ] },
      { name:"勤労感謝の日",
        fixed_date:[ 11,
          23 ] },
      { name:"春分の日",
        variable_date:"springEquinox" },
      { name:"秋分の日",
        variable_date:"autumnalEquinox" } ] };
  data$i.PH;

  var data$h = { PH:[ { name:"Neijoerschdag - Neujahr - Nouvel An",
        fixed_date:[ 1,
          1 ] },
      { name:"Ouschterméindeg - Ostermontag - Lundi de Pâques",
        variable_date:"easter",
        offset:1 },
      { name:"Dag vun der Aarbecht - Tag der Arbeit - Premier Mai",
        fixed_date:[ 5,
          1 ] },
      { name:"Europadag - Europatag - Journée de l'Europe",
        fixed_date:[ 5,
          1 ] },
      { name:"Christi Himmelfaart - Christi Himmelfahrt - Ascension",
        variable_date:"easter",
        offset:39 },
      { name:"Péngschtméindeg - Pfingstmontag - Lundi de Pentecôte",
        variable_date:"easter",
        offset:50 },
      { name:"Nationalfeierdag - Nationalfeiertag - Fête nationale",
        fixed_date:[ 6,
          23 ] },
      { name:"Mariä Himmelfaart - Maria Himmelfahrt - Assomption",
        fixed_date:[ 8,
          15 ] },
      { name:"Allerhellgen - Weihnachten - Allerheiligen - Toussaint",
        fixed_date:[ 11,
          1 ] },
      { name:"Chrëschtdag - Noël",
        fixed_date:[ 12,
          25 ] },
      { name:"Stiefesdag - Zweiter Weihnachtsfeiertag - St. Etienne",
        fixed_date:[ 12,
          26 ] } ],
    SH:[ { 2023:[ 10,
          28,
          11,
          5 ],
        2024:[ 10,
          26,
          11,
          3 ],
        2025:[ 11,
          1,
          11,
          9 ],
        name:"Allerhellegen - Allerheiligenurlaub - Congé de la Toussaint" },
      { 2023:[ 12,
          6 ],
        2024:[ 12,
          6 ],
        2025:[ 12,
          6 ],
        name:"Fest vum Hellege Nikolaus (nëmme fir Grondausbildung) - Nikolausfest (nur für die Grundschule) - Fête de Saint Nicolas (uniquement pour l'enseignement fondamental)" },
      { 2023:[ 12,
          23,
          1,
          7 ],
        2024:[ 12,
          21,
          1,
          5 ],
        2025:[ 12,
          20,
          1,
          4 ],
        name:"Chrëschtdag Vakanz - Weihnachtsferien - Vacances de Noël" },
      { 2024:[ 2,
          10,
          2,
          18 ],
        2025:[ 2,
          15,
          2,
          23 ],
        2026:[ 2,
          14,
          2,
          22 ],
        name:"Karneval Vakanz - Karnevalsferien - Congé de Carnaval" },
      { 2024:[ 3,
          30,
          4,
          14 ],
        2025:[ 4,
          5,
          4,
          20 ],
        2026:[ 3,
          28,
          4,
          12 ],
        name:"Ouschtervakanz - Osterferien - Vacances de Pâques" },
      { 2024:[ 5,
          25,
          6,
          2 ],
        2025:[ 5,
          24,
          6,
          1 ],
        2026:[ 5,
          23,
          5,
          31 ],
        name:"Päischtvakanz - Pfingstferien - Congé de la Pentecôte" },
      { 2025:[ 6,
          23 ],
        2026:[ 6,
          23 ],
        name:"Gebuertsdag vum Grand-Duc - Geburtstag des Großherzogs - l'anniversaire du Grand-Duc" },
      { 2024:[ 7,
          16,
          9,
          15 ],
        2025:[ 7,
          16,
          9,
          14 ],
        2026:[ 7,
          16,
          9,
          14 ],
        name:"Summervakanz - Sommerferien - Vacances d’été" } ] };
  data$h.PH;
  data$h.SH;

  var data$g = { PH:[ { name:"New Year’s Day",
        fixed_date:[ 1,
          1 ] },
      { name:"Independence Day",
        fixed_date:[ 3,
          21 ] },
      { name:"Good Friday",
        variable_date:"easter",
        offset:-2 },
      { name:"Easter Monday",
        variable_date:"easter",
        offset:1 },
      { name:"Worker’s Day",
        fixed_date:[ 5,
          1 ] },
      { name:"Cassinga Day",
        fixed_date:[ 5,
          4 ] },
      { name:"Ascension Day",
        variable_date:"easter",
        offset:39 },
      { name:"Africa Day",
        fixed_date:[ 5,
          25 ] },
      { name:"Heroes’ Day",
        fixed_date:[ 8,
          26 ] },
      { name:"Human Rights Day",
        fixed_date:[ 12,
          10 ] },
      { name:"Christmas Day",
        fixed_date:[ 12,
          25 ] },
      { name:"Family Day",
        fixed_date:[ 12,
          26 ] } ] };
  data$g.PH;

  var data$f = { PH:[ { name:"Nieuwjaarsdag",
        fixed_date:[ 1,
          1 ] },
      { name:"Goede vrijdag",
        variable_date:"easter",
        offset:-2 },
      { name:"Tweede Paasdag",
        variable_date:"easter",
        offset:1 },
      { name:"Koningsdag",
        fixed_date:[ 4,
          27 ] },
      { name:"Bevrijdingsdag",
        fixed_date:[ 5,
          5 ] },
      { name:"Hemelvaartsdag",
        variable_date:"easter",
        offset:39 },
      { name:"Tweede Pinksterdag",
        variable_date:"easter",
        offset:50 },
      { name:"Eerste Kerstdag",
        fixed_date:[ 12,
          25 ] },
      { name:"Tweede Kerstdag",
        fixed_date:[ 12,
          26 ] } ] };
  data$f.PH;

  var data$e = { PH:[ { name:"Nyttårsdag",
        fixed_date:[ 1,
          1 ] },
      { name:"Skjærtorsdag",
        variable_date:"easter",
        offset:-3 },
      { name:"Langfredag",
        variable_date:"easter",
        offset:-2 },
      { name:"Påskedag",
        variable_date:"easter" },
      { name:"2. Påskedag",
        variable_date:"easter",
        offset:1 },
      { name:"1. Mai",
        fixed_date:[ 5,
          1 ] },
      { name:"Grunnlovsdagen",
        fixed_date:[ 5,
          17 ] },
      { name:"Kristi Himmelfartsdag",
        variable_date:"easter",
        offset:39 },
      { name:"Pinsedag",
        variable_date:"easter",
        offset:49 },
      { name:"2. Pinsedag",
        variable_date:"easter",
        offset:50 },
      { name:"Juledag",
        fixed_date:[ 12,
          25 ] },
      { name:"2. Juledag",
        fixed_date:[ 12,
          26 ] } ] };
  data$e.PH;

  var data$d = { PH:[ { name:"New Year's Day",
        fixed_date:[ 1,
          1 ] },
      { name:"Day after New Year's Day",
        fixed_date:[ 1,
          2 ] },
      { name:"Waitangi Day",
        fixed_date:[ 2,
          6 ] },
      { name:"Good Friday",
        variable_date:"easter",
        offset:-2 },
      { name:"Easter Monday",
        variable_date:"easter",
        offset:1 },
      { name:"Anzac Day",
        fixed_date:[ 4,
          25 ] },
      { name:"Queen's Birthday",
        variable_date:"firstJuneMonday" },
      { name:"Labour Day",
        variable_date:"firstOctoberMonday",
        offset:21 },
      { name:"Christmas Day",
        fixed_date:[ 12,
          25 ] },
      { name:"Boxing Day",
        fixed_date:[ 12,
          26 ] } ] };
  data$d.PH;

  var data$c = { PH:[ { name:"Nowy Rok",
        fixed_date:[ 1,
          1 ] },
      { name:"Święto Trzech Króli",
        fixed_date:[ 1,
          6 ] },
      { name:"Wielkanoc",
        variable_date:"easter" },
      { name:"Lany Poniedziałek - drugi dzień Wielkiej Nocy",
        variable_date:"easter",
        offset:1 },
      { name:"Pierwszy Maja",
        fixed_date:[ 5,
          1 ] },
      { name:"Trzeci Maja",
        fixed_date:[ 5,
          3 ] },
      { name:"Zielone Świątki",
        variable_date:"easter",
        offset:49 },
      { name:"Boże Ciało",
        variable_date:"easter",
        offset:60 },
      { name:"Wniebowzięcie Najświętszej Maryi Panny",
        fixed_date:[ 8,
          15 ] },
      { name:"Wszystkich Świętych",
        fixed_date:[ 11,
          1 ] },
      { name:"Święto Niepodległości",
        fixed_date:[ 11,
          11 ] },
      { name:"pierwszy dzień Bożego Narodzenia",
        fixed_date:[ 12,
          25 ] },
      { name:"drugi dzień Bożego Narodzenia",
        fixed_date:[ 12,
          26 ] } ] };
  data$c.PH;

  var data$b = { PH:[ { name:"Anul Nou",
        fixed_date:[ 1,
          1 ] },
      { name:"A doua zi de Anul Nou",
        fixed_date:[ 1,
          2 ] },
      { name:"Ziua Unirii Principatelor Române (Ziua Unirii)",
        fixed_date:[ 1,
          24 ] },
      { name:"Paștele ortodox",
        variable_date:"orthodox easter" },
      { name:"A doua zi de Paște ortodox",
        variable_date:"orthodox easter",
        offset:1 },
      { name:"Ziua Muncii",
        fixed_date:[ 5,
          1 ] },
      { name:"Rusaliile",
        variable_date:"orthodox easter",
        offset:50 },
      { name:"A doua zi de Rusalii",
        variable_date:"orthodox easter",
        offset:51 },
      { name:"Adormirea Maicii Domnului",
        fixed_date:[ 8,
          15 ] },
      { name:"Sfântul Apostol Andrei",
        fixed_date:[ 11,
          30 ] },
      { name:"Ziua Națională (Ziua Marii Uniri)",
        fixed_date:[ 12,
          1 ] },
      { name:"Crăciunul",
        fixed_date:[ 12,
          25 ] },
      { name:"A doua zi de Crăciun",
        fixed_date:[ 12,
          26 ] } ],
    SH:[ { 2015:[ 1,
          31,
          2,
          8 ],
        2016:[ 1,
          30,
          2,
          7 ],
        2021:[ 1,
          30,
          2,
          7 ],
        name:"Vacanţa intersemestrială" },
      { 2015:[ 4,
          11,
          4,
          19 ],
        2016:[ 4,
          23,
          5,
          3 ],
        2021:[ 4,
          30,
          5,
          9 ],
        name:"Vacanța de primăvară" },
      { 2015:[ 6,
          20,
          9,
          13 ],
        2016:[ 6,
          18,
          9,
          4 ],
        2021:[ 6,
          26,
          9,
          13 ],
        name:"Vacanța de vară" },
      { 2014:[ 12,
          20,
          1,
          4 ],
        2015:[ 12,
          19,
          1,
          3 ],
        2020:[ 12,
          23,
          1,
          10 ],
        2021:[ 12,
          23,
          1,
          9 ],
        name:"Vacanța de iarnă" } ] };
  data$b.PH;
  data$b.SH;

  var data$a = { PH:[ { name:"1. Новогодние каникулы",
        fixed_date:[ 1,
          1 ] },
      { name:"2. Новогодние каникулы",
        fixed_date:[ 1,
          2 ] },
      { name:"3. Новогодние каникулы",
        fixed_date:[ 1,
          3 ] },
      { name:"4. Новогодние каникулы",
        fixed_date:[ 1,
          4 ] },
      { name:"5. Новогодние каникулы",
        fixed_date:[ 1,
          5 ] },
      { name:"6. Новогодние каникулы",
        fixed_date:[ 1,
          6 ] },
      { name:"Рождество Христово",
        fixed_date:[ 1,
          7 ] },
      { name:"8. Новогодние каникулы",
        fixed_date:[ 1,
          8 ] },
      { name:"День защитника Отечества",
        fixed_date:[ 2,
          23 ] },
      { name:"Международный женский день",
        fixed_date:[ 3,
          8 ] },
      { name:"День Победы",
        fixed_date:[ 5,
          9 ] },
      { name:"Праздник Весны и Труда",
        fixed_date:[ 5,
          1 ] },
      { name:"День народного единства",
        fixed_date:[ 11,
          4 ] },
      { name:"День России",
        fixed_date:[ 6,
          12 ] } ],
    "Татарстан":{ _state_code:"tatarstan",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"Ураза-байрам",
          fixed_date:[ 7,
            28 ] },
        { name:"День Республики Татарстан",
          fixed_date:[ 8,
            30 ] },
        { name:"Курбан-байрам",
          fixed_date:[ 10,
            4 ] },
        { name:"День Конституции Республики Татарстан",
          fixed_date:[ 11,
            6 ] } ] },
    "Башкортостан":{ _state_code:"bashkortostan",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"Ураза-байрам",
          fixed_date:[ 7,
            28 ] },
        { name:"Курбан-байрам",
          fixed_date:[ 10,
            4 ] },
        { name:"День Республики Башкирии",
          fixed_date:[ 10,
            11 ] },
        { name:"День Конституции Башкортостана",
          fixed_date:[ 12,
            24 ] } ] },
    "Чувашия":{ _state_code:"chuvashia",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День Чувашской республики",
          fixed_date:[ 6,
            24 ] } ] },
    "Республика Саха (Якутия)":{ _state_code:"sakha",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День Республики Саха",
          fixed_date:[ 4,
            27 ] },
        { name:"Ысыах",
          fixed_date:[ 6,
            23 ] },
        { name:"День государственности Республики Саха",
          fixed_date:[ 9,
            27 ] } ] },
    "Калмыкия":{ _state_code:"kalmykia",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"Цаган Сар",
          fixed_date:[ 1,
            14 ] },
        { name:"День принятия Степного Уложения (Конституции) Республики Калмыкия",
          fixed_date:[ 4,
            5 ] },
        { name:"День рождения Будды Шакьямун",
          fixed_date:[ 6,
            6 ] },
        { name:"Зул",
          fixed_date:[ 12,
            15 ] },
        { name:"День памяти жертв депортации калмыцкого народа",
          fixed_date:[ 12,
            28 ] } ] },
    "Республика Бурятия":{ _state_code:"buryatia",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"Сагаалган",
          fixed_date:[ 1,
            14 ] } ] },
    "Республика Карелия":{ _state_code:"karelia",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День Республики Карелия",
          fixed_date:[ 6,
            8 ] },
        { name:"День освобождения Карелии от фашистских захватчиков",
          fixed_date:[ 9,
            30 ] } ] },
    "Приволжский федеральный округ":{ _state_code:"udmurtia",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День Государственности Удмуртской Республики",
          fixed_date:[ 5,
            31 ] } ] },
    "Адыгея":{ _state_code:"adygea",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"Ураза-байрам",
          fixed_date:[ 7,
            28 ] },
        { name:"Курбан-байрам",
          fixed_date:[ 10,
            4 ] },
        { name:"День образования Республики Адыгея",
          fixed_date:[ 10,
            5 ] } ] },
    "Дагестан":{ _state_code:"dagestan",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День Конституции Республики Дагестан",
          fixed_date:[ 7,
            26 ] },
        { name:"Ураза-байрам",
          fixed_date:[ 7,
            28 ] },
        { name:"День единства народов Дагестана",
          fixed_date:[ 9,
            15 ] },
        { name:"Курбан-байрам",
          fixed_date:[ 10,
            4 ] } ] },
    "Ингушетия":{ _state_code:"ingushetia",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День образования Республики Ингушетия",
          fixed_date:[ 6,
            4 ] },
        { name:"Ураза-байрам",
          fixed_date:[ 7,
            28 ] },
        { name:"Курбан-байрам",
          fixed_date:[ 10,
            4 ] } ] },
    "Карачаево-Черкесия":{ _state_code:"karachay_cherkess",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День возрождения карачаевского народа",
          fixed_date:[ 5,
            3 ] },
        { name:"Ураза-байрам",
          fixed_date:[ 7,
            28 ] },
        { name:"Курбан-байрам",
          fixed_date:[ 10,
            4 ] } ] },
    "Чечня":{ _state_code:"chechnya",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День мира в Чеченской Республике",
          fixed_date:[ 4,
            16 ] },
        { name:"Ураза-байрам",
          fixed_date:[ 7,
            28 ] },
        { name:"Курбан-байрам",
          fixed_date:[ 10,
            4 ] } ] },
    "Кабардино-Балкария":{ _state_code:"kabardino_balkaria",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День возрождения балкарского народа",
          fixed_date:[ 3,
            28 ] },
        { name:"Черкесский день траура",
          fixed_date:[ 5,
            21 ] },
        { name:"Ураза-байрам",
          fixed_date:[ 7,
            28 ] },
        { name:"День государственности Кабардино-Балкарской Республики",
          fixed_date:[ 9,
            1 ] },
        { name:"Курбан-байрам",
          fixed_date:[ 10,
            4 ] } ] },
    "Республика Алтай":{ _state_code:"altai",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"Чага-Байрам",
          fixed_date:[ 1,
            14 ] } ] },
    "Республика Тыва":{ _state_code:"tuva",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"Народный праздник Шагаа",
          fixed_date:[ 1,
            14 ] },
        { name:"День Республики Тыва",
          fixed_date:[ 8,
            15 ] } ] },
    "Саратовская область":{ _state_code:"saratov",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"Радоница",
          fixed_date:[ 4,
            29 ] } ] },
    "Брянская область":{ _state_code:"bryansk",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"Радоница",
          fixed_date:[ 4,
            29 ] },
        { name:"День освобождения города Брянска",
          fixed_date:[ 9,
            17 ] } ] },
    "Республика Коми":{ _state_code:"komi",
      PH:[ { name:"1. Новогодние каникулы",
          fixed_date:[ 1,
            1 ] },
        { name:"2. Новогодние каникулы",
          fixed_date:[ 1,
            2 ] },
        { name:"3. Новогодние каникулы",
          fixed_date:[ 1,
            3 ] },
        { name:"4. Новогодние каникулы",
          fixed_date:[ 1,
            4 ] },
        { name:"5. Новогодние каникулы",
          fixed_date:[ 1,
            5 ] },
        { name:"6. Новогодние каникулы",
          fixed_date:[ 1,
            6 ] },
        { name:"Рождество Христово",
          fixed_date:[ 1,
            7 ] },
        { name:"8. Новогодние каникулы",
          fixed_date:[ 1,
            8 ] },
        { name:"День защитника Отечества",
          fixed_date:[ 2,
            23 ] },
        { name:"Международный женский день",
          fixed_date:[ 3,
            8 ] },
        { name:"День Победы",
          fixed_date:[ 5,
            9 ] },
        { name:"Праздник Весны и Труда",
          fixed_date:[ 5,
            1 ] },
        { name:"День народного единства",
          fixed_date:[ 11,
            4 ] },
        { name:"День России",
          fixed_date:[ 6,
            12 ] },
        { name:"День Республики Коми",
          fixed_date:[ 8,
            22 ] } ] } };
  data$a.PH;

  var data$9 = { PH:[ { name:"nyårsdagen",
        fixed_date:[ 1,
          1 ] },
      { name:"trettondedag jul",
        fixed_date:[ 1,
          6 ] },
      { name:"långfredagen",
        variable_date:"easter",
        offset:-2 },
      { name:"påskdagen",
        variable_date:"easter" },
      { name:"annandag påsk",
        variable_date:"easter",
        offset:1 },
      { name:"första maj",
        fixed_date:[ 5,
          1 ] },
      { name:"Kristi himmelsfärdsdag",
        variable_date:"easter",
        offset:39 },
      { name:"pingstdagen",
        variable_date:"easter",
        offset:49 },
      { name:"nationaldagen",
        fixed_date:[ 6,
          6 ] },
      { name:"midsommardagen",
        variable_date:"nextSaturday20Jun" },
      { name:"alla helgons dag",
        variable_date:"nextSaturday31Oct" },
      { name:"juldagen",
        fixed_date:[ 12,
          25 ] },
      { name:"annandag jul",
        fixed_date:[ 12,
          26 ] } ] };
  data$9.PH;

  var data$8 = { PH:[ { name:"novo leto",
        fixed_date:[ 1,
          1 ] },
      { name:"Prešernov dan, slovenski kulturni praznik",
        fixed_date:[ 2,
          8 ] },
      { name:"velikonočna nedelja",
        variable_date:"easter" },
      { name:"velikonočni ponedeljek",
        variable_date:"easter",
        offset:1 },
      { name:"dan upora proti okupatorju",
        fixed_date:[ 4,
          27 ] },
      { name:"praznik dela 1",
        fixed_date:[ 5,
          1 ] },
      { name:"praznik dela 2",
        fixed_date:[ 5,
          2 ] },
      { name:"binkoštna nedelja - binkošti",
        variable_date:"easter",
        offset:49 },
      { name:"dan državnosti",
        fixed_date:[ 6,
          25 ] },
      { name:"Marijino vnebovzetje",
        fixed_date:[ 8,
          15 ] },
      { name:"dan reformacije",
        fixed_date:[ 10,
          31 ] },
      { name:"dan spomina na mrtve",
        fixed_date:[ 11,
          1 ] },
      { name:"božič",
        fixed_date:[ 12,
          25 ] },
      { name:"dan samostojnosti in enotnosti",
        fixed_date:[ 12,
          26 ] } ] };
  data$8.PH;

  var data$7 = { PH:[ { name:"Deň vzniku Slovenskej republiky",
        fixed_date:[ 1,
          1 ] },
      { name:"Zjavenie Pána",
        fixed_date:[ 1,
          6 ] },
      { name:"Veľký piatok",
        variable_date:"easter",
        offset:-2 },
      { name:"Veľkonočná nedeľa",
        variable_date:"easter" },
      { name:"Veľkonočný pondelok",
        variable_date:"easter",
        offset:1 },
      { name:"Sviatok práce",
        fixed_date:[ 5,
          1 ] },
      { name:"Deň víťazstva nad fašizmom",
        fixed_date:[ 5,
          8 ] },
      { name:"Sviatok svätého Cyrila a Metoda",
        fixed_date:[ 7,
          5 ] },
      { name:"Výročie Slovenského národného povstania",
        fixed_date:[ 8,
          29 ] },
      { name:"Deň Ústavy Slovenskej republiky",
        fixed_date:[ 9,
          1 ] },
      { name:"Sviatok Panny Márie Sedembolestnej",
        fixed_date:[ 9,
          15 ] },
      { name:"Sviatok všetkých svätých",
        fixed_date:[ 11,
          1 ] },
      { name:"Deň boja za slobodu a demokraciu",
        fixed_date:[ 11,
          17 ] },
      { name:"Štedrý deň",
        fixed_date:[ 12,
          24 ] },
      { name:"Prvý sviatok vianočný",
        fixed_date:[ 12,
          25 ] },
      { name:"Druhý sviatok vianočný",
        fixed_date:[ 12,
          26 ] } ] };
  data$7.PH;

  var data$6 = { PH:[ { name:"Новий рік",
        fixed_date:[ 1,
          1 ] },
      { name:"Різдво",
        fixed_date:[ 1,
          7 ] },
      { name:"Міжнародний жіночий день",
        fixed_date:[ 3,
          8 ] },
      { name:"Великдень",
        variable_date:"orthodox easter",
        offset:1 },
      { name:"День Праці 1",
        fixed_date:[ 5,
          1 ] },
      { name:"День Праці 2",
        fixed_date:[ 5,
          2 ] },
      { name:"День Перемоги",
        fixed_date:[ 5,
          9 ] },
      { name:"День Конституції України",
        fixed_date:[ 6,
          28 ] },
      { name:"День Незалежності України",
        fixed_date:[ 8,
          24 ] } ] };
  data$6.PH;

  var data$5 = { PH:[ { name:"New Year's Day",
        fixed_date:[ 1,
          1 ] },
      { name:"Memorial Day",
        variable_date:"lastMayMonday" },
      { name:"Independence Day",
        fixed_date:[ 7,
          4 ] },
      { name:"Labor Day",
        variable_date:"firstSeptemberMonday" },
      { name:"Veterans Day",
        fixed_date:[ 11,
          11 ] },
      { name:"Thanksgiving",
        variable_date:"firstNovemberThursday",
        offset:21 },
      { name:"Christmas Day",
        fixed_date:[ 12,
          25 ] } ],
    Alabama:{ _state_code:"al",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Robert E. Lee/Martin Luther King Birthday",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"George Washington/Thomas Jefferson Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Confederate Memorial Day",
          variable_date:"firstAprilMonday",
          offset:21 },
        { name:"Jefferson Davis' Birthday",
          variable_date:"firstJuneMonday" } ] },
    Alaska:{ _state_code:"ak",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Seward's Day",
          variable_date:"lastMarchMonday" },
        { name:"Alaska Day",
          fixed_date:[ 10,
            18 ] } ] },
    Arizona:{ _state_code:"az",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Dr. Martin Luther King Jr./Civil Rights Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Arkansas:{ _state_code:"ar",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Dr. Martin Luther King Jr. and Robert E. Lee's Birthdays",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"George Washington's Birthday and Daisy Gatson Bates Day",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Eve",
          fixed_date:[ 12,
            24 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    California:{ _state_code:"ca",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"César Chávez Day",
          fixed_date:[ 3,
            31 ] } ] },
    Colorado:{ _state_code:"co",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Connecticut:{ _state_code:"ct",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Lincoln's Birthday",
          fixed_date:[ 2,
            12 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 } ] },
    Delaware:{ _state_code:"de",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Day After Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 } ] },
    "District of Columbia":{ _state_code:"dc",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Emancipation Day",
          fixed_date:[ 4,
            16 ] } ] },
    Florida:{ _state_code:"fl",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Friday after Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Georgia:{ _state_code:"ga",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Robert E. Lee's Birthday",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Washington's Birthday",
          fixed_date:[ 12,
            24 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Confederate Memorial Day",
          variable_date:"lastAprilMonday" } ] },
    Guam:{ _state_code:"gu",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Guam Discovery Day",
          fixed_date:[ 3,
            5 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Liberation Day",
          fixed_date:[ 7,
            21 ] },
        { name:"All Souls' Day",
          fixed_date:[ 11,
            2 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Lady of Camarin Day",
          fixed_date:[ 12,
            8 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Hawaii:{ _state_code:"hi",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Prince Jonah Kuhio Kalanianaole Day",
          fixed_date:[ 3,
            26 ] },
        { name:"Kamehameha Day",
          fixed_date:[ 6,
            11 ] },
        { name:"Statehood Day",
          variable_date:"firstAugustFriday",
          offset:14 },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 } ] },
    Idaho:{ _state_code:"id",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr.-Idaho Human Rights Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Illinois:{ _state_code:"il",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Lincoln's Birthday",
          fixed_date:[ 2,
            12 ] },
        { name:"Casimir Pulaski Day",
          variable_date:"firstMarchMonday" },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 } ] },
    Indiana:{ _state_code:"in",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Lincoln's Birthday",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Primary Election Day",
          variable_date:"firstMayMonday",
          offset:1 },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 } ] },
    Iowa:{ _state_code:"ia",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Lincoln's Birthday",
          fixed_date:[ 2,
            12 ] } ] },
    Kansas:{ _state_code:"ks",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Kentucky:{ _state_code:"ky",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Eve",
          fixed_date:[ 12,
            24 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"New Year's Eve",
          fixed_date:[ 12,
            31 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 } ] },
    Louisiana:{ _state_code:"la",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Mardi Gras",
          variable_date:"easter",
          offset:-47 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 } ] },
    Maine:{ _state_code:"me",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Patriots' Day",
          variable_date:"firstAprilMonday",
          offset:14 } ] },
    Maryland:{ _state_code:"md",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Native American Heritage Day",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Massachusetts:{ _state_code:"ma",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Patriots' Day",
          variable_date:"firstAprilMonday",
          offset:14 } ] },
    Michigan:{ _state_code:"mi",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Eve",
          fixed_date:[ 12,
            24 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"New Year's Eve",
          fixed_date:[ 12,
            31 ] } ] },
    Minnesota:{ _state_code:"mn",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Mississippi:{ _state_code:"ms",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King's and Robert E. Lee's Birthdays",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Confederate Memorial Day",
          variable_date:"lastAprilMonday" } ] },
    Missouri:{ _state_code:"mo",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Truman Day",
          fixed_date:[ 5,
            8 ] } ] },
    Montana:{ _state_code:"mt",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 },
        { name:"Christmas Eve",
          fixed_date:[ 12,
            24 ] },
        { name:"New Year's Eve",
          fixed_date:[ 12,
            31 ] } ] },
    Nebraska:{ _state_code:"ne",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Arbor Day",
          variable_date:"lastAprilFriday" } ] },
    Nevada:{ _state_code:"nv",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Nevada Day",
          variable_date:"lastOctoberFriday" },
        { name:"Family Day",
          variable_date:"firstNovemberThursday",
          offset:22 } ] },
    "New Hampshire":{ _state_code:"nh",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Civil Rights Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Day after Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 } ] },
    "New Jersey":{ _state_code:"nj",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Lincoln's Birthday",
          fixed_date:[ 2,
            12 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 } ] },
    "New Mexico":{ _state_code:"nm",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Day after Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    "New York":{ _state_code:"ny",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Lincoln's Birthday",
          fixed_date:[ 2,
            12 ] },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 } ] },
    "North Carolina":{ _state_code:"nc",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Day after Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Christmas Eve",
          fixed_date:[ 12,
            24 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Day after Christmas",
          fixed_date:[ 12,
            26 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 } ] },
    "North Dakota":{ _state_code:"nd",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Ohio:{ _state_code:"oh",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Oklahoma:{ _state_code:"ok",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Day after Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Oregon:{ _state_code:"or",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Pennsylvania:{ _state_code:"pa",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Flag Day",
          fixed_date:[ 6,
            14 ] } ] },
    "Puerto Rico":{ _state_code:"pr",
      PH:[ { name:"Día de Año Nuevo",
          fixed_date:[ 1,
            1 ] },
        { name:"Día de Reyes",
          fixed_date:[ 1,
            6 ] },
        { name:"Natalicio de Eugenio María de Hostos",
          variable_date:"firstJanuaryMonday",
          offset:7 },
        { name:"Natalicio de Martin Luther King, Jr.",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Día de los Presidentes",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Día de la Abolición de Esclavitud",
          fixed_date:[ 3,
            22 ] },
        { name:"Viernes Santo",
          variable_date:"easter",
          offset:-2 },
        { name:"Natalicio de José de Diego",
          variable_date:"firstAprilMonday",
          offset:14 },
        { name:"Recordación de los Muertos de la Guerra",
          variable_date:"lastMayMonday" },
        { name:"Día de la Independencia",
          fixed_date:[ 7,
            4 ] },
        { name:"Constitución de Puerto Rico",
          fixed_date:[ 7,
            25 ] },
        { name:"Natalicio de Dr. José Celso Barbosa",
          fixed_date:[ 7,
            27 ] },
        { name:"Día del Trabajo",
          variable_date:"firstSeptemberMonday" },
        { name:"Día de la Raza Descubrimiento de América",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Día del Veterano",
          fixed_date:[ 11,
            11 ] },
        { name:"Día del Descubrimiento de Puerto Rico",
          fixed_date:[ 11,
            19 ] },
        { name:"Día de Acción de Gracias",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Noche Buena",
          fixed_date:[ 12,
            24 ] },
        { name:"Día de Navidad",
          fixed_date:[ 12,
            25 ] } ] },
    "Rhode Island":{ _state_code:"ri",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Victory Day",
          variable_date:"firstAugustMonday",
          offset:7 } ] },
    "South Carolina":{ _state_code:"sc",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Confederate Memorial Day",
          fixed_date:[ 5,
            10 ] } ] },
    "South Dakota":{ _state_code:"sd",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Native American Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Tennessee:{ _state_code:"tn",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Eve",
          fixed_date:[ 12,
            24 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 } ] },
    Texas:{ _state_code:"tx",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Friday after Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:22 },
        { name:"Christmas Eve",
          fixed_date:[ 12,
            24 ] },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Day after Christmas",
          fixed_date:[ 12,
            26 ] } ] },
    "United States Virgin Islands":{ _state_code:"vi",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Virgin Islands-Puerto Rico Friendship Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Three Kings Day",
          fixed_date:[ 1,
            6 ] },
        { name:"Transfer Day",
          fixed_date:[ 3,
            31 ] },
        { name:"Holy Thursday",
          variable_date:"easter",
          offset:-3 },
        { name:"Good Friday",
          variable_date:"easter",
          offset:-2 },
        { name:"Easter Monday",
          variable_date:"easter",
          offset:1 },
        { name:"Emancipation Day",
          fixed_date:[ 7,
            3 ] },
        { name:"Hurricane Supplication Day",
          variable_date:"firstJulyMonday",
          offset:21 },
        { name:"Hurricane Thanksgiving",
          fixed_date:[ 10,
            25 ] },
        { name:"Liberty Day",
          fixed_date:[ 11,
            1 ] },
        { name:"Christmas Second Day",
          fixed_date:[ 12,
            26 ] },
        { name:"New Year's Eve",
          fixed_date:[ 12,
            31 ] } ] },
    Utah:{ _state_code:"ut",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Pioneer Day",
          fixed_date:[ 7,
            24 ] } ] },
    Vermont:{ _state_code:"vt",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Town Meeting Day",
          variable_date:"firstMarchTuesday" },
        { name:"Battle of Bennington",
          variable_date:"firstAugustMonday",
          offset:14 } ] },
    Virginia:{ _state_code:"va",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    Washington:{ _state_code:"wa",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] },
    "West Virginia":{ _state_code:"wv",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"West Virginia Day",
          fixed_date:[ 6,
            20 ] },
        { name:"Lincoln's Day",
          variable_date:"firstNovemberThursday",
          offset:22 } ] },
    Wisconsin:{ _state_code:"wi",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] },
        { name:"Primary Election Day",
          variable_date:"firstAugustTuesday",
          offset:7 },
        { name:"Election Day",
          variable_date:"firstNovemberMonday",
          offset:1 } ] },
    Wyoming:{ _state_code:"wy",
      PH:[ { name:"New Year's Day",
          fixed_date:[ 1,
            1 ] },
        { name:"Martin Luther King, Jr. Day",
          variable_date:"firstJanuaryMonday",
          offset:14 },
        { name:"Washington's Birthday",
          variable_date:"firstFebruaryMonday",
          offset:14 },
        { name:"Memorial Day",
          variable_date:"lastMayMonday" },
        { name:"Independence Day",
          fixed_date:[ 7,
            4 ] },
        { name:"Labor Day",
          variable_date:"firstSeptemberMonday" },
        { name:"Columbus Day",
          variable_date:"firstOctoberMonday",
          offset:7 },
        { name:"Veterans Day",
          fixed_date:[ 11,
            11 ] },
        { name:"Thanksgiving",
          variable_date:"firstNovemberThursday",
          offset:21 },
        { name:"Christmas Day",
          fixed_date:[ 12,
            25 ] } ] } };
  data$5.PH;
  data$5.Alabama;
  data$5.Alaska;
  data$5.Arizona;
  data$5.Arkansas;
  data$5.California;
  data$5.Colorado;
  data$5.Connecticut;
  data$5.Delaware;
  data$5.Florida;
  data$5.Georgia;
  data$5.Guam;
  data$5.Hawaii;
  data$5.Idaho;
  data$5.Illinois;
  data$5.Indiana;
  data$5.Iowa;
  data$5.Kansas;
  data$5.Kentucky;
  data$5.Louisiana;
  data$5.Maine;
  data$5.Maryland;
  data$5.Massachusetts;
  data$5.Michigan;
  data$5.Minnesota;
  data$5.Mississippi;
  data$5.Missouri;
  data$5.Montana;
  data$5.Nebraska;
  data$5.Nevada;
  data$5.Ohio;
  data$5.Oklahoma;
  data$5.Oregon;
  data$5.Pennsylvania;
  data$5.Tennessee;
  data$5.Texas;
  data$5.Utah;
  data$5.Vermont;
  data$5.Virginia;
  data$5.Washington;
  data$5.Wisconsin;
  data$5.Wyoming;

  var data$4 = { PH:[ { name:"Tết Dương Lịch",
        fixed_date:[ 1,
          1 ] },
      { name:"Ngày Quốc tế Phụ nữ",
        fixed_date:[ 3,
          8 ] },
      { name:"Ngày thành lập Đoàn Thanh niên Cộng sản Hồ Chí Minh",
        fixed_date:[ 3,
          26 ] },
      { name:"Ngày Quốc tế Thiếu nhi",
        fixed_date:[ 6,
          1 ] },
      { name:"Ngày Nhà giáo Việt Nam",
        fixed_date:[ 11,
          20 ] },
      { name:"Ngày Giải phóng miền Nam, Thống nhất Đất nước",
        fixed_date:[ 4,
          30 ] },
      { name:"Ngày Quốc tế lao động",
        fixed_date:[ 5,
          1 ] },
      { name:"Quốc Khánh",
        fixed_date:[ 9,
          2 ] },
      { name:"Lễ Giáng Sinh",
        fixed_date:[ 12,
          25 ] } ] };
  data$4.PH;

  var data$3 = { PH:[ { name:"New Year",
        fixed_date:[ 1,
          1 ] } ],
    SH:[ { 2020:[ 6,
          21,
          9,
          23 ],
        2021:[ 6,
          21,
          9,
          23 ],
        2022:[ 6,
          21,
          9,
          23 ],
        2023:[ 6,
          21,
          9,
          23 ],
        2024:[ 6,
          21,
          9,
          23 ],
        2025:[ 6,
          21,
          9,
          23 ],
        2026:[ 6,
          21,
          9,
          23 ],
        2027:[ 6,
          21,
          9,
          23 ],
        2028:[ 6,
          21,
          9,
          23 ],
        2029:[ 6,
          21,
          9,
          23 ],
        2030:[ 6,
          21,
          9,
          23 ],
        2031:[ 6,
          21,
          9,
          23 ],
        2032:[ 6,
          21,
          9,
          23 ],
        name:"Summer" } ] };
  data$3.PH;
  data$3.SH;

  var holiday_definitions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ar: data$D,
    at: data$C,
    au: data$B,
    be: data$A,
    br: data$z,
    ca: data$y,
    ch: data$x,
    ci: data$w,
    cn: data$v,
    cz: data$u,
    de: data$t,
    dk: data$s,
    es: data$r,
    fi: data$q,
    fr: data$p,
    gb: data$o,
    gr: data$n,
    hr: data$m,
    hu: data$l,
    ie: data$k,
    it: data$j,
    jp: data$i,
    lu: data$h,
    na: data$g,
    nl: data$f,
    no: data$e,
    nz: data$d,
    pl: data$c,
    ro: data$b,
    ru: data$a,
    se: data$9,
    si: data$8,
    sk: data$7,
    ua: data$6,
    us: data$5,
    vn: data$4,
    xa: data$3
  });

  var data$2 = { "assuming ok for ko":{ daytime:"sunrise-sunset",
      spring:"Mar-May",
      summer:"Jun-Aug",
      autumn:"Sep-Nov",
      winter:"Dec-Feb",
      _:"-",
      "=":"-",
      "frühling":"Mar-May",
      "frühjahr":"Mar-May",
      sommer:"Jun-Aug",
      herbst:"Sep-Nov",
      gesloten:"off",
      feestdag:"PH",
      feestdagen:"PH",
      m:"Mo",
      w:"We",
      f:"Fr",
      primavera:"Mar-May",
      estate:"Jun-Aug",
      autunno:"Sep-Nov",
      inverno:"Dec-Feb" },
    "please use English written ok for ko":{ "(?:an )?feiertag(?:s|en?)?":"PH" },
    "please use off for ko":{ "ruhetage?":"off",
      geschlossen:"off",
      geschl:"off",
      except:"off" },
    "please use ok for workday":{ wd:"Mo-Fr",
      "on work days?":"Mo-Fr",
      "weekdays?":"Mo-Fr",
      "werktags?":"Mo-Sa",
      vardagar:"Mo-Fr" },
    "omit hour keyword":{ h:"" },
    "omit ko":{ season:"",
      hs:"",
      hrs:"",
      hours:"",
      uhr:"",
      "geöffnet":"",
      zwischen:"",
      ist:"",
      durchgehend:"",
      "öffnungszeit(?:en)?:?":"" },
    "omit tag key":{ "opening_hours\\s*=":"" },
    "omit wrong keyword open end":{ from:"",
      ab:"",
      von:"" },
    "assuming open end for ko":{ "(?:bis|till?|-|–)? ?(?:open ?end|late)":"+" },
    "please use ok for uncertainty":{ "~":"-",
      "～":"-" },
    "please use fallback rule":{ otherwise:"||" },
    "please use ok for missing data":{ "\\?":"" },
    "please use ok for ko":{ "→":"-",
      "−":"-",
      "—":"-",
      "ー":"-",
      to:"-",
      "до":"-",
      a:"-",
      as:"-",
      "á":"-",
      "ás":"-",
      "às":"-",
      ate:"-",
      "till?":"-",
      until:"-",
      through:"-",
      and:",",
      "&":",",
      "：":":",
      "'":"\"",
      always:"24/7",
      "always open":"24/7",
      "always closed":"closed",
      nonstop:"24/7",
      "24x7":"24/7",
      anytime:"24/7",
      "all day":"24/7",
      daily:"Mo-Su",
      everyday:"Mo-Su",
      "every day":"Mo-Su",
      "all days":"Mo-Su",
      "7j/7":"Mo-Su",
      "7/7":"Mo-Su",
      "7days":"Mo-Su",
      "7 days":"Mo-Su",
      "7 days a week":"Mo-Su",
      "7 days/week":"Mo-Su",
      "24 hours 7 days a week":"24/7",
      "24 hours":"00:00-24:00",
      midday:"12:00",
      midnight:"00:00",
      "(?:public )?holidays?":"PH",
      "(?:one )?day after public holiday":"PH +1 day",
      "(?:one )?day before public holiday":"PH -1 day",
      "school ?holidays?":"SH",
      "weekends?":"Sa,Su",
      daylight:"sunrise-sunset",
      "on(?:_| )?appointments?":"\"on appointment\"",
      "by(?:_| )?appointments?":"\"by appointment\"",
      "nach(?: |_)vereinbarung":"\"Nach Vereinbarung\"",
      "nach(?: |_)absprache":"\"Nach Absprache\"",
      bis:"-",
      "täglich":"Mo-Su",
      "(?:schul)?ferien":"SH",
      "(?:an|nur)? ?sonn-?(?: und |/)feiertag(?:s|en?)?":"PH,Su",
      und:",",
      u:",",
      auch:",",
      "fermé":"off",
      et:",",
      "à":"-",
      "jours fériés":"PH",
      sundown:"sunset",
      "morgendämmerung":"dawn",
      "abenddämmerung":"dusk",
      sonnenaufgang:"sunrise",
      sonnenuntergang:"sunset",
      ostern:"easter" },
    "please use English abbreviation ok for so":{ so:"Su" },
    "please use English abbreviation ok for ko":{ sun:"Su",
      "sundays?":"Su",
      mon:"Mo",
      "mondays?":"Mo",
      "tues?":"Tu",
      "tuesdays?":"Tu",
      "weds?":"We",
      "wednesdays?":"We",
      thu:"Th",
      "thurs?":"Th",
      "thursdays?":"Th",
      fri:"Fr",
      "fridays?":"Fr",
      sat:"Sa",
      "saturdays?":"Sa",
      son:"Su",
      "sonn-":"Su",
      "sonntags?":"Su",
      "montags?":"Mo",
      di:"Tu",
      "die?":"Tu",
      "dienstags?":"Tu",
      mi:"We",
      "mit?":"We",
      "mittwochs?":"We",
      "don?":"Th",
      "donnerstags?":"Th",
      fre:"Fr",
      "freitags?":"Fr",
      sam:"Sa",
      "samstags?":"Sa",
      dim:"Su",
      dimanche:"Su",
      "lun?":"Mo",
      lundi:"Mo",
      mardi:"Tu",
      mer:"We",
      mercredi:"We",
      "jeu?":"Th",
      jeudi:"Th",
      "ven?":"Fr",
      vendredi:"Fr",
      samedi:"Sa",
      "zon?":"Su",
      zontag:"Su",
      zondag:"Su",
      maandag:"Mo",
      din:"Tu",
      dinsdag:"Tu",
      "woe?":"We",
      woensdag:"We",
      donderdag:"Th",
      "vri?":"Fr",
      vrijdag:"Fr",
      "zat?":"Sa",
      zaterdag:"Sa",
      "neděle":"Su",
      ne:"Su",
      "pondělí":"Mo",
      po:"Mo",
      "úterý":"Tu",
      "út":"Tu",
      "středa":"We",
      st:"We",
      "čtvrtek":"Th",
      "čt":"Th",
      "pátek":"Fr",
      "pá":"Fr",
      sobota:"Sa",
      martes:"Tu",
      "miércoles":"We",
      jueves:"Th",
      viernes:"Fr",
      "sábado":"Sa",
      domingo:"Su",
      lunes:"Mo",
      selasa:"Su",
      rabu:"Mo",
      kami:"Tu",
      jumat:"We",
      sabtu:"Th",
      minggu:"Fr",
      senin:"Sa",
      "söndag":"Su",
      "söndagar":"Su",
      "måndag":"Mo",
      ma:"Mo",
      tisdag:"Tu",
      onsdag:"We",
      torsdag:"Th",
      fredag:"Fr",
      "lördag":"Sa",
      "lördagar":"Sa",
      niedziela:"Su",
      niedz:"Su",
      n:"Su",
      ndz:"Su",
      "poniedziałek":"Mo",
      poniedzialek:"Mo",
      pon:"Mo",
      pn:"Mo",
      wtorek:"Tu",
      wt:"Tu",
      "środa":"We",
      sroda:"We",
      "śr":"We",
      sr:"We",
      czwartek:"Th",
      czw:"Th",
      cz:"Th",
      "piątek":"Fr",
      piatek:"Fr",
      pt:"Fr",
      sob:"Sa",
      "воскресенье":"Su",
      "Вс":"Su",
      "voskresen'ye":"Su",
      "понедельник":"Mo",
      "Пн":"Mo",
      "ponedel'nik":"Mo",
      "вторник":"Tu",
      vtornik:"Tu",
      "среда":"We",
      sreda:"We",
      "четверг":"Th",
      chetverk:"Th",
      "пятница":"Fr",
      pyatnitsa:"Fr",
      "суббота":"Sa",
      subbota:"Sa",
      "søndag":"Su",
      mandag:"Mo",
      tirsdag:"Tu",
      "lørdag":"Sa",
      dom:"Su",
      "domenica?":"Su",
      "domeniche?":"Su",
      lun:"Mo",
      "lunedì?":"Mo",
      "mar?":"Tu",
      "martedì?":"Tu",
      "mer?":"We",
      "mercoledì?":"We",
      gio:"Th",
      "giovedì?":"Th",
      ven:"Fr",
      "venerdì?":"Fr",
      sab:"Sa",
      "sabato?":"Sa",
      "jänner":"Jan",
      january:"Jan",
      february:"Feb",
      march:"Mar",
      april:"Apr",
      "june?":"Jun",
      "july?":"Jul",
      august:"Aug",
      september:"Sep",
      sept:"Sep",
      october:"Oct",
      november:"Nov",
      december:"Dec",
      januar:"Jan",
      februar:"Feb",
      "märz?":"Mar",
      maerz:"Mar",
      mai:"May",
      juni:"Jun",
      juli:"Jul",
      okt:"Oct",
      oktober:"Oct",
      dez:"Dec",
      dezember:"Dec",
      janvier:"Jan",
      "février":"Feb",
      "fév":"Feb",
      mars:"Mar",
      avril:"Apr",
      avr:"Apr",
      juin:"Jun",
      juillet:"Jul",
      "août":"Aug",
      "aoû":"Aug",
      septembre:"Sep",
      octobre:"Oct",
      novembre:"Nov",
      "décembre":"Dec",
      januari:"Jan",
      februari:"Feb",
      maart:"Mar",
      mei:"May",
      augustus:"Aug",
      gennaio:"Jan",
      febbraio:"Feb",
      marzo:"Mar",
      aprile:"Apr",
      "giugno?":"Jun",
      "luglio?":"Jul",
      agosto:"Aug",
      settembre:"Sep",
      ottobre:"Oct",
      dicembre:"Dec" },
    "please use ok for similar looking ko":{ "оff":"off" },
    "please use 24 hours time for ko":{ pm:"pm",
      "p.m.":"pm",
      "рм":"pm",
      am:"am",
      "a.m.":"am",
      "ам":"am" },
    "please use restriction comment time for ko":{ damen:"open \"Damen\"",
      herren:"open \"Herren\"" },
    "please use ok for typographically correct":{ "–":"-",
      "„":"\"",
      "“":"\"",
      "”":"\"",
      "«":"\"",
      "»":"\"",
      "‚":"\"",
      "‘":"\"",
      "’":"\"",
      "「":"\"",
      "」":"\"",
      "『":"\"",
      "』":"\"" } };

  var data$1 = { "unexpected token":"Unexpected token: \"{{token}}\" This means that the syntax is not valid at that point or it is currently not supported.",
    "no string":"The value (first parameter) is not a string.",
    nothing:"The value contains nothing meaningful which can be parsed.",
    "nothing useful":"This rule does not contain anything useful. Please remove this empty rule.",
    "combine rules":"Separate rules detected each of which only consists of a time selector. These rules should be written as one rule by combining them using \"{{ok}}\".",
    "value ends with token":"The value ends with \"{{token}}\". Please either continue after \"{{token}}\" or remove \"{{token}}\".",
    "programmers joke":"Might it be possible that you are a programmer and adding a semicolon after each statement is hardwired in your muscle memory ;) ? The thing is that the semicolon in the opening_hours syntax is defined as rule separator. So for compatibility reasons you should omit this last semicolon.",
    "interpreted as year":"The number {{number}} will be interpreted as year. This is probably not intended. Times can be specified as \"12:00\".",
    "rule before fallback empty":"Rule before fallback rule does not contain anything useful",
    "hour min separator":"Please use \":\" as hour/minute-separator",
    "warnings severity":"The parameter optional_conf_parm[\"warnings_severity\"] must be an integer number between 0 and 7 (inclusive). Given {{severity}}, expected one of the following numbers: {{allowed}}.",
    "optional conf parm type":"The optional_conf_parm parameter is of unknown type. Given {{given}}",
    "conf param tag key missing":"The optional_conf_parm[\"tag_key\"] is missing, required by optional_conf_parm[\"map_value\"].",
    "conf param mode invalid":"The optional_conf_parm[\"mode\"] parameter is a invalid number. Gave {{given}}, expected one of the following numbers: {{allowed}}.",
    "conf param unknown type":"The optional_conf_parm[\"{{key}}\"] parameter is of unknown type. Given {{given}}, expected {{expected}}.",
    "library bug":"An error occurred during evaluation of the value \"{{value}}\". Please file a bug report or pull request: {{url}}.{{message}}",
    "library bug PR only":"An error occurred during evaluation of the value \"{{value}}\". Please submit a pull request: {{url}}.{{message}}",
    "use multi":"You have used {{count}} {{part2}} Rules can be separated by \";\".",
    "selector multi 2a":"{{what}} in one rule. You may only use one in one rule.",
    "selector multi 2b":"not connected {{what}} in one rule. This is probably an error. Equal selector types can (and should) always be written in conjunction separated by comma. Example for time ranges \"12:00-13:00,15:00-18:00\". Example for weekdays \"Mo-We,Fr\".",
    "selector state":"state keywords",
    comments:"comments",
    "holiday ranges":"holiday ranges",
    months:"months",
    weekdays:"weekdays",
    ranges:"ranges",
    "default state":"This rule which changes the default state (which is closed) for all following rules is not the first rule. The rule will overwrite all previous rules. It can be legitimate to change the default state to open for example and then only specify for which times the facility is closed.",
    vague:"This rule is not very explicit because there is no time selector being used. A time selector is the part specifying hours when the object is opened, for example \"10:00-19:00\". Please add a time selector to this rule or use a comment to make it more explicit.",
    "empty comment":"You have used an empty comment. Please either write something in the comment or use the keyword unknown instead.",
    separator_for_readability:"You have used the optional symbol <separator_for_readability> in the wrong place. Please check the syntax specification to see where it could be used or remove it.",
    "strange 24/7":"You used 24/7 in a way that is probably not interpreted as \"24 hours 7 days a week\". For correctness you might want to use \"open\" or \"closed\" for this rule and then write your exceptions which should achieve the same goal and is more clear e.g. \"open; Mo 12:00-14:00 off\".",
    "public holiday":"There was no PH (public holiday) specified. This is not very explicit.{{part2}} Please either append a \"PH off\" rule if the amenity is closed on all public holidays or use something like \"Sa,Su,PH 12:00-16:00\" to say that on Saturdays, Sundays and on public holidays the amenity is open 12:00-16:00. Be careful with opening hours like \"Fr-Sa 18:00-06:00\" because \"PH off\" applies to 00:00-24:00. So \"Fr-Sa 18:00-06:00; PH 18:00-06:00 off\" is probably what you want. If the amenity is open everyday including public holidays then you can make this explicit by writing \"Mo-Su,PH\". If you are not certain try to find it out. If you can’t then do not add PH to the value and ignore this warning.",
    "public holiday part2":" Unfortunately the tag key (e.g. \"opening_hours\", or \"lit\") is unknown to opening_hours.js. This warning only applies to the key {{keys}}. If your value is for that key than read on. If not you can ignore the following.",
    "additional_rule_separator not used after time wrapping midnight":"This rule overwrites parts of the previous rule. This happens because normal rules apply to the whole day and overwrite any definition made by previous rules. You can make this rule an additional rule by using a \",\" instead of the normal \";\" to separate the rules. Note that the overwriting can also be desirable in which case you can ignore this warning.",
    "additional rule which evaluates to closed":"This rule will be evaluated as closed but it was specified as additional rule. It should be specified as normal rule using \";\" as rule separator. See https://wiki.openstreetmap.org/wiki/Key:opening_hours/specification#explain:rule_modifier:closed.",
    switched:"The selector \"{{first}}\" was switched with the selector \"{{second}}\" for readability and compatibility reasons.",
    "no colon after":"Please don’t use \":\" after {{token}}.",
    "number -5 to 5":"Number between -5 and 5 (except 0) expected.",
    "one weekday constraint":"You can not use more than one constrained weekday in a month range",
    "range constrained weekdays":"You can not use a range of constrained weekdays in a month range",
    expected:"\"{{symbol}}\" expected.",
    "range zero":"You can not use {{type}} ranges with period equals zero.",
    "period one year+":"Please don’t use {{type}} ranges with period equals one. If you want to express that a facility is open starting from a year without limit use \"<year>+\".",
    "period one":"Please don’t use {{type}} ranges with period equals one.",
    "month 31":"The day for {{month}} must be between 1 and 31.",
    "month 30":"Month {{month}} doesn't have 31 days. The last day of {{month}} is day 30.",
    "month feb":"Month {{month}} either has 28 or 29 days (leap years).",
    "point in time":"hyphen (-) or open end (+) in time range {{calc}}expected. For working with points in time, the mode for {{libraryname}} has to be altered. Maybe wrong tag?",
    calculation:"calculation",
    "time range continue":"Time range does not continue as expected",
    "period continue":"Time period does not continue as expected. Example \"/01:30\".",
    "time range mode":"{{libraryname}} is running in \"time range mode\". Found point in time.",
    "point in time mode":"{{libraryname}} is running in \"points in time mode\". Found time range.",
    "outside current day":"Time range starts outside of the current day",
    "two midnights":"Time spanning more than two midnights not supported",
    "without minutes":"Time range without minutes specified. Not very explicit! Please use this syntax instead \"{{syntax}}\".",
    "outside day":"Time range starts outside of the current day",
    "zero calculation":"Adding zero in a variable time calculation does not change the variable time. Please omit the calculation (example: \"sunrise-(sunset-00:00)\").",
    "calculation syntax":"Calculation with variable time is not in the right syntax",
    missing:"Missing \"{{symbol}}\"",
    "(time)":"(time)",
    "bad range":"Bad range: {{from}}-{{to}}",
    "] or more numbers":"\"]\" or more numbers expected.",
    "additional rule no sense":"An additional rule does not make sense here. Just use a \";\" as rule separator. See https://wiki.openstreetmap.org/wiki/Key:opening_hours/specification#explain:additional_rule_separator",
    "unexpected token weekday range":"Unexpected token in weekday range: {{token}}",
    "max differ":"There should be no reason to differ more than {{maxdiffer}} days from a {{name}}. If so tell us …",
    "adding 0":"Adding 0 does not change the date. Please omit this.",
    "unexpected token holiday":"Unexpected token (holiday parser): {{token}}",
    "no holiday definition":"There are no holidays ({{name}}) defined for country {{cc}}.",
    "no holiday definition state":"There are no holidays ({{name}}) defined for country {{cc}} and state {{state}}.",
    "no country code":"Country code missing which is needed to select the correct holidays (see README how to provide it)",
    "no SH definition":"School holiday {{name}}not defined for the year {{year}}.",
    "movable no formula":"Movable day {{name}} can not not be calculated. Please add the formula how to calculate it.",
    "movable not in year":"The movable day {{name}} plus {{days}} days is not in the year of the movable day anymore. Currently not supported.",
    "year range one year":"A year range in which the start year is equal to the end year does not make sense. Please remove the end year. E.g. \"{{year}} May 23\"",
    "year range reverse":"A year range in which the start year is greater than the end year does not make sense. Please turn it over.",
    "year past":"The year is in the past.",
    "unexpected token year range":"Unexpected token in year range: {{token}}",
    "week range reverse":"You have specified a week range in reverse order or leaping over a year. This is (currently) not supported.",
    "week negative":"You have specified a week date less then one. A valid week date range is 1-53.",
    "week exceed":"You have specified a week date greater then 53. A valid week date range is 1-53.",
    "week period less than 2":"You have specified a week period which is less than two. If you want to select the whole range from week {{weekfrom}} to week {{weekto}} then just omit the \"/{{period}}\".",
    "week period greater than 26":"You have specified a week period which is greater than 26. 26.5 is the half of the maximum 53 week dates per year so a week date period greater than 26 would only apply once per year. Please specify the week selector as \"week {{weekfrom}}\" if that is what you want to express.",
    "unexpected token week range":"Unexpected token in week range: {{token}}",
    "unexpected token month range":"Unexpected token in month range: {{token}}",
    "day range reverse":"Range in wrong order. From day is greater than to day.",
    "open end":"Specified as open end. Closing time was guessed.",
    "date parameter needed":"Date parameter needed.",
    "assuming ok for ko":"Assuming \"{{ok}}\" for \"{{ko}}\".",
    "please use ok for ko":"Please use notation \"{{ok}}\" for \"{{ko}}\".",
    "please use ok for similar looking ko":"Please use notation \"{{ok}}\" for \"{{ko}}\". Those characters look very similar but are not the same!",
    "rant degree sign used for zero":"Note that this is not a (superscript) zero but a degree sign which is misused as zero. A superscript zero is defined in Unicode (°) and would have been more appropriate/uniform here. But note that the use of none-ASCII digits is not allowed.",
    "please use English written ok for ko":"Please use the English written \"{{ok}}\" for \"{{ko}}\".",
    "please use English abbreviation ok for ko":"Please use the English abbreviation \"{{ok}}\" for \"{{ko}}\".",
    "please use English abbreviation ok for so":"Please use the English abbreviation \"{{ok}}\" for \"{{ko}}\". Note that it might also mean Saturday in Polish.",
    "please use off for ko":"Please use \"{{ok}}\" for \"{{ko}}\". Example: \"Mo-Fr 08:00-12:00; Tu off\".",
    "please use ok for workday":"Assuming \"{{ok}}\" for \"{{ko}}\". Please avoid using \"workday\": https://wiki.openstreetmap.org/wiki/Talk:Key:opening_hours#need_syntax_for_holidays_and_workingdays",
    "omit hour keyword":"Please omit \"{{ko}}\" or use a colon instead. Example: \"12:00-14:00\".",
    "omit ko":"Please omit \"{{ko}}\".",
    "omit tag key":"Please omit \"{{ko}}\". The tag key must not be in the tag value.",
    "omit wrong keyword open end":"Please omit \"{{ko}}\". The tag key must not be in the tag value.",
    "assuming open end for ko":"Assuming \"{{ok}}\" (open end time) for \"{{ko}}\". Example: \"12:00+\".",
    "please use ok for uncertainty":"Please use notation \"{{ok}}\" for \"{{ko}}\". If there is reason to suspect uncertainty consider adding a comment. Example: 12:00-14:00 \"only on sunshine\".",
    "please use fallback rule":"Please use notation \"{{ok}}\" (Fallback rule) for \"{{ko}}\". Example: Mo-Fr 12:00-14:00; PH off || \"by appointment\"",
    "please use ok for missing data":"Please consider adding a FIXME tag instead.",
    "please use 24 hours time for ko":"Please use time format in 24 hours notation instead of the legacy 12 hours variant. If the 12 hours variant is used you might have to convert the hours to the 24 hours notation.",
    "please use restriction comment time for ko":"It looks like you might want to define additional restrictions. If that is the case and they can not be expressed by other syntax elements then you could use a comment together with the `open` keyword. Example: open \"female only\"",
    "please use ok for typographically correct":"Please use notation \"{{ok}}\" for \"{{ko}}\". Although using \"{{ko}}\" is typographical correct, it is not defined in the opening_hours syntax. Correct typography should be done on application level …" };

  var data = { en:{ opening_hours:{ pretty:{ off:"closed",
          SH:"school holidays",
          PH:"public holidays" } } },
    de:{ opening_hours:{ texts:{ "unexpected token":"Unerwartetes Zeichen: \"{{token}}\" Das bedeutet, dass die Syntax an dieser Stelle nicht erkannt werden konnte.",
          "no string":"Der Wert (erster Parameter) ist kein String",
          nothing:"Der Wert enthält nichts, was ausgewertet werden könnte.",
          "nothing useful":"Diese Regel enthält nichts nützliches. Bitte entferne diese leere Regel.",
          "combine rules":"Getrennte Regeln erkannt welche jeweils nur aus einer Zeit Bereichsdefinition bestehen. Diese Regeln sollten mittels \"{{ok}}\" zu einer Regel kombiniert werden.",
          "value ends with token":"Der Wert endet mit \"{{token}}\". Bitte ergänze den Wert nach \"{{token}}\" oder lösche \"{{token}}\".",
          "programmers joke":"Kann es sein, dass du ein Programmierer bist und das Hinzufügen eines Semikolons nach jedem Statement ist zwanghaft ;) ? Es ist so, dass das Semikolon in der opening_hours-Syntax als Trenner für Regeln definiert ist. Bitte verzichte an dieser Stelle auf ein Semikolon.",
          "interpreted as year":"Die Zahl {{number}} wird als Jahr interpretiert. Vermutlich ist das nicht beabsichtigt. Uhrzeiten werden als \"12:00\" angegeben.",
          "rule before fallback empty":"Die Regel vor der Fallback-Regel enthält nichts nützliches",
          "hour min separator":"Bitte benutze \":\" als Stunden/Minuten-Trenner",
          "warnings severity":"Der Parameter optional_conf_parm[\"warnings_severity\"] muss eine ganze Zahl zwischen (einschließlich) 0 und (einschließlich) 7 sein. Gegeben: {{severity}}, erwartet: Eine der Zahlen: {{allowed}}.",
          "optional conf parm type":"Der optional_conf_parm Parameter hat einen unbekannten Typ. Gegeben: {{given}}",
          "conf param tag key missing":"Der optional_conf_parm[\"tag_key\"] fehlt, ist aber notwendig wegen optional_conf_parm[\"map_value\"].",
          "conf param mode invalid":"Der optional_conf_parm[\"mode\"]-Parameter ist eine ungültige Zahl. Gegeben: {{given}}, erwartet: Eine der Zahlen: {{allowed}}.",
          "conf param unknown type":"Der optional_conf_parm[\"{{key}}\"] Parameter hat einen unbekannten Typ. Gegeben: {{given}}, erwartet: {{expected}}.",
          "library bug":"Bei der Auswertung des Wertes \"{{value}}\" ist ein Fehler aufgetreten. Bitte melde diesen Fehler oder korrigiere diesen mittels eines Pull Requests oder Patches: {{-url}}.{{message}}",
          "library bug PR only":"Bei der Auswertung des Wertes \"{{value}}\" ist ein Fehler aufgetreten. Du kannst dies korrigieren, indem du das Problem löst und in Form eines Pull Requests oder Patches zum Projekt beiträgst: {{-url}}.{{message}}",
          "use multi":"Du hast {{count}} {{-part2}} Einzelne Regeln können mit \";\" getrennt werden.",
          "selector multi 2a":"{{what}} in einer Regel benutzt. Du kannst nur einen davon je Regel verwenden",
          "selector multi 2b":"nicht verbundene {{what}} in einer Regel benutzt. Das ist vermutlich ein Fehler. Gleiche Selektoren können (und sollten) immer zusammen und durch Kommas getrennt geschrieben werden. Beispiel für Zeitspannen \"12:00-13:00,15:00-18:00\". Beispiel für Wochentage \"Mo-We,Fr\".",
          "selector state":"Status-Schlüsselwörter (offen, geschlossen)",
          comments:"Kommentare",
          months:"Monate",
          weekdays:"Wochentage",
          ranges:"Zeitspannen",
          "default state":"Diese Regel, welche den Standard-Status (d.h. geschlossen) für alle folgenden Regeln ändert, ist nicht die erste Regel. Diese Regel überschreibt alle vorherigen Regeln. Es kann legitim sein, den Standard-Status z.B. auf geöffnet festzulegen und dann nur die Zeiten, zu denen geschlossen ist, anzugeben.",
          vague:"Diese Regel ist nicht sehr aussagekräftig, da kein Zeit Selektor angegeben wurde. Ein Zeit Selektor ist die Komponente die angibt, zu welcher Tageszeit ein Objekt geöffnet hat, zum Beispiel \"10:00-19:00\". Bitte füge eine Zeitangabe oder einen Kommentar hinzu, um dies zu verbessern.",
          "empty comment":"Du hast einen leeren Kommentar verwendet.\" Bitte schreibe entweder einen Kommentar-Text oder benutze stattdessen das Schlüsselwort \"unknown\".",
          separator_for_readability:"Du hast das optionale Symbol <separator_for_readability> an der falschen Stelle benutzt. Bitte lies die Syntax-Spezifikation um zu sehen, wo es verwendet werden kann, oder entferne es.",
          "strange 24/7":"Du hast 24/7 in einer Art verwendet, welche wahrscheinlich nicht als \"24 Stunden, 7 Tage die Woche\" interpretiert wird. Der Richtigkeit halber solltest du \"open\" oder \"closed\" für diese Regel verwenden und dann die Ausnahmen angeben um das selbe Ziel zu erreichen. So ist es klarer – zum Beispiel \"open; Mo 12:00-14:00 off\".",
          "public holiday":"Es wurde keine Regel für \"PH\" (feiertags) angegeben. Dies ist nicht sehr aussagekräftig.{{-part2}} Bitte füge die Regel \"PH off\" an, wenn die Einrichtung an allen Feiertagen geschlossen ist oder schreibe \"Sa,Su,PH 12:00-16:00\" um auszudrücken, dass Samstags, Sonntags und feiertags von 12:00-16:00 geöffnet ist. Bei einer Öffnungszeit wie \"Fr-Sa 18:00-06:00\" ist Vorsicht geboten, da \"PH off\" auf 00:00-24:00 zutrifft. Hier kann \"Fr-Sa 18:00-06:00; PH 18:00-06:00 off\" verwendet werden. Falls die Einrichtung täglich und an Feiertagen geöffnet ist, kann dies explizit mittels \"Mo-Su,PH\" ausgedrückt werden. Wenn du dir im Unklaren bist, versuche die Öffnungszeit zu klären. Falls das nicht möglich ist, lass die Angabe weg und ignoriere diese Warnung.",
          "public holiday part2":" Leider ist der \"tag key\" (beispielsweise \"opening_hours\", oder \"lit\") in opening_hours.js nicht bekannt. Diese Warnung betrifft nur die Keys: {{keys}}. Falls deine Angabe nicht für einen dieser ist, ignoriere bitte folgenden Hinweis:",
          "additional_rule_separator not used after time wrapping midnight":"Diese Regel überschreibt Teile der vorherigen Regel. Der Grund dafür ist, dass normale Regeln auf den ganzen Tag zutreffen und alle Definitionen von vorhergehenden Regeln für diesen Tag überschreiben. Du kannst diese Regel als additive Regel deklarieren indem du ein \",\" anstelle des üblichen \";\" für diese Regel verwendest. Beachte das die Überschreibung auch gewünscht sein kann und in so einem Fall diese Warnung ignoriert werden kann.",
          "additional rule which evaluates to closed":"Diese Regel wird als geschlossen ausgewertet aber wurde als additive Regel angegeben. Sie sollte als normale Regel mittels \";\" definiert sein. Siehe https://wiki.openstreetmap.org/wiki/DE:Key:opening_hours/specification#explain:rule_modifier:closed.",
          switched:"Der Selektor \"{{first}}\" wurde für eine bessere Lesbarkeit und der Vollständigkeit halber mit \"{{second}}\" getauscht.",
          "no colon after":"Bitte Benutze kein \":\" nach dem Token {{token}}.",
          "number -5 to 5":"Zahl zwischen -5 und 5 (außer 0) erwartet.",
          "one weekday constraint":"Du kannst höchstens einen beschränkten Wochentag in einer Monats-Spanne verwenden",
          "range constrained weekdays":"Du kannst keine Wochentags-Spanne als Beschränkung in einer Monats-Spanne verwenden",
          expected:"\"{{-symbol}}\" erwartet.",
          "range zero":"Du kannst keine {{type}}-Spanne mit Periode \"0\" verwenden.",
          "period one year+":"Bitte verwende keine {{type}}-Spannen mit Periode \"1\". Wenn du ausdrücken willst, das eine Einrichtung ab einem bestimmten Jahr immer offen ist, benutze bitte \"<year>+\".",
          "period one":"Bitte verwende keine {{type}}-Spannen mit Periode \"1\".",
          "month 31":"Die Tagesangabe für {{month}} muss zwischen 1 und 31 liegen.",
          "month 30":"Der Monat {{month}} hat keine 31 Tage. Der letzte Tag von {{month}} ist Tag 30.",
          "month feb":"\"Der Monat {{month}} hat entweder 28 oder 29 Tage (Schaltjahre).\"",
          "point in time":"Erwarte Bindestrich (-) oder offenes Ende (+) in der Zeitspanne {{calc}}. Um mit Zeitpunkten zu arbeiten, muss der Modus für  {{libraryname}} umgestellt werden. Vielleicht falsches OSM-tag verwendet?",
          calculation:"Berechnung",
          "time range continue":"Die Zeitspanne geht nicht wie erwartet weiter",
          "period continue":"Die Zeitspannen-Periode geht nicht wie erwartet weiter. Beispiel \"/01:30\".",
          "time range mode":"{{libraryname}} wurde im \"Zeitspannen-Modus\" aufgerufen. Zeitpunkt gefunden.",
          "time ranges":"Zeitspannen",
          "holiday ranges":"Feiertagen",
          "point in time mode":"{{libraryname}} wurde im \"Zeitpunkt-Modus\" aufgerufen. Zeitspanne gefunden.",
          "outside current day":"Zeitspanne beginnt außerhalb des aktuellen Tages",
          "two midnights":"Zeitspanne welche mehrmals Mitternacht beinhaltet wird nicht unterstützt",
          "without minutes":"Zeitspanne ohne Minutenangabe angegeben. Das ist nicht sehr eindeutig! Bitte verwende stattdessen folgende Syntax \"{{syntax}}\".",
          "outside day":"Die Zeitspanne beginnt außerhalb des aktuellen Tages",
          "zero calculation":"Das Hinzufügen von 0 in einer variablen Zeitberechnung ändert die variable Zeit nicht. Bitte entferne die Zeitberechnung (Beispiel: \"sunrise-(sunset-00:00)\").",
          "calculation syntax":"Berechnung mit variabler Zeit hat nicht die korrekte Syntax",
          missing:"Fehlendes \"{{symbol}}\"",
          "(time)":"(Zeit)",
          "bad range":"Ungültige Zeitspanne: {{from}}-{{to}}",
          "] or more numbers":"\"]\" oder weitere Zahlen erwartet.",
          "additional rule no sense":"Eine weitere Regel an dieser Stelle ergibt keinen Sinn. Benutze einfach \";\" als Trenner für Regeln. Siehe https://wiki.openstreetmap.org/wiki/Key:opening_hours/specification#explain:additional_rule_separator",
          "unexpected token weekday range":"Unerwartes Token in Tages-Spanne: {{token}}",
          "max differ":"Es sollte keinen Grund geben, mehr als {{maxdiffer}} Tage von einem {{name}} abzuweichen. Wenn nötig, teile uns dies bitte mit …",
          "adding 0":"Addition von 0 verändert das Datum nicht. Bitte weglassen.",
          "unexpected token holiday":"Unerwarteter Token (in Feiertags-Auswertung): {{token}}",
          "no holiday definition":"{{name}} ist für das Land {{cc}} nicht definiert.",
          "no holiday definition state":"{{name}} ist für das Land {{cc}} und Bundesland {{state}} nicht definiert.",
          "no country code":"Der Ländercode fehlt. Dieser wird benötigt um die korrekten Feiertage zu bestimmen (siehe in der README wie dieser anzugeben ist)",
          "no SH definition":"Die Schulferien {{name}}sind für das Jahr {{year}} nicht definiert",
          "movable no formula":"Der bewegliche Feiertag {{name}} kann nicht berechnet werden. Bitte füge eine entsprechende Formel hinzu.",
          "movable not in year":"Der bewegliche Feiertag {{name}} plus {{days}} Tage befindet sich nicht mehr im selben Jahr. Aktuell nicht unterstützt.",
          "year range one year":"Eine Jahres-Spanne mit gleichem Jahr als Beginn und Ende ergibt keinen Sinn. Bitte entferne das Ende-Jahr. zum Beispiel: \"{{year}} May 23\"",
          "year range reverse":"Eine Jahres-Spanne mit Beginn größer als Ende ergibt keinen Sinn. Bitte umdrehen.",
          "year past":"Das Jahr liegt in der Vergangenheit.",
          "unexpected token year range":"Unerwartetes Token in der Jahres-Spanne: {{token}}",
          "week range reverse":"Du hast eine Wochen-Spanne in umgekehrter Reihenfolge oder mehrere Jahre umfassende angegeben. Dies ist aktuell nicht unterstützt.",
          "week negative":"Du hast eine Kalenderwoche kleiner 1 angegeben. Korrekte Angaben sind 1-53.",
          "week exceed":"Du hast eine Kalenderwoche größer als 53 angegeben. Korrekte Angaben sind 1-53.",
          "week period less than 2":"Du hast eine Wochenperiode kleiner 2 angegeben. Wenn du die gesamte Spanne von {{weekfrom}} bis {{weekto}} angeben willst, lasse \"/{{period}}\" einfach weg.",
          "week period greater than 26":"Du hast eine Wochen-Periode größer als 26 angegeben. 26,5 ist die Hälfte des Maximums von 53 Wochen pro Jahr. Damit würde eine Periode größer als 26 nur einmal pro Jahr auftreten. Bitte gibt den Wochen-Selektor als \"week {{weekfrom}}\" an, wenn es das ist, was du ausdrücken möchtest.",
          "unexpected token week range":"Unerwartetes Token in Wochen-Spanne: {{token}}",
          "unexpected token month range":"Unerwartetes Token in Monats-Spanne: {{token}}",
          "day range reverse":"Zeitspanne in falscher Reihenfolge. Beginn ist größer als Ende.",
          "open end":"Angegeben als \"open end\". Schließzeit wurde geraten.",
          "date parameter needed":"Datumsparameter nötig.",
          "assuming ok for ko":"\"{{ko}}\" wird als \"{{ok}}\" interpretiert.",
          "please use ok for ko":"Bitte verwende \"{{-ok}}\" anstelle von \"{{-ko}}\".",
          "please use ok for similar looking ko":"Please use notation \"{{ok}}\" for \"{{ko}}\". Those characters look very similar but are not the same!",
          "rant degree sign used for zero":"Beachte das dies ein Gradzeichen ist, welches als (hochgestellte) Null missbraucht wurde. Eine hochgestellte Null ist in Unicode definiert (°) und wäre angebrachter/einheitlicher an dieser Stelle. Allerdings ist die Verwendung von nicht ASCII Ziffern nicht erlaubt.",
          "please use English written ok for ko":"Bitte benutze die englische Schreibweise \"{{ok}}\" für \"{{ko}}\".",
          "please use English abbreviation ok for ko":"Bitte benutze die englische Abkürzung \"{{ok}}\" für \"{{ko}}\".",
          "please use English abbreviation ok for so":"Bitte benutze die englische Abkürzung \"{{ok}}\" für \"{{ko}}\". Beachte das Samstag in Polnisch gemeint sein kann.",
          "please use off for ko":"Bitte benutze \"{{ok}}\" für \"{{ko}}\". Beispiel: \"Mo-Fr 08:00-12:00; Tu off\".",
          "please use ok for workday":"\"{{ko}}\" wird als \"{{ok}}\" interpretiert. Werktag sollte nicht verwendet werden. Siehe https://wiki.openstreetmap.org/wiki/Talk:Key:opening_hours#need_syntax_for_holidays_and_workingdays",
          "omit hour keyword":"Bitte lasse \"{{ko}}\" weg oder verwende einen Doppelpunkt. Beispiel: \"12:00-14:00\".",
          "omit ko":"Bitte verzichte auf \"{{ko}}\".",
          "omit tag key":"Bitte lasse \"{{ko}}\" weg. Der Tag Schlüssel darf nicht im Tag Wert sein.",
          "omit wrong keyword open end":"Bitte lasse \"{{ko}}\" weg. Falls du \"open end\" ausdrücken möchtest verwende bitte ein \"+\". Beispiel: \"12:00+\".",
          "assuming open end for ko":"\"{{ko}}\" wird als \"{{ok}}\" (\"open end\") interpretiert. Example: \"12:00+\".",
          "please use ok for uncertainty":"Bitte verwende \"{{ok}}\" für \"{{ko}}\". Falls der begründete Verdacht der Ungewissheit vorliegt ziehe die Verwendung eines Kommentars in Betracht. Beispiel: 12:00-14:00 \"only on sunshine\".",
          "please use fallback rule":"Bitte verwende \"{{ok}}\" (Fallback Regel) für \"{{ko}}\". Beispiel: Mo-Fr 12:00-14:00; PH off || \"nach Vereinbarung\"",
          "please use ok for missing data":"Bitte verwende eine FIXME Notiz.",
          "please use 24 hours time for ko":"Bitte verwende 24 Stunden Zeitangaben anstelle der veralteten 12 Stunden Variante. Falls die 12 Stunden Variante verwendet wird ist eventuelle eine Konvertierung notwendig.",
          "please use restriction comment time for ko":"Es sieht so aus also möchtest du zusätzliche Einschränkungen für eine Öffnungszeit geben. Falls sich dies nicht mit der Syntax ausdrücken lässt können Kommentare verwendet werden. Zusätzlich sollte eventuell das Schlüsselwort `open` benutzt werden. Beispiel: open \"Nur Frauen\".",
          "please use ok for typographically correct":"Bitte verwende \"{{-ok}}\" für \"{{ko}}\". Auch wenn \"{{ko}}\" typografisch korrekt ist, ist dies in der opening_hours Syntax nicht definiert. Korrekte Typographie sollte auf Anwendungsebene sichergestellt werden …" },
        pretty:{ off:"geschlossen",
          SH:"Schulferien",
          PH:"Feiertags" } } },
    eo:{ opening_hours:{ texts:{ "assuming ok for ko":"\"{{ko}}\" estas interpretita kiel \"{{ok}}\".",
          "please use ok for ko":"Bonvolu uzi la esprimon \"{{-ok}}\" anstataŭ \"{{ko}}\".",
          "please use English abbreviation ok for ko":"Bonvolu uzi la anglan mallongigon \"{{ok}}\" für \"{{ko}}\"." },
        pretty:{ off:"fermita",
          SH:"lernejaj ferioj",
          PH:"festotagoj" } } },
    fi:{ opening_hours:{ pretty:{ off:"suljettu",
          SH:"koululomat",
          PH:"lailliset vapaapäivät" } } },
    fr:{ opening_hours:{ texts:{ "assuming ok for ko":"suppose \"{{ok}}\" pour \"{{ko}}\".",
          "please use ok for ko":"S'il vous plaît utilisez \"{{ok}}\" pour \"{{ko}}\".",
          "please use English abbreviation ok for ko":"S'il vous plaît utiliseé l'abréviation \"{{ok}}\" pour \"{{ko}}\"." },
        pretty:{ off:"fermé",
          SH:"vacances scolaires",
          PH:"jours fériés" } } },
    nl:{ opening_hours:{ texts:{ "please use English abbreviation ok for ko":"Neem de engelse afkorting \"{{ok}}\" voor \"{{ko}}\" alstublieft." },
        pretty:{ off:"gesloten",
          SH:"schoolvakantie",
          PH:"feestdagen" } } },
    ru:{ opening_hours:{ pretty:{ off:"закрыто",
          SH:"каникулы",
          PH:"праздник" } } },
    it:{ opening_hours:{ pretty:{ off:"chiuso",
          SH:"festività scolastiche",
          PH:"festività" } } } };
  data.en;
  data.de;
  data.eo;
  data.fi;
  data.fr;
  data.nl;
  data.ru;
  data.it;

  if (!i18next.isInitialized) {
      i18next.init({
          fallbackLng: 'en',
          // lngWhitelist: ['en', 'de'],
          resources: data,
          getAsync: true,
          useCookie: true,
          // debug: true,
      });
  } else {
      // compat with an app that already initializes i18n
      for (var lang in data) {
          i18next.addResourceBundle(lang, 'opening_hours', data[lang]['opening_hours'], true);
      }
  }

  /*
   * SPDX-FileCopyrightText: © 2012 Dmitry Marakasov
   * SPDX-FileCopyrightText: © 2013 Robin Schneider <ypid@riseup.net>
   *
   * SPDX-License-Identifier: LGPL-3.0-only
   *
   * This file is based on work under the following copyright and permission
   * notice:
   *
   *     Copyright (c) 2012-2013 Dmitry Marakasov
   *     All rights reserved.
   *
   *     Redistribution and use in source and binary forms, with or without
   *     modification, are permitted provided that the following conditions are met:
   *
   *     1. Redistributions of source code must retain the above copyright notice, this
   *     list of conditions and the following disclaimer.
   *
   *     2. Redistributions in binary form must reproduce the above copyright notice,
   *     this list of conditions and the following disclaimer in the documentation
   *     and/or other materials provided with the distribution.
   *
   *     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   *     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   *     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   *     FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   *     DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   *     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   *     CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   *     OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   *     OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */

  function index(value, nominatim_object, optional_conf_parm) {
      // Short constants {{{
      var word_value_replacement = { // If the correct values can not be calculated.
          dawn    : 60 * 5 + 30,
          sunrise : 60 * 6,
          sunset  : 60 * 18,
          dusk    : 60 * 18 + 30,
      };
      var months   = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
      var weekdays = ['Su','Mo','Tu','We','Th','Fr','Sa'];
      var string_to_token_map = {
          'su': [ 0, 'weekday' ],
          'mo': [ 1, 'weekday' ],
          'tu': [ 2, 'weekday' ],
          'we': [ 3, 'weekday' ],
          'th': [ 4, 'weekday' ],
          'fr': [ 5, 'weekday' ],
          'sa': [ 6, 'weekday' ],
          'jan': [  0, 'month' ],
          'feb': [  1, 'month' ],
          'mar': [  2, 'month' ],
          'apr': [  3, 'month' ],
          'may': [  4, 'month' ],
          'jun': [  5, 'month' ],
          'jul': [  6, 'month' ],
          'aug': [  7, 'month' ],
          'sep': [  8, 'month' ],
          'oct': [  9, 'month' ],
          'nov': [ 10, 'month' ],
          'dec': [ 11, 'month' ],
          'day': [ 'day', 'calcday' ],
          'days': [ 'days', 'calcday' ],
          'sunrise': [ 'sunrise', 'timevar' ],
          'sunset': [ 'sunset', 'timevar' ],
          'dawn': [ 'dawn', 'timevar' ],
          'dusk': [ 'dusk', 'timevar' ],
          'easter': [ 'easter', 'event' ],
          'week': [ 'week', 'week' ],
          'open': [ 'open', 'state' ],
          'closed': [ 'closed', 'state' ],
          'off': [ 'off', 'state' ],
          'unknown': [ 'unknown', 'state' ],
      };

      var default_prettify_conf = {
          // Update README.md if changed.
          'zero_pad_hour': true,           // enforce ("%02d", hour)
          'one_zero_if_hour_zero': false,  // only one zero "0" if hour is zero "0"
          'leave_off_closed': true,        // leave keywords "off" and "closed" as is
          'keyword_for_off_closed': 'off', // use given keyword instead of "off" or "closed"
          'rule_sep_string': ' ',          // separate rules by string
          'print_semicolon': true,         // print token which separates normal rules
          'leave_weekday_sep_one_day_betw': true, // use the separator (either "," or "-" which is used to separate days which follow to each other like Sa,Su or Su-Mo
          'sep_one_day_between': ',',      // separator which should be used
          'zero_pad_month_and_week_numbers': true, // Format week (e.g. `week 01`) and month day numbers (e.g. `Jan 01`) with "%02d".
          'locale': 'en',                  // use local language (needs i18next)
      };

      var osm_tag_defaults = {
          'opening_hours'       :  { 'mode' :  0, 'warn_for_PH_missing' :  true, },
          'collection_times'    :  { 'mode' :  2, },
          /* oh_mode 2: "including the hyphen because there are post boxes which are
           * emptied several (undefined) times or one (undefined) time in a certain time
           * frame. This shall be covered also.".
           * Ref: https://wiki.openstreetmap.org/wiki/Key:collection_times */
          'opening_hours:.+'    :  { 'mode' :  0, },
          '.+:opening_hours'    :  { 'mode' :  0, },
          '.+:opening_hours:.+' :  { 'mode' :  0, },
          'smoking_hours'       :  { 'mode' :  0, },
          'service_times'       :  { 'mode' :  2, },
          'happy_hours'         :  { 'mode' :  0, },
          'lit'                 :  { 'mode' :  0,
              map: {
                  'yes'      : 'sunset-sunrise open "specified as yes: At night (unknown time schedule or daylight detection)"',
                  'automatic': 'unknown "specified as automatic: When someone enters the way the lights are turned on."',
                  'no'       : 'off "specified as no: There are no lights installed."',
                  'interval' : 'unknown "specified as interval"',
                  'limited'  : 'unknown "specified as limited"',
              }
          },
      };

      var minutes_in_day = 60 * 24;
      var msec_in_day    = 1000 * 60 * minutes_in_day;
      // var msec_in_week   = msec_in_day * 7;

      var library_name   = 'opening_hours.js';
      var repository_url = 'https://github.com/opening-hours/' + library_name;
      // var issues_url     = repository_url + '/issues?state=open';
      /* }}} */

      /* Translation function {{{ */
      /* Roughly compatibly to i18next so we can replace everything by i18next with
       * sprintf support.
       */
      var locale = 'en'; // Default locale
      if (typeof i18next === 'object') {
          locale = i18next.language;
      }

      var t = function(str, variables) {
          if (
                  typeof i18next === 'object'
                  && typeof i18next.t === 'function'
                  && typeof locale === 'string'
                  && ['de'].indexOf(locale) !== -1
              ) {

              var translatorFunction;
              if (i18next.language !== locale) {
                  translatorFunction = i18next.getFixedT(locale);
              } else {
                  translatorFunction = i18next.t;
              }
              var text = translatorFunction('opening_hours:texts.' + str, variables);
              return text;
          }
          var text = data$1[str];
          if (typeof text === 'undefined') {
              text = str;
          }
          return text.replace(/{{([^{}]*)}}/g, function (match, c) {
              return typeof variables[c] !== 'undefined'
                  ? variables[c]
                  : match
                  ;
              }
          );
      };
      /* }}} */

      /* Optional constructor parameters {{{ */

      /* nominatim_object {{{
       *
       * Required to reasonably calculate 'sunrise' and holidays.
       */
      var location_cc, location_state, lat, lon;
      if (typeof nominatim_object === 'object' && nominatim_object !== null) {
          if (typeof nominatim_object.address === 'object') {
              if (typeof nominatim_object.address.country_code === 'string') {
                  location_cc = nominatim_object.address.country_code;
              }
              if (typeof nominatim_object.address.state === 'string') {
                  location_state = nominatim_object.address.state;
              } else if (typeof nominatim_object.address.county === 'string') {
                  location_state = nominatim_object.address.county;
              }
          }

          if (typeof nominatim_object.lon === 'string' && typeof nominatim_object.lat === 'string') {
              lat = nominatim_object.lat;
              lon = nominatim_object.lon;
          }
      } else if (nominatim_object === null) {
          /* Set the location to some random value. This can be used if you don’t
           * care about correct opening hours for more complex opening_hours
           * values.
           */
          location_cc = 'de';
          location_state = 'Baden-W\u00fcrttemberg';
          lat = '49.5400039';
          lon = '9.7937133';
      } else if (typeof nominatim_object !== 'undefined') {
          throw 'The nominatim_object parameter is of unknown type.'
              + ' Given ' + typeof(nominatim_object)
              + ', expected object.';
      }
      /* }}} */

      /* mode, locale, warnings_severity, tag_key, map_value {{{
       *
       * 0: time ranges (default), tags: opening_hours, lit, …
       * 1: points in time
       * 2: both (time ranges and points in time), tags: collection_times, service_times
       */

      var warnings_severity = 4;
      /* Default, currently the highest severity supported.
       * This number is expected to be >= 4. This is not explicitly checked.
       */

      var oh_mode;
      var oh_map_value = false;
      var oh_key, oh_regex_key;

      if (typeof optional_conf_parm === 'number') {
          oh_mode = optional_conf_parm;
      } else if (typeof optional_conf_parm === 'object') {
          if (typeof optional_conf_parm['locale'] === 'string') {
              /* TODO: The split thing is obviously a workaround. */
              locale = optional_conf_parm['locale'].split('-')[0];
          }
          if (checkOptionalConfParm('mode', 'number')) {
              oh_mode = optional_conf_parm['mode'];
          }
          if (checkOptionalConfParm('warnings_severity', 'number')) {
              warnings_severity = optional_conf_parm['warnings_severity'];
              if ([ 0, 1, 2, 3, 4, 5, 6, 7 ].indexOf(warnings_severity) === -1) {
                  throw t('warnings severity', { 'severity': warnings_severity, 'allowed': '[ 0, 1, 2, 3, 4, 5, 6, 7 ]' });
              }
          }
          if (checkOptionalConfParm('tag_key', 'string')) {
              oh_key = optional_conf_parm['tag_key'];
          }
          if (checkOptionalConfParm('map_value', 'boolean')) {
              oh_map_value = optional_conf_parm.map_value;
          }
      } else if (typeof optional_conf_parm !== 'undefined') {
          throw t('optional conf parm type', { 'given': typeof(optional_conf_parm) });
      }

      if (typeof oh_key === 'string') {
          oh_regex_key = getRegexKeyForKeyFromOsmDefaults(oh_key);

          if (oh_map_value
              && typeof osm_tag_defaults[oh_regex_key] === 'object'
              && typeof osm_tag_defaults[oh_regex_key]['map'] === 'object'
              && typeof osm_tag_defaults[oh_regex_key]['map'][value] === 'string'
              ) {

              value = osm_tag_defaults[oh_regex_key]['map'][value];
          }
      } else if (oh_map_value) {
          throw t('conf param tag key missing');
      }

      if (typeof oh_mode === 'undefined') {
          if (typeof oh_key === 'string' && osm_tag_defaults[oh_regex_key] !== undefined) {
              if (typeof osm_tag_defaults[oh_regex_key]['mode'] === 'number') {
                  oh_mode = osm_tag_defaults[oh_regex_key]['mode'];
              } else {
                  oh_mode = 0;
              }
          } else {
              oh_mode = 0;
          }
      } else if ([ 0, 1, 2 ].indexOf(oh_mode) === -1) {
          throw t('conf param mode invalid', { 'given': oh_mode, 'allowed': '[ 0, 1, 2 ]' });
      }

      /* }}} */
      /* }}} */

      // Tokenize value and generate selector functions. {{{
      if (typeof value !== 'string') {
          throw t('no string');
      }
      if (/^(?:\s*;?)+$/.test(value)) {
          throw t('nothing');
      }

      var parsing_warnings = []; // Elements are fed into function formatWarnErrorMessage(nrule, at, message)
      var done_with_warnings = false; // The functions which returns warnings can be called multiple times.
      var done_with_selector_reordering = false;
      var done_with_selector_reordering_warnings = false;
      var tokens = tokenize(value);
      // console.log(JSON.stringify(tokens, null, '    '));
      var prettified_value = '';
      var week_stable = true;

      var rules = [];
      var rule_infos = {};
      /* Not reliable because tokens !== new_tokens */
      // for (var nrule = 0; nrule < tokens.length; nrule++) {
      //     rule_infos[nrule] = {};
      // }
      var new_tokens = [];

      for (var nrule = 0; nrule < tokens.length; nrule++) {
          if (tokens[nrule][0].length === 0) {
              // Rule does contain nothing useful e.g. second rule of '10:00-12:00;' (empty) which needs to be handled.
              parsing_warnings.push([nrule, -1,
                  t('nothing useful')
                  + (nrule === tokens.length - 1 && nrule > 0 && !tokens[nrule][1] ?
                      ' ' + t('programmers joke') : '')
                  ]);
              continue;
          }

          var continue_at = 0;
          var next_rule_is_additional = false;
          do {
              if (continue_at === tokens[nrule][0].length) {
                  /* Additional rule does contain nothing useful e.g. second rule
                   * of '10:00-12:00,' (empty) which needs to be handled.
                    */
                  break;
              }

              var rule = {
                  // Time selectors
                  time: [],

                  // Temporary array of selectors from time wrapped to the next day
                  wraptime: [],

                  // Date selectors
                  weekday: [],
                  holiday: [],
                  week: [],
                  month: [],
                  monthday: [],
                  year: [],

                  // Array with non-empty date selector types, with most optimal ordering
                  date: [],

                  fallback: tokens[nrule][1],
                  additional: continue_at ? true : false,
                  meaning: true,
                  unknown: false,
                  comment: undefined,
                  build_from_token_rule: undefined,
              };

              rule.build_from_token_rule = [ nrule, continue_at, new_tokens.length ];
              continue_at = parseGroup(tokens[nrule][0], continue_at, rule, nrule);
              if (typeof continue_at === 'object') {
                  continue_at = continue_at[0];
              } else {
                  continue_at = 0;
              }

              // console.log('Current tokens: ' + JSON.stringify(tokens[nrule], null, '    '));

              new_tokens.push(
                  [
                      tokens[nrule][0].slice(
                          rule.build_from_token_rule[1],
                          continue_at === 0
                              ? tokens[nrule][0].length
                              : continue_at
                      ),
                      tokens[nrule][1],
                      tokens[nrule][2],
                  ]
              );

              if (next_rule_is_additional && new_tokens.length > 1) {
                  // Move 'rule separator' from last token of last rule to first token of this rule.
                  new_tokens[new_tokens.length - 1][0].unshift(new_tokens[new_tokens.length - 2][0].pop());
              }

              next_rule_is_additional = continue_at === 0 ? false : true;

              var optimal_selector_order = ['year', 'holiday', 'month', 'monthday', 'week', 'weekday'];
              optimal_selector_order.forEach(function (element) {
                  if (rule[element].length > 0) {
                      rule.date.push(rule[element]);
                      rule[element] = [];
                  }
              });

              // console.log('Rule: ' + JSON.stringify(rule, null, '    '));
              rules.push(rule);

              /* This handles selectors with time ranges wrapping over midnight (e.g. 10:00-02:00).
               * It generates wrappers for all selectors and creates a new rule.
               */
              if (rule.wraptime.length > 0) {
                  var wrapselectors = {
                      time: rule.wraptime,
                      date: [],

                      meaning: rule.meaning,
                      unknown: rule.unknown,
                      comment: rule.comment,

                      wrapped: true,
                      build_from_token_rule: rule.build_from_token_rule,
                  };

                  for (var dselg = 0; dselg < rule.date.length; dselg++) {
                      wrapselectors.date.push([]);
                      for (var dsel = 0; dsel < rule.date[dselg].length; dsel++) {
                          wrapselectors.date[wrapselectors.date.length-1].push(
                                  generateDateShifter(rule.date[dselg][dsel], -864e5)
                              );
                      }
                  }

                  rules.push(wrapselectors);
              }
          } while (continue_at);
      }
      // console.log(JSON.stringify(tokens, null, '    '));
      // console.log(JSON.stringify(new_tokens, null, '    '));
      /* }}} */

      /* Helper functions {{{ */
      /* Get regex string key from key osm_tag_defaults. {{{
       *
       * :param key: Tag key e.g. opening_hours:kitchen.
       * :returns: Regex key from osm_tag_defaults e.g. opening_hours:.*
       */
      function getRegexKeyForKeyFromOsmDefaults(key) {
          var regex_key;
          var exact_match = false;

          Object.keys(osm_tag_defaults).forEach(function (osm_key) {
              if (exact_match === true) {
                  return;
              }
              if (key === osm_key) { // Exact match.
                  regex_key = osm_key;
                  // We can't just return here as some old browsers
                  // don't interpret it as a final return (like a loop break)
                  exact_match = true;
              } else if (new RegExp(osm_key).test(key)) {
                  regex_key = osm_key;
              }
          });
          return regex_key;
      }
      /* }}} */

      /* Check given element in optional_conf_parm. {{{
       *
       * :param key: Key of optional_conf_parm.
       * :param expected_type: Expected `typeof()` the parameter.
       * :returns: True if the expected type matches the given type.
       */
      function checkOptionalConfParm(key, expected_type) {
          if (typeof optional_conf_parm[key] === expected_type) {
              return true;
          } else if (typeof optional_conf_parm[key] !== 'undefined') {
              throw t('conf param unknown type', { 'key': key, 'given': typeof(optional_conf_parm[key]), 'expected': expected_type });
          }
          return false;
      }
      /* }}} */
      /* }}} */

      /* Format warning or error message for the user. {{{
       *
       * :param nrule: Rule number starting with 0.
       * :param at: Token position at which the issue occurred.
       * :param message: Human readable string with the message.
       * :param tokens_to_use: List of token objects.
       * :returns: String with position of the warning or error marked for the user.
       */
      function formatWarnErrorMessage(nrule, at, message, tokens_to_use) {
          if (typeof tokens_to_use === 'undefined') {
              tokens_to_use = tokens;
          }
          // console.log(`Called formatWarnErrorMessage: ${nrule}, ${at}, ${message}`);
          // FIXME: Change to new_tokens.
          if (typeof nrule === 'number') {
              var pos = 0;
              if (nrule === -1) { // Usage of rule index not required because we do have access to value.length.
                  pos = value.length - at;
              } else { // Issue occurred at a later time, position in string needs to be reconstructed.
                  if (typeof tokens_to_use[nrule][0][at] === 'undefined') {
                      if (typeof tokens_to_use[nrule][0] && at === -1) {
                          pos = value.length;
                          if (typeof tokens_to_use[nrule+1] === 'object' && typeof tokens_to_use[nrule+1][2] === 'number') {
                              pos -= tokens_to_use[nrule+1][2];
                          } else if (typeof tokens_to_use[nrule][2] === 'number') {
                              pos -= tokens_to_use[nrule][2];
                          }
                      } else {
                          // Given position is invalid.
                          //
                          formatLibraryBugMessage('Bug in warning generation code which could not determine the exact position of the warning or error in value.');
                          pos = value.length;
                          if (typeof tokens_to_use[nrule][2] === 'number') {
                              // Fallback: Point to last token in the rule which caused the problem.
                              // Run real_test regularly to fix the problem before a user is confronted with it.
                              pos -= tokens_to_use[nrule][2];
                              console.warn('Last token for rule: ' + JSON.stringify(tokens_to_use[nrule]));
                              console.log(value.substring(0, pos) + ' <--- (' + message + ')');
                              console.log('\n');
                          } {
                              console.warn('tokens_to_use[nrule][2] is undefined. This is ok if nrule is the last rule.');
                          }
                      }
                  } else {
                      pos = value.length;
                      if (typeof tokens_to_use[nrule][0][at+1] === 'object') {
                          pos -= tokens_to_use[nrule][0][at+1][2];
                      } else if (typeof tokens_to_use[nrule][2] === 'number') {
                          pos -= tokens_to_use[nrule][2];
                      }
                  }
              }
              return value.substring(0, pos) + ' <--- (' + message + ')';
          } else if (typeof nrule === 'string') {
              return nrule.substring(0, at) + ' <--- (' + message + ')';
          }
      }
      /* }}} */

      /* Format internal library error message. {{{
       *
       * :param message: Human readable string with the error message.
       * :param text_template: Message template defined in the `lang` variable to use for the error message. Defaults to 'library bug'.
       * :returns: Error message for the user.
       */
      function formatLibraryBugMessage(message, text_template) {
          if (typeof message === 'undefined') {
              message = '';
          } else {
              message = ' ' + message;
          }
          if (typeof text_template !== 'string') {
              text_template = 'library bug';
          }

          message = t(text_template, { 'value': value, 'url': repository_url, 'message': message });
          console.error(message);
          return message;
      } /* }}} */

      /* Tokenize input stream {{{
       *
       * :param value: Raw opening_hours value.
       * :returns: Tokenized list object. Complex structure. Check the
       *        internal documentation in the docs/ directory for details.
       */
      function tokenize(value) {
          var all_tokens       = [];
          var curr_rule_tokens = [];

          var last_rule_fallback_terminated = false;

          while (value !== '') {
              /* Ordered after likelihood of input for performance reasons.
               * Also, error tolerance is supposed to happen at the end.
               */
              // console.log("Parsing value: " + value);
              var tmp = value.match(/^([a-z]{2,})\b((?:[.]| before| after)?)/i);
              var token_from_map = undefined;
              if (tmp && tmp[2] === '') {
                  token_from_map = string_to_token_map[tmp[1].toLowerCase()];
              }
              if (typeof token_from_map === 'object') {
                  curr_rule_tokens.push(token_from_map.concat([value.length]));
                  value = value.substr(tmp[1].length);
              } else if (tmp = value.match(/^\s+/)) {
                  // whitespace is ignored
                  value = value.substr(tmp[0].length);
              } else if (tmp = value.match(/^24\/7/)) {
                  // Reserved keyword.
                  curr_rule_tokens.push([tmp[0], tmp[0], value.length ]);
                  value = value.substr(tmp[0].length);
              } else if (/^;/.test(value)) {
                  // semicolon terminates rule.
                  // Next token belong to a new rule.
                  all_tokens.push([ curr_rule_tokens, last_rule_fallback_terminated, value.length ]);
                  value = value.substr(1);

                  curr_rule_tokens = [];
                  last_rule_fallback_terminated = false;
              } else if (/^[:.]/.test(value)) {
                  // Time separator (timesep).
                  if (value[0] === '.' && !done_with_warnings) {
                      parsing_warnings.push([ -1, value.length - 1, t('hour min separator')]);
                  }
                  curr_rule_tokens.push([ ':', 'timesep', value.length ]);
                  value = value.substr(1);
              } else if (tmp = value.match(/^(?:PH|SH)/i)) {
                  // special day name (holidays)
                  curr_rule_tokens.push([tmp[0].toUpperCase(), 'holiday', value.length ]);
                  value = value.substr(2);
              } else if (tmp = value.match(/^[°\u2070-\u209F\u00B2\u00B3\u00B9]{1,2}/)) {
                  var unicode_code_point_to_digit = {
                      176: 0,
                      0x2070: 0,
                      185: 1,
                      178: 2,
                      179: 3,
                  };
                  var regular_number = tmp[0].split('').map(function (ch) {
                      var code_point = ch.charCodeAt(0);
                      if (typeof unicode_code_point_to_digit[code_point] === 'number') {
                          return unicode_code_point_to_digit[code_point];
                      } else if (0x2074 <= code_point && code_point <= 0x2079) {
                          return code_point - 0x2070;
                      } else if (0x2080 <= code_point && code_point <= 0x2089) {
                          return code_point - 0x2080;
                      }
                  }).join('');
                  var ok = '';
                  if (curr_rule_tokens.length > 0 && matchTokens(curr_rule_tokens, curr_rule_tokens.length-1, 'number')) {
                      ok += ':';
                  }
                  ok += regular_number;
                  if (!done_with_warnings) {
                      for (var i = 0; i <= tmp[0].length; i++) {
                          if (value.charCodeAt(i) === 176) {
                              parsing_warnings.push([ -1, value.length - (1 + i),
                                      t('rant degree sign used for zero')]);
                          }
                      }
                      parsing_warnings.push([ -1, value.length - tmp[0].length,
                              t('please use ok for ko', {'ko': tmp[0], 'ok': ok})]);
                  }
                  value = ok + value.substr(tmp[0].length);
              } else if (tmp = value.match(/^(&|_|→|–|−|—|ー|=|·|öffnungszeit(?:en)?:?|opening_hours\s*=|\?|~|～|：|always (?:open|closed)|24x7|24 hours 7 days a week|24 hours|7 ?days(?:(?: a |\/)week)?|7j?\/7|all days?|every day|(?:bis|till?|-|–)? ?(?:open ?end|late)|(?:(?:one )?day (?:before|after) )?(?:school|public) holidays?|days?\b|до|рм|ам|jours fériés|on work days?|sonntags?|(?:nur |an )?sonn-?(?:(?: und |\/)feiertag(?:s|en?)?)?|(?:an )?feiertag(?:s|en?)?|(?:nach|on|by) (?:appointments?|vereinbarung|absprache)|p\.m\.|a\.m\.|[_a-zäößàáéøčěíúýřПнВсо]+\b|à|á|mo|tu|we|th|fr|sa|su|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)(\.?)/i)) {
                  /* Handle all remaining words and specific other characters with error tolerance.
                   *
                   * à|á: Word boundary does not work with Unicode chars: 'test à test'.match(/\bà\b/i)
                   * https://stackoverflow.com/questions/10590098/javascript-regexp-word-boundaries-unicode-characters
                   * Order in the regular expression capturing group is important in some cases.
                   *
                   * mo|tu|we|th|fr|sa|su|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec: Prefer defended keywords
                   * if used in cases like 'mo12:00-14:00' (when keyword is followed by number).
                   */
                  var correct_val = returnCorrectWordOrToken(tmp[1].toLowerCase(), value.length);
                  // console.log('Error tolerance for string "' + tmp[1] + '" returned "' + correct_val + '".');
                  if (typeof correct_val === 'object') {
                      curr_rule_tokens.push([ correct_val[0], correct_val[1], value.length ]);
                      value = value.substr(tmp[0].length);
                  } else if (typeof correct_val === 'string') {
                      if (correct_val === 'am' || correct_val === 'pm') {
                          var hours_token_at = curr_rule_tokens.length - 1;
                          var hours_token;
                          if (hours_token_at >= 0) {
                              if (hours_token_at -2 >= 0 &&
                                      matchTokens(
                                          curr_rule_tokens, hours_token_at - 2,
                                          'number', 'timesep', 'number'
                                      )
                              ) {
                                  hours_token_at -= 2;
                                  hours_token = curr_rule_tokens[hours_token_at];
                              } else if (matchTokens(curr_rule_tokens, hours_token_at, 'number')) {
                                  hours_token = curr_rule_tokens[hours_token_at];
                              }

                              if (typeof hours_token === 'object') {
                                  if (correct_val === 'pm' && hours_token[0] < 12) {
                                      hours_token[0] += 12;
                                  }
                                  if (correct_val === 'am' && hours_token[0] === 12) {
                                      hours_token[0] = 0;
                                  }
                                  curr_rule_tokens[hours_token_at] = hours_token;
                              }
                          }
                          correct_val = '';
                      }
                      var correct_tokens = tokenize(correct_val)[0];
                      if (correct_tokens[1] === true) { // last_rule_fallback_terminated
                          throw formatLibraryBugMessage();
                      }
                      for (var i = 0; i < correct_tokens[0].length; i++) {
                          curr_rule_tokens.push([correct_tokens[0][i][0], correct_tokens[0][i][1], value.length]);
                          // value.length - tmp[0].length does not have the desired effect for all test cases.
                      }

                      value = value.substr(tmp[0].length);
                      // value = correct_val + value.substr(tmp[0].length);
                      // Does not work because it would generate the wrong length for formatWarnErrorMessage.
                  } else {
                      // No correction available. Insert as single character token and let the parser handle the error.
                      curr_rule_tokens.push([value[0].toLowerCase(), value[0].toLowerCase(), value.length - 1 ]);
                      value = value.substr(1);
                  }
                  if (typeof tmp[2] === 'string' && tmp[2] !== '' && !done_with_warnings) {
                      parsing_warnings.push([ -1, value.length, t('omit ko', {'ko': tmp[2]})]);
                  }
              } else if (tmp = value.match(/^(\d+)(?:([.])([^\d]))?/)) {
                  // number
                  if (Number(tmp[1]) > 1900) { // Assumed to be a year number.
                      curr_rule_tokens.push([Number(tmp[1]), 'year', value.length ]);
                      if (Number(tmp[1]) >= 2100) // Probably an error
                          parsing_warnings.push([ -1, value.length - 1,
                                  t('interpreted as year', {number:  Number(tmp[1])})
                          ]);
                  } else {
                      curr_rule_tokens.push([Number(tmp[1]), 'number', value.length ]);
                  }

                  value = value.substr(tmp[1].length + (typeof tmp[2] === 'string' ? tmp[2].length : 0));
                  if (typeof tmp[2] === 'string' && tmp[2] !== '' && !done_with_warnings) {
                      parsing_warnings.push([ -1, value.length, t('omit ko', {'ko': tmp[2]})]);
                  }
              } else if (/^\|\|/.test(value)) {
                  // || terminates rule.
                  // Next token belong to a fallback rule.
                  if (curr_rule_tokens.length === 0) {
                      throw formatWarnErrorMessage(-1, value.length - 2, t('rule before fallback empty'));
                  }

                  all_tokens.push([ curr_rule_tokens, last_rule_fallback_terminated, value.length ]);
                  curr_rule_tokens = [];
                  // curr_rule_tokens = [ [ '||', 'rule separator', value.length  ] ];
                  // FIXME: Use this. Unknown bug needs to be solved in the process.
                  value = value.substr(2);

                  last_rule_fallback_terminated = true;
              } else if (tmp = value.match(/^"([^"]+)"/)) {
                  // Comment following the specification.
                  // Any character is allowed inside the comment except " itself.
                  curr_rule_tokens.push([tmp[1], 'comment', value.length ]);
                  value = value.substr(tmp[0].length);
              } else if (tmp = value.match(/^(["'„“‚‘’«「『])([^"'“”‘’»」』;|]*)(["'”“‘’»」』])/)) {
                  // Comments with error tolerance.
                  // The comments still have to be somewhat correct meaning
                  // the start and end quote signs used have to be
                  // appropriate. So “testing„ will not match as it is not a
                  // quote but rather something unknown which the user should
                  // fix first.
                  // console.log('Matched: ' + JSON.stringify(tmp));
                  for (var pos = 1; pos <= 3; pos += 2) {
                      // console.log('Pos: ' + pos + ', substring: ' + tmp[pos]);
                      var correct_val = returnCorrectWordOrToken(tmp[pos],
                          value.length - (pos === 3 ? tmp[1].length + tmp[2].length : 0)
                      );
                      if (typeof correct_val !== 'string' && tmp[pos] !== '"') {
                          throw formatLibraryBugMessage(
                              'A character for error tolerance was allowed in the regular expression'
                              + ' but is not covered by word_error_correction'
                              + ' which is needed to format a proper message for the user.'
                          );
                      }
                  }
                  curr_rule_tokens.push([tmp[2], 'comment', value.length ]);
                  value = value.substr(tmp[0].length);
              } else if (/^(?:␣|\s)/.test(value)) {
                  // Using "␣" as space is not expected to be a normal
                  // mistake. Just ignore it to make using taginfo easier.
                  value = value.substr(1);
              } else {
                  // other single-character tokens
                  curr_rule_tokens.push([value[0].toLowerCase(), value[0].toLowerCase(), value.length ]);
                  value = value.substr(1);
              }
          }

          all_tokens.push([ curr_rule_tokens, last_rule_fallback_terminated ]);

          return all_tokens;
      }
      /* }}} */

      /* error correction/tolerance function {{{
       * Go through word_error_correction hash and get correct value back.
       *
       * :param word: Wrong word or character.
       * :param value_length: Current value_length (used for warnings).
       * :returns:
       *        * (valid) opening_hours sub string.
       *        * object with [ internal_value, token_name ] if value is correct.
       *        * undefined if word could not be found (and thus is not corrected).
       */
      function returnCorrectWordOrToken(word, value_length) {
          var correctWordOrToken;
          var token_from_map = string_to_token_map[word];
          if (typeof token_from_map === 'object') {
              return token_from_map;
          }
          Object.keys(data$2).forEach(function (comment) {
              if (correctWordOrToken) {
                  return;
              }
              Object.keys(data$2[comment]).forEach(function (old_val) {
                  if (correctWordOrToken) {
                      return;
                  }
                  if (new RegExp('^' + old_val + '$').test(word)) {
                      var val = data$2[comment][old_val];
                      // Replace wrong words or characters with correct ones.
                      // This will return a string which is then being tokenized.
                      if (!done_with_warnings) {
                          parsing_warnings.push([
                              -1,
                              value_length - word.length,
                              t(comment, {'ko': word, 'ok': val}),
                          ]);
                      }
                      correctWordOrToken = val;
                  }
              });
          });
          return correctWordOrToken;
      }
      /* }}} */

      /* return warnings as list {{{
       *
       * :param it: Iterator object if available (optional).
       * :returns: Warnings as list with one warning per element.
       */
      function getWarnings(it) {
          if (warnings_severity < 4) {
              return [];
          }

          if (!done_with_warnings && typeof it === 'object') {
              /* getWarnings was called in a state without critical errors.
               * We can do extended tests.
               */

              /* Place all tests in this function if an additional (high
               * level) test is added and this does not require to rewrite
               * big parts of (sub) selector parsers only to get the
               * position. If that is the case, then rather place the test
               * code in the (sub) selector parser function directly.
               */

              var wide_range_selector_order = [ 'year', 'month', 'week', 'holiday' ];
              var small_range_selector_order = [ 'weekday', 'time', '24/7', 'state', 'comment'];

              // How many times was a selector_type used per rule? {{{
              var used_selectors = [];
              var used_selectors_types_array = [];
              var has_token = {};

              for (var nrule = 0; nrule < new_tokens.length; nrule++) {
                  if (new_tokens[nrule][0].length === 0) continue;
                  // Rule does contain nothing useful e.g. second rule of '10:00-12:00;' (empty) which needs to be handled.

                  var selector_start_end_type = [ 0, 0, undefined ];
                  // console.log(new_tokens[nrule][0]);

                  used_selectors[nrule] = {};
                  used_selectors_types_array[nrule] = [];

                  do {
                      selector_start_end_type = getSelectorRange(new_tokens[nrule][0], selector_start_end_type[1]);
                      // console.log(selector_start_end_type, new_tokens[nrule][0].length);

                      for (var token_pos = 0; token_pos <= selector_start_end_type[1]; token_pos++) {
                          if (typeof new_tokens[nrule][0][token_pos] === 'object' && new_tokens[nrule][0][token_pos][0] === 'PH') {
                              has_token['PH'] = true;
                          }
                      }

                      if (selector_start_end_type[0] === selector_start_end_type[1] &&
                          new_tokens[nrule][0][selector_start_end_type[0]][0] === '24/7'
                          ) {
                              has_token['24/7'] = true;
                      }

                      if (typeof used_selectors[nrule][selector_start_end_type[2]] !== 'object') {
                          used_selectors[nrule][selector_start_end_type[2]] = [ selector_start_end_type[1] ];
                      } else {
                          used_selectors[nrule][selector_start_end_type[2]].push(selector_start_end_type[1]);
                      }
                      used_selectors_types_array[nrule].push(selector_start_end_type[2]);

                      selector_start_end_type[1]++;
                  } while (selector_start_end_type[1] < new_tokens[nrule][0].length);
              }
              // console.log('used_selectors: ' + JSON.stringify(used_selectors, null, '    '));
              // console.log('used_selectors_types_array: ' + JSON.stringify(used_selectors_types_array, null, '    '));
              /* }}} */

              for (var nrule = 0; nrule < used_selectors.length; nrule++) {

                  /* Check if more than one not connected selector of the same type is used in one rule {{{ */
                  Object.keys(used_selectors[nrule]).forEach(function (selector_type) {
                      // console.log(selector_type + ' use at: ' + used_selectors[nrule][selector_type].length);
                      if (used_selectors[nrule][selector_type].length > 1) {
                          parsing_warnings.push([nrule, used_selectors[nrule][selector_type][used_selectors[nrule][selector_type].length - 1],
                              t('use multi', {
                                  'count': used_selectors[nrule][selector_type].length,
                                  'part2': (
                                      /^(?:comment|state)/.test(selector_type) ?
                                          t('selector multi 2a', {'what': (selector_type === 'state' ? t('selector state'): t('comments'))})
                                          :
                                          t('selector multi 2b', {'what': t(selector_type + (/^(?:month|weekday)$/.test(selector_type) ? 's' : ' ranges'))})
                                  )
                              })]
                          );
                          done_with_selector_reordering = true; // Correcting the selector order makes no sense if this kind of issue exists.
                      }
                  });
                  /* }}} */
                  /* Check if change default state rule is not the first rule {{{ */
                  if (   typeof used_selectors[nrule].state === 'object'
                      && Object.keys(used_selectors[nrule]).length === 1
                  ) {
                      if (nrule !== 0) {
                          parsing_warnings.push([nrule, new_tokens[nrule][0].length - 1, t('default state')]);
                      }
                  /* }}} */
                  /* Check if a rule (with state open) has no time selector {{{ */
                  } else if (typeof used_selectors[nrule].time === 'undefined') {
                      if (    (       typeof used_selectors[nrule].state === 'object'
                                  && new_tokens[nrule][0][used_selectors[nrule].state[0]][0] === 'open'
                                  && typeof used_selectors[nrule].comment === 'undefined'
                              ) || ( typeof used_selectors[nrule].comment === 'undefined'
                                  && typeof used_selectors[nrule].state === 'undefined'
                              ) &&
                              typeof used_selectors[nrule]['24/7'] === 'undefined'
                      ) {

                          parsing_warnings.push([nrule, new_tokens[nrule][0].length - 1, t('vague')]);
                      }
                  }
                  /* }}} */
                  /* Check if empty comment was given {{{ */
                  if (typeof used_selectors[nrule].comment === 'object'
                      && new_tokens[nrule][0][used_selectors[nrule].comment[0]][0].length === 0
                  ) {

                      parsing_warnings.push([nrule, used_selectors[nrule].comment[0], t('empty comment')]);
                  }
                  /* }}} */
                  /* Check for valid use of <separator_for_readability> {{{ */
                  for (var i = 0; i < used_selectors_types_array[nrule].length - 1; i++) {
                      var selector_type = used_selectors_types_array[nrule][i];
                      var next_selector_type = used_selectors_types_array[nrule][i+1];
                      if (   (   wide_range_selector_order.indexOf(selector_type)       !== -1
                              && wide_range_selector_order.indexOf(next_selector_type)  !== -1
                          ) || ( small_range_selector_order.indexOf(selector_type)      !== -1
                              && small_range_selector_order.indexOf(next_selector_type) !== -1)
                          ) {

                          if (new_tokens[nrule][0][used_selectors[nrule][selector_type][0]][0] === ':') {
                              parsing_warnings.push([nrule, used_selectors[nrule][selector_type][0],
                                  t('separator_for_readability')
                              ]);
                          }
                      }
                  }
                  /* }}} */
                  /* Check for missing use of <additional_rule_separator> for time wrapping midnight {{{ */
                  if (typeof rule_infos[nrule] === 'object'
                          && typeof rule_infos[nrule]['time_wraps_over_midnight'] === 'boolean'
                          && rule_infos[nrule]['time_wraps_over_midnight'] === true
                          && typeof used_selectors[nrule+1] === 'object'
                          && typeof used_selectors[nrule+1]['rule separator'] === 'undefined' // Not an additional rule
                          && new_tokens[nrule+1][1] === false // Not a fallback rule
                          ) {

                      var rules_too_complex = [ nrule, nrule+1 ].map(function (nrule){
                          for (var i = 0; i < wide_range_selector_order.length - 1; i++) {
                              if (typeof used_selectors[nrule][wide_range_selector_order[i]] === 'object') {
                                  return true;
                              }
                          }
                          return false;
                      });
                      var rules_too_complex_count = rules_too_complex.filter(function (el){ return el; }).length;
                      var next_rule_selects_next_day = false;
                      if (
                              typeof rule_infos[nrule] === 'object'
                              && typeof rule_infos[nrule] === 'object'
                              && typeof rule_infos[nrule]['week_days'] === 'object'
                              && typeof rule_infos[nrule+1] === 'object'
                              && typeof rule_infos[nrule+1]['week_days'] === 'object'
                              ) {
                          for (var i = 0; i < rule_infos[nrule]['week_days'].length; i++) {
                              var week_day = rule_infos[nrule]['week_days'][i];
                                  // console.log(rule_infos[nrule+1]['week_days']);
                                  // console.log(week_day);
                              if (rule_infos[nrule+1]['week_days'].indexOf(week_day === 6 ? 0 : week_day+1) !== -1) {
                                  next_rule_selects_next_day = true;
                                  break;
                              }
                          }
                      } else {
                          next_rule_selects_next_day = true;
                      }
                      // console.log(rule_infos);
                      // console.log(next_rule_selects_next_day);
                      var additional_rule_separator_enabled = (optional_conf_parm||{}).additional_rule_separator !== false;
                      if (rules_too_complex_count < 2 && next_rule_selects_next_day && additional_rule_separator_enabled) {
                          parsing_warnings.push([nrule+1, new_tokens[nrule+1][0].length - 1,
                              t('additional_rule_separator not used after time wrapping midnight'),
                              new_tokens
                          ]);
                      }
                  }
                  /* }}} */
                  /* Check if rule with closed|off modifier is additional {{{ */
                  if (typeof new_tokens[nrule][0][0] === 'object'
                          && new_tokens[nrule][0][0][0] === ','
                          && new_tokens[nrule][0][0][1] === 'rule separator'
                          && typeof used_selectors[nrule].state === 'object'
                          && (
                                 new_tokens[nrule][0][used_selectors[nrule].state[0]][0] === 'closed'
                              || new_tokens[nrule][0][used_selectors[nrule].state[0]][0] === 'off'
                             )
                  ) {

                      parsing_warnings.push([nrule, new_tokens[nrule][0].length - 1,
                          t('additional rule which evaluates to closed'),
                          new_tokens
                      ]);
                  }
                  /* }}} */

              }

              /* Check if 24/7 is used and it does not mean 24/7 because there are other rules {{{ */
              var has_advanced = it.advance();

              if (has_advanced === true && has_token['24/7'] && !done_with_warnings) {
                  parsing_warnings.push([ -1, 0,
                      // Probably because of: "24/7; 12:00-14:00 open", ". Needs extra testing.
                      t('strange 24/7')
                  ]);
              }
              /* }}} */

              /* Check for missing PH. {{{ */
              if (    warnings_severity >= 5
                  && !has_token['PH']
                  && !has_token['24/7']
                  && !done_with_warnings
                  && (
                          (
                              typeof oh_key === 'string'
                              && osm_tag_defaults[oh_regex_key]['warn_for_PH_missing']
                          )
                          || (typeof oh_key !== 'string')
                     )
                  ) {

                  var keys_with_warn_for_PH_missing = [];
                  Object.keys(osm_tag_defaults).forEach(function (key) {
                      if (osm_tag_defaults[key]['warn_for_PH_missing']) {
                          keys_with_warn_for_PH_missing.push(key);
                      }
                  });
                  parsing_warnings.push([ -1, 0,
                      t('public holiday', { 'part2': (typeof oh_key !== 'string'
                          ? t('public holiday part2', {'keys': keys_with_warn_for_PH_missing.join(', ')}) : '')})
                          // + '(see README how to provide it)' // UI of the evaluation tool does not allow to provide it (currently).
                  ]);
              }
              /* }}} */

              /* Check if value consists of multiple rules each only using a time selector {{{ */
              if (used_selectors_types_array.length > 1
                      &&  used_selectors_types_array.filter(function (el){
                              return el.length === 1 && el[0] === 'time';
                          }).length === used_selectors_types_array.length
                      ) {
                  parsing_warnings.push([ -1, 0,
                      t('combine rules', { 'ok': ',' }),
                  ]);
              }
              /* }}} */

              prettifyValue();
          }
          done_with_warnings = true;

          var warnings = [];
          // FIXME: Sort based on parsing_warnings[1], tricky …
          for (var i = 0; i < parsing_warnings.length; i++) {
              warnings.push( formatWarnErrorMessage(parsing_warnings[i][0], parsing_warnings[i][1], parsing_warnings[i][2], parsing_warnings[i][3]) );
          }
          return warnings;
      }

      /* Helpers for getWarnings {{{ */

      /* Check if token is the begin of a selector and why. {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :returns:
       *        * false if the current token is not the begin of a selector.
       *        * Position in token array from where the decision was made that
       *          the token is the start of a selector.
       */
      function tokenIsTheBeginOfSelector(tokens, at) {
          if (typeof tokens[at][3] === 'string') {
              return 3;
          } else if (tokens[at][1] === 'comment'
                  || tokens[at][1] === 'state'
                  || tokens[at][1] === '24/7'
                  || tokens[at][1] === 'rule separator'
              ){

              return 1;
          } else {
              return false;
          }
      }
      /* }}} */

      /* Get start and end position of a selector. {{{
       * For example this value 'Mo-We,Fr' will return the position of the
       * token lexeme 'Mo' and 'Fr' e.g. there indexes [ 0, 4 ] in the
       * selector array of tokens.
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :returns: Array:
       *            0. Index of first token in selector array of tokens.
       *            1. Index of last token in selector array of tokens.
       *            2. Selector type.
       */
      function getSelectorRange(tokens, at) {
          var selector_start = at,
              selector_end,
              pos_in_token_array;

          for (; selector_start >= 0; selector_start--) {
              pos_in_token_array = tokenIsTheBeginOfSelector(tokens, selector_start);
              if (pos_in_token_array) {
                  break;
              }
          }
          selector_end = selector_start;

          if (pos_in_token_array === 1) {
              // Selector consists of a single token.

              // Include tailing colon.
              if (selector_end + 1 < tokens.length && tokens[selector_end + 1][0] === ':')
                  selector_end++;

              return [ selector_start, selector_end, tokens[selector_start][pos_in_token_array] ];
          }

          for (selector_end++; selector_end < tokens.length ; selector_end++) {
              if (tokenIsTheBeginOfSelector(tokens, selector_end))
                  return [ selector_start, selector_end - 1, tokens[selector_start][pos_in_token_array] ];
          }

          return [ selector_start, selector_end - 1, tokens[selector_start][pos_in_token_array] ];
      }
      /* }}} */
      /* }}} */
      /* }}} */

      /* Prettify raw value from user. {{{
       * The value is generated by putting the tokens back together to a string.
       *
       * :param argument_hash: Hash which can contain:
       *        'conf': Configuration hash.
       *        'get_internals: If true export internal data structures.
       *        'rule_index: Only prettify the rule with this index.
       * :returns: Prettified value string or object if get_internals is true.
       */
      function prettifyValue(argument_hash) {
          var user_conf = {};
          var get_internals = false;
          var rule_index;

          prettified_value = '';
          var prettified_value_array = [];

          if (typeof argument_hash === 'object') {
              if (typeof argument_hash.conf === 'object') {
                  user_conf = argument_hash.conf;
              }

              if (typeof argument_hash.rule_index === 'number') {
                  rule_index = argument_hash.rule_index;
              }

              if (argument_hash.get_internals === true) {
                  get_internals = true;
              }

          }

          Object.keys(default_prettify_conf).forEach(function (key) {
              if (typeof user_conf[key] === 'undefined') {
                  user_conf[key] = default_prettify_conf[key];
              }
          });

          // use months, weekdays for locales 'en' and 'all'
          // otherwise use Date.toLocaleString, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString
          var _is_en_or_all = user_conf['locale'] === 'en' || user_conf['locale'] === 'all';
          var months_local = _is_en_or_all ? months : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function(month) {
              return new Date(2018, month - 1, 1).toLocaleString(user_conf['locale'], {month: 'short'});
          });
          var weekdays_local = _is_en_or_all ? weekdays : [1, 2, 3, 4, 5, 6, 7].map(function(weekday) {
              // 2017-01-01 is Sunday
              return new Date(2017, 0, weekday).toLocaleString(user_conf['locale'], {weekday: 'short'});
          });

          for (var nrule = 0; nrule < new_tokens.length; nrule++) {
              if (new_tokens[nrule][0].length === 0) continue;
              // Rule does contain nothing useful e.g. second rule of '10:00-12:00;' (empty) which needs to be handled.

              if (typeof rule_index === 'number') {
                  if (rule_index !== nrule) continue;
              } else {
                  if (nrule !== 0)
                      prettified_value += (
                          new_tokens[nrule][1]
                              ? user_conf.rule_sep_string + '|| '
                              : (
                                  new_tokens[nrule][0][0][1] === 'rule separator'
                                  ? ','
                                  : (
                                      user_conf.print_semicolon
                                      ? ';'
                                      : ''
                                  )
                              ) +
                          user_conf.rule_sep_string);
              }

              var selector_start_end_type = [ 0, 0, undefined ];
              var prettified_group_value = [];
              var count = 0;
              // console.log(new_tokens[nrule][0]);

              do {
                  selector_start_end_type = getSelectorRange(new_tokens[nrule][0], selector_start_end_type[1]);
                  // console.log(selector_start_end_type, new_tokens[nrule][0].length, count);

                  if (count > 50) {
                      throw formatLibraryBugMessage('Infinite loop.');
                  }

                  if (selector_start_end_type[2] !== 'rule separator') {
                      prettified_group_value.push(
                          [
                              selector_start_end_type,
                              prettifySelector(
                                  new_tokens[nrule][0],
                                  selector_start_end_type[0],
                                  selector_start_end_type[1],
                                  selector_start_end_type[2],
                                  user_conf
                              ),
                          ]
                      );
                  }

                  selector_start_end_type[1]++;
                  count++;
                  // console.log(selector_start_end_type, new_tokens[nrule][0].length, count);
              } while (selector_start_end_type[1] < new_tokens[nrule][0].length);
              // console.log('Prettified value: ' + JSON.stringify(prettified_group_value, null, '    '));
              var not_sorted_prettified_group_value = prettified_group_value.slice();

              if (!done_with_selector_reordering) {
                  prettified_group_value.sort(
                      function (a, b) {
                          var selector_order = [ 'year', 'month', 'week', 'holiday', 'weekday', 'time', '24/7', 'state', 'comment'];
                          return selector_order.indexOf(a[0][2]) - selector_order.indexOf(b[0][2]);
                      }
                  );
              }
              var old_prettified_value_length = prettified_value.length;

              if (typeof user_conf['locale'] === 'string' && user_conf['locale'] !== 'en') {
                  var translatorFunction;
                  if (i18next.language !== user_conf['locale']) {
                      translatorFunction = i18next.getFixedT(user_conf['locale']);
                  } else {
                      translatorFunction = i18next.t;
                  }
                  for (var i = 0; i < prettified_group_value.length; i++) {
                      var type = prettified_group_value[i][0][2];
                      if (type === 'weekday') {
                          weekdays.forEach(function (weekday, key) {
                              prettified_group_value[i][1] = prettified_group_value[i][1].replace(new RegExp(weekday, 'g'), weekdays_local[key]);
                          });
                      } else if (type === 'month') {
                          months.forEach(function (month, key) {
                              prettified_group_value[i][1] = prettified_group_value[i][1].replace(new RegExp(month, 'g'), months_local[key]);
                          });
                      } else {
                          var prettifiedValueIsProbablyTranslatable = prettified_group_value[i][1].indexOf(':') === -1;
                          if (prettifiedValueIsProbablyTranslatable) {
                              prettified_group_value[i][1] = translatorFunction(['opening_hours:pretty.' + prettified_group_value[i][1], prettified_group_value[i][1]]);
                          }
                      }
                  }
              }

              prettified_value += prettified_group_value.map(function (array) {
                  return array[1];
              }).join(' ');

              prettified_value_array.push( prettified_group_value );

              if (!done_with_selector_reordering_warnings) {
                  for (var i = 0, l = not_sorted_prettified_group_value.length; i < l; i++) {
                      if (not_sorted_prettified_group_value[i] !== prettified_group_value[i]) {
                          // console.log(i + ': ' + prettified_group_value[i][0][2]);
                          var length = i + old_prettified_value_length; // i: Number of spaces in string.
                          for (var x = 0; x <= i; x++) {
                              length += prettified_group_value[x][1].length;
                              // console.log('Length: ' + length + ' ' + prettified_group_value[x][1]);
                          }
                          // console.log(length);
                          parsing_warnings.push([ prettified_value, length, t('switched', {
                              'first': prettified_group_value[i][0][2],
                              'second': not_sorted_prettified_group_value[i][0][2]
                          })
                          ]);
                      }
                  }
              }
          }

          done_with_selector_reordering_warnings = true;
          // console.log(JSON.stringify(prettified_value_array, null, '    '));

          if (get_internals) {
              return [ prettified_value_array, new_tokens ];
          } else {
              return prettified_value;
          }
      }
      /* }}} */

      /* Check selector array of tokens for specific token name pattern. {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position at which the matching should begin.
       * :param token_name(s): One or many token_name strings which have to match in that order.
       * :returns: true if token_name(s) match in order false otherwise.
       */
      function matchTokens(tokens, at /*, matches... */) {
          if (at + arguments.length - 2 > tokens.length)
              return false;
          for (var i = 0; i < arguments.length - 2; i++) {
              if (tokens[at + i][1] !== arguments[i + 2]) {
                  return false;
              }
          }

          return true;
      }
      /* }}} */

      /* Generate selector wrapper with time offset {{{
       *
       * :param func: Generated selector code function.
       * :param shirt: Time to shift in milliseconds.
       * :param token_name(s): One or many token_name strings which have to match in that order.
       * :returns: See selector code.
       */
      function generateDateShifter(func, shift) {
          return function(date) {
              var res = func(new Date(date.getTime() + shift));

              if (typeof res[1] === 'undefined')
                  return res;
              return [ res[0], new Date(res[1].getTime() - shift) ];
          };
      }
      /* }}} */

      /* Top-level parser {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :param rule: Reference to rule object.
       * :param nrule: Rule number starting with 0.
       * :returns: See selector code.
       */
      function parseGroup(tokens, at, rule, nrule) {
          var rule_modifier_specified = false;

          // console.log(tokens); // useful for debugging of tokenize
          var last_selector = [];
          while (at < tokens.length) {
              // console.log('Parsing at position', at +':', tokens[at]);
              if (matchTokens(tokens, at, 'weekday')) {
                  at = parseWeekdayRange(tokens, at, rule, undefined, nrule);
              } else if (matchTokens(tokens, at, '24/7')) {
                  rule.time.push(function() { return [true]; });
                  // Not needed. If there is no selector it automatically matches everything.
                  // WRONG: This only works if there is no other selector in this selector group ...
                  at++;
              } else if (matchTokens(tokens, at, 'holiday')) {
                  if (matchTokens(tokens, at+1, ',')) {
                      at = parseHoliday(tokens, at, rule, true);
                  } else {
                      at = parseHoliday(tokens, at, rule, false);
                  }
                  week_stable = false;
              } else if (matchTokens(tokens, at, 'month', 'number')
                      || matchTokens(tokens, at, 'month', 'weekday')
                      || matchTokens(tokens, at, 'year', 'month', 'number')
                      || matchTokens(tokens, at, 'year', 'event')
                      || matchTokens(tokens, at, 'event')) {

                  at = parseMonthdayRange(tokens, at, nrule);
                  week_stable = false;
              } else if (matchTokens(tokens, at, 'year')) {
                  at = parseYearRange(tokens, at);
                  week_stable = false;
              } else if (matchTokens(tokens, at, 'month')) {
                  at = parseMonthRange(tokens, at);
                  // week_stable = false; // Decided based on the actual value/tokens.
              } else if (matchTokens(tokens, at, 'week')) {
                  tokens[at][3] = 'week';
                  at = parseWeekRange(tokens, at);

              } else if (at !== 0 && at !== tokens.length - 1 && tokens[at][0] === ':'
                  && !(typeof last_selector[1] === 'string' && last_selector[1] === 'time')) {
                  /* Ignore colon if they appear somewhere else than as time separator.
                   * Except the start or end of the value.
                   * This provides compatibility with the syntax proposed by Netzwolf:
                   * https://wiki.openstreetmap.org/wiki/Key:opening_hours/specification#separator_for_readability
                   * Check for valid use of <separator_for_readability> is implemented in function getWarnings().
                   */

                  if (!done_with_warnings && matchTokens(tokens, at-1, 'holiday')) {
                      parsing_warnings.push([nrule, at, t('no colon after', { 'token': tokens[at-1][1] })]);
                  }

                  at++;
              } else if (matchTokens(tokens, at, 'number', 'timesep')
                      || matchTokens(tokens, at, 'timevar')
                      || matchTokens(tokens, at, '(', 'timevar')
                      || matchTokens(tokens, at, 'number', '-')) {

                  at = parseTimeRange(tokens, at, rule, false, nrule);
                  last_selector = [ at, 'time' ];

              } else if (matchTokens(tokens, at, 'state')) {

                  if (tokens[at][0] === 'open') {
                      rule.meaning = true;
                  } else if (tokens[at][0] === 'closed' || tokens[at][0] === 'off') {
                      rule.meaning = false;
                  } else {
                      rule.meaning = false;
                      rule.unknown = true;
                  }

                  rule_modifier_specified = true;
                  at++;
                  if (typeof tokens[at] === 'object' && tokens[at][0] === ',') // additional rule
                      at = [ at + 1 ];

              } else if (matchTokens(tokens, at, 'comment')) {
                  rule.comment = tokens[at][0];
                  if (!rule_modifier_specified) {
                      // Then it is unknown. Either with unknown explicitly
                      // specified or just a comment.
                      rule.meaning = false;
                      rule.unknown = true;
                  }

                  rule_modifier_specified = true;
                  at++;
                  if (typeof tokens[at] === 'object' && tokens[at][0] === ',') { // additional rule
                      at = [ at + 1 ];
                  }
              } else if ((at === 0 || at === tokens.length - 1) && matchTokens(tokens, at, 'rule separator')) {
                  at++;
                  // console.log("value: " + nrule);
                  // throw formatLibraryBugMessage('Not implemented yet.');
              } else {
                  var warnings = getWarnings();
                  throw formatWarnErrorMessage(nrule, at, t('unexpected token', {token: tokens[at][1] })) + (warnings ? (' ' + warnings.join('; ')) : '');
              }

              if (typeof at === 'object') { // additional rule
                  tokens[at[0] - 1][1] = 'rule separator';
                  break;
              }
              if (typeof last_selector[0] === 'number' && last_selector[0] !== at) {
                  last_selector = [];
              }
          }

          return at;
      }

      /* Not used
      function get_last_token_pos_in_token_group(tokens, at, last_at) {
          for (at++; at < last_at; at++) {
              if (typeof tokens[at] === 'object') {
                  if (typeof tokens[at][3] === 'string'
                          || tokens[at][1] === 'comment'
                          || tokens[at][1] === 'state'){

                          return at - 1;
                  }
              }
          }
          return last_at;
      }
      */

      /* }}} */

      // helper functions for sub parser {{{

      /* For given date, returns date moved to the start of the day with an offset specified in minutes. {{{
       * For example, if date is 2014-05-19_18:17:12, dateAtDayMinutes would
       * return 2014-05-19_02:00:00 for minutes=120.
       *
       * :param date: Date object.
       * :param minutes: Minutes used as offset starting from midnight of current day.
       * :returns: Moved date object.
       */
      function dateAtDayMinutes(date, minutes) {
          return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, minutes);
      }
      /* }}} */

      /* For given date, returns date moved to the specific day of week {{{
       *
       * :param date: Date object.
       * :param weekday: Integer number for day of week. Starting with zero (Sunday).
       * :returns: Moved date object.
       */
      function dateAtNextWeekday(date, weekday) {
          var delta = weekday - date.getDay();
          return new Date(date.getFullYear(), date.getMonth(), date.getDate() + delta + (delta < 0 ? 7 : 0));
      }
      /* }}} */

      /* Numeric list parser (1,2,3-4,-1) {{{
       * Used in weekday parser above.
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :param func: Function func(from, to, at).
       * :returns: Position at which the token does not belong to the list any more.
       */
      function parseNumRange(tokens, at, func) {
          for (; at < tokens.length; at++) {
              if (matchTokens(tokens, at, 'number', '-', 'number')) {
                  // Number range
                  func(tokens[at][0], tokens[at+2][0], at);
                  at += 3;
              } else if (matchTokens(tokens, at, '-', 'number')) {
                  // Negative number
                  func(-tokens[at+1][0], -tokens[at+1][0], at);
                  at += 2;
              } else if (matchTokens(tokens, at, 'number')) {
                  // Single number
                  func(tokens[at][0], tokens[at][0], at);
                  at++;
              } else {
                  throw formatWarnErrorMessage(nrule, at + matchTokens(tokens, at, '-'),
                      'Unexpected token in number range: ' + tokens[at][1]);
              }

              if (!matchTokens(tokens, at, ','))
                  break;
          }

          return at;
      }
      /* }}} */

      /* List parser for constrained weekdays in month range {{{
       * e.g. Su[-1] which selects the last Sunday of the month.
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :returns: Array:
       *            0. Constrained weekday number.
       *            1. Position at which the token does not belong to the list any more (after ']' token).
       */
      function getConstrainedWeekday(tokens, at) {
          var number = 0;
          var endat = parseNumRange(tokens, at, function(from, to, at) {

              // bad number
              if (from === 0 || from < -5 || from > 5)
                  throw formatWarnErrorMessage(nrule, at,
                      t('number -5 to 5'));

              if (from === to) {
                  if (number !== 0)
                      throw formatWarnErrorMessage(nrule, at,
                          t('one weekday constraint'));
                  number = from;
              } else {
                  throw formatWarnErrorMessage(nrule, at+2,
                      t('range constrained weekdays'));
              }
          });
          for (var i = at; i < endat; i++) {
              tokens[i][4] = 'positive_number';
          }

          if (!matchTokens(tokens, endat, ']'))
              throw formatWarnErrorMessage(nrule, endat, t('expected', {symbol: ']'}));

          return [ number, endat + 1 ];
      }
      /* }}} */

      // Check if period is ok. Period 0 or 1 don’t make much sense.
      function checkPeriod(at, period, period_type, parm_string) {
          if (done_with_warnings)
              return;

          if (period === 0) {
              throw formatWarnErrorMessage(nrule, at,
                  t('range zero', { 'type': period_type }));
          } else if (period === 1) {
              if (typeof parm_string === 'string' && parm_string === 'no_end_year')
                  parsing_warnings.push([nrule, at, t('period one year+', {'type': period_type})]);
              else
                  parsing_warnings.push([nrule, at, t('period one', {'type': period_type})]);
          }
      }

      /* Get date moved to constrained weekday (and moved for add_days. {{{
       * E.g. used for 'Aug Su[-1] -1 day'.
       *
       * :param year: Year as integer.
       * :param month: Month as integer starting with zero.
       * :param weekday: Integer number for day of week. Starting with zero (Sunday).
       * :param constrained_weekday: Position where to start.
       * :returns: Date object.
       */
      function getDateForConstrainedWeekday(year, month, weekday, constrained_weekday, add_days) {
          var tmp_date = dateAtNextWeekday(
              new Date(year, month + (constrained_weekday[0] > 0 ? 0 : 1), 1), weekday);

          tmp_date.setDate(tmp_date.getDate() + (constrained_weekday[0] + (constrained_weekday[0] > 0 ? -1 : 0)) * 7);

          if (typeof add_days === 'object' && add_days[1])
              tmp_date.setDate(tmp_date.getDate() + add_days[0]);

          return tmp_date;
      }
      /* }}} */

      /* Check if date is valid. {{{
       *
       * :param month: Month as integer starting with zero.
       * :param date: Day of month as integer.
       * :param nrule: Rule number starting with 0.
       * :param at: Position at which the matching should begin.
       * :returns: undefined. There is no real return value. This function just throws an exception if something is wrong.
       */
      function checkIfDateIsValid(month, day, nrule, at) {
          // May use this instead. The problem is that this does not give feedback as precise as the code which is used in this function.
          // var testDate = new Date(year, month, day);
          // if (testDate.getDate() !== day || testDate.getMonth() !== month || testDate.getFullYear() !== year) {
          //     console.error('date not valid');
          // }

          // https://en.wikipedia.org/wiki/Month#Julian_and_Gregorian_calendars
          if (day < 1 || day > 31) {
              throw formatWarnErrorMessage(nrule, at, t('month 31', {'month': months[month]}));
          } else if ((month === 3 || month === 5 || month === 8 || month === 10) && day === 31) {
              throw formatWarnErrorMessage(nrule, at, t('month 30', {'month': months[month]}));
          } else if (month === 1 && day === 30) {
              throw formatWarnErrorMessage(nrule, at, t('month feb', {'month': months[month]}));
          }
      }
      /* }}} */
      /* }}} */

      /* Time range parser (10:00-12:00,14:00-16:00) {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :param rule: Reference to rule object.
       * :param extended_open_end: Used for combined time range with open end.
       * :param nrule: Rule number starting with 0.
       * extended_open_end: <time> - <time> +
       *        parameter at is here A (if extended_open_end is true)
       * :returns: Position at which the token does not belong to the selector anymore.
       */
      function parseTimeRange(tokens, at, rule, extended_open_end, nrule) {
          if (!extended_open_end)
              tokens[at][3] = 'time';

          for (; at < tokens.length; at++) {
              var has_time_var_calc = [], has_normal_time = []; // element 0: start time, 1: end time
                  has_normal_time[0]   = matchTokens(tokens, at, 'number', 'timesep', 'number');
                  has_time_var_calc[0] = matchTokens(tokens, at, '(', 'timevar');
              var minutes_from,
                  minutes_to;
              if (has_normal_time[0] || matchTokens(tokens, at, 'timevar') || has_time_var_calc[0]) {
                  // relying on the fact that always *one* of them is true

                  var is_point_in_time = false; // default no time range
                  var has_open_end     = false; // default no open end
                  var timevar_add      = [ 0, 0 ];
                  var timevar_string   = [];    // capture timevar string like 'sunrise' to calculate it for the current date.
                  var point_in_time_period;

                  // minutes_from
                  if (has_normal_time[0]) {
                      minutes_from = getMinutesByHoursMinutes(tokens, nrule, at+has_time_var_calc[0]);
                  } else {
                      timevar_string[0] = tokens[at+has_time_var_calc[0]][0];
                      minutes_from = word_value_replacement[timevar_string[0]];

                      if (has_time_var_calc[0]) {
                          timevar_add[0] = parseTimevarCalc(tokens, at);
                          minutes_from += timevar_add[0];
                      }
                  }

                  var at_end_time = at+(has_normal_time[0] ? 3 : (has_time_var_calc[0] ? 7 : 1))+1; // after '-'
                  if (!matchTokens(tokens, at_end_time - 1, '-')) { // not time range
                      if (matchTokens(tokens, at_end_time - 1, '+')) {
                          has_open_end = true;
                      } else {
                          if (oh_mode === 0) {
                              throw formatWarnErrorMessage(nrule,
                                  at+(
                                      has_normal_time[0] ? (
                                          typeof tokens[at+3] === 'object' ? 3 : 2
                                      ) : (
                                          has_time_var_calc[0] ? 2 : (
                                                  typeof tokens[at+1] === 'object' ? 1 : 0
                                              )
                                      )
                                  ),
                                  t('point in time', {
                                      'calc': (has_time_var_calc[0] ? t('calculation') + ' ' : ''),
                                      'libraryname': library_name
                                  }));
                          } else {
                              minutes_to = minutes_from + 1;
                              is_point_in_time = true;
                          }
                      }
                  }

                  // minutes_to
                  if (has_open_end) {
                      if (extended_open_end === 1) {
                          minutes_from += minutes_in_day;
                      }
                      if (minutes_from >= 22 * 60) {

                          minutes_to = minutes_from +  8 * 60;
                      } else if (minutes_from >= 17 * 60) {
                          minutes_to = minutes_from + 10 * 60;
                      } else {
                          minutes_to = minutes_in_day;
                      }
                  } else if (!is_point_in_time) {
                      has_normal_time[1] = matchTokens(tokens, at_end_time, 'number', 'timesep', 'number');
                      has_time_var_calc[1]      = matchTokens(tokens, at_end_time, '(', 'timevar');
                      if (!has_normal_time[1] && !matchTokens(tokens, at_end_time, 'timevar') && !has_time_var_calc[1]) {
                          throw formatWarnErrorMessage(nrule, at_end_time - (typeof tokens[at_end_time] === 'object' ? 0 : 1),
                                  t('time range continue'));
                      } else {
                          if (has_normal_time[1]) {
                              minutes_to = getMinutesByHoursMinutes(tokens, nrule, at_end_time);
                          } else {
                              timevar_string[1] = tokens[at_end_time+has_time_var_calc[1]][0];
                              minutes_to = word_value_replacement[timevar_string[1]];
                          }

                          if (has_time_var_calc[1]) {
                              timevar_add[1] = parseTimevarCalc(tokens, at_end_time);
                              minutes_to += timevar_add[1];
                          }
                      }
                  }

                  at = at_end_time + (is_point_in_time ? -1 :
                          (has_normal_time[1] ? 3 : (has_time_var_calc[1] ? 7 : !has_open_end))
                      );

                  if (matchTokens(tokens, at, '/', 'number')) {
                      if (matchTokens(tokens, at + 2, 'timesep', 'number')) { // /hours:minutes
                          point_in_time_period = getMinutesByHoursMinutes(tokens, nrule, at + 1);
                          at += 4;
                      } else { // /minutes
                          point_in_time_period = tokens[at + 1][0];
                          at += 2;
                          if (matchTokens(tokens, at, 'timesep'))
                              throw formatWarnErrorMessage(nrule, at,
                                  t('period continue'));
                      }

                      // Check at this later state in the if condition to get the correct position.
                      if (oh_mode === 0) {
                          throw formatWarnErrorMessage(nrule, at - 1,
                              t('time range mode', {'libraryname': library_name}));
                      }

                      is_point_in_time = true;
                  } else if (matchTokens(tokens, at, '+')) {
                      parseTimeRange(tokens, at_end_time, rule, minutes_to < minutes_from ? 1 : true, nrule);
                      at++;
                  } else if (oh_mode === 1 && !is_point_in_time) {
                      throw formatWarnErrorMessage(nrule, at_end_time,
                          t('point in time mode', {'libraryname': library_name}));
                  }

                  if (typeof lat === 'string') { // lon will also be defined (see above)
                      if (!has_normal_time[0] || !(has_normal_time[1] || has_open_end || is_point_in_time) ) {
                          week_stable = false;
                      }
                  } else { // we can not calculate exact times so we use the already applied constants (word_value_replacement).
                      timevar_string = [];
                  }

                  // Normalize minutes into range.
                  if (!extended_open_end && minutes_from >= minutes_in_day) {
                      throw formatWarnErrorMessage(nrule, at_end_time - 2,
                          t('outside current day'));
                  }
                  if (minutes_to < minutes_from || ((has_normal_time[0] && has_normal_time[1]) && minutes_from === minutes_to)) {
                      minutes_to += minutes_in_day;
                  }
                  if (minutes_to > minutes_in_day * 2) {
                      throw formatWarnErrorMessage(nrule, at_end_time + (has_normal_time[1] ? 4 : (has_time_var_calc[1] ? 7 : 1)) - 2,
                          t('two midnights'));
                  }

                  // This shortcut makes always-open range check faster.
                  if (minutes_from === 0 && minutes_to === minutes_in_day) {
                      rule.time.push(function() { return [true]; });
                  } else {
                      if (minutes_to > minutes_in_day) { // has_normal_time[1] must be true
                          rule.time.push(function(minutes_from, minutes_to, timevar_string, timevar_add, has_open_end, is_point_in_time, point_in_time_period, extended_open_end) { return function(date) {
                              var ourminutes = date.getHours() * 60 + date.getMinutes();

                              if (timevar_string[0]) {
                                  var date_from = SunCalc.getTimes(date, lat, lon)[timevar_string[0]];
                                  minutes_from  = date_from.getHours() * 60 + date_from.getMinutes() + timevar_add[0];
                              }
                              if (timevar_string[1]) {
                                  var date_to = SunCalc.getTimes(date, lat, lon)[timevar_string[1]];
                                  minutes_to  = date_to.getHours() * 60 + date_to.getMinutes() + timevar_add[1];
                                  minutes_to += minutes_in_day;
                                  // Needs to be added because it was added by
                                  // normal times: if (minutes_to < minutes_from)
                                  // above the selector construction.
                              } else if (is_point_in_time && typeof point_in_time_period !== 'number') {
                                  minutes_to = minutes_from + 1;
                              }

                              if (typeof point_in_time_period === 'number') {
                                  if (ourminutes < minutes_from) {
                                      return [false, dateAtDayMinutes(date, minutes_from)];
                                  } else if (ourminutes <= minutes_to) {
                                      for (var cur_min = minutes_from; ourminutes + point_in_time_period >= cur_min; cur_min += point_in_time_period) {
                                          if (cur_min === ourminutes) {
                                              return [true, dateAtDayMinutes(date, ourminutes + 1)];
                                          } else if (ourminutes < cur_min) {
                                              return [false, dateAtDayMinutes(date, cur_min)];
                                          }
                                      }
                                  }
                                  return [false, dateAtDayMinutes(date, minutes_in_day)];
                              } else {
                                  if (ourminutes < minutes_from)
                                      return [false, dateAtDayMinutes(date, minutes_from)];
                                  else
                                      return [true, dateAtDayMinutes(date, minutes_to), has_open_end, extended_open_end];
                              }
                          }}(minutes_from, minutes_to, timevar_string, timevar_add, has_open_end, is_point_in_time, point_in_time_period, extended_open_end));

                          if (minutes_to - minutes_in_day > 0) {
                              if (typeof rule_infos[nrule] === 'undefined') {
                                  rule_infos[nrule] = {};
                              }
                              rule_infos[nrule]['time_wraps_over_midnight'] = true;
                              rule.wraptime.push(function(minutes_to, timevar_string, timevar_add, has_open_end, point_in_time_period, extended_open_end) { return function(date) {
                                  var ourminutes = date.getHours() * 60 + date.getMinutes();

                                  if (timevar_string[1]) {
                                      var date_to = SunCalc.getTimes(date, lat, lon)[timevar_string[1]];
                                      minutes_to  = date_to.getHours() * 60 + date_to.getMinutes() + timevar_add[1];
                                      // minutes_in_day does not need to be added.
                                      // For normal times in it was added in: if (minutes_to < // minutes_from)
                                      // above the selector construction and
                                      // subtracted in the selector construction call
                                      // which returns the selector function.
                                  }

                                  if (typeof point_in_time_period === 'number') {
                                      if (ourminutes <= minutes_to) {
                                          for (var cur_min = 0; ourminutes + point_in_time_period >= cur_min; cur_min += point_in_time_period) {
                                              if (cur_min === ourminutes) {
                                                  return [true, dateAtDayMinutes(date, ourminutes + 1)];
                                              } else if (ourminutes < cur_min) {
                                                  return [false, dateAtDayMinutes(date, cur_min)];
                                              }
                                          }
                                      }
                                  } else {
                                      if (ourminutes < minutes_to)
                                          return [true, dateAtDayMinutes(date, minutes_to), has_open_end, extended_open_end];
                                  }
                                  return [false, undefined];
                              }}(minutes_to - minutes_in_day, timevar_string, timevar_add, has_open_end, point_in_time_period, extended_open_end));
                          }
                      } else {
                          rule.time.push(function(minutes_from, minutes_to, timevar_string, timevar_add, has_open_end, is_point_in_time, point_in_time_period) { return function(date) {
                              var ourminutes = date.getHours() * 60 + date.getMinutes();

                              if (timevar_string[0]) {
                                  var date_from = SunCalc.getTimes(date, lat, lon)[timevar_string[0]];
                                  minutes_from  = date_from.getHours() * 60 + date_from.getMinutes() + timevar_add[0];
                              }
                              if (timevar_string[1]) {
                                  var date_to = SunCalc.getTimes(date, lat, lon)[timevar_string[1]];
                                  minutes_to  = date_to.getHours() * 60 + date_to.getMinutes() + timevar_add[1];
                              } else if (is_point_in_time && typeof point_in_time_period !== 'number') {
                                  minutes_to = minutes_from + 1;
                              }

                              if (typeof point_in_time_period === 'number') {
                                  if (ourminutes < minutes_from) {
                                      return [false, dateAtDayMinutes(date, minutes_from)];
                                  } else if (ourminutes <= minutes_to) {
                                      for (var cur_min = minutes_from; ourminutes + point_in_time_period >= cur_min; cur_min += point_in_time_period) {
                                          if (cur_min === ourminutes) {
                                              return [true, dateAtDayMinutes(date, ourminutes + 1)];
                                          } else if (ourminutes < cur_min) {
                                              return [false, dateAtDayMinutes(date, cur_min)];
                                          }
                                      }
                                  }
                                  return [false, dateAtDayMinutes(date, minutes_in_day)];
                              } else {
                                  if (ourminutes < minutes_from)
                                      return [false, dateAtDayMinutes(date, minutes_from)];
                                  else if (ourminutes < minutes_to)
                                      return [true, dateAtDayMinutes(date, minutes_to), has_open_end];
                                  else
                                      return [false, dateAtDayMinutes(date, minutes_from + minutes_in_day)];
                              }
                          }}(minutes_from, minutes_to, timevar_string, timevar_add, has_open_end, is_point_in_time, point_in_time_period));
                      }
                  }

              } else if (matchTokens(tokens, at, 'number', '-', 'number')) { // "Mo 09-18" (Please don’t use this) -> "Mo 09:00-18:00".
                  minutes_from = tokens[at][0]   * 60;
                  minutes_to   = tokens[at+2][0] * 60;
                  if (!done_with_warnings) {
                      parsing_warnings.push([nrule, at + 2, t('without minutes', {
                          'syntax': (tokens[at][0]   < 10 ? '0' : '') + tokens[at][0]   + ':00-'
                                  + (tokens[at+2][0] < 10 ? '0' : '') + tokens[at+2][0] + ':00'
                      })]);
                  }

                  if (minutes_from >= minutes_in_day)
                      throw formatWarnErrorMessage(nrule, at, t('outside day'));
                  if (minutes_to < minutes_from)
                      minutes_to += minutes_in_day;
                  if (minutes_to > minutes_in_day * 2)
                      throw formatWarnErrorMessage(nrule, at + 2, t('two midnights'));

                  if (minutes_to > minutes_in_day) {
                      rule.time.push(function(minutes_from, minutes_to) { return function(date) {
                          var ourminutes = date.getHours() * 60 + date.getMinutes();

                          if (ourminutes < minutes_from)
                              return [false, dateAtDayMinutes(date, minutes_from)];
                          else
                              return [true, dateAtDayMinutes(date, minutes_to)];
                      }}(minutes_from, minutes_to));

                      if (minutes_to - minutes_in_day > 0) {
                          if (typeof rule_infos[nrule] === 'undefined') {
                              rule_infos[nrule] = {};
                          }
                          rule_infos[nrule]['time_wraps_over_midnight'] = true;
                          rule.wraptime.push(function(minutes_to) { return function(date) {
                              var ourminutes = date.getHours() * 60 + date.getMinutes();

                              if (ourminutes < minutes_to) {
                                  return [true, dateAtDayMinutes(date, minutes_to)];
                              } else {
                                  return [false, undefined];
                              }
                          }}(minutes_to - minutes_in_day));
                      }
                  } else {
                      rule.time.push(function(minutes_from, minutes_to) { return function(date) {
                          var ourminutes = date.getHours() * 60 + date.getMinutes();

                          if (ourminutes < minutes_from)
                              return [false, dateAtDayMinutes(date, minutes_from)];
                          else if (ourminutes < minutes_to)
                              return [true, dateAtDayMinutes(date, minutes_to), has_open_end];
                          else
                              return [false, dateAtDayMinutes(date, minutes_from + minutes_in_day)];
                      }}(minutes_from, minutes_to));
                  }

                  at += 3;
              } else { // additional rule
                  if (matchTokens(tokens, at, '('))
                      throw formatWarnErrorMessage(nrule, at, 'Missing variable time (e.g. sunrise) after: "' + tokens[at][1] + '"');
                  if (matchTokens(tokens, at, 'number', 'timesep'))
                      throw formatWarnErrorMessage(nrule, at+1, 'Missing minutes in time range after: "' + tokens[at+1][1] + '"');
                  if (matchTokens(tokens, at, 'number'))
                      throw formatWarnErrorMessage(nrule, at + (typeof tokens[at+1] === 'object' ? 1 : 0),
                              'Missing time separator in time range after: "' + tokens[at][1] + '"');
                  return [ at ];
              }

              if (!matchTokens(tokens, at, ',')) {
                  break;
              }

              if (typeof tokens[at+1] === 'undefined' && !done_with_warnings) {
                  parsing_warnings.push([nrule, at, t('value ends with token', { 'token': tokens[at][1] }) ]);
              }
          }

          return at;
      }
      /* }}} */

      /* Helpers for time range parser {{{ */

      /* Get time in minutes from <hour>:<minute> (tokens). {{{
       * Only used if throwing an error is wanted.
       *
       * :param tokens: List of token objects.
       * :param nrule: Rule number starting with 0.
       * :param at: Position at which the time begins.
       * :returns: Time in minutes.
       */
      function getMinutesByHoursMinutes(tokens, nrule, at) {
          if (tokens[at+2][0] > 59)
              throw formatWarnErrorMessage(nrule, at+2,
                      'Minutes are greater than 59.');
          return tokens[at][0] * 60 + tokens[at+2][0];
      }
      /* }}} */

      /* Get time in minutes from "(sunrise-01:30)" {{{
       * Extract the added or subtracted time from "(sunrise-01:30)"
       * returns time in minutes e.g. -90.
       *
       * :param tokens: List of token objects.
       * :param at: Position where the specification for the point in time could be.
       * :returns: Time in minutes on suggest, throws an exception otherwise.
      */
      function parseTimevarCalc(tokens, at) {
          var error;
          if (matchTokens(tokens, at+2, '+') || matchTokens(tokens, at+2, '-')) {
              if (matchTokens(tokens, at+3, 'number', 'timesep', 'number')) {
                  if (matchTokens(tokens, at+6, ')')) {
                      var add_or_subtract = tokens[at+2][0] === '+' ? '1' : '-1';
                      var minutes = getMinutesByHoursMinutes(tokens, nrule, at+3) * add_or_subtract;
                      if (minutes === 0)
                          parsing_warnings.push([ nrule, at+5, t('zero calculation') ]
                              );
                      return minutes;
                  } else {
                      error = [ at+6, '. ' + t('missing', {'symbol': ")"}) + '.'];
                  }
              } else {
                  error = [ at+5, ' ' + t('(time)') + '.'];
              }
          } else {
              error = [ at+2, '. ' + t('expected', {'symbol': '+" or "-'})];
          }

          if (error)
              throw formatWarnErrorMessage(nrule, error[0],
                   t('calculation syntax')+ error[1]);
      }
      /* }}} */
      /* }}} */

      /* Weekday range parser (Mo,We-Fr,Sa[1-2,-1],PH). {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where the weekday tokens could be.
       * :param rule: Reference to rule object.
       * :param nrule: Rule number starting with 0.
       * :returns: Position at which the token does not belong to the selector anymore.
       */
      function parseWeekdayRange(tokens, at, rule, in_holiday_selector, nrule) {
          if (!in_holiday_selector) {
              in_holiday_selector = true;
              tokens[at][3] = 'weekday';
          }

          for (; at < tokens.length; at++) {
              if (matchTokens(tokens, at, 'weekday', '[')) {
                  // Conditional weekday (Mo[3])
                  var numbers = [];

                  // Get list of constraints
                  var endat = parseNumRange(tokens, at+2, function(from, to, at) {

                      // bad number
                      if (from === 0 || from < -5 || from > 5)
                          throw formatWarnErrorMessage(nrule, at,
                              t('number -5 to 5'));

                      if (from === to) {
                          numbers.push(from);
                      } else if (from < to) {
                          for (var i = from; i <= to; i++) {
                              // bad number
                              if (i === 0 || i < -5 || i > 5)
                                  throw formatWarnErrorMessage(nrule, at+2,
                                      t('number -5 to 5'));

                              numbers.push(i);
                          }
                      } else {
                          throw formatWarnErrorMessage(nrule, at+2,
                              t('bad range',{'from': from, 'to': to}));
                      }
                  });

                  if (!matchTokens(tokens, endat, ']')) {
                      throw formatWarnErrorMessage(
                          nrule,
                          endat + (typeof tokens[endat] === 'object' ? 0 : -1),
                          t('] or more numbers')
                      );
                  }

                  var add_days = getMoveDays(tokens, endat+1, 6, 'constrained weekdays');
                  week_stable = false;

                  // Create selector for each list element.
                  for (var nnumber = 0; nnumber < numbers.length; nnumber++) {

                      rule.weekday.push(function(weekday, number, add_days) { return function(date) {
                          var date_num = getValueForDate(date, false); // Year not needed to distinguish.
                          var start_of_this_month = new Date(date.getFullYear(), date.getMonth(), 1);
                          var start_of_next_month = new Date(date.getFullYear(), date.getMonth() + 1, 1);

                          var target_day_this_month;

                          target_day_this_month = getDateForConstrainedWeekday(date.getFullYear(), date.getMonth(), weekday, [ number ]);

                          var target_day_with_added_days_this_month = new Date(target_day_this_month.getFullYear(),
                              target_day_this_month.getMonth(), target_day_this_month.getDate() + add_days);

                          // The target day with added days can be before this month
                          if (target_day_with_added_days_this_month.getTime() < start_of_this_month.getTime()) {
                              // but in this case, the target day without the days added needs to be in this month
                              if (target_day_this_month.getTime() >= start_of_this_month.getTime()) {
                                  // so we calculate it for the month
                                  // following this month and hope that the
                                  // target day will actually be this month.

                                  target_day_with_added_days_this_month = dateAtNextWeekday(
                                      new Date(date.getFullYear(), date.getMonth() + (number > 0 ? 0 : 1) + 1, 1), weekday);
                                  target_day_this_month.setDate(target_day_with_added_days_this_month.getDate()
                                      + (number + (number > 0 ? -1 : 0)) * 7 + add_days);
                              } else {
                                  // Calculated target day is not inside this month
                                  // therefore the specified weekday (e.g. fifth Sunday)
                                  // does not exist this month. Try it next month.
                                  return [false, start_of_next_month];
                              }
                          } else if (target_day_with_added_days_this_month.getTime() >= start_of_next_month.getTime()) {
                              // The target day is in the next month. If the target day without the added days is not in this month
                              if (target_day_this_month.getTime() >= start_of_next_month.getTime())
                                  return [false, start_of_next_month];
                          }

                          var target_day_with_added_moved_days_this_month;
                          if (add_days > 0) {
                              target_day_with_added_moved_days_this_month = dateAtNextWeekday(
                                  new Date(date.getFullYear(), date.getMonth() + (number > 0 ? 0 : 1) -1, 1), weekday);
                              target_day_with_added_moved_days_this_month.setDate(target_day_with_added_moved_days_this_month.getDate()
                                  + (number + (number > 0 ? -1 : 0)) * 7 + add_days);

                              if (date_num === getValueForDate(target_day_with_added_moved_days_this_month, false))
                                  return [true, dateAtDayMinutes(date, minutes_in_day)];
                          } else if (add_days < 0) {
                              target_day_with_added_moved_days_this_month = dateAtNextWeekday(
                                  new Date(date.getFullYear(), date.getMonth() + (number > 0 ? 0 : 1) + 1, 1), weekday);
                              target_day_with_added_moved_days_this_month.setDate(target_day_with_added_moved_days_this_month.getDate()
                                  + (number + (number > 0 ? -1 : 0)) * 7 + add_days);

                              if (target_day_with_added_moved_days_this_month.getTime() >= start_of_next_month.getTime()) {
                                  if (target_day_with_added_days_this_month.getTime() >= start_of_next_month.getTime())
                                      return [false, target_day_with_added_moved_days_this_month];
                              } else {
                                  if (target_day_with_added_days_this_month.getTime() < start_of_next_month.getTime()
                                      && getValueForDate(target_day_with_added_days_this_month, false) === date_num)
                                      return [true, dateAtDayMinutes(date, minutes_in_day)];

                                  target_day_with_added_days_this_month = target_day_with_added_moved_days_this_month;
                              }
                          }

                          // we hit the target day
                          if (date.getDate() === target_day_with_added_days_this_month.getDate()) {
                              return [true, dateAtDayMinutes(date, minutes_in_day)];
                          }

                          // we're before target day
                          if (date.getDate() < target_day_with_added_days_this_month.getDate()) {
                              return [false, target_day_with_added_days_this_month];
                          }

                          // we're after target day, set check date to next month
                          return [false, start_of_next_month];
                      }}(tokens[at][0], numbers[nnumber], add_days[0]));
                  }

                  at = endat + 1 + add_days[1];
              } else if (matchTokens(tokens, at, 'weekday')) {
                  // Single weekday (Mo) or weekday range (Mo-Fr)
                  var is_range = matchTokens(tokens, at+1, '-', 'weekday');

                  var weekday_from = tokens[at][0];
                  var weekday_to = is_range ? tokens[at+2][0] : weekday_from;

                  var inside = true;

                  // handle reversed range
                  if (weekday_to < weekday_from) {
                      var tmp = weekday_to;
                      weekday_to = weekday_from - 1;
                      weekday_from = tmp + 1;
                      inside = false;
                  }
                  var weekday_list = Array.apply(0, Array(weekday_to - weekday_from + 1)).map(function (_, index) {
                      return index + weekday_to;
                  });
                  if (typeof rule_infos[nrule] === 'undefined') {
                      rule_infos[nrule] = {};
                  }
                  if (typeof rule_infos[nrule]['week_days'] === 'object') {
                      Array.prototype.push.apply(rule_infos[nrule]['week_days'], weekday_list);
                  } else {
                      rule_infos[nrule]['week_days'] = weekday_list;
                  }

                  if (weekday_to < weekday_from) { // handle full range
                      rule.weekday.push(function() { return [true]; });
                      // Not needed. If there is no selector it automatically matches everything.
                      // WRONG: This only works if there is no other selector in this selector group ...
                  } else {
                      rule.weekday.push(function(weekday_from, weekday_to, inside) { return function(date) {
                          var ourweekday = date.getDay();

                          if (ourweekday < weekday_from || ourweekday > weekday_to) {
                              return [!inside, dateAtNextWeekday(date, weekday_from)];
                          } else {
                              return [inside, dateAtNextWeekday(date, weekday_to + 1)];
                          }
                      }}(weekday_from, weekday_to, inside));
                  }

                  at += is_range ? 3 : 1;
              } else if (matchTokens(tokens, at, 'holiday')) {
                  week_stable = false;
                  return parseHoliday(tokens, at, rule, true, in_holiday_selector);
              } else if (matchTokens(tokens, at - 1, ',')) { // additional rule
                  throw formatWarnErrorMessage(
                      nrule,
                      at - 1,
                      t('additional rule no sense'));
              } else {
                  throw formatWarnErrorMessage(nrule, at, t('unexpected token weekday range', {'token': tokens[at][1]}));
              }

              if (!matchTokens(tokens, at, ',')) {
                  break;
              }
          }

          return at;
      }
      /* }}} */

      /* Get the number of days a date should be moved (if any). {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where the date moving tokens could be.
       * :param max_differ: Maximal number of days to move (could also be zero if there are no day move tokens).
       * :returns: Array:
       *            0. Days to add.
       *            1. How many tokens.
       */
      function getMoveDays(tokens, at, max_differ, name) {
          var add_days = [ 0, 0 ]; // [ 'days to add', 'how many tokens' ]
          add_days[0] = matchTokens(tokens, at, '+') || (matchTokens(tokens, at, '-') ? -1 : 0);
          if (add_days[0] !== 0 && matchTokens(tokens, at+1, 'number', 'calcday')) {
              // continues with '+ 5 days' or something like that
              if (tokens[at+1][0] > max_differ)
                  throw formatWarnErrorMessage(nrule, at+2,
                      t('max differ',{'maxdiffer': max_differ, 'name': name}));
              add_days[0] *= tokens[at+1][0];
              if (add_days[0] === 0 && !done_with_warnings)
                  parsing_warnings.push([ nrule, at+2, t('adding 0') ]);
              add_days[1] = 3;
          } else {
              add_days[0] = 0;
          }
          return add_days;
      }
      /* }}} */

      /* Holiday parser for public and school holidays (PH,SH) {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :param rule: Reference to rule object.
       * :param push_to_weekday: Will push the selector into the weekday selector array which has the desired side effect of working in conjunction with the weekday selectors (either the holiday match or the weekday), which is the normal and expected behavior.
       * :returns: Position at which the token does not belong to the selector anymore.
       */
      function parseHoliday(tokens, at, rule, push_to_weekday, in_holiday_selector) {
          if (!in_holiday_selector) {

              if (push_to_weekday)
                  tokens[at][3] = 'weekday';
              else
                  tokens[at][3] = 'holiday'; // Could also be holiday but this is not important here.
          }

          for (; at < tokens.length; at++) {
              if (matchTokens(tokens, at, 'holiday')) {
                  if (tokens[at][0] === 'PH') {
                      var applying_holidays = getMatchingHoliday(tokens[at][0]);

                      // Only allow moving one day in the past or in the future.
                      // This makes implementation easier because only one holiday is assumed to be moved to the next year.
                      var add_days = getMoveDays(tokens, at+1, 1, 'public holiday');

                      var selector = function(applying_holidays, add_days) { return function(date) {

                          var holidays = getApplyingHolidaysForYear(applying_holidays, date.getFullYear(), add_days);
                          // Needs to be calculated each time because of movable days.

                          var date_num = getValueForDate(date, true);

                          for (var i = 0; i < holidays.length; i++) {
                              var next_holiday_date_num = getValueForDate(holidays[i][0], true);

                              if (date_num < next_holiday_date_num) {

                                  if (add_days[0] > 0) {
                                      // Calculate the last holiday from previous year to tested against it.
                                      var holidays_last_year = getApplyingHolidaysForYear(applying_holidays, date.getFullYear() - 1, add_days);
                                      var last_holiday_last_year = holidays_last_year[holidays_last_year.length - 1];
                                      var last_holiday_last_year_num = getValueForDate(last_holiday_last_year[0], true);

                                      if (date_num < last_holiday_last_year_num ) {
                                          return [ false, last_holiday_last_year[0] ];
                                      } else if (date_num === last_holiday_last_year_num) {
                                          return [true, dateAtDayMinutes(last_holiday_last_year[0], minutes_in_day),
                                              'Day after ' +last_holiday_last_year[1] ];
                                      }
                                  }

                                  return [ false, holidays[i][0] ];
                              } else if (date_num === next_holiday_date_num) {
                                  return [true, new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1),
                                      (add_days[0] > 0 ? 'Day after ' : (add_days[0] < 0 ? 'Day before ' : '')) + holidays[i][1] ];
                              }
                          }

                          if (add_days[0] < 0) {
                              // Calculate the first holiday from next year to tested against it.
                              var holidays_next_year = getApplyingHolidaysForYear(applying_holidays, date.getFullYear() + 1, add_days);
                              var first_holidays_next_year = holidays_next_year[0];
                              var first_holidays_next_year_num = getValueForDate(first_holidays_next_year[0], true);
                              if (date_num === first_holidays_next_year_num) {
                                  return [true, dateAtDayMinutes(first_holidays_next_year[0], minutes_in_day),
                                      'Day before ' + first_holidays_next_year[1] ];
                              }
                          }

                          // continue next year
                          return [ false, new Date(holidays[0][0].getFullYear() + 1,
                                  holidays[0][0].getMonth(),
                                  holidays[0][0].getDate()) ];

                      }}(applying_holidays, add_days);

                      if (push_to_weekday)
                          rule.weekday.push(selector);
                      else
                          rule.holiday.push(selector);

                      at += 1 + add_days[1];
                  } else if (tokens[at][0] === 'SH') {
                      var applying_holidays = getMatchingHoliday(tokens[at][0]);

                      var selector = function(applying_holidays) { return function(date) {
                          var date_num = getValueForDate(date);

                          // Iterate over holiday array containing the different holiday ranges.
                          for (var i = 0; i < applying_holidays.length; i++) {

                              var holiday = getSHForYear(applying_holidays[i], date.getFullYear());
                              if (typeof holiday === 'undefined') {
                                  continue;
                              }

                              for (var h = 0; h < holiday.length; h+=4) {
                                  var holiday_to_plus = new Date(date.getFullYear(), holiday[2+h] - 1, holiday[3+h] + 1);
                                  var holiday_from = (holiday[0+h] - 1) * 100 + holiday[1+h];
                                  var holiday_to   = (holiday[2+h] - 1) * 100 + holiday[3+h];
                                  holiday_to_plus  = getValueForDate(holiday_to_plus);

                                  // console.log(`holiday_from: ${holiday_from}, holiday_to: ${holiday_to}, holiday_to_plus: ${holiday_to_plus}`);

                                  var holiday_ends_next_year = holiday_to < holiday_from;

                                  if (date_num < holiday_from) { // date is before selected holiday

                                      // check if we are in the holidays from the last year spanning into this year
                                      var last_year_holiday = getSHForYear(applying_holidays[applying_holidays.length - 1], date.getFullYear() - 1);
                                      if (typeof last_year_holiday === 'object') {
                                          var last_year_holiday_from = (last_year_holiday[last_year_holiday.length - 4] - 1) * 100
                                              + last_year_holiday[last_year_holiday.length - 3]; // e.g. 1125
                                          var last_year_holiday_to   = (last_year_holiday[last_year_holiday.length - 2] - 1) * 100
                                              + last_year_holiday[last_year_holiday.length - 1]; // e.g. 0005
                                          // console.log(last_year_holiday_from, last_year_holiday_to);

                                          if (last_year_holiday_from > last_year_holiday_to && date_num <= last_year_holiday_to) {
                                              return [ true, new Date(date.getFullYear(),
                                                  last_year_holiday[last_year_holiday.length - 2] - 1,
                                                  last_year_holiday[last_year_holiday.length - 1] + 1),
                                                  applying_holidays[applying_holidays.length - 1].name ];
                                          } else {
                                              return [ false, new Date(date.getFullYear(), holiday[0+h] - 1, holiday[1+h]) ];
                                          }
                                      } else { /* School holidays for last year are not defined. */
                                          return [ false, new Date(date.getFullYear(), holiday[0+h] - 1, holiday[1+h]) ];
                                      }
                                  } else if (holiday_from <= date_num && (date_num <= holiday_to || holiday_ends_next_year)) {
                                      return [ true, new Date(date.getFullYear() + holiday_ends_next_year, holiday[2+h] - 1, holiday[3+h] + 1),
                                          applying_holidays[i].name ];
                                  } else if (holiday_to_plus === date_num) { // selected holiday end is equal to month and day
                                      if (h + 4 < holiday.length) { // next holiday is next date range of the same holidays
                                          h += 4;
                                          return [ false, new Date(date.getFullYear(), holiday[0+h] - 1, holiday[1+h]) ];
                                      } else {
                                          /* Because not all school holidays
                                           * have to apply each year this
                                           * part has been simplified which
                                           * makes the implementation a bit
                                           * less efficient but reduces
                                           * complexity.
                                           */
                                          return [ false, new Date(date.getFullYear(), holiday[2+h] - 1, holiday[3+h] + 2) ];
                                      }
                                  }
                              }
                          }
                          throw formatLibraryBugMessage(t('no SH definition', {
                              'name': '',
                              'year': date.getFullYear(),
                          }), 'library bug PR only');
                      }}(applying_holidays);

                      if (push_to_weekday)
                          rule.weekday.push(selector);
                      else
                          rule.holiday.push(selector);
                      at += 1; // FIXME: test
                  }
              } else if (matchTokens(tokens, at, 'weekday')) {
                  return parseWeekdayRange(tokens, at, rule, true, nrule);
              } else if (matchTokens(tokens, at - 1, ',')) { // additional rule
                  throw formatWarnErrorMessage(
                      nrule,
                      at - 1,
                      t('additional rule no sense'));
              } else {
                  throw formatWarnErrorMessage(nrule, at, t('unexpected token holiday', {'token': tokens[at][1]}));
              }

              if (!matchTokens(tokens, at, ','))
                  break;
          }

          return at;
      }

      // Helpers for holiday parsers {{{

      /* Returns a number for a date which can then be used to compare just the dates (without the time). {{{
       *
       * This is necessary because a selector could be called for the middle of the day and we need to tell if it matches that day.
       * Example: Returns 20150015 for Jan 15 2015.
       *
       * :param date: Date object.
       * :param include_year: Boolean. If true include the year.
       * :returns: Number for the date.
       */
      function getValueForDate(date, include_year) {
          // Implicit because undefined evaluates to false.
          // include_year = typeof include_year !== 'undefined' ? include_year : false;

          return (include_year ? (date.getFullYear() * 10000) : 0) + (date.getMonth() * 100) + date.getDate();
      }
      /* }}} */

      /* Return the school holiday definition e.g. [ 5, 25, to 6, 5 ], for the specified year {{{
       *
       * :param SH_hash:
       * :param year: Year as integer.
       * :param fatal: Defines the behavior in case no definition is find. Throw an error if set to true. Return return undefined otherwise.
       * :returns: school holidays for the given year.
       */
      function getSHForYear(SH_hash, year, fatal) {

          var holiday = SH_hash[year];
          if (typeof holiday === 'undefined') {
              holiday = SH_hash['default']; // applies for any year without explicit definition
              if (typeof holiday === 'undefined') {
                  {
                      return undefined;
                  }
              }
          }
          return holiday;
      }
      /* }}} */

      /* Return closest holiday definition available. {{{
       *
       * First try to get the state, if missing get the country wide holidays
       * (which can on it’s own be limited to some states).
       *
       * :param type_of_holidays: Choices: PH, SH.
       * :returns: Public or school holiday list.
       */
      function getMatchingHoliday(type_of_holidays) {
          if (typeof location_cc !== 'string') {
              /* We have no idea which holidays do apply because the country code was not provided. */
              throw t('no country code');
          }

          if (!holiday_definitions[location_cc]) {
              throw formatLibraryBugMessage(t('no holiday definition', {
                  'name': type_of_holidays,
                  'cc': location_cc,
              }), 'library bug PR only');
          }

          var matching_holiday = [];
          if (typeof location_state === 'string'
              && typeof holiday_definitions[location_cc][location_state] === 'object'
              && typeof holiday_definitions[location_cc][location_state][type_of_holidays] === 'object') {

              /* If holiday_definitions for the state are specified,
               * use it and ignore lesser specific ones (for the
               * country).
               */

              var country_holidays = holiday_definitions[location_cc][type_of_holidays] || [];
              var state_holidays = holiday_definitions[location_cc][location_state][type_of_holidays];
              if (type_of_holidays === 'PH') {
                  matching_holiday = state_holidays;
              } else if (!country_holidays.length) {
                  matching_holiday = state_holidays;
              } else {
                  // Merge country and state holidays chronologically
                  var country_holiday_names = country_holidays.map(function(country_holiday) {
                      return country_holiday.name;
                  });
                  var matching_holiday = [];
                  matching_holiday.push.apply(matching_holiday, country_holidays);
                  matching_holiday.push.apply(matching_holiday, state_holidays.filter(function is_not_a_country_holiday(state_holiday) {
                      return country_holiday_names.indexOf(state_holiday.name) === -1;
                  }));
                  matching_holiday.sort(function(h1, h2) {
                      var h1_year = Object.keys(h1).find(function(k) {return k !== 'name';});
                      var h2_year = Object.keys(h2).find(function(k) {return k !== 'name';});
                      var h1_date = h1[h1_year];
                      var h2_date = h2[h2_year];
                      // compare both months, or to break a tie both days
                      return (h1_date[0] - h2_date[0]) || (h1_date[1] - h2_date[1]);
                  });
              }
          } else if (holiday_definitions[location_cc][type_of_holidays]) {
              /* Holidays are defined country wide. Some
               * countries only have country-wide holiday definitions
               * so that is ok too.
               */
              var applying_holidays_for_country = holiday_definitions[location_cc][type_of_holidays];

              switch (type_of_holidays) {
                  case 'PH':
                      applying_holidays_for_country.forEach(function (holiday_item) {
                          /* Holidays in the country-wide scope can be limited to certain states. */
                          if ('only_states' in holiday_item) {
                              if (-1 === holiday_item.only_states.indexOf(location_state)) {
                                  return;
                              }
                          }

                          matching_holiday.push(holiday_item);
                      });
                      break;
                  case 'SH':
                      matching_holiday = applying_holidays_for_country;
                      break;
              }
          } else {
              throw formatLibraryBugMessage(t('no holiday definition state', {
                  'name': type_of_holidays,
                  'cc': location_cc,
                  'state': location_state,
              }), 'library bug PR only');
          }

          if (matching_holiday.length === 0) {
              throw formatLibraryBugMessage(t('no holiday definition', {
                  'name': type_of_holidays,
                  'cc': location_cc,
              }), 'library bug PR only');
          }

          return matching_holiday;
      }
      /* }}} */

      /* Return variable dates used for holiday calculation. {{{
       *
       * :param year: Year as integer.
       * :returns: Hash of variables dates. Key is the name of the variable date. Value is the variable date date object.
       */
      function getMovableEventsForYear(year) {
          /* Calculate easter {{{ */
          var C = Math.floor(year/100);
          var N = year - 19*Math.floor(year/19);
          var K = Math.floor((C - 17)/25);
          var I = C - Math.floor(C/4) - Math.floor((C - K)/3) + 19*N + 15;
          I = I - 30*Math.floor((I/30));
          I = I - Math.floor(I/28)*(1 - Math.floor(I/28)*Math.floor(29/(I + 1))*Math.floor((21 - N)/11));
          var J = year + Math.floor(year/4) + I + 2 - C + Math.floor(C/4);
          J = J - 7*Math.floor(J/7);
          var L = I - J;
          var M = 3 + Math.floor((L + 40)/44);
          var D = L + 28 - 31*Math.floor(M/4);
          /* }}} */

          /* Calculate orthodox easter {{{ */
          var oA = year % 4;
          var oB = year % 7;
          var oC = year % 19;
          var oD = (19*oC + 15) % 30;
          var oE = (2*oA+4*oB - oD + 34) % 7;
          var oF = oD+oE;

          var oDate;
          if (oF < 9) {
              oDate = new Date(year, 4-1, oF+4);
          } else {
              if ((oF+4)<31) {
                  oDate = new Date(year, 4-1, oF+4);
              } else {
                  oDate = new Date(year, 5-1, oF-26);
              }
          }
          /* }}} */

          /* Calculate last Sunday in February {{{ */
          var lastFebruaryDay = new Date(year, 2, 0);
          var lastFebruarySunday = lastFebruaryDay.getDate() - lastFebruaryDay.getDay();
          /* }}} */

          /* Calculate Victoria Day. last Monday before or on May 24 {{{ */
          var may_24 = new Date(year, 4, 24);
          var victoriaDay = 24  - ((6 + may_24.getDay()) % 7);
          /* }}} */

          /* Calculate Canada Day. July 1st unless 1st is on Sunday, then July 2. {{{ */
          var july_1 = new Date(year, 6, 1);
          var canadaDay = july_1.getDay() === 0 ? 2 : 1;
          /* }}} */

          /* Calculation of the spring and autumnal equinoxes (for Public holidays in Japan). {{{ */
          function springEquinoxCalc(year){
              if(year >= 1900 && year <= 1923){
                  if(year % 4 === 3) return new Date(year, 2, 22)
                  else return new Date(year, 2, 21)
              } else if(year >= 1924 && year <= 1959){
                  return new Date(year, 2, 21)
              } else if(year >= 1960 && year <= 1991){
                  if(year % 4 === 0) return new Date(year, 2, 20)
                  else return new Date(year, 2, 21)
              } else if(year >= 1992 && year <= 2023){
                  if(year % 4 === 0 || year % 4 === 1) return new Date(year, 2, 20)
                  else return new Date(year, 2, 21)
              } else if(year >= 2024 && year <= 2055){
                  if(year % 4 === 3) return new Date(year, 2, 21)
                  else return new Date(year, 2, 20)
              } else if(year >= 2056 && year <= 2091){
                  return new Date(year, 2, 20)
              } else if(year >= 2092 && year <= 2099){
                  if(year % 4 === 0) return new Date(year, 2, 19)
                  else return new Date(year, 2, 20)
              }
          }

          function autumnalEquinoxCalc(year){
              if(year >= 1900 && year <= 1919){
                  if(year % 4 === 0) return new Date(year, 8, 23)
                  else return new Date(year, 8, 24)
              } else if(year >= 1920 && year <= 1947){
                  if(year % 4 === 0 || year % 4 === 1) return new Date(year, 8, 23)
                  else return new Date(year, 8, 24)
              } else if(year >= 1948 && year <= 1979){
                  if(year % 4 === 3) return new Date(year, 8, 24)
                  else return new Date(year, 8, 23)
              } else if(year >= 1980 && year <= 2011){
                  return new Date(year, 8, 23)
              } else if(year >= 2012 && year <= 2043){
                  if(year % 4 === 0) return new Date(year, 8, 22)
                  else return new Date(year, 8, 23)
              }  else if(year >= 2044 && year <= 2075){
                  if(year % 4 === 0 || year % 4 === 1) return new Date(year, 8, 22)
                  else return new Date(year, 8, 23)
              } else if(year >= 2076 && year <= 2099){
                  if(year % 4 === 3) return new Date(year, 8, 23)
                  else return new Date(year, 8, 22)
              }
          }

          /* Helper functions {{{ */
          function firstWeekdayOfMonth(month, weekday){
              var first = new Date(year, month, 1);
              return 1 + ((7 + weekday - first.getDay()) % 7);
          }

          function lastWeekdayOfMonth(month, weekday){
              var last = new Date(year, month+1, 0);
              var offset = ((7 + last.getDay() - weekday) % 7);
              return last.getDate() - offset;
          }

          function getDateOfWeekdayInDateRange(weekday, start_date){
              var days_to_dest_date = weekday - start_date.getDay();
              if (days_to_dest_date < 0) {
                  days_to_dest_date += 7;
              }
              start_date.setDate(start_date.getDate() + days_to_dest_date);
              return start_date;
          }

          /* Date of next weekday range. {{{
           *
           * :param first_weekday: First weekday in range of wanted weekday (1 is Mo).
           * :param last_weekday: Last weekday in range of wanted weekday (1 is Mo).
           * :param start_date: Earliest possible date to consider.
           * :returns: start_date if in weekday range, otherwise the next day which is in range.
           */
          function getDateOfNextWeekdayRange(first_weekday, last_weekday, start_date){
              if (first_weekday >= last_weekday) {
                  throw formatLibraryBugMessage('Not implemented yet.');
              }

              if (first_weekday <= start_date.getDay() && start_date.getDay() <= last_weekday) {
                  return start_date;
              } else {
                  var days_to_dest_date = first_weekday - start_date.getDay();
                  if (days_to_dest_date < 0) {
                      days_to_dest_date += 7;
                  }
                  start_date.setDate(start_date.getDate() + days_to_dest_date);
                  return start_date;
              }

          }
          /* }}} */

          return {
              'easter'                : new Date(year, M - 1, D),
              'orthodox easter'       : oDate,
              'victoriaDay'           : new Date(year,  4, victoriaDay),
              'canadaDay'             : new Date(year,  6, canadaDay),
              'firstJanuaryMonday'    : new Date(year,  0, firstWeekdayOfMonth(0, 1)),
              'firstFebruaryMonday'   : new Date(year,  1, firstWeekdayOfMonth(1, 1)),
              'lastFebruarySunday'    : new Date(year,  1, lastFebruarySunday),
              'firstMarchMonday'      : new Date(year,  2, firstWeekdayOfMonth(2, 1)),
              'firstAprilMonday'      : new Date(year,  3, firstWeekdayOfMonth(3, 1)),
              'firstMayMonday'        : new Date(year,  4, firstWeekdayOfMonth(4, 1)),
              'firstJuneMonday'       : new Date(year,  5, firstWeekdayOfMonth(5, 1)),
              'firstJulyMonday'       : new Date(year,  6, firstWeekdayOfMonth(6, 1)),
              'firstAugustMonday'     : new Date(year,  7, firstWeekdayOfMonth(7, 1)),
              'firstSeptemberMonday'  : new Date(year,  8, firstWeekdayOfMonth(8, 1)),
              'firstSeptemberTuesday' : new Date(year,  8, firstWeekdayOfMonth(8, 2)),
              'firstSeptemberSunday'  : new Date(year,  8, firstWeekdayOfMonth(8, 0)),
              'firstOctoberMonday'    : new Date(year,  9, firstWeekdayOfMonth(9, 1)),
              'firstNovemberMonday'   : new Date(year, 10, firstWeekdayOfMonth(10, 1)),
              'firstNovemberTuesday'  : new Date(year, 10, firstWeekdayOfMonth(10, 2)),
              'firstMarchTuesday'     : new Date(year,  2, firstWeekdayOfMonth(2, 2)),
              'firstAugustTuesday'    : new Date(year,  7, firstWeekdayOfMonth(7, 2)),
              'firstAugustFriday'     : new Date(year,  7, firstWeekdayOfMonth(7, 5)),
              'firstNovemberThursday' : new Date(year, 10, firstWeekdayOfMonth(10, 4)),
              'lastMayMonday'         : new Date(year,  4, lastWeekdayOfMonth(4, 1)),
              'lastMarchMonday'       : new Date(year,  2, lastWeekdayOfMonth(2, 1)),
              'lastAprilMonday'       : new Date(year,  3, lastWeekdayOfMonth(3, 1)),
              'lastAprilFriday'       : new Date(year,  3, lastWeekdayOfMonth(3, 5)),
              'lastAugustMonday'      : new Date(year,  7, lastWeekdayOfMonth(7, 1)),
              'lastSeptemberMonday'   : new Date(year,  8, lastWeekdayOfMonth(8, 1)),
              'lastSeptemberFriday'   : new Date(year,  8, lastWeekdayOfMonth(8, 5)),
              'lastOctoberMonday'     : new Date(year,  9, lastWeekdayOfMonth(9, 1)),
              'lastOctoberFriday'     : new Date(year,  9, lastWeekdayOfMonth(9, 5)),
              'nextSaturday20Jun'     : getDateOfWeekdayInDateRange(6, new Date(year, 5, 20)),
              'nextSaturday31Oct'     : getDateOfWeekdayInDateRange(6, new Date(year, 9, 31)),
              'nextWednesday16Nov'    : getDateOfWeekdayInDateRange(3, new Date(year, 10, 16)),
              'nextMo-Fr17March'      : getDateOfNextWeekdayRange(1, 5, new Date(year, 2, 17)),
              'nextMo-Sa01May'        : getDateOfNextWeekdayRange(1, 6, new Date(year, 4, 1)),
              'nextMo-Sa07August'     : getDateOfNextWeekdayRange(1, 6, new Date(year, 7, 7)),
              'nextMo-Sa25December'   : getDateOfNextWeekdayRange(1, 6, new Date(year, 11, 25)),
              'springEquinox'         : springEquinoxCalc(year),
              'autumnalEquinox'       : autumnalEquinoxCalc(year),
          };
      }
      /* }}} */

      function getApplyingHolidaysForYear(applying_holidays, year, add_days) {
          var movableDays = getMovableEventsForYear(year);

          var sorted_holidays = [];
          var next_holiday;

          applying_holidays.forEach(function (holiday_item) {
              if ('fixed_date' in holiday_item) {
                  next_holiday = new Date(year,
                          holiday_item.fixed_date[0] - 1,
                          holiday_item.fixed_date[1]
                      );
              } else if ('variable_date' in holiday_item) {
                  var selected_movableDay = movableDays[holiday_item.variable_date];
                  if (!selected_movableDay) {
                      throw t('movable no formula', {'name': holiday_item.name});
                  }
                  var date_offset = 0;
                  if ('offset' in holiday_item) {
                      date_offset = holiday_item.offset;
                  }
                  next_holiday = new Date(selected_movableDay.getFullYear(),
                      selected_movableDay.getMonth(),
                      selected_movableDay.getDate() + date_offset
                  );
                  if (year !== next_holiday.getFullYear()) {
                      throw t('movable not in year', {
                          'name': holiday_item.variable_date, 'days': date_offset});
                  }
              } else {
                  throw formatLibraryBugMessage('Unexpected object: ' + JSON.stringify(holiday_item, null, '    '));
              }

              if (add_days[0]) {
                  next_holiday.setDate(next_holiday.getDate() + add_days[0]);
              }

              sorted_holidays.push([ next_holiday, holiday_item.name ]);
          });

          sorted_holidays = sorted_holidays.sort(function(a,b){
              if (a[0].getTime() < b[0].getTime()) return -1;
              if (a[0].getTime() > b[0].getTime()) return 1;
              return 0;
          });

          return sorted_holidays;
      }
      /* }}} */
      /* }}} */

      /* Year range parser (2013,2016-2018,2020/2). {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :returns: Position at which the token does not belong to the selector anymore.
       */
      function parseYearRange(tokens, at) {
          tokens[at][3] = 'year';
          for (; at < tokens.length; at++) {
              if (matchTokens(tokens, at, 'year')) {
                  var is_range = false,
                      has_period,
                      period;
                  if (matchTokens(tokens, at+1, '-', 'year', '/', 'number')) {
                      is_range   = true;
                      has_period = true;
                      period = parseInt(tokens[at+4][0]);
                      checkPeriod(at+4, period, 'year');
                  } else {
                      is_range   = matchTokens(tokens, at+1, '-', 'year');
                      has_period = matchTokens(tokens, at+1, '/', 'number');
                      if (has_period) {
                          period = parseInt(tokens[at+2][0]);
                          checkPeriod(at+2, period, 'year', 'no_end_year');
                      } else if (matchTokens(tokens, at+1, '+')) {
                          period = 1;
                          has_period = 2;
                      }
                  }

                  var year_from = parseInt(tokens[at][0]);
                  // error checking {{{
                      if (is_range && tokens[at+2][0] <= year_from) {
                          // handle reversed range
                          if (tokens[at+2][0] === year_from) {
                              throw formatWarnErrorMessage(nrule, at, t('year range one year', {'year': year_from }));
                          } else {
                              throw formatWarnErrorMessage(nrule, at, t('year range reverse'));
                          }
                      }
                      if (!is_range && year_from < new Date().getFullYear()) {
                          parsing_warnings.push([ nrule, at, t('year past') ]);
                      }
                      if (is_range && tokens[at+2][0] < new Date().getFullYear()) {
                          parsing_warnings.push([ nrule, at+2, t('year past') ]);
                      }
                  /* }}} */

                  rule.year.push(function(tokens, at, year_from, is_range, has_period, period) { return function(date) {
                      var ouryear = date.getFullYear();
                      var year_to = is_range ? parseInt(tokens[at+2][0]) : year_from;

                      if (ouryear < year_from ){
                          return [false, new Date(year_from, 0, 1)];
                      } else if (has_period) {
                          if (year_from <= ouryear) {
                              if (is_range && ouryear > year_to)
                                  return [false];
                              if (period > 0) {
                                  if ((ouryear - year_from) % period === 0) {
                                      return [true, new Date(ouryear + 1, 0, 1)];
                                  } else {
                                      return [false, new Date(ouryear + period - 1, 0, 1)];
                                  }
                              }
                          }
                      } else if (is_range) {
                          if (ouryear <= year_to)
                              return [true, new Date(year_to + 1, 0, 1)];
                      } else if (ouryear === year_from) {
                          return [true];
                      }

                      return [false];

                  }}(tokens, at, year_from, is_range, has_period, period));

                  at += 1 + (is_range ? 2 : 0) + (has_period ? (has_period === 2 ? 1 : 2) : 0);
              } else if (matchTokens(tokens, at - 1, ',')) { // additional rule
                  throw formatWarnErrorMessage(nrule, at - 1, t('additional rule no sense'));
              } else {
                  throw formatWarnErrorMessage(nrule, at, t('unexpected token year range', {'token': tokens[at][1]}));
              }

              if (!matchTokens(tokens, at, ','))
                  break;
          }

          return at;
      }
      /* }}} */

      /* Week range parser (week 11-20, week 1-53/2). {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :returns: Position at which the token does not belong to the selector anymore.
       */
      function parseWeekRange(tokens, at) {
          for (; at < tokens.length; at++) {
              if (matchTokens(tokens, at, 'week')) {
                  at++;
              }
              if (matchTokens(tokens, at, 'number')) {
                  var is_range = matchTokens(tokens, at+1, '-', 'number'), period = 0;
                  var week_from = tokens[at][0];
                  var week_to   = is_range ? tokens[at+2][0] : week_from;
                  if (week_from > week_to) {
                      throw formatWarnErrorMessage(nrule, at+2, t('week range reverse'));
                  }
                  if (week_from < 1) {
                      throw formatWarnErrorMessage(nrule, at, t('week negative'));
                  }
                  if (week_to > 53) {
                      throw formatWarnErrorMessage(nrule, is_range ? at+2 : at, t('week exceed'));
                  }
                  if (is_range) {
                      period = matchTokens(tokens, at+3, '/', 'number');
                      if (period) {
                          period = tokens[at+4][0];
                          tokens[at+4][4] = 'positive_number';
                          if (period < 2) {
                              throw formatWarnErrorMessage(nrule, at+4, t('week period less than 2', {
                                  'weekfrom': week_from, 'weekto': week_to, 'period': period}));
                          } else if (period > 26) {
                              throw formatWarnErrorMessage(nrule, at+4, t('week period greater than 26', {
                                  'weekfrom': week_from
                              }));
                          }
                      }
                  }

                  if (week_stable && (!(week_from <= 1 && week_to >= 53) || period)) {
                      week_stable = false;
                  }

                  if (!period && week_from === 1 && week_to === 53) {
                      /* Shortcut and work around bug. */
                      rule.week.push(function() { return [true]; });
                  } else {

                      rule.week.push(function(week_from, week_to, period) { return function(date) {
                          var ourweek = getWeekNumber(date);

                          // console.log("week_from: %s, week_to: %s", week_from, week_to);
                          // console.log("ourweek: %s, date: %s", ourweek, date);

                          // before range
                          if (ourweek < week_from) {
                              // console.log("Before: " + getNextDateOfISOWeek(week_from, date));
                              return [false, getNextDateOfISOWeek(week_from, date)];
                          }

                          // we're after range, set check date to next year
                          if (ourweek > week_to) {
                              // console.log("After");
                              return [false, getNextDateOfISOWeek(week_from, date)];
                          }

                          // we're in range
                          if (period) {
                              var in_period = (ourweek - week_from) % period === 0;
                              if (in_period) {
                                  return [true, getNextDateOfISOWeek(ourweek + 1, date)];
                              } else {
                                  return [false, getNextDateOfISOWeek(ourweek + period - 1, date)];
                              }
                          }

                          // console.log("Match");
                          return [true, getNextDateOfISOWeek(week_to === 53 ? 1 : week_to + 1, date)];
                      }}(week_from, week_to, period));
                  }

                  at += 1 + (is_range ? 2 : 0) + (period ? 2 : 0);
              } else if (matchTokens(tokens, at - 1, ',')) { // additional rule
                  throw formatWarnErrorMessage(nrule, at - 1, t('additional rule no sense'));
              } else {
                  throw formatWarnErrorMessage(nrule, at, t('unexpected token week range', {'token': tokens[at][1]}));
              }

              if (!matchTokens(tokens, at, ','))
                  break;
          }

          return at;
      }

      // https://stackoverflow.com/a/6117889
      /* For a given date, get the ISO week number.
       *
       * Based on information at:
       *
       *    http://www.merlyn.demon.co.uk/weekcalc.htm#WNR
       *
       * Algorithm is to find nearest Thursday, it's year
       * is the year of the week number. Then get weeks
       * between that date and the first day of that year.
       *
       * Note that dates in one year can be weeks of previous
       * or next year, overlap is up to 3 days.
       *
       * e.g. 2014/12/29 is Monday in week  1 of 2015
       *      2012/1/1   is Sunday in week 52 of 2011
       */
      function getWeekNumber(d) {
          // Copy date so don't modify original
          d = new Date(+d);
          d.setHours(0,0,0,0);
          // Set to nearest Thursday: current date + 4 - current day number
          // Make Sunday's day number 7
          d.setDate(d.getDate() + 4 - (d.getDay()||7));
          // Get first day of year
          var yearStart = new Date(d.getFullYear(),0,1);
          // Calculate full weeks to nearest Thursday
          return Math.ceil(( ( (d - yearStart) / 86400000) + 1)/7)
      }
      // https://stackoverflow.com/a/16591175
      function getDateOfISOWeek(w, year) {
          var simple = new Date(year, 0, 1 + (w - 1) * 7);
          var dow = simple.getDay();
          var ISOweekStart = simple;
          if (dow <= 4)
              ISOweekStart.setDate(simple.getDate() - simple.getDay() + 1);
          else
              ISOweekStart.setDate(simple.getDate() + 8 - simple.getDay());
          return ISOweekStart;
      }
      function getNextDateOfISOWeek(week, date) {
          var next_date;
          for (var i = -1; i <= 1; i++) {
              next_date = getDateOfISOWeek(week, date.getFullYear() + i);
              if (next_date.getTime() > date.getTime()) {
                  return next_date;
              }
          }
          throw formatLibraryBugMessage();
      }
      /* }}} */

      /* Month range parser (Jan,Feb-Mar). {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :param push_to_monthday: Will push the selector into the monthday selector array which has the desired side effect of working in conjunction with the monthday selectors (either the month match or the monthday).
       * :returns: Position at which the token does not belong to the selector anymore.
       */
      function parseMonthRange(tokens, at, push_to_monthday, in_selector) {
          if (!in_selector)
              tokens[at][3] = 'month';

          for (; at < tokens.length; at++) {
              // Use parseMonthdayRange if '<month> <daynum>' and not '<month> <hour>:<minute>'
              if (matchTokens(tokens, at, 'month', 'number') && !matchTokens(tokens, at+2, 'timesep', 'number')) {
                  return parseMonthdayRange(tokens, at, nrule, true);
              } else if (matchTokens(tokens, at, 'month')) {
                  // Single month (Jan) or month range (Feb-Mar)
                  var is_range = matchTokens(tokens, at+1, '-', 'month');

                  var month_from = tokens[at][0];
                  var month_to = is_range ? tokens[at+2][0] : month_from;

                  if (is_range && week_stable) {
                      if (month_from !== (month_to + 1) % 12)
                          week_stable = false;
                  } else {
                      week_stable = false;
                  }

                  var inside = true;

                  // handle reversed range
                  if (month_to < month_from) {
                      var tmp = month_to;
                      month_to = month_from - 1;
                      month_from = tmp + 1;
                      inside = false;
                  }

                  var selector = function(month_from, month_to, inside) { return function(date) {
                      var ourmonth = date.getMonth();

                      if (month_to < month_from) {
                          /* Handle full range. */
                          return [!inside];
                      }

                      if (ourmonth < month_from || ourmonth > month_to) {
                          return [!inside, dateAtNextMonth(date, month_from)];
                      } else {
                          return [inside, dateAtNextMonth(date, month_to + 1)];
                      }
                  }}(month_from, month_to, inside);

                  if (push_to_monthday === true)
                      rule.monthday.push(selector);
                  else
                      rule.month.push(selector);

                  at += is_range ? 3 : 1;
              } else {
                  throw formatWarnErrorMessage(nrule, at, t('unexpected token month range', {'token': tokens[at][1]}));
              }

              if (!matchTokens(tokens, at, ','))
                  break;
          }

          return at;
      }

      function dateAtNextMonth(date, month) {
          return new Date(date.getFullYear(), month < date.getMonth() ? month + 12 : month);
      }
      /* }}} */

      /* Month day range parser (Jan 26-31; Jan 26-Feb 26). {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :param nrule: Rule number starting with 0.
       * :param push_to_month: Will push the selector into the month selector array which has the desired side effect of working in conjunction with the month selectors (either the month match or the monthday).
       * :returns: Position at which the token does not belong to the selector anymore.
       */
      function parseMonthdayRange(tokens, at, nrule, push_to_month) {
          if (!push_to_month)
              tokens[at][3] = 'month';

          for (; at < tokens.length; at++) {
              var has_year = [], has_month = [], has_event = [], has_calc = [], has_constrained_weekday = [];
              has_year[0]  = matchTokens(tokens, at, 'year');
              has_month[0] = matchTokens(tokens, at+has_year[0], 'month', 'number');
              has_event[0] = matchTokens(tokens, at+has_year[0], 'event');

              if (has_event[0])
                  has_calc[0] = getMoveDays(tokens, at+has_year[0]+1, 200, 'event like easter');

              var at_range_sep;
              if (matchTokens(tokens, at+has_year[0], 'month', 'weekday', '[')) {
                  has_constrained_weekday[0] = getConstrainedWeekday(tokens, at+has_year[0]+3);
                  has_calc[0] = getMoveDays(tokens, has_constrained_weekday[0][1], 6, 'constrained weekdays');
                  at_range_sep = has_constrained_weekday[0][1] + (typeof has_calc[0] === 'object' && has_calc[0][1] ? 3 : 0);
              } else {
                  at_range_sep = at+has_year[0]
                      + (has_event[0]
                          ? (typeof has_calc[0] === 'object' && has_calc[0][1] ? 4 : 1)
                          : 2);
              }

              var at_sec_event_or_month;
              if ((has_month[0] || has_event[0] || has_constrained_weekday[0]) && matchTokens(tokens, at_range_sep, '-')) {
                  has_year[1] = matchTokens(tokens, at_range_sep+1, 'year');
                  at_sec_event_or_month = at_range_sep+1+has_year[1];
                  has_month[1] = matchTokens(tokens, at_sec_event_or_month, 'month', 'number');
                  if (!has_month[1]) {
                      has_event[1] = matchTokens(tokens, at_sec_event_or_month, 'event');
                      if (has_event[1]) {
                          has_calc[1] = getMoveDays(tokens, at_sec_event_or_month+1, 366, 'event like easter');
                      } else if (matchTokens(tokens, at_sec_event_or_month, 'month', 'weekday', '[')) {
                          has_constrained_weekday[1] = getConstrainedWeekday(tokens, at_sec_event_or_month+3);
                          has_calc[1] = getMoveDays(tokens, has_constrained_weekday[1][1], 6, 'constrained weekdays');
                      }
                  }
              }

              // monthday range like Jan 26-Feb 26 {{{
              if (has_year[0] === has_year[1] && (has_month[1] || has_event[1] || has_constrained_weekday[1])) {

                  if (has_month[0])
                      checkIfDateIsValid(tokens[at+has_year[0]][0], tokens[at+has_year[0]+1][0], nrule, at+has_year[0]+1);
                  if (has_month[1])
                      checkIfDateIsValid(tokens[at_sec_event_or_month][0], tokens[at_sec_event_or_month+1][0], nrule, at_sec_event_or_month+1);

                  var selector = function(tokens, at, nrule, has_year, has_event, has_calc, at_sec_event_or_month, has_constrained_weekday) { return function(date) {
                      var start_of_next_year = new Date(date.getFullYear() + 1, 0, 1);

                      var movableDays, from_date;
                      if (has_event[0]) {
                          movableDays = getMovableEventsForYear(has_year[0] ? parseInt(tokens[at][0]) : date.getFullYear());
                          from_date = movableDays[tokens[at+has_year[0]][0]];

                          if (typeof has_calc[0] === 'object' && has_calc[0][1]) {
                              var from_year_before_calc = from_date.getFullYear();
                              from_date.setDate(from_date.getDate() + has_calc[0][0]);
                              if (from_year_before_calc !== from_date.getFullYear())
                                  throw formatWarnErrorMessage(nrule, at+has_year[0]+has_calc[0][1]*3,
                                      t('movable not in year', {'name': tokens[at+has_year[0]][0], 'days': has_calc[0][0]}));
                          }
                      } else if (has_constrained_weekday[0]) {
                          from_date = getDateForConstrainedWeekday((has_year[0] ? tokens[at][0] : date.getFullYear()), // year
                              tokens[at+has_year[0]][0], // month
                              tokens[at+has_year[0]+1][0], // weekday
                              has_constrained_weekday[0],
                              has_calc[0]);
                      } else {
                          from_date = new Date((has_year[0] ? tokens[at][0] : date.getFullYear()),
                              tokens[at+has_year[0]][0], tokens[at+has_year[0]+1][0]);
                      }

                      var to_date;
                      if (has_event[1]) {
                          movableDays = getMovableEventsForYear(has_year[1]
                                      ? parseInt(tokens[at_sec_event_or_month-1][0])
                                      : date.getFullYear());
                          to_date = movableDays[tokens[at_sec_event_or_month][0]];

                          if (typeof has_calc[1] === 'object' && has_calc[1][1]) {
                              var to_year_before_calc = to_date.getFullYear();
                              to_date.setDate(to_date.getDate() + has_calc[1][0]);
                              if (to_year_before_calc !== to_date.getFullYear()) {
                                  throw formatWarnErrorMessage(nrule, at_sec_event_or_month+has_calc[1][1],
                                      t('movable not in year', {'name': tokens[at_sec_event_or_month][0], 'days':  has_calc[1][0] }));
                              }
                          }
                      } else if (has_constrained_weekday[1]) {
                          to_date = getDateForConstrainedWeekday((has_year[1] ? tokens[at_sec_event_or_month-1][0] : date.getFullYear()), // year
                              tokens[at_sec_event_or_month][0],   // month
                              tokens[at_sec_event_or_month+1][0], // weekday
                              has_constrained_weekday[1],
                              has_calc[1]);
                      } else {
                          to_date = new Date((has_year[1] ? tokens[at_sec_event_or_month-1][0] : date.getFullYear()),
                              tokens[at_sec_event_or_month][0], tokens[at_sec_event_or_month+1][0] + 1);
                      }

                      var inside = true;

                      if (to_date < from_date) {
                          var tmp = to_date;
                          to_date = from_date;
                          from_date = tmp;
                          inside = false;
                      }

                      if (date.getTime() < from_date.getTime()) {
                          return [!inside, from_date];
                      } else if (date.getTime() < to_date.getTime()) {
                          return [inside, to_date];
                      } else {
                          if (has_year[0]) {
                              return [!inside];
                          } else {
                              return [!inside, start_of_next_year];
                          }
                      }
                  }}(tokens, at, nrule, has_year, has_event, has_calc, at_sec_event_or_month, has_constrained_weekday);

                  if (push_to_month === true)
                      rule.month.push(selector);
                  else
                      rule.monthday.push(selector);

                  at = (has_constrained_weekday[1]
                          ? has_constrained_weekday[1][1]
                          : at_sec_event_or_month + (has_event[1] ? 1 : 2))
                      + (typeof has_calc[1] === 'object' ? has_calc[1][1] : 0);

                  /* }}} */
                  // Monthday range like Jan 26-31 {{{
              } else if (has_month[0]) {

                  has_year = has_year[0];
                  var year = tokens[at][0]; // Could be month if has no year. Tested later.
                  var month = tokens[at+has_year][0];

                  var first_round = true;

                  do {
                      var range_from = tokens[at+1 + has_year][0];
                      var is_range = matchTokens(tokens, at+2+has_year, '-', 'number');
                      var period = undefined;
                      var range_to = tokens[at+has_year+(is_range ? 3 : 1)][0] + 1;
                      if (is_range && matchTokens(tokens, at+has_year+4, '/', 'number')) {
                          period = tokens[at+has_year+5][0];
                          tokens[at+has_year+5][4] = 'positive_number';
                          checkPeriod(at+has_year+5, period, 'day');
                      }

                      if (first_round) {
                          var at_timesep_if_monthRange = at + has_year + 1 // at month number
                              + (is_range ? 2 : 0) + (period ? 2 : 0)
                              + !(is_range || period); // if not range nor has period, add one

                          // Check for '<month> <timespan>'
                          if (matchTokens(tokens, at_timesep_if_monthRange, 'timesep', 'number')
                                  && (matchTokens(tokens, at_timesep_if_monthRange+2, '+')
                                      || matchTokens(tokens, at_timesep_if_monthRange+2, '-')
                                      || oh_mode !== 0)
                              ) {
                                  return parseMonthRange(tokens, at, true, true);
                          }
                      }

                      // error checking {{{
                      if (range_to < range_from)
                          throw formatWarnErrorMessage(nrule, at+has_year+3, t('day range reverse'));

                      checkIfDateIsValid(month, range_from, nrule, at+1 + has_year);
                      checkIfDateIsValid(month, range_to - 1 /* added previously */,
                          nrule, at+has_year+(is_range ? 3 : 1));
                      /* }}} */

                      var selector = function(year, has_year, month, range_from, range_to, period) { return function(date) {
                          var start_of_next_year = new Date(date.getFullYear() + 1, 0, 1);

                          var from_date = new Date(has_year ? year : date.getFullYear(),
                              month, range_from);
                          if (month === 1 && range_from !== from_date.getDate()) // Only on leap years does this day exist.
                              return [false]; // If day 29 does not exist,
                                              // then the date object adds one day to date
                                              // and this selector should not match.
                          var to_date   = new Date(from_date.getFullYear(),
                              month, range_to);
                          if (month === 1 && is_range && range_to !== to_date.getDate()) // Only on leap years does this day exist.
                              return [false];

                          if (date.getTime() < from_date.getTime())
                              return [false, from_date];
                          else if (date.getTime() >= to_date.getTime())
                              return [false, start_of_next_year];
                          else if (!period)
                              return [true, to_date];

                          var nday = Math.floor((date.getTime() - from_date.getTime()) / msec_in_day);
                          var in_period = nday % period;

                          if (in_period === 0)
                              return [true, new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1)];
                          else
                              return [false, new Date(date.getFullYear(), date.getMonth(), date.getDate() + period - in_period)];

                      }}(year, has_year, month, range_from, range_to, period);

                      if (push_to_month === true)
                          rule.month.push(selector);
                      else
                          rule.monthday.push(selector);

                      at += 2 + has_year + (is_range ? 2 : 0) + (period ? 2 : 0);

                      first_round = false;
                  }
                  while (matchTokens(tokens, at, ',', 'number'))


                  /* }}} */
                  // Only event like easter {{{
              } else if (has_event[0]) {

                  var selector = function(tokens, at, nrule, has_year, add_days) { return function(date) {

                      // console.log('enter selector with date: ' + date);
                      var movableDays = getMovableEventsForYear((has_year ? tokens[at][0] : date.getFullYear()));
                      var event_date = movableDays[tokens[at+has_year][0]];
                      if (!event_date)
                          throw t('movable no formula', {'name': tokens[at+has_year][0]});

                      if (add_days[0]) {
                          event_date.setDate(event_date.getDate() + add_days[0]);
                          if (date.getFullYear() !== event_date.getFullYear())
                              throw formatWarnErrorMessage(nrule, at+has_year+add_days[1], t('movable not in year', {
                                  'name': tokens[at+has_year][0], 'days': add_days[0]}));
                      }

                      if (date.getTime() < event_date.getTime())
                          return [false, event_date];
                      // else if (date.getTime() < event_date.getTime() + msec_in_day) // does not work because of daylight saving times
                      else if (event_date.getMonth() * 100 + event_date.getDate() === date.getMonth() * 100 + date.getDate())
                          return [true, new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1)];
                      else
                          return [false, new Date(date.getFullYear() + 1, 0, 1)];

                  }}(tokens, at, nrule, has_year[0], has_calc[0]);

                  if (push_to_month === true)
                      rule.month.push(selector);
                  else
                      rule.monthday.push(selector);

                  at += has_year[0] + has_event[0] + (typeof has_calc[0][1] === 'number' && has_calc[0][1] ? 3 : 0);
                  /* }}} */
              } else if (has_constrained_weekday[0]) {
                  at = parseMonthRange(tokens, at);
              } else if (matchTokens(tokens, at, 'month')) {
                  return parseMonthRange(tokens, at, true, true);
              } else {
                  // throw 'Unexpected token in monthday range: "' + tokens[at] + '"';
                  return at;
              }

              if (!matchTokens(tokens, at, ','))
                  break;
          }

          return at;
      }
      /* }}} */

      /* Main selector traversal function (return state array for date). {{{
       * Checks for given date which rule and those which state and comment applies.
       *
       * :param date: Date object.
       * :returns: Array:
       *            0. resultstate: State: true for 'open', false for 'closed'.
       *            1. changedate: Next change as date object.
       *            2. unknown: true if state open is not sure.
       *            3. comment: Comment which applies for this time range (from date to changedate).
       *            4. match_rule: Rule number starting with 0 (nrule).
       */
      this.getStatePair = function(date) {
          var resultstate = false;
          var changedate;
          var unknown = false;
          var comment;
          var match_rule;

          var date_matching_rules = [];

          /* Go though all date selectors and check if they return something
           * else than closed for the given date.
           */
          for (var nrule = 0; nrule < rules.length; nrule++) {
              var matching_date_rule = true;
              // console.log(nrule, 'length',  rules[nrule].date.length);

              /* Try each date selector type. */
              for (var ndateselector = 0; ndateselector < rules[nrule].date.length; ndateselector++) {
                  var dateselectors = rules[nrule].date[ndateselector];
                  // console.log(nrule, ndateselector);

                  var has_matching_selector = false;
                  for (var datesel = 0; datesel < dateselectors.length; datesel++) {
                      var res = dateselectors[datesel](date);
                      if (res[0]) {
                          has_matching_selector = true;

                          if (typeof res[2] === 'string') { // holiday name
                              comment = [ res[2], nrule ];
                          }

                      }
                      if (typeof changedate === 'undefined' || (typeof res[1] === 'object' && res[1].getTime() < changedate.getTime()))
                          changedate = res[1];
                  }

                  if (!has_matching_selector) {
                      matching_date_rule = false;
                      // We can ignore other date selectors, as the state won't change
                      // anyway until THIS selector matches (due to conjunction of date
                      // selectors of different types).
                      // This is also an optimization, if widest date selector types
                      // are checked first.
                      break;
                  }
              }

              if (matching_date_rule) {
                  /* The following lines implement date overwriting logic (e.g. for
                   * "Mo-Fr 10:00-20:00; We 10:00-16:00", We rule overrides Mo-Fr rule partly (We).
                   *
                   * This is the only way to be consistent. I thought about ("22:00-02:00; Tu 12:00-14:00") letting Th override 22:00-02:00 partly:
                   * Like: Th 00:00-02:00,12:00-14:00 but this would result in including 22:00-00:00 for Th which is probably not what you want.
                   */
                  if ((rules[nrule].date.length > 0 || nrule > 0 && rules[nrule].meaning && rules[nrule-1].date.length === 0)
                          && (rules[nrule].meaning || rules[nrule].unknown)
                          && !rules[nrule].wrapped && !rules[nrule].additional && !rules[nrule].fallback
                      ) {

                      // var old_date_matching_rules = date_matching_rules;
                      date_matching_rules = [];
                      // for (var nrule = 0; nrule < old_date_matching_rules.length; nrule++) {
                      //     if (!rules[old_date_matching_rules[nrule]].wrapped)
                      //         date_matching_rules.push(nrule);
                      // }
                  }
                  date_matching_rules.push(nrule);
              }
          }

          // console.log(date_matching_rules);
          for (var nrule = 0; nrule < date_matching_rules.length; nrule++) {
              var rule = date_matching_rules[nrule];

              // console.log('Processing rule ' + rule + ': with date ' + date
                  // + ' and ' + rules[rule].time.length + ' time selectors (comment: "' + rules[rule].comment + '").');

              /* There is no time specified, state applies to the whole day. */
              if (rules[rule].time.length === 0) {
                  // console.log('there is no time', date);
                  if (!rules[rule].fallback || (rules[rule].fallback && !(resultstate || unknown))) {
                      resultstate = rules[rule].meaning;
                      unknown     = rules[rule].unknown;
                      match_rule  = rule;

                      // if (rules[rule].fallback)
                          // break rule; // fallback rule matched, no need for checking the rest
                      // WRONG: What if closing rules follow?
                  }
              }

              for (var timesel = 0; timesel < rules[rule].time.length; timesel++) {
                  var res = rules[rule].time[timesel](date);

                  // console.log('res:', res);
                  if (res[0]) {
                      if (!rules[rule].fallback || (rules[rule].fallback && !(resultstate || unknown))) {
                          resultstate = rules[rule].meaning;
                          unknown     = rules[rule].unknown;
                          match_rule  = rule;

                          /* Reset open end comment */
                          if (typeof comment === 'object' && comment[0] === t('open end'))
                              comment = undefined;

                          // open end
                          if (res[2] === true && (resultstate || unknown)) {
                              comment = [ t('open end'), match_rule ];

                              resultstate = false;
                              unknown     = true;

                              /* Hack to make second rule in '07:00+,12:00-16:00; 16:00-24:00 closed "needed because of open end"' obsolete {{{ */
                              if (typeof rules[rule].time[timesel+1] === 'function') {

                                  var next_res = rules[rule].time[timesel+1](date);
                                  if (  !next_res[0]
                                      // && next_res[2]
                                      && typeof next_res[1] === 'object'
                                      // && getValueForDate(next_res[1], true) !== getValueForDate(date, true) // Just to be sure.
                                      && rules[rule].time[timesel](new Date(date.getTime() - 1))[0]
                                      /* To distinguish the following two values:
                                       *     'sunrise-14:00,14:00+',
                                       *   '07:00+,12:00-16:00',
                                       */
                                      ) {

                                      // console.log("07:00+,12:00-16:00 matched.");

                                      resultstate = false;
                                      unknown     = false;
                                  }
                              }
                              /* }}} */
                          }

                          if (rules[rule].fallback) {
                              if (typeof changedate === 'undefined' || (typeof res[1] !== 'undefined' && res[1] < changedate)) {
                                  // FIXME: Changing undefined does not break the test framework.
                                  changedate = res[1];
                              }

                              // break rule; // Fallback rule matched, no need for checking the rest.
                              // WRONG: What if 'off' is used after fallback rule.
                          }
                      }
                  }
                  if (typeof changedate === 'undefined' || (typeof res[1] === 'object' && res[1] < changedate))
                      changedate = res[1];
              }
          }

          if (typeof rules[match_rule] === 'object' && typeof rules[match_rule].comment === 'string') {
              /* Only use comment if one is explicitly specified. */
              comment = rules[match_rule].comment;
          } else if (typeof comment === 'object') {
              if (comment[1] === match_rule) {
                  comment = comment[0];
              } else {
                  comment = undefined;
              }
          }

          // console.log('changedate', changedate, resultstate, comment, match_rule);
          return [ resultstate, changedate, unknown, comment, match_rule ];
      };
      /* }}} */

      /* Generate prettified value for selector based on tokens. {{{
       *
       * :param tokens: List of token objects.
       * :param at: Position where to start.
       * :param last_at: Position where to stop.
       * :param conf: Configuration options.
       * :returns: Prettified value.
       */
      function prettifySelector(tokens, selector_start, selector_end, selector_type, conf) {

          var prettified_value = '';
          var at = selector_start;
          // console.log(selector_type);
          while (at <= selector_end) {
              // console.log('At: ' + at + ', token: ' + tokens[at]);
              if (matchTokens(tokens, at, 'weekday')) {
                  if (!conf.leave_weekday_sep_one_day_betw
                      && at - selector_start > 1 && (matchTokens(tokens, at-1, ',') || matchTokens(tokens, at-1, '-'))
                      && matchTokens(tokens, at-2, 'weekday')
                      && tokens[at][0] === (tokens[at-2][0] + 1) % 7) {
                          prettified_value = prettified_value.substring(0, prettified_value.length - 1) + conf.sep_one_day_between;
                  }
                  prettified_value += weekdays[tokens[at][0]];
              } else if (at - selector_start > 0 // e.g. '09:0' -> '09:00'
                      && selector_type === 'time'
                      && matchTokens(tokens, at-1, 'timesep')
                      && matchTokens(tokens, at, 'number')) {
                  prettified_value += (tokens[at][0] < 10 ? '0' : '') + tokens[at][0].toString();
              } else if (selector_type === 'time' // e.g. '9:00' -> ' 09:00'
                      && conf.zero_pad_hour
                      && at !== tokens.length
                      && matchTokens(tokens, at, 'number')
                      && matchTokens(tokens, at+1, 'timesep')) {
                  prettified_value += (
                          tokens[at][0] < 10 ?
                              (tokens[at][0] === 0 && conf.one_zero_if_hour_zero ?
                               '' : '0') :
                              '') + tokens[at][0].toString();
              } else if (selector_type === 'time' // e.g. '9-18' -> '09:00-18:00'
                      && at + 2 <= selector_end
                      && matchTokens(tokens, at, 'number')
                      && matchTokens(tokens, at+1, '-')
                      && matchTokens(tokens, at+2, 'number')) {
                  prettified_value += (tokens[at][0] < 10 ?
                          (tokens[at][0] === 0 && conf.one_zero_if_hour_zero ? '' : '0')
                          : '') + tokens[at][0].toString();
                  prettified_value += ':00-'
                      + (tokens[at+2][0] < 10 ? '0' : '') + tokens[at+2][0].toString()
                      + ':00';
                  at += 2;
              } else if (matchTokens(tokens, at, 'comment')) {
                  prettified_value += '"' + tokens[at][0].toString() + '"';
              } else if (matchTokens(tokens, at, 'closed')) {
                  prettified_value += (conf.leave_off_closed ? tokens[at][0] : conf.keyword_for_off_closed);
              } else if (at - selector_start > 0 && matchTokens(tokens, at, 'number')
                      && (selector_type === 'month' || selector_type === 'week')) {
                  prettified_value +=
                      (matchTokens(tokens, at-1, 'month') || matchTokens(tokens, at-1, 'week') ? ' ' : '')
                      + (conf.zero_pad_month_and_week_numbers && tokens[at][4] !== 'positive_number' && tokens[at][0] < 10 ? '0' : '')
                      + tokens[at][0];
              } else if (at - selector_start > 0 && matchTokens(tokens, at, 'month')
                      && matchTokens(tokens, at-1, 'year')) {
                  prettified_value += ' ' + months[[tokens[at][0]]];
              } else if (at - selector_start > 0 && matchTokens(tokens, at, 'event')
                      && matchTokens(tokens, at-1, 'year')) {
                  prettified_value += ' ' + tokens[at][0];
              } else if (matchTokens(tokens, at, 'month')) {
                  prettified_value += months[[tokens[at][0]]];
                  if (at + 1 <= selector_end && matchTokens(tokens, at+1, 'weekday'))
                      prettified_value += ' ';
              } else if (at + 2 <= selector_end
                      && (matchTokens(tokens, at, '-') || matchTokens(tokens, at, '+'))
                      && matchTokens(tokens, at+1, 'number', 'calcday')) {
                  prettified_value += ' ' + tokens[at][0] + tokens[at+1][0] + ' day' + (Math.abs(tokens[at+1][0]) === 1 ? '' : 's');
                  at += 2;
              } else if (at === selector_end
                      && selector_type === 'weekday'
                      && tokens[at][0] === ':') ; else if (at === selector_end
                      && selector_type === 'time'
                      && tokens[at][0] === ',') ; else {
                  prettified_value += tokens[at][0].toString();
              }
              at++;
          }
          return prettified_value;
      }
      /* }}} */

      //======================================================================
      // Public interface {{{
      // All functions below are considered public.
      //======================================================================

      // Simple API {{{

      this.getState = function(date) {
          var it = this.getIterator(date);
          return it.getState();
      };

      this.getUnknown = function(date) {
          var it = this.getIterator(date);
          return it.getUnknown();
      };

      this.getStateString = function(date, past) {
          var it = this.getIterator(date);
          return it.getStateString(past);
      };

      this.getComment = function(date) {
          var it = this.getIterator(date);
          return it.getComment();
      };

      this.getMatchingRule = function(date) {
          var it = this.getIterator(date);
          return it.getMatchingRule();
      };

      /* Not available for iterator API {{{ */
      /* getWarnings: Get warnings, empty list if none {{{ */
      this.getWarnings = function() {
          var it = this.getIterator();
          return getWarnings(it);
      };
      /* }}} */

      /* prettifyValue: Get a nicely formated value {{{ */
      this.prettifyValue = function(argument_hash) {
          this.getWarnings();
          /* getWarnings has to be run before prettifyValue because some
           * decisions if certain aspects makes sense to prettify or not
           * are influenced by warnings.
           * Basically, both functions depend on each other in some way :(
           * See done_with_selector_reordering.
           */
          return prettifyValue(argument_hash);
      };
      /* }}} */

      /* getNextChange: Get time of next status change {{{ */
      this.getNextChange = function(date, maxdate) {
          var it = this.getIterator(date);
          if (!it.advance(maxdate))
              return undefined;
          return it.getDate();
      };
      /* }}} */

      /* isWeekStable: Checks whether open intervals are same for every week. {{{ */
      this.isWeekStable = function() {
          return week_stable;
      };
      /* }}} */

      /* isEqualTo: Check if this opening_hours object has the same meaning as the given opening_hours object. {{{ */
      this.isEqualTo = function(second_oh_object, start_date) {
          if (typeof start_date === 'undefined') {
              var start_date = new Date();
          }
          var datelimit;

          if (this.isWeekStable() && second_oh_object.isWeekStable()) {
              datelimit = new Date(start_date.getTime() + msec_in_day * 10);
          // } else if (this.isWeekStable() !== second_oh_object.isWeekStable()) {
          //     return [ false,
          //         {
          //             'reason': 'isWeekStable do not match',
          //         }
          //     ];
          } else {
              datelimit = new Date(start_date.getTime() + msec_in_day * 366 * 5);
          }

          var first_it = this.getIterator(start_date);
          var second_it = second_oh_object.getIterator(start_date);

          while (first_it.advance(datelimit)) {
              second_it.advance(datelimit);

              var not_equal = [];

              if (first_it.getDate().getTime() !== second_it.getDate().getTime()) {
                  not_equal.push('getDate');
              }

              if (first_it.getState() !== second_it.getState()) {
                  not_equal.push('getState');
              }

              if (first_it.getUnknown() !== second_it.getUnknown()) {
                  not_equal.push('getUnknown');
              }

              if (first_it.getComment() !== second_it.getComment()) {
                  not_equal.push('getComment');
              }

              if (not_equal.length) {
                  var deviation_for_time = {};
                  deviation_for_time[first_it.getDate().getTime()] = not_equal;
                  return [ false,
                      {
                          'matching_rule': first_it.getMatchingRule(),
                          'matching_rule_other': second_it.getMatchingRule(),
                          'deviation_for_time': deviation_for_time,
                      }
                  ];
              }
          }

          return [ true ];
      };
      /* }}} */
      /* }}} */
      /* }}} */

      // High-level API {{{
      /* getOpenIntervals: Get array of open intervals between two dates {{{ */
      this.getOpenIntervals = function(from, to) {
          var res = [];

          var it = this.getIterator(from);

          if (it.getState() || it.getUnknown()) {
              res.push([from, undefined, it.getUnknown(), it.getComment()]);
          }

          while (it.advance(to)) {
              if (it.getState() || it.getUnknown()) {
                  if (res.length !== 0 && typeof res[res.length - 1][1] === 'undefined') {
                      // last state was also open or unknown
                      res[res.length - 1][1] = it.getDate();
                  }
                  res.push([it.getDate(), undefined, it.getUnknown(), it.getComment()]);
              } else {
                  if (res.length !== 0 && typeof res[res.length - 1][1] === 'undefined') {
                      // only use the first time as closing/change time and ignore closing times which might follow
                      res[res.length - 1][1] = it.getDate();
                  }
              }
          }

          if (res.length > 0 && typeof res[res.length - 1][1] === 'undefined') {
              res[res.length - 1][1] = to;
          }

          return res;
      };
      /* }}} */

      /* getOpenDuration: Get total number of milliseconds a facility is open,unknown within a given date range {{{ */
      this.getOpenDuration = function(from, to) {

          var open    = 0;
          var unknown = 0;

          var it = this.getIterator(from);
          var prevdate    = (it.getState() || it.getUnknown()) ? from : undefined;
          var prevstate   = it.getState();
          var prevunknown = it.getUnknown();

          while (it.advance(to)) {
              if (it.getState() || it.getUnknown()) {

                  if (typeof prevdate === 'object') {
                      // last state was also open or unknown
                      if (prevunknown) //
                          unknown += it.getDate().getTime() - prevdate.getTime();
                      else if (prevstate)
                          open    += it.getDate().getTime() - prevdate.getTime();
                  }

                  prevdate    = it.getDate();
                  prevstate   = it.getState();
                  prevunknown = it.getUnknown();
                  // console.log('if', prevdate, open / (1000 * 60 * 60), unknown / (1000 * 60 * 60));
              } else {
                  // console.log('else', prevdate);
                  if (typeof prevdate === 'object') {
                      if (prevunknown)
                          unknown += it.getDate().getTime() - prevdate.getTime();
                      else
                          open    += it.getDate().getTime() - prevdate.getTime();
                      prevdate = undefined;
                  }
              }
          }

          if (typeof prevdate === 'object') {
              if (prevunknown)
                  unknown += to.getTime() - prevdate.getTime();
              else
                  open    += to.getTime() - prevdate.getTime();
          }

          return [ open, unknown ];
      };
      /* }}} */
      /* }}} */

      // Iterator API {{{
      this.getIterator = function(date) {
          return new function(oh) {
              if (typeof date === 'undefined')
                  date = new Date();

              var prevstate = [ undefined, date, undefined, undefined, undefined ];
              var state = oh.getStatePair(date);

              /* getDate {{{ */
              this.getDate = function() {
                  return prevstate[1];
              };
              /* }}} */

              /* setDate {{{ */
              this.setDate = function(date) {
                  if (typeof date !== 'object')
                      throw t('date parameter needed');

                  prevstate = [ undefined, date, undefined, undefined, undefined ];
                  state     = oh.getStatePair(date);
              };
              /* }}} */

              /* getState: Check whether facility is `open' {{{ */
              this.getState = function() {
                  return state[0];
              };
              /* }}} */

              /* getUnknown: Checks whether the opening state is conditional or unknown {{{ */
              this.getUnknown = function() {
                  return state[2];
              };
              /* }}} */

              /* getStateString: Get state string. Either 'open', 'unknown' or 'closed' {{{ */
              this.getStateString = function(past) {
                  return (state[0] ? 'open' : (state[2] ? 'unknown' : (past ? 'closed' : 'close')));
              };
              /* }}} */

              /* getComment: Get the comment, undefined in none {{{ */
              this.getComment = function() {
                  return state[3];
              };
              /* }}} */

              /* getMatchingRule: Get the rule which matched thus deterrents the current state {{{ */
              this.getMatchingRule = function() {
                  if (typeof state[4] === 'undefined')
                      return undefined;

                  return rules[state[4]].build_from_token_rule[2];
              };
              /* }}} */

              /* advance: Advances to the next position {{{ */
              this.advance = function(datelimit) {
                  if (typeof datelimit === 'undefined') {
                      datelimit = new Date(prevstate[1].getTime() + msec_in_day * 366 * 5);
                  } else if (datelimit.getTime() <= prevstate[1].getTime()) {
                      return false; /* The limit for advance needs to be after the current time. */
                  }

                  do {
                      if (typeof state[1] === 'undefined') {
                          return false; /* open range, we won't be able to advance */
                      }

                      // console.log('\n' + 'previous check time:', prevstate[1]
                      //     + ', current check time:',
                      //     state[1],
                      //     (state[0] ? 'open' : (state[2] ? 'unknown' : 'closed'))
                      //     + ', comment:', state[3]
                      //     + ', match_rule:', state[4]);

                      if (state[1].getTime() <= prevstate[1].getTime()) {
                          /* We're going backwards or staying at the same time.
                           * This most likely indicates an error in a selector code.
                           */
                          throw 'Fatal: infinite loop in nextChange';
                      }

                      if (state[1].getTime() >= datelimit.getTime()) {
                          /* Don't advance beyond limits. */
                          return false;
                      }

                      // do advance
                      prevstate = state;
                      state = oh.getStatePair(prevstate[1]);
                      // console.log(state);
                  } while (state[0] === prevstate[0] && state[2] === prevstate[2] && state[3] === prevstate[3]);
                  return true;
              };
              /* }}} */
          }(this);
      };
      /* }}} */

      /* }}} */
  }

  /* vim: set ts=4 sw=4 tw=0 et foldmarker={{{,}}} foldlevel=0 foldmethod=marker : */

  return index;

}));


/***/ }),

/***/ "./node_modules/suncalc/suncalc.js":
/*!*****************************************!*\
  !*** ./node_modules/suncalc/suncalc.js ***!
  \*****************************************/
/***/ ((module) => {

/*
 (c) 2011-2015, Vladimir Agafonkin
 SunCalc is a JavaScript library for calculating sun/moon position and light phases.
 https://github.com/mourner/suncalc
*/

(function () { 'use strict';

// shortcuts for easier to read formulas

var PI   = Math.PI,
    sin  = Math.sin,
    cos  = Math.cos,
    tan  = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad  = PI / 180;

// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas


// date/time constants and conversions

var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;

function toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }
function fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }
function toDays(date)   { return toJulian(date) - J2000; }


// general calculations for position

var e = rad * 23.4397; // obliquity of the Earth

function rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }
function declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }

function azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }
function altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }

function siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }

function astroRefraction(h) {
    if (h < 0) // the following formula works for positive altitudes only.
        h = 0; // if h = -0.08901179 a div/0 would occur.

    // formula 16.4 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.
    // 1.02 / tan(h + 10.26 / (h + 5.10)) h in degrees, result in arc minutes -> converted to rad:
    return 0.0002967 / Math.tan(h + 0.00312536 / (h + 0.08901179));
}

// general sun calculations

function solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }

function eclipticLongitude(M) {

    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center
        P = rad * 102.9372; // perihelion of the Earth

    return M + C + P + PI;
}

function sunCoords(d) {

    var M = solarMeanAnomaly(d),
        L = eclipticLongitude(M);

    return {
        dec: declination(L, 0),
        ra: rightAscension(L, 0)
    };
}


var SunCalc = {};


// calculates sun position for a given date and latitude/longitude

SunCalc.getPosition = function (date, lat, lng) {

    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),

        c  = sunCoords(d),
        H  = siderealTime(d, lw) - c.ra;

    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: altitude(H, phi, c.dec)
    };
};


// sun times configuration (angle, morning name, evening name)

var times = SunCalc.times = [
    [-0.833, 'sunrise',       'sunset'      ],
    [  -0.3, 'sunriseEnd',    'sunsetStart' ],
    [    -6, 'dawn',          'dusk'        ],
    [   -12, 'nauticalDawn',  'nauticalDusk'],
    [   -18, 'nightEnd',      'night'       ],
    [     6, 'goldenHourEnd', 'goldenHour'  ]
];

// adds a custom time to the times config

SunCalc.addTime = function (angle, riseName, setName) {
    times.push([angle, riseName, setName]);
};


// calculations for sun times

var J0 = 0.0009;

function julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }

function approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }
function solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }

function hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }
function observerAngle(height) { return -2.076 * Math.sqrt(height) / 60; }

// returns set time for the given sun altitude
function getSetJ(h, lw, phi, dec, n, M, L) {

    var w = hourAngle(h, phi, dec),
        a = approxTransit(w, lw, n);
    return solarTransitJ(a, M, L);
}


// calculates sun times for a given date, latitude/longitude, and, optionally,
// the observer height (in meters) relative to the horizon

SunCalc.getTimes = function (date, lat, lng, height) {

    height = height || 0;

    var lw = rad * -lng,
        phi = rad * lat,

        dh = observerAngle(height),

        d = toDays(date),
        n = julianCycle(d, lw),
        ds = approxTransit(0, lw, n),

        M = solarMeanAnomaly(ds),
        L = eclipticLongitude(M),
        dec = declination(L, 0),

        Jnoon = solarTransitJ(ds, M, L),

        i, len, time, h0, Jset, Jrise;


    var result = {
        solarNoon: fromJulian(Jnoon),
        nadir: fromJulian(Jnoon - 0.5)
    };

    for (i = 0, len = times.length; i < len; i += 1) {
        time = times[i];
        h0 = (time[0] + dh) * rad;

        Jset = getSetJ(h0, lw, phi, dec, n, M, L);
        Jrise = Jnoon - (Jset - Jnoon);

        result[time[1]] = fromJulian(Jrise);
        result[time[2]] = fromJulian(Jset);
    }

    return result;
};


// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas

function moonCoords(d) { // geocentric ecliptic coordinates of the moon

    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
        M = rad * (134.963 + 13.064993 * d), // mean anomaly
        F = rad * (93.272 + 13.229350 * d),  // mean distance

        l  = L + rad * 6.289 * sin(M), // longitude
        b  = rad * 5.128 * sin(F),     // latitude
        dt = 385001 - 20905 * cos(M);  // distance to the moon in km

    return {
        ra: rightAscension(l, b),
        dec: declination(l, b),
        dist: dt
    };
}

SunCalc.getMoonPosition = function (date, lat, lng) {

    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),

        c = moonCoords(d),
        H = siderealTime(d, lw) - c.ra,
        h = altitude(H, phi, c.dec),
        // formula 14.1 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.
        pa = atan(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));

    h = h + astroRefraction(h); // altitude correction for refraction

    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: h,
        distance: c.dist,
        parallacticAngle: pa
    };
};


// calculations for illumination parameters of the moon,
// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.

SunCalc.getMoonIllumination = function (date) {

    var d = toDays(date || new Date()),
        s = sunCoords(d),
        m = moonCoords(d),

        sdist = 149598000, // distance from Earth to Sun in km

        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),
        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -
                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));

    return {
        fraction: (1 + cos(inc)) / 2,
        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,
        angle: angle
    };
};


function hoursLater(date, h) {
    return new Date(date.valueOf() + h * dayMs / 24);
}

// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article

SunCalc.getMoonTimes = function (date, lat, lng, inUTC) {
    var t = new Date(date);
    if (inUTC) t.setUTCHours(0, 0, 0, 0);
    else t.setHours(0, 0, 0, 0);

    var hc = 0.133 * rad,
        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,
        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;

    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)
    for (var i = 1; i <= 24; i += 2) {
        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;
        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;

        a = (h0 + h2) / 2 - h1;
        b = (h2 - h0) / 2;
        xe = -b / (2 * a);
        ye = (a * xe + b) * xe + h1;
        d = b * b - 4 * a * h1;
        roots = 0;

        if (d >= 0) {
            dx = Math.sqrt(d) / (Math.abs(a) * 2);
            x1 = xe - dx;
            x2 = xe + dx;
            if (Math.abs(x1) <= 1) roots++;
            if (Math.abs(x2) <= 1) roots++;
            if (x1 < -1) x1 = x2;
        }

        if (roots === 1) {
            if (h0 < 0) rise = i + x1;
            else set = i + x1;

        } else if (roots === 2) {
            rise = i + (ye < 0 ? x2 : x1);
            set = i + (ye < 0 ? x1 : x2);
        }

        if (rise && set) break;

        h0 = h2;
    }

    var result = {};

    if (rise) result.rise = hoursLater(t, rise);
    if (set) result.set = hoursLater(t, set);

    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;

    return result;
};


// export as Node module / AMD module / browser variable
if (true) module.exports = SunCalc;
else // removed by dead control flow
{}

}());


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfb3BlbmluZ19ob3Vyc19idWlsZF9vcGVuaW5nX2hvdXJzX2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCLEdBQUcsRUFBRTtBQUNoQztBQUNBO0FBQ0Esd0NBQXdDLE9BQU8sR0FBRyxFQUFFO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTyxHQUFHLEVBQUU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELEVBQUU7QUFDckQ7QUFDQSxhQUFhO0FBQ2IsWUFBWTtBQUNaLFlBQVk7QUFDWixjQUFjO0FBQ2QsYUFBYTtBQUNiLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixnRkFBZ0YsRUFBRTtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsSUFBSSxFQUFFLE9BQU87QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0xBQXdMLHFCQUFxQixFQUFFLDRCQUE0QixxQkFBcUIsT0FBTyxFQUFFLGVBQWU7QUFDeFI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQkFBcUIsRUFBRSw0QkFBNEIscUJBQXFCLE9BQU8sRUFBRSxtQkFBbUI7QUFDcEg7QUFDQSxrREFBa0QsS0FBSztBQUN2RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRTtBQUNyRSxxRUFBcUU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELFlBQVksT0FBTyxZQUFZO0FBQ2xGLG1FQUFtRSxZQUFZLEVBQUUsb0JBQW9CLE9BQU8sb0JBQW9CLEVBQUUsWUFBWTtBQUM5SSxpRUFBaUUsbUJBQW1CLE9BQU8sbUJBQW1CO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFlBQVk7QUFDWiwyREFBMkQsWUFBWSxvQkFBb0IsSUFBSTtBQUMvRjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLElBQUksS0FBSztBQUNqRCw0QkFBNEIsRUFBRSxLQUFLO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLDZFQUE2RSxJQUFJO0FBQ2pGLGtCQUFrQixJQUFJLEVBQUUsSUFBSSxFQUFFLGNBQWM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsR0FBRztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsVUFBVSxjQUFjLElBQUk7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTixrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLDZEQUE2RCxXQUFXO0FBQ3hFO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixJQUFJLEdBQUcsR0FBRztBQUNsQztBQUNBO0FBQ0EsVUFBVSxpQ0FBaUM7QUFDM0M7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLE9BQU8sb0JBQW9CLElBQUksZUFBZSxLQUFLO0FBQ3RGLDJDQUEyQyxPQUFPLG1CQUFtQixJQUFJLGVBQWUsSUFBSTtBQUM1RjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLElBQUksc0JBQXNCLFVBQVU7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRkFBK0YsYUFBYTtBQUM1RztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtR0FBbUcsZUFBZTtBQUNsSDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNEJBQTRCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRyxlQUFlO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxFQUFFO0FBQ3pFLFFBQVE7QUFDUiwyQ0FBMkMsa0JBQWtCLEVBQUUsYUFBYSxFQUFFLElBQUk7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxlQUFlO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsZUFBZTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxFQUFFLEdBQUcsRUFBRTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJO0FBQ2IsT0FBTyxJQUFJO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlHQUFpRyxlQUFlO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7QUN0cUVBO0FBQ0EsRUFBRSxLQUE0RCw0QkFBNEIsbUJBQU8sQ0FBQyxrREFBUyxHQUFHLG1CQUFPLENBQUMsMkRBQVM7QUFDL0gsRUFBRSxDQUMwSTtBQUM1SSxDQUFDLHVDQUF1Qzs7QUFFeEMsaUJBQWlCLE9BQU87QUFDeEI7QUFDQSxlQUFlO0FBQ2YsUUFBUTtBQUNSO0FBQ0Esb0JBQW9CO0FBQ3BCLFFBQVE7QUFDUjtBQUNBLG9CQUFvQjtBQUNwQixRQUFRO0FBQ1I7QUFDQSxnQkFBZ0I7QUFDaEIsUUFBUTtBQUNSO0FBQ0EsbUJBQW1CO0FBQ25CLFFBQVE7QUFDUjtBQUNBLGVBQWU7QUFDZixRQUFRO0FBQ1I7QUFDQSxlQUFlO0FBQ2YsUUFBUTtBQUNSO0FBQ0EsZUFBZTtBQUNmLFFBQVE7QUFDUjtBQUNBLGdCQUFnQjtBQUNoQixRQUFRO0FBQ1I7QUFDQSxnQkFBZ0I7QUFDaEIsUUFBUTtBQUNSO0FBQ0EsZ0JBQWdCO0FBQ2hCLFFBQVE7QUFDUjtBQUNBLGdCQUFnQjtBQUNoQixRQUFRO0FBQ1I7QUFDQSxlQUFlO0FBQ2YsUUFBUTtBQUNSO0FBQ0EsZ0JBQWdCO0FBQ2hCLFFBQVE7QUFDUjtBQUNBLGdCQUFnQjtBQUNoQixRQUFRO0FBQ1I7QUFDQSxnQkFBZ0I7QUFDaEIsUUFBUTtBQUNSO0FBQ0EsZ0JBQWdCO0FBQ2hCLFFBQVE7QUFDUjtBQUNBLGVBQWU7QUFDZixRQUFRO0FBQ1I7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUEsaUJBQWlCLE9BQU87QUFDeEI7QUFDQSxlQUFlO0FBQ2YsUUFBUTtBQUNSO0FBQ0EsZUFBZTtBQUNmLFFBQVE7QUFDUjtBQUNBLGtCQUFrQjtBQUNsQixRQUFRO0FBQ1I7QUFDQSxlQUFlO0FBQ2YsUUFBUTtBQUNSO0FBQ0EsbUJBQW1CO0FBQ25CLFFBQVE7QUFDUjtBQUNBLG1CQUFtQjtBQUNuQixRQUFRO0FBQ1I7QUFDQSxtQkFBbUI7QUFDbkIsUUFBUTtBQUNSO0FBQ0EsZ0JBQWdCO0FBQ2hCLFFBQVE7QUFDUjtBQUNBLGdCQUFnQjtBQUNoQixRQUFRO0FBQ1I7QUFDQSxlQUFlO0FBQ2YsUUFBUTtBQUNSO0FBQ0EsZUFBZTtBQUNmLFFBQVE7QUFDUjtBQUNBLGdCQUFnQjtBQUNoQixRQUFRO0FBQ1I7QUFDQSxpQkFBaUI7QUFDakIsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQyxnQkFBZ0I7QUFDaEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQyx5QkFBeUI7QUFDekIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQyx1QkFBdUI7QUFDdkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQyxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQyxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQyxZQUFZO0FBQ1osYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLEdBQUc7QUFDdkMsYUFBYTtBQUNiLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsR0FBRztBQUN2QyxhQUFhO0FBQ2IsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxHQUFHO0FBQ3ZDLGtCQUFrQjtBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxHQUFHO0FBQ3ZDLGFBQWE7QUFDYixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsR0FBRztBQUN2QyxjQUFjO0FBQ2QsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxHQUFHO0FBQ3ZDLGFBQWE7QUFDYixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxHQUFHO0FBQ3ZDLCtCQUErQjtBQUMvQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLEdBQUc7QUFDdkMsb0JBQW9CO0FBQ3BCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxHQUFHO0FBQ3ZDLDRCQUE0QjtBQUM1QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLEdBQUc7QUFDdkMsd0JBQXdCO0FBQ3hCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLEdBQUc7QUFDdkMsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsR0FBRztBQUN2QyxjQUFjO0FBQ2QsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxHQUFHO0FBQ3ZDLHVCQUF1QjtBQUN2QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxHQUFHO0FBQ3ZDLDJCQUEyQjtBQUMzQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLEdBQUc7QUFDbkMsa0JBQWtCO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLEdBQUc7QUFDdkMsZ0NBQWdDO0FBQ2hDLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLEdBQUc7QUFDdkMsMkJBQTJCO0FBQzNCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLEdBQUc7QUFDdkMsa0JBQWtCO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLEdBQUc7QUFDdkMsd0JBQXdCO0FBQ3hCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsR0FBRztBQUN2QyxtQkFBbUI7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLEdBQUc7QUFDM0MsMkJBQTJCO0FBQzNCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGtCQUFrQjtBQUNsQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCLEdBQUc7QUFDckIscUJBQXFCO0FBQ3JCLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0EsbUJBQW1CLEdBQUc7QUFDdEIsZ0JBQWdCO0FBQ2hCLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0EsbUJBQW1CLEdBQUc7QUFDdEIsaUNBQWlDO0FBQ2pDLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGtCQUFrQjtBQUNsQixVQUFVO0FBQ1Y7QUFDQSxtQkFBbUIsR0FBRztBQUN0QixpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGtCQUFrQjtBQUNsQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0EsbUJBQW1CLEdBQUc7QUFDdEIsMkJBQTJCO0FBQzNCLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FB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akIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtBQUNBLGtCQUFrQjtBQUNsQixVQUFVO0FBQ1Y7QUFDQSxrQkFBa0I7QUFDbEIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGtCQUFrQixHQUFHO0FBQ3JCLHlCQUF5QjtBQUN6QixhQUFhO0FBQ2I7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGtCQUFrQjtBQUNsQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVjtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQSxpQkFBaUI7QUFDakIsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVjtB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qiw2Q0FBNkMsYUFBYTtBQUMx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O0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQyxTQUFTO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUEseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVDQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDQUFnQzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQSxJQUFJLElBQTREO0FBQ2hFLEtBQUs7QUFBQSxFQUN5Qjs7QUFFOUIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hcHNidW5kbGUvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2Nqcy9pMThuZXh0LmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9ub2RlX21vZHVsZXMvb3BlbmluZ19ob3Vycy9idWlsZC9vcGVuaW5nX2hvdXJzLmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9ub2RlX21vZHVsZXMvc3VuY2FsYy9zdW5jYWxjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNTdHJpbmcgPSBvYmogPT4gdHlwZW9mIG9iaiA9PT0gJ3N0cmluZyc7XG5jb25zdCBkZWZlciA9ICgpID0+IHtcbiAgbGV0IHJlcztcbiAgbGV0IHJlajtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZXMgPSByZXNvbHZlO1xuICAgIHJlaiA9IHJlamVjdDtcbiAgfSk7XG4gIHByb21pc2UucmVzb2x2ZSA9IHJlcztcbiAgcHJvbWlzZS5yZWplY3QgPSByZWo7XG4gIHJldHVybiBwcm9taXNlO1xufTtcbmNvbnN0IG1ha2VTdHJpbmcgPSBvYmplY3QgPT4ge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAnJztcbiAgcmV0dXJuICcnICsgb2JqZWN0O1xufTtcbmNvbnN0IGNvcHkgPSAoYSwgcywgdCkgPT4ge1xuICBhLmZvckVhY2gobSA9PiB7XG4gICAgaWYgKHNbbV0pIHRbbV0gPSBzW21dO1xuICB9KTtcbn07XG5jb25zdCBsYXN0T2ZQYXRoU2VwYXJhdG9yUmVnRXhwID0gLyMjIy9nO1xuY29uc3QgY2xlYW5LZXkgPSBrZXkgPT4ga2V5ICYmIGtleS5pbmRleE9mKCcjIyMnKSA+IC0xID8ga2V5LnJlcGxhY2UobGFzdE9mUGF0aFNlcGFyYXRvclJlZ0V4cCwgJy4nKSA6IGtleTtcbmNvbnN0IGNhbk5vdFRyYXZlcnNlRGVlcGVyID0gb2JqZWN0ID0+ICFvYmplY3QgfHwgaXNTdHJpbmcob2JqZWN0KTtcbmNvbnN0IGdldExhc3RPZlBhdGggPSAob2JqZWN0LCBwYXRoLCBFbXB0eSkgPT4ge1xuICBjb25zdCBzdGFjayA9ICFpc1N0cmluZyhwYXRoKSA/IHBhdGggOiBwYXRoLnNwbGl0KCcuJyk7XG4gIGxldCBzdGFja0luZGV4ID0gMDtcbiAgd2hpbGUgKHN0YWNrSW5kZXggPCBzdGFjay5sZW5ndGggLSAxKSB7XG4gICAgaWYgKGNhbk5vdFRyYXZlcnNlRGVlcGVyKG9iamVjdCkpIHJldHVybiB7fTtcbiAgICBjb25zdCBrZXkgPSBjbGVhbktleShzdGFja1tzdGFja0luZGV4XSk7XG4gICAgaWYgKCFvYmplY3Rba2V5XSAmJiBFbXB0eSkgb2JqZWN0W2tleV0gPSBuZXcgRW1wdHkoKTtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdCA9IHt9O1xuICAgIH1cbiAgICArK3N0YWNrSW5kZXg7XG4gIH1cbiAgaWYgKGNhbk5vdFRyYXZlcnNlRGVlcGVyKG9iamVjdCkpIHJldHVybiB7fTtcbiAgcmV0dXJuIHtcbiAgICBvYmo6IG9iamVjdCxcbiAgICBrOiBjbGVhbktleShzdGFja1tzdGFja0luZGV4XSlcbiAgfTtcbn07XG5jb25zdCBzZXRQYXRoID0gKG9iamVjdCwgcGF0aCwgbmV3VmFsdWUpID0+IHtcbiAgY29uc3Qge1xuICAgIG9iaixcbiAgICBrXG4gIH0gPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCwgT2JqZWN0KTtcbiAgaWYgKG9iaiAhPT0gdW5kZWZpbmVkIHx8IHBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgb2JqW2tdID0gbmV3VmFsdWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBlID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICBsZXQgcCA9IHBhdGguc2xpY2UoMCwgcGF0aC5sZW5ndGggLSAxKTtcbiAgbGV0IGxhc3QgPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcCwgT2JqZWN0KTtcbiAgd2hpbGUgKGxhc3Qub2JqID09PSB1bmRlZmluZWQgJiYgcC5sZW5ndGgpIHtcbiAgICBlID0gYCR7cFtwLmxlbmd0aCAtIDFdfS4ke2V9YDtcbiAgICBwID0gcC5zbGljZSgwLCBwLmxlbmd0aCAtIDEpO1xuICAgIGxhc3QgPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcCwgT2JqZWN0KTtcbiAgICBpZiAobGFzdD8ub2JqICYmIHR5cGVvZiBsYXN0Lm9ialtgJHtsYXN0Lmt9LiR7ZX1gXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGxhc3Qub2JqID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBsYXN0Lm9ialtgJHtsYXN0Lmt9LiR7ZX1gXSA9IG5ld1ZhbHVlO1xufTtcbmNvbnN0IHB1c2hQYXRoID0gKG9iamVjdCwgcGF0aCwgbmV3VmFsdWUsIGNvbmNhdCkgPT4ge1xuICBjb25zdCB7XG4gICAgb2JqLFxuICAgIGtcbiAgfSA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpO1xuICBvYmpba10gPSBvYmpba10gfHwgW107XG4gIG9ialtrXS5wdXNoKG5ld1ZhbHVlKTtcbn07XG5jb25zdCBnZXRQYXRoID0gKG9iamVjdCwgcGF0aCkgPT4ge1xuICBjb25zdCB7XG4gICAgb2JqLFxuICAgIGtcbiAgfSA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoKTtcbiAgaWYgKCFvYmopIHJldHVybiB1bmRlZmluZWQ7XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaykpIHJldHVybiB1bmRlZmluZWQ7XG4gIHJldHVybiBvYmpba107XG59O1xuY29uc3QgZ2V0UGF0aFdpdGhEZWZhdWx0cyA9IChkYXRhLCBkZWZhdWx0RGF0YSwga2V5KSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gZ2V0UGF0aChkYXRhLCBrZXkpO1xuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gZ2V0UGF0aChkZWZhdWx0RGF0YSwga2V5KTtcbn07XG5jb25zdCBkZWVwRXh0ZW5kID0gKHRhcmdldCwgc291cmNlLCBvdmVyd3JpdGUpID0+IHtcbiAgZm9yIChjb25zdCBwcm9wIGluIHNvdXJjZSkge1xuICAgIGlmIChwcm9wICE9PSAnX19wcm90b19fJyAmJiBwcm9wICE9PSAnY29uc3RydWN0b3InKSB7XG4gICAgICBpZiAocHJvcCBpbiB0YXJnZXQpIHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHRhcmdldFtwcm9wXSkgfHwgdGFyZ2V0W3Byb3BdIGluc3RhbmNlb2YgU3RyaW5nIHx8IGlzU3RyaW5nKHNvdXJjZVtwcm9wXSkgfHwgc291cmNlW3Byb3BdIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgICAgICAgaWYgKG92ZXJ3cml0ZSkgdGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlZXBFeHRlbmQodGFyZ2V0W3Byb3BdLCBzb3VyY2VbcHJvcF0sIG92ZXJ3cml0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5jb25zdCByZWdleEVzY2FwZSA9IHN0ciA9PiBzdHIucmVwbGFjZSgvW1xcLVxcW1xcXVxcL1xce1xcfVxcKFxcKVxcKlxcK1xcP1xcLlxcXFxcXF5cXCRcXHxdL2csICdcXFxcJCYnKTtcbnZhciBfZW50aXR5TWFwID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiMzOTsnLFxuICAnLyc6ICcmI3gyRjsnXG59O1xuY29uc3QgZXNjYXBlID0gZGF0YSA9PiB7XG4gIGlmIChpc1N0cmluZyhkYXRhKSkge1xuICAgIHJldHVybiBkYXRhLnJlcGxhY2UoL1smPD5cIidcXC9dL2csIHMgPT4gX2VudGl0eU1hcFtzXSk7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59O1xuY2xhc3MgUmVnRXhwQ2FjaGUge1xuICBjb25zdHJ1Y3RvcihjYXBhY2l0eSkge1xuICAgIHRoaXMuY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICB0aGlzLnJlZ0V4cE1hcCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnJlZ0V4cFF1ZXVlID0gW107XG4gIH1cbiAgZ2V0UmVnRXhwKHBhdHRlcm4pIHtcbiAgICBjb25zdCByZWdFeHBGcm9tQ2FjaGUgPSB0aGlzLnJlZ0V4cE1hcC5nZXQocGF0dGVybik7XG4gICAgaWYgKHJlZ0V4cEZyb21DYWNoZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVnRXhwRnJvbUNhY2hlO1xuICAgIH1cbiAgICBjb25zdCByZWdFeHBOZXcgPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xuICAgIGlmICh0aGlzLnJlZ0V4cFF1ZXVlLmxlbmd0aCA9PT0gdGhpcy5jYXBhY2l0eSkge1xuICAgICAgdGhpcy5yZWdFeHBNYXAuZGVsZXRlKHRoaXMucmVnRXhwUXVldWUuc2hpZnQoKSk7XG4gICAgfVxuICAgIHRoaXMucmVnRXhwTWFwLnNldChwYXR0ZXJuLCByZWdFeHBOZXcpO1xuICAgIHRoaXMucmVnRXhwUXVldWUucHVzaChwYXR0ZXJuKTtcbiAgICByZXR1cm4gcmVnRXhwTmV3O1xuICB9XG59XG5jb25zdCBjaGFycyA9IFsnICcsICcsJywgJz8nLCAnIScsICc7J107XG5jb25zdCBsb29rc0xpa2VPYmplY3RQYXRoUmVnRXhwQ2FjaGUgPSBuZXcgUmVnRXhwQ2FjaGUoMjApO1xuY29uc3QgbG9va3NMaWtlT2JqZWN0UGF0aCA9IChrZXksIG5zU2VwYXJhdG9yLCBrZXlTZXBhcmF0b3IpID0+IHtcbiAgbnNTZXBhcmF0b3IgPSBuc1NlcGFyYXRvciB8fCAnJztcbiAga2V5U2VwYXJhdG9yID0ga2V5U2VwYXJhdG9yIHx8ICcnO1xuICBjb25zdCBwb3NzaWJsZUNoYXJzID0gY2hhcnMuZmlsdGVyKGMgPT4gbnNTZXBhcmF0b3IuaW5kZXhPZihjKSA8IDAgJiYga2V5U2VwYXJhdG9yLmluZGV4T2YoYykgPCAwKTtcbiAgaWYgKHBvc3NpYmxlQ2hhcnMubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgY29uc3QgciA9IGxvb2tzTGlrZU9iamVjdFBhdGhSZWdFeHBDYWNoZS5nZXRSZWdFeHAoYCgke3Bvc3NpYmxlQ2hhcnMubWFwKGMgPT4gYyA9PT0gJz8nID8gJ1xcXFw/JyA6IGMpLmpvaW4oJ3wnKX0pYCk7XG4gIGxldCBtYXRjaGVkID0gIXIudGVzdChrZXkpO1xuICBpZiAoIW1hdGNoZWQpIHtcbiAgICBjb25zdCBraSA9IGtleS5pbmRleE9mKGtleVNlcGFyYXRvcik7XG4gICAgaWYgKGtpID4gMCAmJiAhci50ZXN0KGtleS5zdWJzdHJpbmcoMCwga2kpKSkge1xuICAgICAgbWF0Y2hlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXRjaGVkO1xufTtcbmNvbnN0IGRlZXBGaW5kID0gZnVuY3Rpb24gKG9iaiwgcGF0aCkge1xuICBsZXQga2V5U2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnLic7XG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAob2JqW3BhdGhdKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwYXRoKSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICByZXR1cm4gb2JqW3BhdGhdO1xuICB9XG4gIGNvbnN0IHRva2VucyA9IHBhdGguc3BsaXQoa2V5U2VwYXJhdG9yKTtcbiAgbGV0IGN1cnJlbnQgPSBvYmo7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDspIHtcbiAgICBpZiAoIWN1cnJlbnQgfHwgdHlwZW9mIGN1cnJlbnQgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBsZXQgbmV4dDtcbiAgICBsZXQgbmV4dFBhdGggPSAnJztcbiAgICBmb3IgKGxldCBqID0gaTsgaiA8IHRva2Vucy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGogIT09IGkpIHtcbiAgICAgICAgbmV4dFBhdGggKz0ga2V5U2VwYXJhdG9yO1xuICAgICAgfVxuICAgICAgbmV4dFBhdGggKz0gdG9rZW5zW2pdO1xuICAgICAgbmV4dCA9IGN1cnJlbnRbbmV4dFBhdGhdO1xuICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXS5pbmRleE9mKHR5cGVvZiBuZXh0KSA+IC0xICYmIGogPCB0b2tlbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGkgKz0gaiAtIGkgKyAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgY3VycmVudCA9IG5leHQ7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnQ7XG59O1xuY29uc3QgZ2V0Q2xlYW5lZENvZGUgPSBjb2RlID0+IGNvZGU/LnJlcGxhY2UoJ18nLCAnLScpO1xuXG5jb25zdCBjb25zb2xlTG9nZ2VyID0ge1xuICB0eXBlOiAnbG9nZ2VyJyxcbiAgbG9nKGFyZ3MpIHtcbiAgICB0aGlzLm91dHB1dCgnbG9nJywgYXJncyk7XG4gIH0sXG4gIHdhcm4oYXJncykge1xuICAgIHRoaXMub3V0cHV0KCd3YXJuJywgYXJncyk7XG4gIH0sXG4gIGVycm9yKGFyZ3MpIHtcbiAgICB0aGlzLm91dHB1dCgnZXJyb3InLCBhcmdzKTtcbiAgfSxcbiAgb3V0cHV0KHR5cGUsIGFyZ3MpIHtcbiAgICBjb25zb2xlPy5bdHlwZV0/LmFwcGx5Py4oY29uc29sZSwgYXJncyk7XG4gIH1cbn07XG5jbGFzcyBMb2dnZXIge1xuICBjb25zdHJ1Y3Rvcihjb25jcmV0ZUxvZ2dlcikge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB0aGlzLmluaXQoY29uY3JldGVMb2dnZXIsIG9wdGlvbnMpO1xuICB9XG4gIGluaXQoY29uY3JldGVMb2dnZXIpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdGhpcy5wcmVmaXggPSBvcHRpb25zLnByZWZpeCB8fCAnaTE4bmV4dDonO1xuICAgIHRoaXMubG9nZ2VyID0gY29uY3JldGVMb2dnZXIgfHwgY29uc29sZUxvZ2dlcjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuICB9XG4gIGxvZygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ2xvZycsICcnLCB0cnVlKTtcbiAgfVxuICB3YXJuKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICd3YXJuJywgJycsIHRydWUpO1xuICB9XG4gIGVycm9yKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICdlcnJvcicsICcnKTtcbiAgfVxuICBkZXByZWNhdGUoKSB7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ3dhcm4nLCAnV0FSTklORyBERVBSRUNBVEVEOiAnLCB0cnVlKTtcbiAgfVxuICBmb3J3YXJkKGFyZ3MsIGx2bCwgcHJlZml4LCBkZWJ1Z09ubHkpIHtcbiAgICBpZiAoZGVidWdPbmx5ICYmICF0aGlzLmRlYnVnKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNTdHJpbmcoYXJnc1swXSkpIGFyZ3NbMF0gPSBgJHtwcmVmaXh9JHt0aGlzLnByZWZpeH0gJHthcmdzWzBdfWA7XG4gICAgcmV0dXJuIHRoaXMubG9nZ2VyW2x2bF0oYXJncyk7XG4gIH1cbiAgY3JlYXRlKG1vZHVsZU5hbWUpIHtcbiAgICByZXR1cm4gbmV3IExvZ2dlcih0aGlzLmxvZ2dlciwge1xuICAgICAgLi4ue1xuICAgICAgICBwcmVmaXg6IGAke3RoaXMucHJlZml4fToke21vZHVsZU5hbWV9OmBcbiAgICAgIH0sXG4gICAgICAuLi50aGlzLm9wdGlvbnNcbiAgICB9KTtcbiAgfVxuICBjbG9uZShvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgdGhpcy5vcHRpb25zO1xuICAgIG9wdGlvbnMucHJlZml4ID0gb3B0aW9ucy5wcmVmaXggfHwgdGhpcy5wcmVmaXg7XG4gICAgcmV0dXJuIG5ldyBMb2dnZXIodGhpcy5sb2dnZXIsIG9wdGlvbnMpO1xuICB9XG59XG52YXIgYmFzZUxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcblxuY2xhc3MgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5vYnNlcnZlcnMgPSB7fTtcbiAgfVxuICBvbihldmVudHMsIGxpc3RlbmVyKSB7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkgdGhpcy5vYnNlcnZlcnNbZXZlbnRdID0gbmV3IE1hcCgpO1xuICAgICAgY29uc3QgbnVtTGlzdGVuZXJzID0gdGhpcy5vYnNlcnZlcnNbZXZlbnRdLmdldChsaXN0ZW5lcikgfHwgMDtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XS5zZXQobGlzdGVuZXIsIG51bUxpc3RlbmVycyArIDEpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkgcmV0dXJuO1xuICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tldmVudF07XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XS5kZWxldGUobGlzdGVuZXIpO1xuICB9XG4gIGVtaXQoZXZlbnQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkge1xuICAgICAgY29uc3QgY2xvbmVkID0gQXJyYXkuZnJvbSh0aGlzLm9ic2VydmVyc1tldmVudF0uZW50cmllcygpKTtcbiAgICAgIGNsb25lZC5mb3JFYWNoKF9yZWYgPT4ge1xuICAgICAgICBsZXQgW29ic2VydmVyLCBudW1UaW1lc0FkZGVkXSA9IF9yZWY7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVGltZXNBZGRlZDsgaSsrKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5vYnNlcnZlcnNbJyonXSkge1xuICAgICAgY29uc3QgY2xvbmVkID0gQXJyYXkuZnJvbSh0aGlzLm9ic2VydmVyc1snKiddLmVudHJpZXMoKSk7XG4gICAgICBjbG9uZWQuZm9yRWFjaChfcmVmMiA9PiB7XG4gICAgICAgIGxldCBbb2JzZXJ2ZXIsIG51bVRpbWVzQWRkZWRdID0gX3JlZjI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVGltZXNBZGRlZDsgaSsrKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIuYXBwbHkob2JzZXJ2ZXIsIFtldmVudCwgLi4uYXJnc10pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgUmVzb3VyY2VTdG9yZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgbnM6IFsndHJhbnNsYXRpb24nXSxcbiAgICAgIGRlZmF1bHROUzogJ3RyYW5zbGF0aW9uJ1xuICAgIH07XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvciA9ICcuJztcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgYWRkTmFtZXNwYWNlcyhucykge1xuICAgIGlmICh0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihucykgPCAwKSB7XG4gICAgICB0aGlzLm9wdGlvbnMubnMucHVzaChucyk7XG4gICAgfVxuICB9XG4gIHJlbW92ZU5hbWVzcGFjZXMobnMpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMub3B0aW9ucy5ucy5pbmRleE9mKG5zKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5vcHRpb25zLm5zLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG4gIGdldFJlc291cmNlKGxuZywgbnMsIGtleSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICBjb25zdCBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgIGNvbnN0IGlnbm9yZUpTT05TdHJ1Y3R1cmUgPSBvcHRpb25zLmlnbm9yZUpTT05TdHJ1Y3R1cmUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA6IHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlO1xuICAgIGxldCBwYXRoO1xuICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCA9IFtsbmcsIG5zXTtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgIHBhdGgucHVzaCguLi5rZXkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKGtleSkgJiYga2V5U2VwYXJhdG9yKSB7XG4gICAgICAgICAgcGF0aC5wdXNoKC4uLmtleS5zcGxpdChrZXlTZXBhcmF0b3IpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRoLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBnZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCk7XG4gICAgaWYgKCFyZXN1bHQgJiYgIW5zICYmICFrZXkgJiYgbG5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICBsbmcgPSBwYXRoWzBdO1xuICAgICAgbnMgPSBwYXRoWzFdO1xuICAgICAga2V5ID0gcGF0aC5zbGljZSgyKS5qb2luKCcuJyk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgfHwgIWlnbm9yZUpTT05TdHJ1Y3R1cmUgfHwgIWlzU3RyaW5nKGtleSkpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIGRlZXBGaW5kKHRoaXMuZGF0YT8uW2xuZ10/Lltuc10sIGtleSwga2V5U2VwYXJhdG9yKTtcbiAgfVxuICBhZGRSZXNvdXJjZShsbmcsIG5zLCBrZXksIHZhbHVlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHtcbiAgICAgIHNpbGVudDogZmFsc2VcbiAgICB9O1xuICAgIGNvbnN0IGtleVNlcGFyYXRvciA9IG9wdGlvbnMua2V5U2VwYXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmtleVNlcGFyYXRvciA6IHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3I7XG4gICAgbGV0IHBhdGggPSBbbG5nLCBuc107XG4gICAgaWYgKGtleSkgcGF0aCA9IHBhdGguY29uY2F0KGtleVNlcGFyYXRvciA/IGtleS5zcGxpdChrZXlTZXBhcmF0b3IpIDoga2V5KTtcbiAgICBpZiAobG5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICBwYXRoID0gbG5nLnNwbGl0KCcuJyk7XG4gICAgICB2YWx1ZSA9IG5zO1xuICAgICAgbnMgPSBwYXRoWzFdO1xuICAgIH1cbiAgICB0aGlzLmFkZE5hbWVzcGFjZXMobnMpO1xuICAgIHNldFBhdGgodGhpcy5kYXRhLCBwYXRoLCB2YWx1ZSk7XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIGtleSwgdmFsdWUpO1xuICB9XG4gIGFkZFJlc291cmNlcyhsbmcsIG5zLCByZXNvdXJjZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge1xuICAgICAgc2lsZW50OiBmYWxzZVxuICAgIH07XG4gICAgZm9yIChjb25zdCBtIGluIHJlc291cmNlcykge1xuICAgICAgaWYgKGlzU3RyaW5nKHJlc291cmNlc1ttXSkgfHwgQXJyYXkuaXNBcnJheShyZXNvdXJjZXNbbV0pKSB0aGlzLmFkZFJlc291cmNlKGxuZywgbnMsIG0sIHJlc291cmNlc1ttXSwge1xuICAgICAgICBzaWxlbnQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLmVtaXQoJ2FkZGVkJywgbG5nLCBucywgcmVzb3VyY2VzKTtcbiAgfVxuICBhZGRSZXNvdXJjZUJ1bmRsZShsbmcsIG5zLCByZXNvdXJjZXMsIGRlZXAsIG92ZXJ3cml0ZSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiB7XG4gICAgICBzaWxlbnQ6IGZhbHNlLFxuICAgICAgc2tpcENvcHk6IGZhbHNlXG4gICAgfTtcbiAgICBsZXQgcGF0aCA9IFtsbmcsIG5zXTtcbiAgICBpZiAobG5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICBwYXRoID0gbG5nLnNwbGl0KCcuJyk7XG4gICAgICBkZWVwID0gcmVzb3VyY2VzO1xuICAgICAgcmVzb3VyY2VzID0gbnM7XG4gICAgICBucyA9IHBhdGhbMV07XG4gICAgfVxuICAgIHRoaXMuYWRkTmFtZXNwYWNlcyhucyk7XG4gICAgbGV0IHBhY2sgPSBnZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCkgfHwge307XG4gICAgaWYgKCFvcHRpb25zLnNraXBDb3B5KSByZXNvdXJjZXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc291cmNlcykpO1xuICAgIGlmIChkZWVwKSB7XG4gICAgICBkZWVwRXh0ZW5kKHBhY2ssIHJlc291cmNlcywgb3ZlcndyaXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFjayA9IHtcbiAgICAgICAgLi4ucGFjayxcbiAgICAgICAgLi4ucmVzb3VyY2VzXG4gICAgICB9O1xuICAgIH1cbiAgICBzZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCwgcGFjayk7XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIHJlc291cmNlcyk7XG4gIH1cbiAgcmVtb3ZlUmVzb3VyY2VCdW5kbGUobG5nLCBucykge1xuICAgIGlmICh0aGlzLmhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpKSB7XG4gICAgICBkZWxldGUgdGhpcy5kYXRhW2xuZ11bbnNdO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZU5hbWVzcGFjZXMobnMpO1xuICAgIHRoaXMuZW1pdCgncmVtb3ZlZCcsIGxuZywgbnMpO1xuICB9XG4gIGhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKSAhPT0gdW5kZWZpbmVkO1xuICB9XG4gIGdldFJlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICBpZiAoIW5zKSBucyA9IHRoaXMub3B0aW9ucy5kZWZhdWx0TlM7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVzb3VyY2UobG5nLCBucyk7XG4gIH1cbiAgZ2V0RGF0YUJ5TGFuZ3VhZ2UobG5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtsbmddO1xuICB9XG4gIGhhc0xhbmd1YWdlU29tZVRyYW5zbGF0aW9ucyhsbmcpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhQnlMYW5ndWFnZShsbmcpO1xuICAgIGNvbnN0IG4gPSBkYXRhICYmIE9iamVjdC5rZXlzKGRhdGEpIHx8IFtdO1xuICAgIHJldHVybiAhIW4uZmluZCh2ID0+IGRhdGFbdl0gJiYgT2JqZWN0LmtleXMoZGF0YVt2XSkubGVuZ3RoID4gMCk7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGE7XG4gIH1cbn1cblxudmFyIHBvc3RQcm9jZXNzb3IgPSB7XG4gIHByb2Nlc3NvcnM6IHt9LFxuICBhZGRQb3N0UHJvY2Vzc29yKG1vZHVsZSkge1xuICAgIHRoaXMucHJvY2Vzc29yc1ttb2R1bGUubmFtZV0gPSBtb2R1bGU7XG4gIH0sXG4gIGhhbmRsZShwcm9jZXNzb3JzLCB2YWx1ZSwga2V5LCBvcHRpb25zLCB0cmFuc2xhdG9yKSB7XG4gICAgcHJvY2Vzc29ycy5mb3JFYWNoKHByb2Nlc3NvciA9PiB7XG4gICAgICB2YWx1ZSA9IHRoaXMucHJvY2Vzc29yc1twcm9jZXNzb3JdPy5wcm9jZXNzKHZhbHVlLCBrZXksIG9wdGlvbnMsIHRyYW5zbGF0b3IpID8/IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcblxuY29uc3QgY2hlY2tlZExvYWRlZEZvciA9IHt9O1xuY29uc3Qgc2hvdWxkSGFuZGxlQXNPYmplY3QgPSByZXMgPT4gIWlzU3RyaW5nKHJlcykgJiYgdHlwZW9mIHJlcyAhPT0gJ2Jvb2xlYW4nICYmIHR5cGVvZiByZXMgIT09ICdudW1iZXInO1xuY2xhc3MgVHJhbnNsYXRvciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHN1cGVyKCk7XG4gICAgY29weShbJ3Jlc291cmNlU3RvcmUnLCAnbGFuZ3VhZ2VVdGlscycsICdwbHVyYWxSZXNvbHZlcicsICdpbnRlcnBvbGF0b3InLCAnYmFja2VuZENvbm5lY3RvcicsICdpMThuRm9ybWF0JywgJ3V0aWxzJ10sIHNlcnZpY2VzLCB0aGlzKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmICh0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ3RyYW5zbGF0b3InKTtcbiAgfVxuICBjaGFuZ2VMYW5ndWFnZShsbmcpIHtcbiAgICBpZiAobG5nKSB0aGlzLmxhbmd1YWdlID0gbG5nO1xuICB9XG4gIGV4aXN0cyhrZXkpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgaW50ZXJwb2xhdGlvbjoge31cbiAgICB9O1xuICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCByZXNvbHZlZCA9IHRoaXMucmVzb2x2ZShrZXksIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXNvbHZlZD8ucmVzICE9PSB1bmRlZmluZWQ7XG4gIH1cbiAgZXh0cmFjdEZyb21LZXkoa2V5LCBvcHRpb25zKSB7XG4gICAgbGV0IG5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc1NlcGFyYXRvciA6IHRoaXMub3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICBpZiAobnNTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgbnNTZXBhcmF0b3IgPSAnOic7XG4gICAgY29uc3Qga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICBsZXQgbmFtZXNwYWNlcyA9IG9wdGlvbnMubnMgfHwgdGhpcy5vcHRpb25zLmRlZmF1bHROUyB8fCBbXTtcbiAgICBjb25zdCB3b3VsZENoZWNrRm9yTnNJbktleSA9IG5zU2VwYXJhdG9yICYmIGtleS5pbmRleE9mKG5zU2VwYXJhdG9yKSA+IC0xO1xuICAgIGNvbnN0IHNlZW1zTmF0dXJhbExhbmd1YWdlID0gIXRoaXMub3B0aW9ucy51c2VyRGVmaW5lZEtleVNlcGFyYXRvciAmJiAhb3B0aW9ucy5rZXlTZXBhcmF0b3IgJiYgIXRoaXMub3B0aW9ucy51c2VyRGVmaW5lZE5zU2VwYXJhdG9yICYmICFvcHRpb25zLm5zU2VwYXJhdG9yICYmICFsb29rc0xpa2VPYmplY3RQYXRoKGtleSwgbnNTZXBhcmF0b3IsIGtleVNlcGFyYXRvcik7XG4gICAgaWYgKHdvdWxkQ2hlY2tGb3JOc0luS2V5ICYmICFzZWVtc05hdHVyYWxMYW5ndWFnZSkge1xuICAgICAgY29uc3QgbSA9IGtleS5tYXRjaCh0aGlzLmludGVycG9sYXRvci5uZXN0aW5nUmVnZXhwKTtcbiAgICAgIGlmIChtICYmIG0ubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICBuYW1lc3BhY2VzOiBpc1N0cmluZyhuYW1lc3BhY2VzKSA/IFtuYW1lc3BhY2VzXSA6IG5hbWVzcGFjZXNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KG5zU2VwYXJhdG9yKTtcbiAgICAgIGlmIChuc1NlcGFyYXRvciAhPT0ga2V5U2VwYXJhdG9yIHx8IG5zU2VwYXJhdG9yID09PSBrZXlTZXBhcmF0b3IgJiYgdGhpcy5vcHRpb25zLm5zLmluZGV4T2YocGFydHNbMF0pID4gLTEpIG5hbWVzcGFjZXMgPSBwYXJ0cy5zaGlmdCgpO1xuICAgICAga2V5ID0gcGFydHMuam9pbihrZXlTZXBhcmF0b3IpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAga2V5LFxuICAgICAgbmFtZXNwYWNlczogaXNTdHJpbmcobmFtZXNwYWNlcykgPyBbbmFtZXNwYWNlc10gOiBuYW1lc3BhY2VzXG4gICAgfTtcbiAgfVxuICB0cmFuc2xhdGUoa2V5cywgb3B0aW9ucywgbGFzdEtleSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgJiYgdGhpcy5vcHRpb25zLm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyKSB7XG4gICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyKGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIG9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcbiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgICBpZiAoa2V5cyA9PSBudWxsKSByZXR1cm4gJyc7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSBrZXlzID0gW1N0cmluZyhrZXlzKV07XG4gICAgY29uc3QgcmV0dXJuRGV0YWlscyA9IG9wdGlvbnMucmV0dXJuRGV0YWlscyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5yZXR1cm5EZXRhaWxzIDogdGhpcy5vcHRpb25zLnJldHVybkRldGFpbHM7XG4gICAgY29uc3Qga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICBjb25zdCB7XG4gICAgICBrZXksXG4gICAgICBuYW1lc3BhY2VzXG4gICAgfSA9IHRoaXMuZXh0cmFjdEZyb21LZXkoa2V5c1trZXlzLmxlbmd0aCAtIDFdLCBvcHRpb25zKTtcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBuYW1lc3BhY2VzW25hbWVzcGFjZXMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgbG5nID0gb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZTtcbiAgICBjb25zdCBhcHBlbmROYW1lc3BhY2VUb0NJTW9kZSA9IG9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUgfHwgdGhpcy5vcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlO1xuICAgIGlmIChsbmc/LnRvTG93ZXJDYXNlKCkgPT09ICdjaW1vZGUnKSB7XG4gICAgICBpZiAoYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUpIHtcbiAgICAgICAgY29uc3QgbnNTZXBhcmF0b3IgPSBvcHRpb25zLm5zU2VwYXJhdG9yIHx8IHRoaXMub3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICAgICAgaWYgKHJldHVybkRldGFpbHMpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzOiBgJHtuYW1lc3BhY2V9JHtuc1NlcGFyYXRvcn0ke2tleX1gLFxuICAgICAgICAgICAgdXNlZEtleToga2V5LFxuICAgICAgICAgICAgZXhhY3RVc2VkS2V5OiBrZXksXG4gICAgICAgICAgICB1c2VkTG5nOiBsbmcsXG4gICAgICAgICAgICB1c2VkTlM6IG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHVzZWRQYXJhbXM6IHRoaXMuZ2V0VXNlZFBhcmFtc0RldGFpbHMob3B0aW9ucylcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtuYW1lc3BhY2V9JHtuc1NlcGFyYXRvcn0ke2tleX1gO1xuICAgICAgfVxuICAgICAgaWYgKHJldHVybkRldGFpbHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXM6IGtleSxcbiAgICAgICAgICB1c2VkS2V5OiBrZXksXG4gICAgICAgICAgZXhhY3RVc2VkS2V5OiBrZXksXG4gICAgICAgICAgdXNlZExuZzogbG5nLFxuICAgICAgICAgIHVzZWROUzogbmFtZXNwYWNlLFxuICAgICAgICAgIHVzZWRQYXJhbXM6IHRoaXMuZ2V0VXNlZFBhcmFtc0RldGFpbHMob3B0aW9ucylcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGNvbnN0IHJlc29sdmVkID0gdGhpcy5yZXNvbHZlKGtleXMsIG9wdGlvbnMpO1xuICAgIGxldCByZXMgPSByZXNvbHZlZD8ucmVzO1xuICAgIGNvbnN0IHJlc1VzZWRLZXkgPSByZXNvbHZlZD8udXNlZEtleSB8fCBrZXk7XG4gICAgY29uc3QgcmVzRXhhY3RVc2VkS2V5ID0gcmVzb2x2ZWQ/LmV4YWN0VXNlZEtleSB8fCBrZXk7XG4gICAgY29uc3Qgbm9PYmplY3QgPSBbJ1tvYmplY3QgTnVtYmVyXScsICdbb2JqZWN0IEZ1bmN0aW9uXScsICdbb2JqZWN0IFJlZ0V4cF0nXTtcbiAgICBjb25zdCBqb2luQXJyYXlzID0gb3B0aW9ucy5qb2luQXJyYXlzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmpvaW5BcnJheXMgOiB0aGlzLm9wdGlvbnMuam9pbkFycmF5cztcbiAgICBjb25zdCBoYW5kbGVBc09iamVjdEluSTE4bkZvcm1hdCA9ICF0aGlzLmkxOG5Gb3JtYXQgfHwgdGhpcy5pMThuRm9ybWF0LmhhbmRsZUFzT2JqZWN0O1xuICAgIGNvbnN0IG5lZWRzUGx1cmFsSGFuZGxpbmcgPSBvcHRpb25zLmNvdW50ICE9PSB1bmRlZmluZWQgJiYgIWlzU3RyaW5nKG9wdGlvbnMuY291bnQpO1xuICAgIGNvbnN0IGhhc0RlZmF1bHRWYWx1ZSA9IFRyYW5zbGF0b3IuaGFzRGVmYXVsdFZhbHVlKG9wdGlvbnMpO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZVN1ZmZpeCA9IG5lZWRzUGx1cmFsSGFuZGxpbmcgPyB0aGlzLnBsdXJhbFJlc29sdmVyLmdldFN1ZmZpeChsbmcsIG9wdGlvbnMuY291bnQsIG9wdGlvbnMpIDogJyc7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlU3VmZml4T3JkaW5hbEZhbGxiYWNrID0gb3B0aW9ucy5vcmRpbmFsICYmIG5lZWRzUGx1cmFsSGFuZGxpbmcgPyB0aGlzLnBsdXJhbFJlc29sdmVyLmdldFN1ZmZpeChsbmcsIG9wdGlvbnMuY291bnQsIHtcbiAgICAgIG9yZGluYWw6IGZhbHNlXG4gICAgfSkgOiAnJztcbiAgICBjb25zdCBuZWVkc1plcm9TdWZmaXhMb29rdXAgPSBuZWVkc1BsdXJhbEhhbmRsaW5nICYmICFvcHRpb25zLm9yZGluYWwgJiYgb3B0aW9ucy5jb3VudCA9PT0gMDtcbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBuZWVkc1plcm9TdWZmaXhMb29rdXAgJiYgb3B0aW9uc1tgZGVmYXVsdFZhbHVlJHt0aGlzLm9wdGlvbnMucGx1cmFsU2VwYXJhdG9yfXplcm9gXSB8fCBvcHRpb25zW2BkZWZhdWx0VmFsdWUke2RlZmF1bHRWYWx1ZVN1ZmZpeH1gXSB8fCBvcHRpb25zW2BkZWZhdWx0VmFsdWUke2RlZmF1bHRWYWx1ZVN1ZmZpeE9yZGluYWxGYWxsYmFja31gXSB8fCBvcHRpb25zLmRlZmF1bHRWYWx1ZTtcbiAgICBsZXQgcmVzRm9yT2JqSG5kbCA9IHJlcztcbiAgICBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgIXJlcyAmJiBoYXNEZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJlc0Zvck9iakhuZGwgPSBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZUFzT2JqZWN0ID0gc2hvdWxkSGFuZGxlQXNPYmplY3QocmVzRm9yT2JqSG5kbCk7XG4gICAgY29uc3QgcmVzVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkocmVzRm9yT2JqSG5kbCk7XG4gICAgaWYgKGhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0ICYmIHJlc0Zvck9iakhuZGwgJiYgaGFuZGxlQXNPYmplY3QgJiYgbm9PYmplY3QuaW5kZXhPZihyZXNUeXBlKSA8IDAgJiYgIShpc1N0cmluZyhqb2luQXJyYXlzKSAmJiBBcnJheS5pc0FycmF5KHJlc0Zvck9iakhuZGwpKSkge1xuICAgICAgaWYgKCFvcHRpb25zLnJldHVybk9iamVjdHMgJiYgIXRoaXMub3B0aW9ucy5yZXR1cm5PYmplY3RzKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlcikge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2FjY2Vzc2luZyBhbiBvYmplY3QgLSBidXQgcmV0dXJuT2JqZWN0cyBvcHRpb25zIGlzIG5vdCBlbmFibGVkIScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLm9wdGlvbnMucmV0dXJuZWRPYmplY3RIYW5kbGVyID8gdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlcihyZXNVc2VkS2V5LCByZXNGb3JPYmpIbmRsLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICBuczogbmFtZXNwYWNlc1xuICAgICAgICB9KSA6IGBrZXkgJyR7a2V5fSAoJHt0aGlzLmxhbmd1YWdlfSknIHJldHVybmVkIGFuIG9iamVjdCBpbnN0ZWFkIG9mIHN0cmluZy5gO1xuICAgICAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgICAgIHJlc29sdmVkLnJlcyA9IHI7XG4gICAgICAgICAgcmVzb2x2ZWQudXNlZFBhcmFtcyA9IHRoaXMuZ2V0VXNlZFBhcmFtc0RldGFpbHMob3B0aW9ucyk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgICAgaWYgKGtleVNlcGFyYXRvcikge1xuICAgICAgICBjb25zdCByZXNUeXBlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkocmVzRm9yT2JqSG5kbCk7XG4gICAgICAgIGNvbnN0IGNvcHkgPSByZXNUeXBlSXNBcnJheSA/IFtdIDoge307XG4gICAgICAgIGNvbnN0IG5ld0tleVRvVXNlID0gcmVzVHlwZUlzQXJyYXkgPyByZXNFeGFjdFVzZWRLZXkgOiByZXNVc2VkS2V5O1xuICAgICAgICBmb3IgKGNvbnN0IG0gaW4gcmVzRm9yT2JqSG5kbCkge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzRm9yT2JqSG5kbCwgbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZXBLZXkgPSBgJHtuZXdLZXlUb1VzZX0ke2tleVNlcGFyYXRvcn0ke219YDtcbiAgICAgICAgICAgIGlmIChoYXNEZWZhdWx0VmFsdWUgJiYgIXJlcykge1xuICAgICAgICAgICAgICBjb3B5W21dID0gdGhpcy50cmFuc2xhdGUoZGVlcEtleSwge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBzaG91bGRIYW5kbGVBc09iamVjdChkZWZhdWx0VmFsdWUpID8gZGVmYXVsdFZhbHVlW21dIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIC4uLntcbiAgICAgICAgICAgICAgICAgIGpvaW5BcnJheXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgbnM6IG5hbWVzcGFjZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29weVttXSA9IHRoaXMudHJhbnNsYXRlKGRlZXBLZXksIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIC4uLntcbiAgICAgICAgICAgICAgICAgIGpvaW5BcnJheXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgbnM6IG5hbWVzcGFjZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvcHlbbV0gPT09IGRlZXBLZXkpIGNvcHlbbV0gPSByZXNGb3JPYmpIbmRsW21dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXMgPSBjb3B5O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgaXNTdHJpbmcoam9pbkFycmF5cykgJiYgQXJyYXkuaXNBcnJheShyZXMpKSB7XG4gICAgICByZXMgPSByZXMuam9pbihqb2luQXJyYXlzKTtcbiAgICAgIGlmIChyZXMpIHJlcyA9IHRoaXMuZXh0ZW5kVHJhbnNsYXRpb24ocmVzLCBrZXlzLCBvcHRpb25zLCBsYXN0S2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHVzZWREZWZhdWx0ID0gZmFsc2U7XG4gICAgICBsZXQgdXNlZEtleSA9IGZhbHNlO1xuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRMb29rdXAocmVzKSAmJiBoYXNEZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdXNlZERlZmF1bHQgPSB0cnVlO1xuICAgICAgICByZXMgPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZExvb2t1cChyZXMpKSB7XG4gICAgICAgIHVzZWRLZXkgPSB0cnVlO1xuICAgICAgICByZXMgPSBrZXk7XG4gICAgICB9XG4gICAgICBjb25zdCBtaXNzaW5nS2V5Tm9WYWx1ZUZhbGxiYWNrVG9LZXkgPSBvcHRpb25zLm1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSB8fCB0aGlzLm9wdGlvbnMubWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5O1xuICAgICAgY29uc3QgcmVzRm9yTWlzc2luZyA9IG1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSAmJiB1c2VkS2V5ID8gdW5kZWZpbmVkIDogcmVzO1xuICAgICAgY29uc3QgdXBkYXRlTWlzc2luZyA9IGhhc0RlZmF1bHRWYWx1ZSAmJiBkZWZhdWx0VmFsdWUgIT09IHJlcyAmJiB0aGlzLm9wdGlvbnMudXBkYXRlTWlzc2luZztcbiAgICAgIGlmICh1c2VkS2V5IHx8IHVzZWREZWZhdWx0IHx8IHVwZGF0ZU1pc3NpbmcpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKHVwZGF0ZU1pc3NpbmcgPyAndXBkYXRlS2V5JyA6ICdtaXNzaW5nS2V5JywgbG5nLCBuYW1lc3BhY2UsIGtleSwgdXBkYXRlTWlzc2luZyA/IGRlZmF1bHRWYWx1ZSA6IHJlcyk7XG4gICAgICAgIGlmIChrZXlTZXBhcmF0b3IpIHtcbiAgICAgICAgICBjb25zdCBmayA9IHRoaXMucmVzb2x2ZShrZXksIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBrZXlTZXBhcmF0b3I6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGZrICYmIGZrLnJlcykgdGhpcy5sb2dnZXIud2FybignU2VlbXMgdGhlIGxvYWRlZCB0cmFuc2xhdGlvbnMgd2VyZSBpbiBmbGF0IEpTT04gZm9ybWF0IGluc3RlYWQgb2YgbmVzdGVkLiBFaXRoZXIgc2V0IGtleVNlcGFyYXRvcjogZmFsc2Ugb24gaW5pdCBvciBtYWtlIHN1cmUgeW91ciB0cmFuc2xhdGlvbnMgYXJlIHB1Ymxpc2hlZCBpbiBuZXN0ZWQgZm9ybWF0LicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsbmdzID0gW107XG4gICAgICAgIGNvbnN0IGZhbGxiYWNrTG5ncyA9IHRoaXMubGFuZ3VhZ2VVdGlscy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZywgb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdUbyA9PT0gJ2ZhbGxiYWNrJyAmJiBmYWxsYmFja0xuZ3MgJiYgZmFsbGJhY2tMbmdzWzBdKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmYWxsYmFja0xuZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxuZ3MucHVzaChmYWxsYmFja0xuZ3NbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdUbyA9PT0gJ2FsbCcpIHtcbiAgICAgICAgICBsbmdzID0gdGhpcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsbmdzLnB1c2gob3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VuZCA9IChsLCBrLCBzcGVjaWZpY0RlZmF1bHRWYWx1ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRlZmF1bHRGb3JNaXNzaW5nID0gaGFzRGVmYXVsdFZhbHVlICYmIHNwZWNpZmljRGVmYXVsdFZhbHVlICE9PSByZXMgPyBzcGVjaWZpY0RlZmF1bHRWYWx1ZSA6IHJlc0Zvck1pc3Npbmc7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5taXNzaW5nS2V5SGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1pc3NpbmdLZXlIYW5kbGVyKGwsIG5hbWVzcGFjZSwgaywgZGVmYXVsdEZvck1pc3NpbmcsIHVwZGF0ZU1pc3NpbmcsIG9wdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5iYWNrZW5kQ29ubmVjdG9yPy5zYXZlTWlzc2luZykge1xuICAgICAgICAgICAgdGhpcy5iYWNrZW5kQ29ubmVjdG9yLnNhdmVNaXNzaW5nKGwsIG5hbWVzcGFjZSwgaywgZGVmYXVsdEZvck1pc3NpbmcsIHVwZGF0ZU1pc3NpbmcsIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmVtaXQoJ21pc3NpbmdLZXknLCBsLCBuYW1lc3BhY2UsIGssIHJlcyk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmcpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNhdmVNaXNzaW5nUGx1cmFscyAmJiBuZWVkc1BsdXJhbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICBsbmdzLmZvckVhY2gobGFuZ3VhZ2UgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzdWZmaXhlcyA9IHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4ZXMobGFuZ3VhZ2UsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICBpZiAobmVlZHNaZXJvU3VmZml4TG9va3VwICYmIG9wdGlvbnNbYGRlZmF1bHRWYWx1ZSR7dGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcn16ZXJvYF0gJiYgc3VmZml4ZXMuaW5kZXhPZihgJHt0aGlzLm9wdGlvbnMucGx1cmFsU2VwYXJhdG9yfXplcm9gKSA8IDApIHtcbiAgICAgICAgICAgICAgICBzdWZmaXhlcy5wdXNoKGAke3RoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3J9emVyb2ApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN1ZmZpeGVzLmZvckVhY2goc3VmZml4ID0+IHtcbiAgICAgICAgICAgICAgICBzZW5kKFtsYW5ndWFnZV0sIGtleSArIHN1ZmZpeCwgb3B0aW9uc1tgZGVmYXVsdFZhbHVlJHtzdWZmaXh9YF0gfHwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZChsbmdzLCBrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXMgPSB0aGlzLmV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5cywgb3B0aW9ucywgcmVzb2x2ZWQsIGxhc3RLZXkpO1xuICAgICAgaWYgKHVzZWRLZXkgJiYgcmVzID09PSBrZXkgJiYgdGhpcy5vcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleSkgcmVzID0gYCR7bmFtZXNwYWNlfToke2tleX1gO1xuICAgICAgaWYgKCh1c2VkS2V5IHx8IHVzZWREZWZhdWx0KSAmJiB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcikge1xuICAgICAgICByZXMgPSB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcih0aGlzLm9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5ID8gYCR7bmFtZXNwYWNlfToke2tleX1gIDoga2V5LCB1c2VkRGVmYXVsdCA/IHJlcyA6IHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZXR1cm5EZXRhaWxzKSB7XG4gICAgICByZXNvbHZlZC5yZXMgPSByZXM7XG4gICAgICByZXNvbHZlZC51c2VkUGFyYW1zID0gdGhpcy5nZXRVc2VkUGFyYW1zRGV0YWlscyhvcHRpb25zKTtcbiAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBleHRlbmRUcmFuc2xhdGlvbihyZXMsIGtleSwgb3B0aW9ucywgcmVzb2x2ZWQsIGxhc3RLZXkpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIGlmICh0aGlzLmkxOG5Gb3JtYXQ/LnBhcnNlKSB7XG4gICAgICByZXMgPSB0aGlzLmkxOG5Gb3JtYXQucGFyc2UocmVzLCB7XG4gICAgICAgIC4uLnRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmRlZmF1bHRWYXJpYWJsZXMsXG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICAgIH0sIG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UgfHwgcmVzb2x2ZWQudXNlZExuZywgcmVzb2x2ZWQudXNlZE5TLCByZXNvbHZlZC51c2VkS2V5LCB7XG4gICAgICAgIHJlc29sdmVkXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFvcHRpb25zLnNraXBJbnRlcnBvbGF0aW9uKSB7XG4gICAgICBpZiAob3B0aW9ucy5pbnRlcnBvbGF0aW9uKSB0aGlzLmludGVycG9sYXRvci5pbml0KHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgLi4ue1xuICAgICAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLFxuICAgICAgICAgICAgLi4ub3B0aW9ucy5pbnRlcnBvbGF0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHNraXBPblZhcmlhYmxlcyA9IGlzU3RyaW5nKHJlcykgJiYgKG9wdGlvbnM/LmludGVycG9sYXRpb24/LnNraXBPblZhcmlhYmxlcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyA6IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyk7XG4gICAgICBsZXQgbmVzdEJlZjtcbiAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgY29uc3QgbmIgPSByZXMubWF0Y2godGhpcy5pbnRlcnBvbGF0b3IubmVzdGluZ1JlZ2V4cCk7XG4gICAgICAgIG5lc3RCZWYgPSBuYiAmJiBuYi5sZW5ndGg7XG4gICAgICB9XG4gICAgICBsZXQgZGF0YSA9IG9wdGlvbnMucmVwbGFjZSAmJiAhaXNTdHJpbmcob3B0aW9ucy5yZXBsYWNlKSA/IG9wdGlvbnMucmVwbGFjZSA6IG9wdGlvbnM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcykgZGF0YSA9IHtcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyxcbiAgICAgICAgLi4uZGF0YVxuICAgICAgfTtcbiAgICAgIHJlcyA9IHRoaXMuaW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHJlcywgZGF0YSwgb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSB8fCByZXNvbHZlZC51c2VkTG5nLCBvcHRpb25zKTtcbiAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgY29uc3QgbmEgPSByZXMubWF0Y2godGhpcy5pbnRlcnBvbGF0b3IubmVzdGluZ1JlZ2V4cCk7XG4gICAgICAgIGNvbnN0IG5lc3RBZnQgPSBuYSAmJiBuYS5sZW5ndGg7XG4gICAgICAgIGlmIChuZXN0QmVmIDwgbmVzdEFmdCkgb3B0aW9ucy5uZXN0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIW9wdGlvbnMubG5nICYmIHJlc29sdmVkICYmIHJlc29sdmVkLnJlcykgb3B0aW9ucy5sbmcgPSB0aGlzLmxhbmd1YWdlIHx8IHJlc29sdmVkLnVzZWRMbmc7XG4gICAgICBpZiAob3B0aW9ucy5uZXN0ICE9PSBmYWxzZSkgcmVzID0gdGhpcy5pbnRlcnBvbGF0b3IubmVzdChyZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdEtleT8uWzBdID09PSBhcmdzWzBdICYmICFvcHRpb25zLmNvbnRleHQpIHtcbiAgICAgICAgICBfdGhpcy5sb2dnZXIud2FybihgSXQgc2VlbXMgeW91IGFyZSBuZXN0aW5nIHJlY3Vyc2l2ZWx5IGtleTogJHthcmdzWzBdfSBpbiBrZXk6ICR7a2V5WzBdfWApO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcy50cmFuc2xhdGUoLi4uYXJncywga2V5KTtcbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMuaW50ZXJwb2xhdGlvbikgdGhpcy5pbnRlcnBvbGF0b3IucmVzZXQoKTtcbiAgICB9XG4gICAgY29uc3QgcG9zdFByb2Nlc3MgPSBvcHRpb25zLnBvc3RQcm9jZXNzIHx8IHRoaXMub3B0aW9ucy5wb3N0UHJvY2VzcztcbiAgICBjb25zdCBwb3N0UHJvY2Vzc29yTmFtZXMgPSBpc1N0cmluZyhwb3N0UHJvY2VzcykgPyBbcG9zdFByb2Nlc3NdIDogcG9zdFByb2Nlc3M7XG4gICAgaWYgKHJlcyAhPSBudWxsICYmIHBvc3RQcm9jZXNzb3JOYW1lcz8ubGVuZ3RoICYmIG9wdGlvbnMuYXBwbHlQb3N0UHJvY2Vzc29yICE9PSBmYWxzZSkge1xuICAgICAgcmVzID0gcG9zdFByb2Nlc3Nvci5oYW5kbGUocG9zdFByb2Nlc3Nvck5hbWVzLCByZXMsIGtleSwgdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5wb3N0UHJvY2Vzc1Bhc3NSZXNvbHZlZCA/IHtcbiAgICAgICAgaTE4blJlc29sdmVkOiB7XG4gICAgICAgICAgLi4ucmVzb2x2ZWQsXG4gICAgICAgICAgdXNlZFBhcmFtczogdGhpcy5nZXRVc2VkUGFyYW1zRGV0YWlscyhvcHRpb25zKVxuICAgICAgICB9LFxuICAgICAgICAuLi5vcHRpb25zXG4gICAgICB9IDogb3B0aW9ucywgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbiAgcmVzb2x2ZShrZXlzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGxldCBmb3VuZDtcbiAgICBsZXQgdXNlZEtleTtcbiAgICBsZXQgZXhhY3RVc2VkS2V5O1xuICAgIGxldCB1c2VkTG5nO1xuICAgIGxldCB1c2VkTlM7XG4gICAgaWYgKGlzU3RyaW5nKGtleXMpKSBrZXlzID0gW2tleXNdO1xuICAgIGtleXMuZm9yRWFjaChrID0+IHtcbiAgICAgIGlmICh0aGlzLmlzVmFsaWRMb29rdXAoZm91bmQpKSByZXR1cm47XG4gICAgICBjb25zdCBleHRyYWN0ZWQgPSB0aGlzLmV4dHJhY3RGcm9tS2V5KGssIG9wdGlvbnMpO1xuICAgICAgY29uc3Qga2V5ID0gZXh0cmFjdGVkLmtleTtcbiAgICAgIHVzZWRLZXkgPSBrZXk7XG4gICAgICBsZXQgbmFtZXNwYWNlcyA9IGV4dHJhY3RlZC5uYW1lc3BhY2VzO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5mYWxsYmFja05TKSBuYW1lc3BhY2VzID0gbmFtZXNwYWNlcy5jb25jYXQodGhpcy5vcHRpb25zLmZhbGxiYWNrTlMpO1xuICAgICAgY29uc3QgbmVlZHNQbHVyYWxIYW5kbGluZyA9IG9wdGlvbnMuY291bnQgIT09IHVuZGVmaW5lZCAmJiAhaXNTdHJpbmcob3B0aW9ucy5jb3VudCk7XG4gICAgICBjb25zdCBuZWVkc1plcm9TdWZmaXhMb29rdXAgPSBuZWVkc1BsdXJhbEhhbmRsaW5nICYmICFvcHRpb25zLm9yZGluYWwgJiYgb3B0aW9ucy5jb3VudCA9PT0gMDtcbiAgICAgIGNvbnN0IG5lZWRzQ29udGV4dEhhbmRsaW5nID0gb3B0aW9ucy5jb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgKGlzU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgfHwgdHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ251bWJlcicpICYmIG9wdGlvbnMuY29udGV4dCAhPT0gJyc7XG4gICAgICBjb25zdCBjb2RlcyA9IG9wdGlvbnMubG5ncyA/IG9wdGlvbnMubG5ncyA6IHRoaXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkob3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSwgb3B0aW9ucy5mYWxsYmFja0xuZyk7XG4gICAgICBuYW1lc3BhY2VzLmZvckVhY2gobnMgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkTG9va3VwKGZvdW5kKSkgcmV0dXJuO1xuICAgICAgICB1c2VkTlMgPSBucztcbiAgICAgICAgaWYgKCFjaGVja2VkTG9hZGVkRm9yW2Ake2NvZGVzWzBdfS0ke25zfWBdICYmIHRoaXMudXRpbHM/Lmhhc0xvYWRlZE5hbWVzcGFjZSAmJiAhdGhpcy51dGlscz8uaGFzTG9hZGVkTmFtZXNwYWNlKHVzZWROUykpIHtcbiAgICAgICAgICBjaGVja2VkTG9hZGVkRm9yW2Ake2NvZGVzWzBdfS0ke25zfWBdID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGBrZXkgXCIke3VzZWRLZXl9XCIgZm9yIGxhbmd1YWdlcyBcIiR7Y29kZXMuam9pbignLCAnKX1cIiB3b24ndCBnZXQgcmVzb2x2ZWQgYXMgbmFtZXNwYWNlIFwiJHt1c2VkTlN9XCIgd2FzIG5vdCB5ZXQgbG9hZGVkYCwgJ1RoaXMgbWVhbnMgc29tZXRoaW5nIElTIFdST05HIGluIHlvdXIgc2V0dXAuIFlvdSBhY2Nlc3MgdGhlIHQgZnVuY3Rpb24gYmVmb3JlIGkxOG5leHQuaW5pdCAvIGkxOG5leHQubG9hZE5hbWVzcGFjZSAvIGkxOG5leHQuY2hhbmdlTGFuZ3VhZ2Ugd2FzIGRvbmUuIFdhaXQgZm9yIHRoZSBjYWxsYmFjayBvciBQcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGFjY2Vzc2luZyBpdCEhIScpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVzLmZvckVhY2goY29kZSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcbiAgICAgICAgICB1c2VkTG5nID0gY29kZTtcbiAgICAgICAgICBjb25zdCBmaW5hbEtleXMgPSBba2V5XTtcbiAgICAgICAgICBpZiAodGhpcy5pMThuRm9ybWF0Py5hZGRMb29rdXBLZXlzKSB7XG4gICAgICAgICAgICB0aGlzLmkxOG5Gb3JtYXQuYWRkTG9va3VwS2V5cyhmaW5hbEtleXMsIGtleSwgY29kZSwgbnMsIG9wdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGx1cmFsU3VmZml4O1xuICAgICAgICAgICAgaWYgKG5lZWRzUGx1cmFsSGFuZGxpbmcpIHBsdXJhbFN1ZmZpeCA9IHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4KGNvZGUsIG9wdGlvbnMuY291bnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgemVyb1N1ZmZpeCA9IGAke3RoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3J9emVyb2A7XG4gICAgICAgICAgICBjb25zdCBvcmRpbmFsUHJlZml4ID0gYCR7dGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcn1vcmRpbmFsJHt0aGlzLm9wdGlvbnMucGx1cmFsU2VwYXJhdG9yfWA7XG4gICAgICAgICAgICBpZiAobmVlZHNQbHVyYWxIYW5kbGluZykge1xuICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChrZXkgKyBwbHVyYWxTdWZmaXgpO1xuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vcmRpbmFsICYmIHBsdXJhbFN1ZmZpeC5pbmRleE9mKG9yZGluYWxQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goa2V5ICsgcGx1cmFsU3VmZml4LnJlcGxhY2Uob3JkaW5hbFByZWZpeCwgdGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChuZWVkc1plcm9TdWZmaXhMb29rdXApIHtcbiAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChrZXkgKyB6ZXJvU3VmZml4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5lZWRzQ29udGV4dEhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRLZXkgPSBgJHtrZXl9JHt0aGlzLm9wdGlvbnMuY29udGV4dFNlcGFyYXRvcn0ke29wdGlvbnMuY29udGV4dH1gO1xuICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5KTtcbiAgICAgICAgICAgICAgaWYgKG5lZWRzUGx1cmFsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5ICsgcGx1cmFsU3VmZml4KTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vcmRpbmFsICYmIHBsdXJhbFN1ZmZpeC5pbmRleE9mKG9yZGluYWxQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5ICsgcGx1cmFsU3VmZml4LnJlcGxhY2Uob3JkaW5hbFByZWZpeCwgdGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmVlZHNaZXJvU3VmZml4TG9va3VwKSB7XG4gICAgICAgICAgICAgICAgICBmaW5hbEtleXMucHVzaChjb250ZXh0S2V5ICsgemVyb1N1ZmZpeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBwb3NzaWJsZUtleTtcbiAgICAgICAgICB3aGlsZSAocG9zc2libGVLZXkgPSBmaW5hbEtleXMucG9wKCkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkTG9va3VwKGZvdW5kKSkge1xuICAgICAgICAgICAgICBleGFjdFVzZWRLZXkgPSBwb3NzaWJsZUtleTtcbiAgICAgICAgICAgICAgZm91bmQgPSB0aGlzLmdldFJlc291cmNlKGNvZGUsIG5zLCBwb3NzaWJsZUtleSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXM6IGZvdW5kLFxuICAgICAgdXNlZEtleSxcbiAgICAgIGV4YWN0VXNlZEtleSxcbiAgICAgIHVzZWRMbmcsXG4gICAgICB1c2VkTlNcbiAgICB9O1xuICB9XG4gIGlzVmFsaWRMb29rdXAocmVzKSB7XG4gICAgcmV0dXJuIHJlcyAhPT0gdW5kZWZpbmVkICYmICEoIXRoaXMub3B0aW9ucy5yZXR1cm5OdWxsICYmIHJlcyA9PT0gbnVsbCkgJiYgISghdGhpcy5vcHRpb25zLnJldHVybkVtcHR5U3RyaW5nICYmIHJlcyA9PT0gJycpO1xuICB9XG4gIGdldFJlc291cmNlKGNvZGUsIG5zLCBrZXkpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgaWYgKHRoaXMuaTE4bkZvcm1hdD8uZ2V0UmVzb3VyY2UpIHJldHVybiB0aGlzLmkxOG5Gb3JtYXQuZ2V0UmVzb3VyY2UoY29kZSwgbnMsIGtleSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMucmVzb3VyY2VTdG9yZS5nZXRSZXNvdXJjZShjb2RlLCBucywga2V5LCBvcHRpb25zKTtcbiAgfVxuICBnZXRVc2VkUGFyYW1zRGV0YWlscygpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgY29uc3Qgb3B0aW9uc0tleXMgPSBbJ2RlZmF1bHRWYWx1ZScsICdvcmRpbmFsJywgJ2NvbnRleHQnLCAncmVwbGFjZScsICdsbmcnLCAnbG5ncycsICdmYWxsYmFja0xuZycsICducycsICdrZXlTZXBhcmF0b3InLCAnbnNTZXBhcmF0b3InLCAncmV0dXJuT2JqZWN0cycsICdyZXR1cm5EZXRhaWxzJywgJ2pvaW5BcnJheXMnLCAncG9zdFByb2Nlc3MnLCAnaW50ZXJwb2xhdGlvbiddO1xuICAgIGNvbnN0IHVzZU9wdGlvbnNSZXBsYWNlRm9yRGF0YSA9IG9wdGlvbnMucmVwbGFjZSAmJiAhaXNTdHJpbmcob3B0aW9ucy5yZXBsYWNlKTtcbiAgICBsZXQgZGF0YSA9IHVzZU9wdGlvbnNSZXBsYWNlRm9yRGF0YSA/IG9wdGlvbnMucmVwbGFjZSA6IG9wdGlvbnM7XG4gICAgaWYgKHVzZU9wdGlvbnNSZXBsYWNlRm9yRGF0YSAmJiB0eXBlb2Ygb3B0aW9ucy5jb3VudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuY291bnQgPSBvcHRpb25zLmNvdW50O1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcykge1xuICAgICAgZGF0YSA9IHtcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyxcbiAgICAgICAgLi4uZGF0YVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCF1c2VPcHRpb25zUmVwbGFjZUZvckRhdGEpIHtcbiAgICAgIGRhdGEgPSB7XG4gICAgICAgIC4uLmRhdGFcbiAgICAgIH07XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBvcHRpb25zS2V5cykge1xuICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBzdGF0aWMgaGFzRGVmYXVsdFZhbHVlKG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmVmaXggPSAnZGVmYXVsdFZhbHVlJztcbiAgICBmb3IgKGNvbnN0IG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIG9wdGlvbikgJiYgcHJlZml4ID09PSBvcHRpb24uc3Vic3RyaW5nKDAsIHByZWZpeC5sZW5ndGgpICYmIHVuZGVmaW5lZCAhPT0gb3B0aW9uc1tvcHRpb25dKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuY2xhc3MgTGFuZ3VhZ2VVdGlsIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdXBwb3J0ZWRMbmdzID0gdGhpcy5vcHRpb25zLnN1cHBvcnRlZExuZ3MgfHwgZmFsc2U7XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnbGFuZ3VhZ2VVdGlscycpO1xuICB9XG4gIGdldFNjcmlwdFBhcnRGcm9tQ29kZShjb2RlKSB7XG4gICAgY29kZSA9IGdldENsZWFuZWRDb2RlKGNvZGUpO1xuICAgIGlmICghY29kZSB8fCBjb2RlLmluZGV4T2YoJy0nKSA8IDApIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHAgPSBjb2RlLnNwbGl0KCctJyk7XG4gICAgaWYgKHAubGVuZ3RoID09PSAyKSByZXR1cm4gbnVsbDtcbiAgICBwLnBvcCgpO1xuICAgIGlmIChwW3AubGVuZ3RoIC0gMV0udG9Mb3dlckNhc2UoKSA9PT0gJ3gnKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUocC5qb2luKCctJykpO1xuICB9XG4gIGdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpIHtcbiAgICBjb2RlID0gZ2V0Q2xlYW5lZENvZGUoY29kZSk7XG4gICAgaWYgKCFjb2RlIHx8IGNvZGUuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuIGNvZGU7XG4gICAgY29uc3QgcCA9IGNvZGUuc3BsaXQoJy0nKTtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUocFswXSk7XG4gIH1cbiAgZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpIHtcbiAgICBpZiAoaXNTdHJpbmcoY29kZSkgJiYgY29kZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgbGV0IGZvcm1hdHRlZENvZGU7XG4gICAgICB0cnkge1xuICAgICAgICBmb3JtYXR0ZWRDb2RlID0gSW50bC5nZXRDYW5vbmljYWxMb2NhbGVzKGNvZGUpWzBdO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIGlmIChmb3JtYXR0ZWRDb2RlICYmIHRoaXMub3B0aW9ucy5sb3dlckNhc2VMbmcpIHtcbiAgICAgICAgZm9ybWF0dGVkQ29kZSA9IGZvcm1hdHRlZENvZGUudG9Mb3dlckNhc2UoKTtcbiAgICAgIH1cbiAgICAgIGlmIChmb3JtYXR0ZWRDb2RlKSByZXR1cm4gZm9ybWF0dGVkQ29kZTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubG93ZXJDYXNlTG5nKSB7XG4gICAgICAgIHJldHVybiBjb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29kZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGVhbkNvZGUgfHwgdGhpcy5vcHRpb25zLmxvd2VyQ2FzZUxuZyA/IGNvZGUudG9Mb3dlckNhc2UoKSA6IGNvZGU7XG4gIH1cbiAgaXNTdXBwb3J0ZWRDb2RlKGNvZGUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgPT09ICdsYW5ndWFnZU9ubHknIHx8IHRoaXMub3B0aW9ucy5ub25FeHBsaWNpdFN1cHBvcnRlZExuZ3MpIHtcbiAgICAgIGNvZGUgPSB0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gIXRoaXMuc3VwcG9ydGVkTG5ncyB8fCAhdGhpcy5zdXBwb3J0ZWRMbmdzLmxlbmd0aCB8fCB0aGlzLnN1cHBvcnRlZExuZ3MuaW5kZXhPZihjb2RlKSA+IC0xO1xuICB9XG4gIGdldEJlc3RNYXRjaEZyb21Db2Rlcyhjb2Rlcykge1xuICAgIGlmICghY29kZXMpIHJldHVybiBudWxsO1xuICAgIGxldCBmb3VuZDtcbiAgICBjb2Rlcy5mb3JFYWNoKGNvZGUgPT4ge1xuICAgICAgaWYgKGZvdW5kKSByZXR1cm47XG4gICAgICBjb25zdCBjbGVhbmVkTG5nID0gdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSk7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5zdXBwb3J0ZWRMbmdzIHx8IHRoaXMuaXNTdXBwb3J0ZWRDb2RlKGNsZWFuZWRMbmcpKSBmb3VuZCA9IGNsZWFuZWRMbmc7XG4gICAgfSk7XG4gICAgaWYgKCFmb3VuZCAmJiB0aGlzLm9wdGlvbnMuc3VwcG9ydGVkTG5ncykge1xuICAgICAgY29kZXMuZm9yRWFjaChjb2RlID0+IHtcbiAgICAgICAgaWYgKGZvdW5kKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGxuZ09ubHkgPSB0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpO1xuICAgICAgICBpZiAodGhpcy5pc1N1cHBvcnRlZENvZGUobG5nT25seSkpIHJldHVybiBmb3VuZCA9IGxuZ09ubHk7XG4gICAgICAgIGZvdW5kID0gdGhpcy5vcHRpb25zLnN1cHBvcnRlZExuZ3MuZmluZChzdXBwb3J0ZWRMbmcgPT4ge1xuICAgICAgICAgIGlmIChzdXBwb3J0ZWRMbmcgPT09IGxuZ09ubHkpIHJldHVybiBzdXBwb3J0ZWRMbmc7XG4gICAgICAgICAgaWYgKHN1cHBvcnRlZExuZy5pbmRleE9mKCctJykgPCAwICYmIGxuZ09ubHkuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChzdXBwb3J0ZWRMbmcuaW5kZXhPZignLScpID4gMCAmJiBsbmdPbmx5LmluZGV4T2YoJy0nKSA8IDAgJiYgc3VwcG9ydGVkTG5nLnN1YnN0cmluZygwLCBzdXBwb3J0ZWRMbmcuaW5kZXhPZignLScpKSA9PT0gbG5nT25seSkgcmV0dXJuIHN1cHBvcnRlZExuZztcbiAgICAgICAgICBpZiAoc3VwcG9ydGVkTG5nLmluZGV4T2YobG5nT25seSkgPT09IDAgJiYgbG5nT25seS5sZW5ndGggPiAxKSByZXR1cm4gc3VwcG9ydGVkTG5nO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IHRoaXMuZ2V0RmFsbGJhY2tDb2Rlcyh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcpWzBdO1xuICAgIHJldHVybiBmb3VuZDtcbiAgfVxuICBnZXRGYWxsYmFja0NvZGVzKGZhbGxiYWNrcywgY29kZSkge1xuICAgIGlmICghZmFsbGJhY2tzKSByZXR1cm4gW107XG4gICAgaWYgKHR5cGVvZiBmYWxsYmFja3MgPT09ICdmdW5jdGlvbicpIGZhbGxiYWNrcyA9IGZhbGxiYWNrcyhjb2RlKTtcbiAgICBpZiAoaXNTdHJpbmcoZmFsbGJhY2tzKSkgZmFsbGJhY2tzID0gW2ZhbGxiYWNrc107XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkgcmV0dXJuIGZhbGxiYWNrcztcbiAgICBpZiAoIWNvZGUpIHJldHVybiBmYWxsYmFja3MuZGVmYXVsdCB8fCBbXTtcbiAgICBsZXQgZm91bmQgPSBmYWxsYmFja3NbY29kZV07XG4gICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5nZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSldO1xuICAgIGlmICghZm91bmQpIGZvdW5kID0gZmFsbGJhY2tzW3RoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpXTtcbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrc1t0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpXTtcbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrcy5kZWZhdWx0O1xuICAgIHJldHVybiBmb3VuZCB8fCBbXTtcbiAgfVxuICB0b1Jlc29sdmVIaWVyYXJjaHkoY29kZSwgZmFsbGJhY2tDb2RlKSB7XG4gICAgY29uc3QgZmFsbGJhY2tDb2RlcyA9IHRoaXMuZ2V0RmFsbGJhY2tDb2RlcyhmYWxsYmFja0NvZGUgfHwgdGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nIHx8IFtdLCBjb2RlKTtcbiAgICBjb25zdCBjb2RlcyA9IFtdO1xuICAgIGNvbnN0IGFkZENvZGUgPSBjID0+IHtcbiAgICAgIGlmICghYykgcmV0dXJuO1xuICAgICAgaWYgKHRoaXMuaXNTdXBwb3J0ZWRDb2RlKGMpKSB7XG4gICAgICAgIGNvZGVzLnB1c2goYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGByZWplY3RpbmcgbGFuZ3VhZ2UgY29kZSBub3QgZm91bmQgaW4gc3VwcG9ydGVkTG5nczogJHtjfWApO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzU3RyaW5nKGNvZGUpICYmIChjb2RlLmluZGV4T2YoJy0nKSA+IC0xIHx8IGNvZGUuaW5kZXhPZignXycpID4gLTEpKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgIT09ICdsYW5ndWFnZU9ubHknKSBhZGRDb2RlKHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2xhbmd1YWdlT25seScgJiYgdGhpcy5vcHRpb25zLmxvYWQgIT09ICdjdXJyZW50T25seScpIGFkZENvZGUodGhpcy5nZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSkpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkICE9PSAnY3VycmVudE9ubHknKSBhZGRDb2RlKHRoaXMuZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSkpO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcoY29kZSkpIHtcbiAgICAgIGFkZENvZGUodGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSkpO1xuICAgIH1cbiAgICBmYWxsYmFja0NvZGVzLmZvckVhY2goZmMgPT4ge1xuICAgICAgaWYgKGNvZGVzLmluZGV4T2YoZmMpIDwgMCkgYWRkQ29kZSh0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShmYykpO1xuICAgIH0pO1xuICAgIHJldHVybiBjb2RlcztcbiAgfVxufVxuXG5jb25zdCBzdWZmaXhlc09yZGVyID0ge1xuICB6ZXJvOiAwLFxuICBvbmU6IDEsXG4gIHR3bzogMixcbiAgZmV3OiAzLFxuICBtYW55OiA0LFxuICBvdGhlcjogNVxufTtcbmNvbnN0IGR1bW15UnVsZSA9IHtcbiAgc2VsZWN0OiBjb3VudCA9PiBjb3VudCA9PT0gMSA/ICdvbmUnIDogJ290aGVyJyxcbiAgcmVzb2x2ZWRPcHRpb25zOiAoKSA9PiAoe1xuICAgIHBsdXJhbENhdGVnb3JpZXM6IFsnb25lJywgJ290aGVyJ11cbiAgfSlcbn07XG5jbGFzcyBQbHVyYWxSZXNvbHZlciB7XG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlVXRpbHMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdGhpcy5sYW5ndWFnZVV0aWxzID0gbGFuZ3VhZ2VVdGlscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ3BsdXJhbFJlc29sdmVyJyk7XG4gICAgdGhpcy5wbHVyYWxSdWxlc0NhY2hlID0ge307XG4gIH1cbiAgYWRkUnVsZShsbmcsIG9iaikge1xuICAgIHRoaXMucnVsZXNbbG5nXSA9IG9iajtcbiAgfVxuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMucGx1cmFsUnVsZXNDYWNoZSA9IHt9O1xuICB9XG4gIGdldFJ1bGUoY29kZSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBjb25zdCBjbGVhbmVkQ29kZSA9IGdldENsZWFuZWRDb2RlKGNvZGUgPT09ICdkZXYnID8gJ2VuJyA6IGNvZGUpO1xuICAgIGNvbnN0IHR5cGUgPSBvcHRpb25zLm9yZGluYWwgPyAnb3JkaW5hbCcgOiAnY2FyZGluYWwnO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgY2xlYW5lZENvZGUsXG4gICAgICB0eXBlXG4gICAgfSk7XG4gICAgaWYgKGNhY2hlS2V5IGluIHRoaXMucGx1cmFsUnVsZXNDYWNoZSkge1xuICAgICAgcmV0dXJuIHRoaXMucGx1cmFsUnVsZXNDYWNoZVtjYWNoZUtleV07XG4gICAgfVxuICAgIGxldCBydWxlO1xuICAgIHRyeSB7XG4gICAgICBydWxlID0gbmV3IEludGwuUGx1cmFsUnVsZXMoY2xlYW5lZENvZGUsIHtcbiAgICAgICAgdHlwZVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoIUludGwpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ05vIEludGwgc3VwcG9ydCwgcGxlYXNlIHVzZSBhbiBJbnRsIHBvbHlmaWxsIScpO1xuICAgICAgICByZXR1cm4gZHVtbXlSdWxlO1xuICAgICAgfVxuICAgICAgaWYgKCFjb2RlLm1hdGNoKC8tfF8vKSkgcmV0dXJuIGR1bW15UnVsZTtcbiAgICAgIGNvbnN0IGxuZ1BhcnQgPSB0aGlzLmxhbmd1YWdlVXRpbHMuZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSk7XG4gICAgICBydWxlID0gdGhpcy5nZXRSdWxlKGxuZ1BhcnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICB0aGlzLnBsdXJhbFJ1bGVzQ2FjaGVbY2FjaGVLZXldID0gcnVsZTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICBuZWVkc1BsdXJhbChjb2RlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGxldCBydWxlID0gdGhpcy5nZXRSdWxlKGNvZGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcnVsZSA9IHRoaXMuZ2V0UnVsZSgnZGV2Jywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJ1bGU/LnJlc29sdmVkT3B0aW9ucygpLnBsdXJhbENhdGVnb3JpZXMubGVuZ3RoID4gMTtcbiAgfVxuICBnZXRQbHVyYWxGb3Jtc09mS2V5KGNvZGUsIGtleSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICByZXR1cm4gdGhpcy5nZXRTdWZmaXhlcyhjb2RlLCBvcHRpb25zKS5tYXAoc3VmZml4ID0+IGAke2tleX0ke3N1ZmZpeH1gKTtcbiAgfVxuICBnZXRTdWZmaXhlcyhjb2RlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGxldCBydWxlID0gdGhpcy5nZXRSdWxlKGNvZGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcnVsZSA9IHRoaXMuZ2V0UnVsZSgnZGV2Jywgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gW107XG4gICAgcmV0dXJuIHJ1bGUucmVzb2x2ZWRPcHRpb25zKCkucGx1cmFsQ2F0ZWdvcmllcy5zb3J0KChwbHVyYWxDYXRlZ29yeTEsIHBsdXJhbENhdGVnb3J5MikgPT4gc3VmZml4ZXNPcmRlcltwbHVyYWxDYXRlZ29yeTFdIC0gc3VmZml4ZXNPcmRlcltwbHVyYWxDYXRlZ29yeTJdKS5tYXAocGx1cmFsQ2F0ZWdvcnkgPT4gYCR7dGhpcy5vcHRpb25zLnByZXBlbmR9JHtvcHRpb25zLm9yZGluYWwgPyBgb3JkaW5hbCR7dGhpcy5vcHRpb25zLnByZXBlbmR9YCA6ICcnfSR7cGx1cmFsQ2F0ZWdvcnl9YCk7XG4gIH1cbiAgZ2V0U3VmZml4KGNvZGUsIGNvdW50KSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGNvbnN0IHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSwgb3B0aW9ucyk7XG4gICAgaWYgKHJ1bGUpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLm9wdGlvbnMucHJlcGVuZH0ke29wdGlvbnMub3JkaW5hbCA/IGBvcmRpbmFsJHt0aGlzLm9wdGlvbnMucHJlcGVuZH1gIDogJyd9JHtydWxlLnNlbGVjdChjb3VudCl9YDtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIud2Fybihgbm8gcGx1cmFsIHJ1bGUgZm91bmQgZm9yOiAke2NvZGV9YCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3VmZml4KCdkZXYnLCBjb3VudCwgb3B0aW9ucyk7XG4gIH1cbn1cblxuY29uc3QgZGVlcEZpbmRXaXRoRGVmYXVsdHMgPSBmdW5jdGlvbiAoZGF0YSwgZGVmYXVsdERhdGEsIGtleSkge1xuICBsZXQga2V5U2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAnLic7XG4gIGxldCBpZ25vcmVKU09OU3RydWN0dXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB0cnVlO1xuICBsZXQgcGF0aCA9IGdldFBhdGhXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGtleSk7XG4gIGlmICghcGF0aCAmJiBpZ25vcmVKU09OU3RydWN0dXJlICYmIGlzU3RyaW5nKGtleSkpIHtcbiAgICBwYXRoID0gZGVlcEZpbmQoZGF0YSwga2V5LCBrZXlTZXBhcmF0b3IpO1xuICAgIGlmIChwYXRoID09PSB1bmRlZmluZWQpIHBhdGggPSBkZWVwRmluZChkZWZhdWx0RGF0YSwga2V5LCBrZXlTZXBhcmF0b3IpO1xuICB9XG4gIHJldHVybiBwYXRoO1xufTtcbmNvbnN0IHJlZ2V4U2FmZSA9IHZhbCA9PiB2YWwucmVwbGFjZSgvXFwkL2csICckJCQkJyk7XG5jbGFzcyBJbnRlcnBvbGF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnaW50ZXJwb2xhdG9yJyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmZvcm1hdCA9IG9wdGlvbnM/LmludGVycG9sYXRpb24/LmZvcm1hdCB8fCAodmFsdWUgPT4gdmFsdWUpO1xuICAgIHRoaXMuaW5pdChvcHRpb25zKTtcbiAgfVxuICBpbml0KCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBpZiAoIW9wdGlvbnMuaW50ZXJwb2xhdGlvbikgb3B0aW9ucy5pbnRlcnBvbGF0aW9uID0ge1xuICAgICAgZXNjYXBlVmFsdWU6IHRydWVcbiAgICB9O1xuICAgIGNvbnN0IHtcbiAgICAgIGVzY2FwZTogZXNjYXBlJDEsXG4gICAgICBlc2NhcGVWYWx1ZSxcbiAgICAgIHVzZVJhd1ZhbHVlVG9Fc2NhcGUsXG4gICAgICBwcmVmaXgsXG4gICAgICBwcmVmaXhFc2NhcGVkLFxuICAgICAgc3VmZml4LFxuICAgICAgc3VmZml4RXNjYXBlZCxcbiAgICAgIGZvcm1hdFNlcGFyYXRvcixcbiAgICAgIHVuZXNjYXBlU3VmZml4LFxuICAgICAgdW5lc2NhcGVQcmVmaXgsXG4gICAgICBuZXN0aW5nUHJlZml4LFxuICAgICAgbmVzdGluZ1ByZWZpeEVzY2FwZWQsXG4gICAgICBuZXN0aW5nU3VmZml4LFxuICAgICAgbmVzdGluZ1N1ZmZpeEVzY2FwZWQsXG4gICAgICBuZXN0aW5nT3B0aW9uc1NlcGFyYXRvcixcbiAgICAgIG1heFJlcGxhY2VzLFxuICAgICAgYWx3YXlzRm9ybWF0XG4gICAgfSA9IG9wdGlvbnMuaW50ZXJwb2xhdGlvbjtcbiAgICB0aGlzLmVzY2FwZSA9IGVzY2FwZSQxICE9PSB1bmRlZmluZWQgPyBlc2NhcGUkMSA6IGVzY2FwZTtcbiAgICB0aGlzLmVzY2FwZVZhbHVlID0gZXNjYXBlVmFsdWUgIT09IHVuZGVmaW5lZCA/IGVzY2FwZVZhbHVlIDogdHJ1ZTtcbiAgICB0aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUgPSB1c2VSYXdWYWx1ZVRvRXNjYXBlICE9PSB1bmRlZmluZWQgPyB1c2VSYXdWYWx1ZVRvRXNjYXBlIDogZmFsc2U7XG4gICAgdGhpcy5wcmVmaXggPSBwcmVmaXggPyByZWdleEVzY2FwZShwcmVmaXgpIDogcHJlZml4RXNjYXBlZCB8fCAne3snO1xuICAgIHRoaXMuc3VmZml4ID0gc3VmZml4ID8gcmVnZXhFc2NhcGUoc3VmZml4KSA6IHN1ZmZpeEVzY2FwZWQgfHwgJ319JztcbiAgICB0aGlzLmZvcm1hdFNlcGFyYXRvciA9IGZvcm1hdFNlcGFyYXRvciB8fCAnLCc7XG4gICAgdGhpcy51bmVzY2FwZVByZWZpeCA9IHVuZXNjYXBlU3VmZml4ID8gJycgOiB1bmVzY2FwZVByZWZpeCB8fCAnLSc7XG4gICAgdGhpcy51bmVzY2FwZVN1ZmZpeCA9IHRoaXMudW5lc2NhcGVQcmVmaXggPyAnJyA6IHVuZXNjYXBlU3VmZml4IHx8ICcnO1xuICAgIHRoaXMubmVzdGluZ1ByZWZpeCA9IG5lc3RpbmdQcmVmaXggPyByZWdleEVzY2FwZShuZXN0aW5nUHJlZml4KSA6IG5lc3RpbmdQcmVmaXhFc2NhcGVkIHx8IHJlZ2V4RXNjYXBlKCckdCgnKTtcbiAgICB0aGlzLm5lc3RpbmdTdWZmaXggPSBuZXN0aW5nU3VmZml4ID8gcmVnZXhFc2NhcGUobmVzdGluZ1N1ZmZpeCkgOiBuZXN0aW5nU3VmZml4RXNjYXBlZCB8fCByZWdleEVzY2FwZSgnKScpO1xuICAgIHRoaXMubmVzdGluZ09wdGlvbnNTZXBhcmF0b3IgPSBuZXN0aW5nT3B0aW9uc1NlcGFyYXRvciB8fCAnLCc7XG4gICAgdGhpcy5tYXhSZXBsYWNlcyA9IG1heFJlcGxhY2VzIHx8IDEwMDA7XG4gICAgdGhpcy5hbHdheXNGb3JtYXQgPSBhbHdheXNGb3JtYXQgIT09IHVuZGVmaW5lZCA/IGFsd2F5c0Zvcm1hdCA6IGZhbHNlO1xuICAgIHRoaXMucmVzZXRSZWdFeHAoKTtcbiAgfVxuICByZXNldCgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zKSB0aGlzLmluaXQodGhpcy5vcHRpb25zKTtcbiAgfVxuICByZXNldFJlZ0V4cCgpIHtcbiAgICBjb25zdCBnZXRPclJlc2V0UmVnRXhwID0gKGV4aXN0aW5nUmVnRXhwLCBwYXR0ZXJuKSA9PiB7XG4gICAgICBpZiAoZXhpc3RpbmdSZWdFeHA/LnNvdXJjZSA9PT0gcGF0dGVybikge1xuICAgICAgICBleGlzdGluZ1JlZ0V4cC5sYXN0SW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdSZWdFeHA7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnZycpO1xuICAgIH07XG4gICAgdGhpcy5yZWdleHAgPSBnZXRPclJlc2V0UmVnRXhwKHRoaXMucmVnZXhwLCBgJHt0aGlzLnByZWZpeH0oLis/KSR7dGhpcy5zdWZmaXh9YCk7XG4gICAgdGhpcy5yZWdleHBVbmVzY2FwZSA9IGdldE9yUmVzZXRSZWdFeHAodGhpcy5yZWdleHBVbmVzY2FwZSwgYCR7dGhpcy5wcmVmaXh9JHt0aGlzLnVuZXNjYXBlUHJlZml4fSguKz8pJHt0aGlzLnVuZXNjYXBlU3VmZml4fSR7dGhpcy5zdWZmaXh9YCk7XG4gICAgdGhpcy5uZXN0aW5nUmVnZXhwID0gZ2V0T3JSZXNldFJlZ0V4cCh0aGlzLm5lc3RpbmdSZWdleHAsIGAke3RoaXMubmVzdGluZ1ByZWZpeH0oLis/KSR7dGhpcy5uZXN0aW5nU3VmZml4fWApO1xuICB9XG4gIGludGVycG9sYXRlKHN0ciwgZGF0YSwgbG5nLCBvcHRpb25zKSB7XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCB2YWx1ZTtcbiAgICBsZXQgcmVwbGFjZXM7XG4gICAgY29uc3QgZGVmYXVsdERhdGEgPSB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24gJiYgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyB8fCB7fTtcbiAgICBjb25zdCBoYW5kbGVGb3JtYXQgPSBrZXkgPT4ge1xuICAgICAgaWYgKGtleS5pbmRleE9mKHRoaXMuZm9ybWF0U2VwYXJhdG9yKSA8IDApIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGRlZXBGaW5kV2l0aERlZmF1bHRzKGRhdGEsIGRlZmF1bHREYXRhLCBrZXksIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IsIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWx3YXlzRm9ybWF0ID8gdGhpcy5mb3JtYXQocGF0aCwgdW5kZWZpbmVkLCBsbmcsIHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgaW50ZXJwb2xhdGlvbmtleToga2V5XG4gICAgICAgIH0pIDogcGF0aDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHAgPSBrZXkuc3BsaXQodGhpcy5mb3JtYXRTZXBhcmF0b3IpO1xuICAgICAgY29uc3QgayA9IHAuc2hpZnQoKS50cmltKCk7XG4gICAgICBjb25zdCBmID0gcC5qb2luKHRoaXMuZm9ybWF0U2VwYXJhdG9yKS50cmltKCk7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXQoZGVlcEZpbmRXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGssIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IsIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlKSwgZiwgbG5nLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIGludGVycG9sYXRpb25rZXk6IGtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5yZXNldFJlZ0V4cCgpO1xuICAgIGNvbnN0IG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciA9IG9wdGlvbnM/Lm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciB8fCB0aGlzLm9wdGlvbnMubWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyO1xuICAgIGNvbnN0IHNraXBPblZhcmlhYmxlcyA9IG9wdGlvbnM/LmludGVycG9sYXRpb24/LnNraXBPblZhcmlhYmxlcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyA6IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcztcbiAgICBjb25zdCB0b2RvcyA9IFt7XG4gICAgICByZWdleDogdGhpcy5yZWdleHBVbmVzY2FwZSxcbiAgICAgIHNhZmVWYWx1ZTogdmFsID0+IHJlZ2V4U2FmZSh2YWwpXG4gICAgfSwge1xuICAgICAgcmVnZXg6IHRoaXMucmVnZXhwLFxuICAgICAgc2FmZVZhbHVlOiB2YWwgPT4gdGhpcy5lc2NhcGVWYWx1ZSA/IHJlZ2V4U2FmZSh0aGlzLmVzY2FwZSh2YWwpKSA6IHJlZ2V4U2FmZSh2YWwpXG4gICAgfV07XG4gICAgdG9kb3MuZm9yRWFjaCh0b2RvID0+IHtcbiAgICAgIHJlcGxhY2VzID0gMDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHRvZG8ucmVnZXguZXhlYyhzdHIpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZWRWYXIgPSBtYXRjaFsxXS50cmltKCk7XG4gICAgICAgIHZhbHVlID0gaGFuZGxlRm9ybWF0KG1hdGNoZWRWYXIpO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyKHN0ciwgbWF0Y2gsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdmFsdWUgPSBpc1N0cmluZyh0ZW1wKSA/IHRlbXAgOiAnJztcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIG1hdGNoZWRWYXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2tpcE9uVmFyaWFibGVzKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oYG1pc3NlZCB0byBwYXNzIGluIHZhcmlhYmxlICR7bWF0Y2hlZFZhcn0gZm9yIGludGVycG9sYXRpbmcgJHtzdHJ9YCk7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpbmcodmFsdWUpICYmICF0aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUpIHtcbiAgICAgICAgICB2YWx1ZSA9IG1ha2VTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNhZmVWYWx1ZSA9IHRvZG8uc2FmZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHNhZmVWYWx1ZSk7XG4gICAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgICB0b2RvLnJlZ2V4Lmxhc3RJbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgdG9kby5yZWdleC5sYXN0SW5kZXggLT0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvZG8ucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXBsYWNlcysrO1xuICAgICAgICBpZiAocmVwbGFjZXMgPj0gdGhpcy5tYXhSZXBsYWNlcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBuZXN0KHN0ciwgZmMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCB2YWx1ZTtcbiAgICBsZXQgY2xvbmVkT3B0aW9ucztcbiAgICBjb25zdCBoYW5kbGVIYXNPcHRpb25zID0gKGtleSwgaW5oZXJpdGVkT3B0aW9ucykgPT4ge1xuICAgICAgY29uc3Qgc2VwID0gdGhpcy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvcjtcbiAgICAgIGlmIChrZXkuaW5kZXhPZihzZXApIDwgMCkgcmV0dXJuIGtleTtcbiAgICAgIGNvbnN0IGMgPSBrZXkuc3BsaXQobmV3IFJlZ0V4cChgJHtzZXB9WyBdKntgKSk7XG4gICAgICBsZXQgb3B0aW9uc1N0cmluZyA9IGB7JHtjWzFdfWA7XG4gICAgICBrZXkgPSBjWzBdO1xuICAgICAgb3B0aW9uc1N0cmluZyA9IHRoaXMuaW50ZXJwb2xhdGUob3B0aW9uc1N0cmluZywgY2xvbmVkT3B0aW9ucyk7XG4gICAgICBjb25zdCBtYXRjaGVkU2luZ2xlUXVvdGVzID0gb3B0aW9uc1N0cmluZy5tYXRjaCgvJy9nKTtcbiAgICAgIGNvbnN0IG1hdGNoZWREb3VibGVRdW90ZXMgPSBvcHRpb25zU3RyaW5nLm1hdGNoKC9cIi9nKTtcbiAgICAgIGlmICgobWF0Y2hlZFNpbmdsZVF1b3Rlcz8ubGVuZ3RoID8/IDApICUgMiA9PT0gMCAmJiAhbWF0Y2hlZERvdWJsZVF1b3RlcyB8fCBtYXRjaGVkRG91YmxlUXVvdGVzLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgb3B0aW9uc1N0cmluZyA9IG9wdGlvbnNTdHJpbmcucmVwbGFjZSgvJy9nLCAnXCInKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZE9wdGlvbnMgPSBKU09OLnBhcnNlKG9wdGlvbnNTdHJpbmcpO1xuICAgICAgICBpZiAoaW5oZXJpdGVkT3B0aW9ucykgY2xvbmVkT3B0aW9ucyA9IHtcbiAgICAgICAgICAuLi5pbmhlcml0ZWRPcHRpb25zLFxuICAgICAgICAgIC4uLmNsb25lZE9wdGlvbnNcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgZmFpbGVkIHBhcnNpbmcgb3B0aW9ucyBzdHJpbmcgaW4gbmVzdGluZyBmb3Iga2V5ICR7a2V5fWAsIGUpO1xuICAgICAgICByZXR1cm4gYCR7a2V5fSR7c2VwfSR7b3B0aW9uc1N0cmluZ31gO1xuICAgICAgfVxuICAgICAgaWYgKGNsb25lZE9wdGlvbnMuZGVmYXVsdFZhbHVlICYmIGNsb25lZE9wdGlvbnMuZGVmYXVsdFZhbHVlLmluZGV4T2YodGhpcy5wcmVmaXgpID4gLTEpIGRlbGV0ZSBjbG9uZWRPcHRpb25zLmRlZmF1bHRWYWx1ZTtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfTtcbiAgICB3aGlsZSAobWF0Y2ggPSB0aGlzLm5lc3RpbmdSZWdleHAuZXhlYyhzdHIpKSB7XG4gICAgICBsZXQgZm9ybWF0dGVycyA9IFtdO1xuICAgICAgY2xvbmVkT3B0aW9ucyA9IHtcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfTtcbiAgICAgIGNsb25lZE9wdGlvbnMgPSBjbG9uZWRPcHRpb25zLnJlcGxhY2UgJiYgIWlzU3RyaW5nKGNsb25lZE9wdGlvbnMucmVwbGFjZSkgPyBjbG9uZWRPcHRpb25zLnJlcGxhY2UgOiBjbG9uZWRPcHRpb25zO1xuICAgICAgY2xvbmVkT3B0aW9ucy5hcHBseVBvc3RQcm9jZXNzb3IgPSBmYWxzZTtcbiAgICAgIGRlbGV0ZSBjbG9uZWRPcHRpb25zLmRlZmF1bHRWYWx1ZTtcbiAgICAgIGxldCBkb1JlZHVjZSA9IGZhbHNlO1xuICAgICAgaWYgKG1hdGNoWzBdLmluZGV4T2YodGhpcy5mb3JtYXRTZXBhcmF0b3IpICE9PSAtMSAmJiAhL3suKn0vLnRlc3QobWF0Y2hbMV0pKSB7XG4gICAgICAgIGNvbnN0IHIgPSBtYXRjaFsxXS5zcGxpdCh0aGlzLmZvcm1hdFNlcGFyYXRvcikubWFwKGVsZW0gPT4gZWxlbS50cmltKCkpO1xuICAgICAgICBtYXRjaFsxXSA9IHIuc2hpZnQoKTtcbiAgICAgICAgZm9ybWF0dGVycyA9IHI7XG4gICAgICAgIGRvUmVkdWNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gZmMoaGFuZGxlSGFzT3B0aW9ucy5jYWxsKHRoaXMsIG1hdGNoWzFdLnRyaW0oKSwgY2xvbmVkT3B0aW9ucyksIGNsb25lZE9wdGlvbnMpO1xuICAgICAgaWYgKHZhbHVlICYmIG1hdGNoWzBdID09PSBzdHIgJiYgIWlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgaWYgKCFpc1N0cmluZyh2YWx1ZSkpIHZhbHVlID0gbWFrZVN0cmluZyh2YWx1ZSk7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oYG1pc3NlZCB0byByZXNvbHZlICR7bWF0Y2hbMV19IGZvciBuZXN0aW5nICR7c3RyfWApO1xuICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgICAgaWYgKGRvUmVkdWNlKSB7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0dGVycy5yZWR1Y2UoKHYsIGYpID0+IHRoaXMuZm9ybWF0KHYsIGYsIG9wdGlvbnMubG5nLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICBpbnRlcnBvbGF0aW9ua2V5OiBtYXRjaFsxXS50cmltKClcbiAgICAgICAgfSksIHZhbHVlLnRyaW0oKSk7XG4gICAgICB9XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShtYXRjaFswXSwgdmFsdWUpO1xuICAgICAgdGhpcy5yZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5jb25zdCBwYXJzZUZvcm1hdFN0ciA9IGZvcm1hdFN0ciA9PiB7XG4gIGxldCBmb3JtYXROYW1lID0gZm9ybWF0U3RyLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICBjb25zdCBmb3JtYXRPcHRpb25zID0ge307XG4gIGlmIChmb3JtYXRTdHIuaW5kZXhPZignKCcpID4gLTEpIHtcbiAgICBjb25zdCBwID0gZm9ybWF0U3RyLnNwbGl0KCcoJyk7XG4gICAgZm9ybWF0TmFtZSA9IHBbMF0udG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgY29uc3Qgb3B0U3RyID0gcFsxXS5zdWJzdHJpbmcoMCwgcFsxXS5sZW5ndGggLSAxKTtcbiAgICBpZiAoZm9ybWF0TmFtZSA9PT0gJ2N1cnJlbmN5JyAmJiBvcHRTdHIuaW5kZXhPZignOicpIDwgMCkge1xuICAgICAgaWYgKCFmb3JtYXRPcHRpb25zLmN1cnJlbmN5KSBmb3JtYXRPcHRpb25zLmN1cnJlbmN5ID0gb3B0U3RyLnRyaW0oKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdE5hbWUgPT09ICdyZWxhdGl2ZXRpbWUnICYmIG9wdFN0ci5pbmRleE9mKCc6JykgPCAwKSB7XG4gICAgICBpZiAoIWZvcm1hdE9wdGlvbnMucmFuZ2UpIGZvcm1hdE9wdGlvbnMucmFuZ2UgPSBvcHRTdHIudHJpbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvcHRzID0gb3B0U3RyLnNwbGl0KCc7Jyk7XG4gICAgICBvcHRzLmZvckVhY2gob3B0ID0+IHtcbiAgICAgICAgaWYgKG9wdCkge1xuICAgICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gb3B0LnNwbGl0KCc6Jyk7XG4gICAgICAgICAgY29uc3QgdmFsID0gcmVzdC5qb2luKCc6JykudHJpbSgpLnJlcGxhY2UoL14nK3wnKyQvZywgJycpO1xuICAgICAgICAgIGNvbnN0IHRyaW1tZWRLZXkgPSBrZXkudHJpbSgpO1xuICAgICAgICAgIGlmICghZm9ybWF0T3B0aW9uc1t0cmltbWVkS2V5XSkgZm9ybWF0T3B0aW9uc1t0cmltbWVkS2V5XSA9IHZhbDtcbiAgICAgICAgICBpZiAodmFsID09PSAnZmFsc2UnKSBmb3JtYXRPcHRpb25zW3RyaW1tZWRLZXldID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHZhbCA9PT0gJ3RydWUnKSBmb3JtYXRPcHRpb25zW3RyaW1tZWRLZXldID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoIWlzTmFOKHZhbCkpIGZvcm1hdE9wdGlvbnNbdHJpbW1lZEtleV0gPSBwYXJzZUludCh2YWwsIDEwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgZm9ybWF0TmFtZSxcbiAgICBmb3JtYXRPcHRpb25zXG4gIH07XG59O1xuY29uc3QgY3JlYXRlQ2FjaGVkRm9ybWF0dGVyID0gZm4gPT4ge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gKHZhbCwgbG5nLCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IG9wdEZvckNhY2hlID0gb3B0aW9ucztcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmludGVycG9sYXRpb25rZXkgJiYgb3B0aW9ucy5mb3JtYXRQYXJhbXMgJiYgb3B0aW9ucy5mb3JtYXRQYXJhbXNbb3B0aW9ucy5pbnRlcnBvbGF0aW9ua2V5XSAmJiBvcHRpb25zW29wdGlvbnMuaW50ZXJwb2xhdGlvbmtleV0pIHtcbiAgICAgIG9wdEZvckNhY2hlID0ge1xuICAgICAgICAuLi5vcHRGb3JDYWNoZSxcbiAgICAgICAgW29wdGlvbnMuaW50ZXJwb2xhdGlvbmtleV06IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gbG5nICsgSlNPTi5zdHJpbmdpZnkob3B0Rm9yQ2FjaGUpO1xuICAgIGxldCBmb3JtYXR0ZXIgPSBjYWNoZVtrZXldO1xuICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICBmb3JtYXR0ZXIgPSBmbihnZXRDbGVhbmVkQ29kZShsbmcpLCBvcHRpb25zKTtcbiAgICAgIGNhY2hlW2tleV0gPSBmb3JtYXR0ZXI7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXR0ZXIodmFsKTtcbiAgfTtcbn07XG5jbGFzcyBGb3JtYXR0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnZm9ybWF0dGVyJyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmZvcm1hdHMgPSB7XG4gICAgICBudW1iZXI6IGNyZWF0ZUNhY2hlZEZvcm1hdHRlcigobG5nLCBvcHQpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxuZywge1xuICAgICAgICAgIC4uLm9wdFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZhbCA9PiBmb3JtYXR0ZXIuZm9ybWF0KHZhbCk7XG4gICAgICB9KSxcbiAgICAgIGN1cnJlbmN5OiBjcmVhdGVDYWNoZWRGb3JtYXR0ZXIoKGxuZywgb3B0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHQsXG4gICAgICAgICAgc3R5bGU6ICdjdXJyZW5jeSdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwpO1xuICAgICAgfSksXG4gICAgICBkYXRldGltZTogY3JlYXRlQ2FjaGVkRm9ybWF0dGVyKChsbmcsIG9wdCkgPT4ge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwpO1xuICAgICAgfSksXG4gICAgICByZWxhdGl2ZXRpbWU6IGNyZWF0ZUNhY2hlZEZvcm1hdHRlcigobG5nLCBvcHQpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KGxuZywge1xuICAgICAgICAgIC4uLm9wdFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZhbCA9PiBmb3JtYXR0ZXIuZm9ybWF0KHZhbCwgb3B0LnJhbmdlIHx8ICdkYXknKTtcbiAgICAgIH0pLFxuICAgICAgbGlzdDogY3JlYXRlQ2FjaGVkRm9ybWF0dGVyKChsbmcsIG9wdCkgPT4ge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5MaXN0Rm9ybWF0KGxuZywge1xuICAgICAgICAgIC4uLm9wdFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZhbCA9PiBmb3JtYXR0ZXIuZm9ybWF0KHZhbCk7XG4gICAgICB9KVxuICAgIH07XG4gICAgdGhpcy5pbml0KG9wdGlvbnMpO1xuICB9XG4gIGluaXQoc2VydmljZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgaW50ZXJwb2xhdGlvbjoge31cbiAgICB9O1xuICAgIHRoaXMuZm9ybWF0U2VwYXJhdG9yID0gb3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdFNlcGFyYXRvciB8fCAnLCc7XG4gIH1cbiAgYWRkKG5hbWUsIGZjKSB7XG4gICAgdGhpcy5mb3JtYXRzW25hbWUudG9Mb3dlckNhc2UoKS50cmltKCldID0gZmM7XG4gIH1cbiAgYWRkQ2FjaGVkKG5hbWUsIGZjKSB7XG4gICAgdGhpcy5mb3JtYXRzW25hbWUudG9Mb3dlckNhc2UoKS50cmltKCldID0gY3JlYXRlQ2FjaGVkRm9ybWF0dGVyKGZjKTtcbiAgfVxuICBmb3JtYXQodmFsdWUsIGZvcm1hdCwgbG5nKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgIGNvbnN0IGZvcm1hdHMgPSBmb3JtYXQuc3BsaXQodGhpcy5mb3JtYXRTZXBhcmF0b3IpO1xuICAgIGlmIChmb3JtYXRzLmxlbmd0aCA+IDEgJiYgZm9ybWF0c1swXS5pbmRleE9mKCcoJykgPiAxICYmIGZvcm1hdHNbMF0uaW5kZXhPZignKScpIDwgMCAmJiBmb3JtYXRzLmZpbmQoZiA9PiBmLmluZGV4T2YoJyknKSA+IC0xKSkge1xuICAgICAgY29uc3QgbGFzdEluZGV4ID0gZm9ybWF0cy5maW5kSW5kZXgoZiA9PiBmLmluZGV4T2YoJyknKSA+IC0xKTtcbiAgICAgIGZvcm1hdHNbMF0gPSBbZm9ybWF0c1swXSwgLi4uZm9ybWF0cy5zcGxpY2UoMSwgbGFzdEluZGV4KV0uam9pbih0aGlzLmZvcm1hdFNlcGFyYXRvcik7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGZvcm1hdHMucmVkdWNlKChtZW0sIGYpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZm9ybWF0TmFtZSxcbiAgICAgICAgZm9ybWF0T3B0aW9uc1xuICAgICAgfSA9IHBhcnNlRm9ybWF0U3RyKGYpO1xuICAgICAgaWYgKHRoaXMuZm9ybWF0c1tmb3JtYXROYW1lXSkge1xuICAgICAgICBsZXQgZm9ybWF0dGVkID0gbWVtO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHZhbE9wdGlvbnMgPSBvcHRpb25zPy5mb3JtYXRQYXJhbXM/LltvcHRpb25zLmludGVycG9sYXRpb25rZXldIHx8IHt9O1xuICAgICAgICAgIGNvbnN0IGwgPSB2YWxPcHRpb25zLmxvY2FsZSB8fCB2YWxPcHRpb25zLmxuZyB8fCBvcHRpb25zLmxvY2FsZSB8fCBvcHRpb25zLmxuZyB8fCBsbmc7XG4gICAgICAgICAgZm9ybWF0dGVkID0gdGhpcy5mb3JtYXRzW2Zvcm1hdE5hbWVdKG1lbSwgbCwge1xuICAgICAgICAgICAgLi4uZm9ybWF0T3B0aW9ucyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAuLi52YWxPcHRpb25zXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIud2FybihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oYHRoZXJlIHdhcyBubyBmb3JtYXQgZnVuY3Rpb24gZm9yICR7Zm9ybWF0TmFtZX1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZW07XG4gICAgfSwgdmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuY29uc3QgcmVtb3ZlUGVuZGluZyA9IChxLCBuYW1lKSA9PiB7XG4gIGlmIChxLnBlbmRpbmdbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSBxLnBlbmRpbmdbbmFtZV07XG4gICAgcS5wZW5kaW5nQ291bnQtLTtcbiAgfVxufTtcbmNsYXNzIENvbm5lY3RvciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKGJhY2tlbmQsIHN0b3JlLCBzZXJ2aWNlcykge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMuc2VydmljZXMgPSBzZXJ2aWNlcztcbiAgICB0aGlzLmxhbmd1YWdlVXRpbHMgPSBzZXJ2aWNlcy5sYW5ndWFnZVV0aWxzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnYmFja2VuZENvbm5lY3RvcicpO1xuICAgIHRoaXMud2FpdGluZ1JlYWRzID0gW107XG4gICAgdGhpcy5tYXhQYXJhbGxlbFJlYWRzID0gb3B0aW9ucy5tYXhQYXJhbGxlbFJlYWRzIHx8IDEwO1xuICAgIHRoaXMucmVhZGluZ0NhbGxzID0gMDtcbiAgICB0aGlzLm1heFJldHJpZXMgPSBvcHRpb25zLm1heFJldHJpZXMgPj0gMCA/IG9wdGlvbnMubWF4UmV0cmllcyA6IDU7XG4gICAgdGhpcy5yZXRyeVRpbWVvdXQgPSBvcHRpb25zLnJldHJ5VGltZW91dCA+PSAxID8gb3B0aW9ucy5yZXRyeVRpbWVvdXQgOiAzNTA7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB0aGlzLmJhY2tlbmQ/LmluaXQ/LihzZXJ2aWNlcywgb3B0aW9ucy5iYWNrZW5kLCBvcHRpb25zKTtcbiAgfVxuICBxdWV1ZUxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHRvTG9hZCA9IHt9O1xuICAgIGNvbnN0IHBlbmRpbmcgPSB7fTtcbiAgICBjb25zdCB0b0xvYWRMYW5ndWFnZXMgPSB7fTtcbiAgICBjb25zdCB0b0xvYWROYW1lc3BhY2VzID0ge307XG4gICAgbGFuZ3VhZ2VzLmZvckVhY2gobG5nID0+IHtcbiAgICAgIGxldCBoYXNBbGxOYW1lc3BhY2VzID0gdHJ1ZTtcbiAgICAgIG5hbWVzcGFjZXMuZm9yRWFjaChucyA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBgJHtsbmd9fCR7bnN9YDtcbiAgICAgICAgaWYgKCFvcHRpb25zLnJlbG9hZCAmJiB0aGlzLnN0b3JlLmhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZVtuYW1lXSA9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZVtuYW1lXSA8IDApIDsgZWxzZSBpZiAodGhpcy5zdGF0ZVtuYW1lXSA9PT0gMSkge1xuICAgICAgICAgIGlmIChwZW5kaW5nW25hbWVdID09PSB1bmRlZmluZWQpIHBlbmRpbmdbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3RhdGVbbmFtZV0gPSAxO1xuICAgICAgICAgIGhhc0FsbE5hbWVzcGFjZXMgPSBmYWxzZTtcbiAgICAgICAgICBpZiAocGVuZGluZ1tuYW1lXSA9PT0gdW5kZWZpbmVkKSBwZW5kaW5nW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICBpZiAodG9Mb2FkW25hbWVdID09PSB1bmRlZmluZWQpIHRvTG9hZFtuYW1lXSA9IHRydWU7XG4gICAgICAgICAgaWYgKHRvTG9hZE5hbWVzcGFjZXNbbnNdID09PSB1bmRlZmluZWQpIHRvTG9hZE5hbWVzcGFjZXNbbnNdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIWhhc0FsbE5hbWVzcGFjZXMpIHRvTG9hZExhbmd1YWdlc1tsbmddID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBpZiAoT2JqZWN0LmtleXModG9Mb2FkKS5sZW5ndGggfHwgT2JqZWN0LmtleXMocGVuZGluZykubGVuZ3RoKSB7XG4gICAgICB0aGlzLnF1ZXVlLnB1c2goe1xuICAgICAgICBwZW5kaW5nLFxuICAgICAgICBwZW5kaW5nQ291bnQ6IE9iamVjdC5rZXlzKHBlbmRpbmcpLmxlbmd0aCxcbiAgICAgICAgbG9hZGVkOiB7fSxcbiAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdG9Mb2FkOiBPYmplY3Qua2V5cyh0b0xvYWQpLFxuICAgICAgcGVuZGluZzogT2JqZWN0LmtleXMocGVuZGluZyksXG4gICAgICB0b0xvYWRMYW5ndWFnZXM6IE9iamVjdC5rZXlzKHRvTG9hZExhbmd1YWdlcyksXG4gICAgICB0b0xvYWROYW1lc3BhY2VzOiBPYmplY3Qua2V5cyh0b0xvYWROYW1lc3BhY2VzKVxuICAgIH07XG4gIH1cbiAgbG9hZGVkKG5hbWUsIGVyciwgZGF0YSkge1xuICAgIGNvbnN0IHMgPSBuYW1lLnNwbGl0KCd8Jyk7XG4gICAgY29uc3QgbG5nID0gc1swXTtcbiAgICBjb25zdCBucyA9IHNbMV07XG4gICAgaWYgKGVycikgdGhpcy5lbWl0KCdmYWlsZWRMb2FkaW5nJywgbG5nLCBucywgZXJyKTtcbiAgICBpZiAoIWVyciAmJiBkYXRhKSB7XG4gICAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlQnVuZGxlKGxuZywgbnMsIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIHNraXBDb3B5OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZVtuYW1lXSA9IGVyciA/IC0xIDogMjtcbiAgICBpZiAoZXJyICYmIGRhdGEpIHRoaXMuc3RhdGVbbmFtZV0gPSAwO1xuICAgIGNvbnN0IGxvYWRlZCA9IHt9O1xuICAgIHRoaXMucXVldWUuZm9yRWFjaChxID0+IHtcbiAgICAgIHB1c2hQYXRoKHEubG9hZGVkLCBbbG5nXSwgbnMpO1xuICAgICAgcmVtb3ZlUGVuZGluZyhxLCBuYW1lKTtcbiAgICAgIGlmIChlcnIpIHEuZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgIGlmIChxLnBlbmRpbmdDb3VudCA9PT0gMCAmJiAhcS5kb25lKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHEubG9hZGVkKS5mb3JFYWNoKGwgPT4ge1xuICAgICAgICAgIGlmICghbG9hZGVkW2xdKSBsb2FkZWRbbF0gPSB7fTtcbiAgICAgICAgICBjb25zdCBsb2FkZWRLZXlzID0gcS5sb2FkZWRbbF07XG4gICAgICAgICAgaWYgKGxvYWRlZEtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2FkZWRLZXlzLmZvckVhY2gobiA9PiB7XG4gICAgICAgICAgICAgIGlmIChsb2FkZWRbbF1bbl0gPT09IHVuZGVmaW5lZCkgbG9hZGVkW2xdW25dID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHEuZG9uZSA9IHRydWU7XG4gICAgICAgIGlmIChxLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBxLmNhbGxiYWNrKHEuZXJyb3JzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBxLmNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoJ2xvYWRlZCcsIGxvYWRlZCk7XG4gICAgdGhpcy5xdWV1ZSA9IHRoaXMucXVldWUuZmlsdGVyKHEgPT4gIXEuZG9uZSk7XG4gIH1cbiAgcmVhZChsbmcsIG5zLCBmY05hbWUpIHtcbiAgICBsZXQgdHJpZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gICAgbGV0IHdhaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHRoaXMucmV0cnlUaW1lb3V0O1xuICAgIGxldCBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkO1xuICAgIGlmICghbG5nLmxlbmd0aCkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHt9KTtcbiAgICBpZiAodGhpcy5yZWFkaW5nQ2FsbHMgPj0gdGhpcy5tYXhQYXJhbGxlbFJlYWRzKSB7XG4gICAgICB0aGlzLndhaXRpbmdSZWFkcy5wdXNoKHtcbiAgICAgICAgbG5nLFxuICAgICAgICBucyxcbiAgICAgICAgZmNOYW1lLFxuICAgICAgICB0cmllZCxcbiAgICAgICAgd2FpdCxcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlYWRpbmdDYWxscysrO1xuICAgIGNvbnN0IHJlc29sdmVyID0gKGVyciwgZGF0YSkgPT4ge1xuICAgICAgdGhpcy5yZWFkaW5nQ2FsbHMtLTtcbiAgICAgIGlmICh0aGlzLndhaXRpbmdSZWFkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLndhaXRpbmdSZWFkcy5zaGlmdCgpO1xuICAgICAgICB0aGlzLnJlYWQobmV4dC5sbmcsIG5leHQubnMsIG5leHQuZmNOYW1lLCBuZXh0LnRyaWVkLCBuZXh0LndhaXQsIG5leHQuY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgaWYgKGVyciAmJiBkYXRhICYmIHRyaWVkIDwgdGhpcy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMucmVhZC5jYWxsKHRoaXMsIGxuZywgbnMsIGZjTmFtZSwgdHJpZWQgKyAxLCB3YWl0ICogMiwgY2FsbGJhY2spO1xuICAgICAgICB9LCB3YWl0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAgICB9O1xuICAgIGNvbnN0IGZjID0gdGhpcy5iYWNrZW5kW2ZjTmFtZV0uYmluZCh0aGlzLmJhY2tlbmQpO1xuICAgIGlmIChmYy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHIgPSBmYyhsbmcsIG5zKTtcbiAgICAgICAgaWYgKHIgJiYgdHlwZW9mIHIudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHIudGhlbihkYXRhID0+IHJlc29sdmVyKG51bGwsIGRhdGEpKS5jYXRjaChyZXNvbHZlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZXIobnVsbCwgcik7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXNvbHZlcihlcnIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gZmMobG5nLCBucywgcmVzb2x2ZXIpO1xuICB9XG4gIHByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcykge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoIXRoaXMuYmFja2VuZCkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignTm8gYmFja2VuZCB3YXMgYWRkZWQgdmlhIGkxOG5leHQudXNlLiBXaWxsIG5vdCBsb2FkIHJlc291cmNlcy4nKTtcbiAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBpZiAoaXNTdHJpbmcobGFuZ3VhZ2VzKSkgbGFuZ3VhZ2VzID0gdGhpcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShsYW5ndWFnZXMpO1xuICAgIGlmIChpc1N0cmluZyhuYW1lc3BhY2VzKSkgbmFtZXNwYWNlcyA9IFtuYW1lc3BhY2VzXTtcbiAgICBjb25zdCB0b0xvYWQgPSB0aGlzLnF1ZXVlTG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICBpZiAoIXRvTG9hZC50b0xvYWQubGVuZ3RoKSB7XG4gICAgICBpZiAoIXRvTG9hZC5wZW5kaW5nLmxlbmd0aCkgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0b0xvYWQudG9Mb2FkLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICB0aGlzLmxvYWRPbmUobmFtZSk7XG4gICAgfSk7XG4gIH1cbiAgbG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5wcmVwYXJlTG9hZGluZyhsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIHt9LCBjYWxsYmFjayk7XG4gIH1cbiAgcmVsb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICB0aGlzLnByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcywge1xuICAgICAgcmVsb2FkOiB0cnVlXG4gICAgfSwgY2FsbGJhY2spO1xuICB9XG4gIGxvYWRPbmUobmFtZSkge1xuICAgIGxldCBwcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuICAgIGNvbnN0IHMgPSBuYW1lLnNwbGl0KCd8Jyk7XG4gICAgY29uc3QgbG5nID0gc1swXTtcbiAgICBjb25zdCBucyA9IHNbMV07XG4gICAgdGhpcy5yZWFkKGxuZywgbnMsICdyZWFkJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnIpIHRoaXMubG9nZ2VyLndhcm4oYCR7cHJlZml4fWxvYWRpbmcgbmFtZXNwYWNlICR7bnN9IGZvciBsYW5ndWFnZSAke2xuZ30gZmFpbGVkYCwgZXJyKTtcbiAgICAgIGlmICghZXJyICYmIGRhdGEpIHRoaXMubG9nZ2VyLmxvZyhgJHtwcmVmaXh9bG9hZGVkIG5hbWVzcGFjZSAke25zfSBmb3IgbGFuZ3VhZ2UgJHtsbmd9YCwgZGF0YSk7XG4gICAgICB0aGlzLmxvYWRlZChuYW1lLCBlcnIsIGRhdGEpO1xuICAgIH0pO1xuICB9XG4gIHNhdmVNaXNzaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUsIGlzVXBkYXRlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IHt9O1xuICAgIGxldCBjbGIgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6ICgpID0+IHt9O1xuICAgIGlmICh0aGlzLnNlcnZpY2VzPy51dGlscz8uaGFzTG9hZGVkTmFtZXNwYWNlICYmICF0aGlzLnNlcnZpY2VzPy51dGlscz8uaGFzTG9hZGVkTmFtZXNwYWNlKG5hbWVzcGFjZSkpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oYGRpZCBub3Qgc2F2ZSBrZXkgXCIke2tleX1cIiBhcyB0aGUgbmFtZXNwYWNlIFwiJHtuYW1lc3BhY2V9XCIgd2FzIG5vdCB5ZXQgbG9hZGVkYCwgJ1RoaXMgbWVhbnMgc29tZXRoaW5nIElTIFdST05HIGluIHlvdXIgc2V0dXAuIFlvdSBhY2Nlc3MgdGhlIHQgZnVuY3Rpb24gYmVmb3JlIGkxOG5leHQuaW5pdCAvIGkxOG5leHQubG9hZE5hbWVzcGFjZSAvIGkxOG5leHQuY2hhbmdlTGFuZ3VhZ2Ugd2FzIGRvbmUuIFdhaXQgZm9yIHRoZSBjYWxsYmFjayBvciBQcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGFjY2Vzc2luZyBpdCEhIScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwga2V5ID09PSBudWxsIHx8IGtleSA9PT0gJycpIHJldHVybjtcbiAgICBpZiAodGhpcy5iYWNrZW5kPy5jcmVhdGUpIHtcbiAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGlzVXBkYXRlXG4gICAgICB9O1xuICAgICAgY29uc3QgZmMgPSB0aGlzLmJhY2tlbmQuY3JlYXRlLmJpbmQodGhpcy5iYWNrZW5kKTtcbiAgICAgIGlmIChmYy5sZW5ndGggPCA2KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IHI7XG4gICAgICAgICAgaWYgKGZjLmxlbmd0aCA9PT0gNSkge1xuICAgICAgICAgICAgciA9IGZjKGxhbmd1YWdlcywgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUsIG9wdHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByID0gZmMobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyICYmIHR5cGVvZiByLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHIudGhlbihkYXRhID0+IGNsYihudWxsLCBkYXRhKSkuY2F0Y2goY2xiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xiKG51bGwsIHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY2xiKGVycik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZjKGxhbmd1YWdlcywgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUsIGNsYiwgb3B0cyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbGFuZ3VhZ2VzIHx8ICFsYW5ndWFnZXNbMF0pIHJldHVybjtcbiAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlKGxhbmd1YWdlc1swXSwgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUpO1xuICB9XG59XG5cbmNvbnN0IGdldCA9ICgpID0+ICh7XG4gIGRlYnVnOiBmYWxzZSxcbiAgaW5pdEFzeW5jOiB0cnVlLFxuICBuczogWyd0cmFuc2xhdGlvbiddLFxuICBkZWZhdWx0TlM6IFsndHJhbnNsYXRpb24nXSxcbiAgZmFsbGJhY2tMbmc6IFsnZGV2J10sXG4gIGZhbGxiYWNrTlM6IGZhbHNlLFxuICBzdXBwb3J0ZWRMbmdzOiBmYWxzZSxcbiAgbm9uRXhwbGljaXRTdXBwb3J0ZWRMbmdzOiBmYWxzZSxcbiAgbG9hZDogJ2FsbCcsXG4gIHByZWxvYWQ6IGZhbHNlLFxuICBzaW1wbGlmeVBsdXJhbFN1ZmZpeDogdHJ1ZSxcbiAga2V5U2VwYXJhdG9yOiAnLicsXG4gIG5zU2VwYXJhdG9yOiAnOicsXG4gIHBsdXJhbFNlcGFyYXRvcjogJ18nLFxuICBjb250ZXh0U2VwYXJhdG9yOiAnXycsXG4gIHBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzOiBmYWxzZSxcbiAgc2F2ZU1pc3Npbmc6IGZhbHNlLFxuICB1cGRhdGVNaXNzaW5nOiBmYWxzZSxcbiAgc2F2ZU1pc3NpbmdUbzogJ2ZhbGxiYWNrJyxcbiAgc2F2ZU1pc3NpbmdQbHVyYWxzOiB0cnVlLFxuICBtaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gIG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcjogZmFsc2UsXG4gIHBvc3RQcm9jZXNzOiBmYWxzZSxcbiAgcG9zdFByb2Nlc3NQYXNzUmVzb2x2ZWQ6IGZhbHNlLFxuICByZXR1cm5OdWxsOiBmYWxzZSxcbiAgcmV0dXJuRW1wdHlTdHJpbmc6IHRydWUsXG4gIHJldHVybk9iamVjdHM6IGZhbHNlLFxuICBqb2luQXJyYXlzOiBmYWxzZSxcbiAgcmV0dXJuZWRPYmplY3RIYW5kbGVyOiBmYWxzZSxcbiAgcGFyc2VNaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gIGFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleTogZmFsc2UsXG4gIGFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlOiBmYWxzZSxcbiAgb3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXI6IGFyZ3MgPT4ge1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdvYmplY3QnKSByZXQgPSBhcmdzWzFdO1xuICAgIGlmIChpc1N0cmluZyhhcmdzWzFdKSkgcmV0LmRlZmF1bHRWYWx1ZSA9IGFyZ3NbMV07XG4gICAgaWYgKGlzU3RyaW5nKGFyZ3NbMl0pKSByZXQudERlc2NyaXB0aW9uID0gYXJnc1syXTtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMl0gPT09ICdvYmplY3QnIHx8IHR5cGVvZiBhcmdzWzNdID09PSAnb2JqZWN0Jykge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IGFyZ3NbM10gfHwgYXJnc1syXTtcbiAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgcmV0W2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcbiAgaW50ZXJwb2xhdGlvbjoge1xuICAgIGVzY2FwZVZhbHVlOiB0cnVlLFxuICAgIGZvcm1hdDogdmFsdWUgPT4gdmFsdWUsXG4gICAgcHJlZml4OiAne3snLFxuICAgIHN1ZmZpeDogJ319JyxcbiAgICBmb3JtYXRTZXBhcmF0b3I6ICcsJyxcbiAgICB1bmVzY2FwZVByZWZpeDogJy0nLFxuICAgIG5lc3RpbmdQcmVmaXg6ICckdCgnLFxuICAgIG5lc3RpbmdTdWZmaXg6ICcpJyxcbiAgICBuZXN0aW5nT3B0aW9uc1NlcGFyYXRvcjogJywnLFxuICAgIG1heFJlcGxhY2VzOiAxMDAwLFxuICAgIHNraXBPblZhcmlhYmxlczogdHJ1ZVxuICB9XG59KTtcbmNvbnN0IHRyYW5zZm9ybU9wdGlvbnMgPSBvcHRpb25zID0+IHtcbiAgaWYgKGlzU3RyaW5nKG9wdGlvbnMubnMpKSBvcHRpb25zLm5zID0gW29wdGlvbnMubnNdO1xuICBpZiAoaXNTdHJpbmcob3B0aW9ucy5mYWxsYmFja0xuZykpIG9wdGlvbnMuZmFsbGJhY2tMbmcgPSBbb3B0aW9ucy5mYWxsYmFja0xuZ107XG4gIGlmIChpc1N0cmluZyhvcHRpb25zLmZhbGxiYWNrTlMpKSBvcHRpb25zLmZhbGxiYWNrTlMgPSBbb3B0aW9ucy5mYWxsYmFja05TXTtcbiAgaWYgKG9wdGlvbnMuc3VwcG9ydGVkTG5ncz8uaW5kZXhPZj8uKCdjaW1vZGUnKSA8IDApIHtcbiAgICBvcHRpb25zLnN1cHBvcnRlZExuZ3MgPSBvcHRpb25zLnN1cHBvcnRlZExuZ3MuY29uY2F0KFsnY2ltb2RlJ10pO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbml0SW1tZWRpYXRlID09PSAnYm9vbGVhbicpIG9wdGlvbnMuaW5pdEFzeW5jID0gb3B0aW9ucy5pbml0SW1tZWRpYXRlO1xuICByZXR1cm4gb3B0aW9ucztcbn07XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcbmNvbnN0IGJpbmRNZW1iZXJGdW5jdGlvbnMgPSBpbnN0ID0+IHtcbiAgY29uc3QgbWVtcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnN0KSk7XG4gIG1lbXMuZm9yRWFjaChtZW0gPT4ge1xuICAgIGlmICh0eXBlb2YgaW5zdFttZW1dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnN0W21lbV0gPSBpbnN0W21lbV0uYmluZChpbnN0KTtcbiAgICB9XG4gIH0pO1xufTtcbmNsYXNzIEkxOG4gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB0cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpO1xuICAgIHRoaXMuc2VydmljZXMgPSB7fTtcbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXI7XG4gICAgdGhpcy5tb2R1bGVzID0ge1xuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICBiaW5kTWVtYmVyRnVuY3Rpb25zKHRoaXMpO1xuICAgIGlmIChjYWxsYmFjayAmJiAhdGhpcy5pc0luaXRpYWxpemVkICYmICFvcHRpb25zLmlzQ2xvbmUpIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmluaXRBc3luYykge1xuICAgICAgICB0aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG4gIGluaXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5pc0luaXRpYWxpemluZyA9IHRydWU7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmRlZmF1bHROUyA9PSBudWxsICYmIG9wdGlvbnMubnMpIHtcbiAgICAgIGlmIChpc1N0cmluZyhvcHRpb25zLm5zKSkge1xuICAgICAgICBvcHRpb25zLmRlZmF1bHROUyA9IG9wdGlvbnMubnM7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubnMuaW5kZXhPZigndHJhbnNsYXRpb24nKSA8IDApIHtcbiAgICAgICAgb3B0aW9ucy5kZWZhdWx0TlMgPSBvcHRpb25zLm5zWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBkZWZPcHRzID0gZ2V0KCk7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgLi4uZGVmT3B0cyxcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgIC4uLnRyYW5zZm9ybU9wdGlvbnMob3B0aW9ucylcbiAgICB9O1xuICAgIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uID0ge1xuICAgICAgLi4uZGVmT3B0cy5pbnRlcnBvbGF0aW9uLFxuICAgICAgLi4udGhpcy5vcHRpb25zLmludGVycG9sYXRpb25cbiAgICB9O1xuICAgIGlmIChvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMudXNlckRlZmluZWRLZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubnNTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkTnNTZXBhcmF0b3IgPSBvcHRpb25zLm5zU2VwYXJhdG9yO1xuICAgIH1cbiAgICBjb25zdCBjcmVhdGVDbGFzc09uRGVtYW5kID0gQ2xhc3NPck9iamVjdCA9PiB7XG4gICAgICBpZiAoIUNsYXNzT3JPYmplY3QpIHJldHVybiBudWxsO1xuICAgICAgaWYgKHR5cGVvZiBDbGFzc09yT2JqZWN0ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gbmV3IENsYXNzT3JPYmplY3QoKTtcbiAgICAgIHJldHVybiBDbGFzc09yT2JqZWN0O1xuICAgIH07XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuaXNDbG9uZSkge1xuICAgICAgaWYgKHRoaXMubW9kdWxlcy5sb2dnZXIpIHtcbiAgICAgICAgYmFzZUxvZ2dlci5pbml0KGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmxvZ2dlciksIHRoaXMub3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlTG9nZ2VyLmluaXQobnVsbCwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGxldCBmb3JtYXR0ZXI7XG4gICAgICBpZiAodGhpcy5tb2R1bGVzLmZvcm1hdHRlcikge1xuICAgICAgICBmb3JtYXR0ZXIgPSB0aGlzLm1vZHVsZXMuZm9ybWF0dGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybWF0dGVyID0gRm9ybWF0dGVyO1xuICAgICAgfVxuICAgICAgY29uc3QgbHUgPSBuZXcgTGFuZ3VhZ2VVdGlsKHRoaXMub3B0aW9ucyk7XG4gICAgICB0aGlzLnN0b3JlID0gbmV3IFJlc291cmNlU3RvcmUodGhpcy5vcHRpb25zLnJlc291cmNlcywgdGhpcy5vcHRpb25zKTtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLnNlcnZpY2VzO1xuICAgICAgcy5sb2dnZXIgPSBiYXNlTG9nZ2VyO1xuICAgICAgcy5yZXNvdXJjZVN0b3JlID0gdGhpcy5zdG9yZTtcbiAgICAgIHMubGFuZ3VhZ2VVdGlscyA9IGx1O1xuICAgICAgcy5wbHVyYWxSZXNvbHZlciA9IG5ldyBQbHVyYWxSZXNvbHZlcihsdSwge1xuICAgICAgICBwcmVwZW5kOiB0aGlzLm9wdGlvbnMucGx1cmFsU2VwYXJhdG9yLFxuICAgICAgICBzaW1wbGlmeVBsdXJhbFN1ZmZpeDogdGhpcy5vcHRpb25zLnNpbXBsaWZ5UGx1cmFsU3VmZml4XG4gICAgICB9KTtcbiAgICAgIGlmIChmb3JtYXR0ZXIgJiYgKCF0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQgfHwgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZm9ybWF0ID09PSBkZWZPcHRzLmludGVycG9sYXRpb24uZm9ybWF0KSkge1xuICAgICAgICBzLmZvcm1hdHRlciA9IGNyZWF0ZUNsYXNzT25EZW1hbmQoZm9ybWF0dGVyKTtcbiAgICAgICAgcy5mb3JtYXR0ZXIuaW5pdChzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQgPSBzLmZvcm1hdHRlci5mb3JtYXQuYmluZChzLmZvcm1hdHRlcik7XG4gICAgICB9XG4gICAgICBzLmludGVycG9sYXRvciA9IG5ldyBJbnRlcnBvbGF0b3IodGhpcy5vcHRpb25zKTtcbiAgICAgIHMudXRpbHMgPSB7XG4gICAgICAgIGhhc0xvYWRlZE5hbWVzcGFjZTogdGhpcy5oYXNMb2FkZWROYW1lc3BhY2UuYmluZCh0aGlzKVxuICAgICAgfTtcbiAgICAgIHMuYmFja2VuZENvbm5lY3RvciA9IG5ldyBDb25uZWN0b3IoY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMuYmFja2VuZCksIHMucmVzb3VyY2VTdG9yZSwgcywgdGhpcy5vcHRpb25zKTtcbiAgICAgIHMuYmFja2VuZENvbm5lY3Rvci5vbignKicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLm1vZHVsZXMubGFuZ3VhZ2VEZXRlY3Rvcikge1xuICAgICAgICBzLmxhbmd1YWdlRGV0ZWN0b3IgPSBjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yKTtcbiAgICAgICAgaWYgKHMubGFuZ3VhZ2VEZXRlY3Rvci5pbml0KSBzLmxhbmd1YWdlRGV0ZWN0b3IuaW5pdChzLCB0aGlzLm9wdGlvbnMuZGV0ZWN0aW9uLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubW9kdWxlcy5pMThuRm9ybWF0KSB7XG4gICAgICAgIHMuaTE4bkZvcm1hdCA9IGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmkxOG5Gb3JtYXQpO1xuICAgICAgICBpZiAocy5pMThuRm9ybWF0LmluaXQpIHMuaTE4bkZvcm1hdC5pbml0KHRoaXMpO1xuICAgICAgfVxuICAgICAgdGhpcy50cmFuc2xhdG9yID0gbmV3IFRyYW5zbGF0b3IodGhpcy5zZXJ2aWNlcywgdGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMudHJhbnNsYXRvci5vbignKicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubW9kdWxlcy5leHRlcm5hbC5mb3JFYWNoKG0gPT4ge1xuICAgICAgICBpZiAobS5pbml0KSBtLmluaXQodGhpcyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5mb3JtYXQgPSB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQ7XG4gICAgaWYgKCFjYWxsYmFjaykgY2FsbGJhY2sgPSBub29wO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcgJiYgIXRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvciAmJiAhdGhpcy5vcHRpb25zLmxuZykge1xuICAgICAgY29uc3QgY29kZXMgPSB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuZ2V0RmFsbGJhY2tDb2Rlcyh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcpO1xuICAgICAgaWYgKGNvZGVzLmxlbmd0aCA+IDAgJiYgY29kZXNbMF0gIT09ICdkZXYnKSB0aGlzLm9wdGlvbnMubG5nID0gY29kZXNbMF07XG4gICAgfVxuICAgIGlmICghdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmICF0aGlzLm9wdGlvbnMubG5nKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCdpbml0OiBubyBsYW5ndWFnZURldGVjdG9yIGlzIHVzZWQgYW5kIG5vIGxuZyBpcyBkZWZpbmVkJyk7XG4gICAgfVxuICAgIGNvbnN0IHN0b3JlQXBpID0gWydnZXRSZXNvdXJjZScsICdoYXNSZXNvdXJjZUJ1bmRsZScsICdnZXRSZXNvdXJjZUJ1bmRsZScsICdnZXREYXRhQnlMYW5ndWFnZSddO1xuICAgIHN0b3JlQXBpLmZvckVhY2goZmNOYW1lID0+IHtcbiAgICAgIHRoaXNbZmNOYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnN0b3JlW2ZjTmFtZV0oLi4uYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3Qgc3RvcmVBcGlDaGFpbmVkID0gWydhZGRSZXNvdXJjZScsICdhZGRSZXNvdXJjZXMnLCAnYWRkUmVzb3VyY2VCdW5kbGUnLCAncmVtb3ZlUmVzb3VyY2VCdW5kbGUnXTtcbiAgICBzdG9yZUFwaUNoYWluZWQuZm9yRWFjaChmY05hbWUgPT4ge1xuICAgICAgdGhpc1tmY05hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zdG9yZVtmY05hbWVdKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIGNvbnN0IGxvYWQgPSAoKSA9PiB7XG4gICAgICBjb25zdCBmaW5pc2ggPSAoZXJyLCB0KSA9PiB7XG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZCAmJiAhdGhpcy5pbml0aWFsaXplZFN0b3JlT25jZSkgdGhpcy5sb2dnZXIud2FybignaW5pdDogaTE4bmV4dCBpcyBhbHJlYWR5IGluaXRpYWxpemVkLiBZb3Ugc2hvdWxkIGNhbGwgaW5pdCBqdXN0IG9uY2UhJyk7XG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlzQ2xvbmUpIHRoaXMubG9nZ2VyLmxvZygnaW5pdGlhbGl6ZWQnLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVtaXQoJ2luaXRpYWxpemVkJywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0KTtcbiAgICAgICAgY2FsbGJhY2soZXJyLCB0KTtcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5sYW5ndWFnZXMgJiYgIXRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuIGZpbmlzaChudWxsLCB0aGlzLnQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmNoYW5nZUxhbmd1YWdlKHRoaXMub3B0aW9ucy5sbmcsIGZpbmlzaCk7XG4gICAgfTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc291cmNlcyB8fCAhdGhpcy5vcHRpb25zLmluaXRBc3luYykge1xuICAgICAgbG9hZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KGxvYWQsIDApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmZXJyZWQ7XG4gIH1cbiAgbG9hZFJlc291cmNlcyhsYW5ndWFnZSkge1xuICAgIGxldCBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbm9vcDtcbiAgICBsZXQgdXNlZENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgY29uc3QgdXNlZExuZyA9IGlzU3RyaW5nKGxhbmd1YWdlKSA/IGxhbmd1YWdlIDogdGhpcy5sYW5ndWFnZTtcbiAgICBpZiAodHlwZW9mIGxhbmd1YWdlID09PSAnZnVuY3Rpb24nKSB1c2VkQ2FsbGJhY2sgPSBsYW5ndWFnZTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5yZXNvdXJjZXMgfHwgdGhpcy5vcHRpb25zLnBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzKSB7XG4gICAgICBpZiAodXNlZExuZz8udG9Mb3dlckNhc2UoKSA9PT0gJ2NpbW9kZScgJiYgKCF0aGlzLm9wdGlvbnMucHJlbG9hZCB8fCB0aGlzLm9wdGlvbnMucHJlbG9hZC5sZW5ndGggPT09IDApKSByZXR1cm4gdXNlZENhbGxiYWNrKCk7XG4gICAgICBjb25zdCB0b0xvYWQgPSBbXTtcbiAgICAgIGNvbnN0IGFwcGVuZCA9IGxuZyA9PiB7XG4gICAgICAgIGlmICghbG5nKSByZXR1cm47XG4gICAgICAgIGlmIChsbmcgPT09ICdjaW1vZGUnKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGxuZ3MgPSB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KGxuZyk7XG4gICAgICAgIGxuZ3MuZm9yRWFjaChsID0+IHtcbiAgICAgICAgICBpZiAobCA9PT0gJ2NpbW9kZScpIHJldHVybjtcbiAgICAgICAgICBpZiAodG9Mb2FkLmluZGV4T2YobCkgPCAwKSB0b0xvYWQucHVzaChsKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgaWYgKCF1c2VkTG5nKSB7XG4gICAgICAgIGNvbnN0IGZhbGxiYWNrcyA9IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyk7XG4gICAgICAgIGZhbGxiYWNrcy5mb3JFYWNoKGwgPT4gYXBwZW5kKGwpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGVuZCh1c2VkTG5nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub3B0aW9ucy5wcmVsb2FkPy5mb3JFYWNoPy4obCA9PiBhcHBlbmQobCkpO1xuICAgICAgdGhpcy5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLmxvYWQodG9Mb2FkLCB0aGlzLm9wdGlvbnMubnMsIGUgPT4ge1xuICAgICAgICBpZiAoIWUgJiYgIXRoaXMucmVzb2x2ZWRMYW5ndWFnZSAmJiB0aGlzLmxhbmd1YWdlKSB0aGlzLnNldFJlc29sdmVkTGFuZ3VhZ2UodGhpcy5sYW5ndWFnZSk7XG4gICAgICAgIHVzZWRDYWxsYmFjayhlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB1c2VkQ2FsbGJhY2sobnVsbCk7XG4gICAgfVxuICB9XG4gIHJlbG9hZFJlc291cmNlcyhsbmdzLCBucywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgaWYgKHR5cGVvZiBsbmdzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IGxuZ3M7XG4gICAgICBsbmdzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG5zO1xuICAgICAgbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghbG5ncykgbG5ncyA9IHRoaXMubGFuZ3VhZ2VzO1xuICAgIGlmICghbnMpIG5zID0gdGhpcy5vcHRpb25zLm5zO1xuICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gbm9vcDtcbiAgICB0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IucmVsb2FkKGxuZ3MsIG5zLCBlcnIgPT4ge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQ7XG4gIH1cbiAgdXNlKG1vZHVsZSkge1xuICAgIGlmICghbW9kdWxlKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgcGFzc2luZyBhbiB1bmRlZmluZWQgbW9kdWxlISBQbGVhc2UgY2hlY2sgdGhlIG9iamVjdCB5b3UgYXJlIHBhc3NpbmcgdG8gaTE4bmV4dC51c2UoKScpO1xuICAgIGlmICghbW9kdWxlLnR5cGUpIHRocm93IG5ldyBFcnJvcignWW91IGFyZSBwYXNzaW5nIGEgd3JvbmcgbW9kdWxlISBQbGVhc2UgY2hlY2sgdGhlIG9iamVjdCB5b3UgYXJlIHBhc3NpbmcgdG8gaTE4bmV4dC51c2UoKScpO1xuICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2JhY2tlbmQnKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuYmFja2VuZCA9IG1vZHVsZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnbG9nZ2VyJyB8fCBtb2R1bGUubG9nICYmIG1vZHVsZS53YXJuICYmIG1vZHVsZS5lcnJvcikge1xuICAgICAgdGhpcy5tb2R1bGVzLmxvZ2dlciA9IG1vZHVsZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnbGFuZ3VhZ2VEZXRlY3RvcicpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yID0gbW9kdWxlO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdpMThuRm9ybWF0Jykge1xuICAgICAgdGhpcy5tb2R1bGVzLmkxOG5Gb3JtYXQgPSBtb2R1bGU7XG4gICAgfVxuICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ3Bvc3RQcm9jZXNzb3InKSB7XG4gICAgICBwb3N0UHJvY2Vzc29yLmFkZFBvc3RQcm9jZXNzb3IobW9kdWxlKTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnZm9ybWF0dGVyJykge1xuICAgICAgdGhpcy5tb2R1bGVzLmZvcm1hdHRlciA9IG1vZHVsZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnM3JkUGFydHknKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuZXh0ZXJuYWwucHVzaChtb2R1bGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzZXRSZXNvbHZlZExhbmd1YWdlKGwpIHtcbiAgICBpZiAoIWwgfHwgIXRoaXMubGFuZ3VhZ2VzKSByZXR1cm47XG4gICAgaWYgKFsnY2ltb2RlJywgJ2RldiddLmluZGV4T2YobCkgPiAtMSkgcmV0dXJuO1xuICAgIGZvciAobGV0IGxpID0gMDsgbGkgPCB0aGlzLmxhbmd1YWdlcy5sZW5ndGg7IGxpKyspIHtcbiAgICAgIGNvbnN0IGxuZ0luTG5ncyA9IHRoaXMubGFuZ3VhZ2VzW2xpXTtcbiAgICAgIGlmIChbJ2NpbW9kZScsICdkZXYnXS5pbmRleE9mKGxuZ0luTG5ncykgPiAtMSkgY29udGludWU7XG4gICAgICBpZiAodGhpcy5zdG9yZS5oYXNMYW5ndWFnZVNvbWVUcmFuc2xhdGlvbnMobG5nSW5MbmdzKSkge1xuICAgICAgICB0aGlzLnJlc29sdmVkTGFuZ3VhZ2UgPSBsbmdJbkxuZ3M7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjaGFuZ2VMYW5ndWFnZShsbmcsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgdGhpcy5pc0xhbmd1YWdlQ2hhbmdpbmdUbyA9IGxuZztcbiAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdGhpcy5lbWl0KCdsYW5ndWFnZUNoYW5naW5nJywgbG5nKTtcbiAgICBjb25zdCBzZXRMbmdQcm9wcyA9IGwgPT4ge1xuICAgICAgdGhpcy5sYW5ndWFnZSA9IGw7XG4gICAgICB0aGlzLmxhbmd1YWdlcyA9IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkobCk7XG4gICAgICB0aGlzLnJlc29sdmVkTGFuZ3VhZ2UgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnNldFJlc29sdmVkTGFuZ3VhZ2UobCk7XG4gICAgfTtcbiAgICBjb25zdCBkb25lID0gKGVyciwgbCkgPT4ge1xuICAgICAgaWYgKGwpIHtcbiAgICAgICAgc2V0TG5nUHJvcHMobCk7XG4gICAgICAgIHRoaXMudHJhbnNsYXRvci5jaGFuZ2VMYW5ndWFnZShsKTtcbiAgICAgICAgdGhpcy5pc0xhbmd1YWdlQ2hhbmdpbmdUbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbWl0KCdsYW5ndWFnZUNoYW5nZWQnLCBsKTtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdsYW5ndWFnZUNoYW5nZWQnLCBsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaXNMYW5ndWFnZUNoYW5naW5nVG8gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi50KC4uLmFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIudCguLi5hcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRMbmcgPSBsbmdzID0+IHtcbiAgICAgIGlmICghbG5nICYmICFsbmdzICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvcikgbG5ncyA9IFtdO1xuICAgICAgY29uc3QgbCA9IGlzU3RyaW5nKGxuZ3MpID8gbG5ncyA6IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRCZXN0TWF0Y2hGcm9tQ29kZXMobG5ncyk7XG4gICAgICBpZiAobCkge1xuICAgICAgICBpZiAoIXRoaXMubGFuZ3VhZ2UpIHtcbiAgICAgICAgICBzZXRMbmdQcm9wcyhsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMudHJhbnNsYXRvci5sYW5ndWFnZSkgdGhpcy50cmFuc2xhdG9yLmNoYW5nZUxhbmd1YWdlKGwpO1xuICAgICAgICB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3I/LmNhY2hlVXNlckxhbmd1YWdlPy4obCk7XG4gICAgICB9XG4gICAgICB0aGlzLmxvYWRSZXNvdXJjZXMobCwgZXJyID0+IHtcbiAgICAgICAgZG9uZShlcnIsIGwpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoIWxuZyAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IgJiYgIXRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5hc3luYykge1xuICAgICAgc2V0TG5nKHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5kZXRlY3QoKSk7XG4gICAgfSBlbHNlIGlmICghbG5nICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvciAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuYXN5bmMpIHtcbiAgICAgIGlmICh0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuZGV0ZWN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuZGV0ZWN0KCkudGhlbihzZXRMbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmRldGVjdChzZXRMbmcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRMbmcobG5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkO1xuICB9XG4gIGdldEZpeGVkVChsbmcsIG5zLCBrZXlQcmVmaXgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICBjb25zdCBmaXhlZFQgPSBmdW5jdGlvbiAoa2V5LCBvcHRzKSB7XG4gICAgICBsZXQgb3B0aW9ucztcbiAgICAgIGlmICh0eXBlb2Ygb3B0cyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4zID4gMiA/IF9sZW4zIC0gMiA6IDApLCBfa2V5MyA9IDI7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgICByZXN0W19rZXkzIC0gMl0gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSBfdGhpczMub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcihba2V5LCBvcHRzXS5jb25jYXQocmVzdCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAuLi5vcHRzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBvcHRpb25zLmxuZyA9IG9wdGlvbnMubG5nIHx8IGZpeGVkVC5sbmc7XG4gICAgICBvcHRpb25zLmxuZ3MgPSBvcHRpb25zLmxuZ3MgfHwgZml4ZWRULmxuZ3M7XG4gICAgICBvcHRpb25zLm5zID0gb3B0aW9ucy5ucyB8fCBmaXhlZFQubnM7XG4gICAgICBpZiAob3B0aW9ucy5rZXlQcmVmaXggIT09ICcnKSBvcHRpb25zLmtleVByZWZpeCA9IG9wdGlvbnMua2V5UHJlZml4IHx8IGtleVByZWZpeCB8fCBmaXhlZFQua2V5UHJlZml4O1xuICAgICAgY29uc3Qga2V5U2VwYXJhdG9yID0gX3RoaXMzLm9wdGlvbnMua2V5U2VwYXJhdG9yIHx8ICcuJztcbiAgICAgIGxldCByZXN1bHRLZXk7XG4gICAgICBpZiAob3B0aW9ucy5rZXlQcmVmaXggJiYgQXJyYXkuaXNBcnJheShrZXkpKSB7XG4gICAgICAgIHJlc3VsdEtleSA9IGtleS5tYXAoayA9PiBgJHtvcHRpb25zLmtleVByZWZpeH0ke2tleVNlcGFyYXRvcn0ke2t9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRLZXkgPSBvcHRpb25zLmtleVByZWZpeCA/IGAke29wdGlvbnMua2V5UHJlZml4fSR7a2V5U2VwYXJhdG9yfSR7a2V5fWAgOiBrZXk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXMzLnQocmVzdWx0S2V5LCBvcHRpb25zKTtcbiAgICB9O1xuICAgIGlmIChpc1N0cmluZyhsbmcpKSB7XG4gICAgICBmaXhlZFQubG5nID0gbG5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXhlZFQubG5ncyA9IGxuZztcbiAgICB9XG4gICAgZml4ZWRULm5zID0gbnM7XG4gICAgZml4ZWRULmtleVByZWZpeCA9IGtleVByZWZpeDtcbiAgICByZXR1cm4gZml4ZWRUO1xuICB9XG4gIHQoKSB7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0b3I/LnRyYW5zbGF0ZSguLi5hcmdzKTtcbiAgfVxuICBleGlzdHMoKSB7XG4gICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0b3I/LmV4aXN0cyguLi5hcmdzKTtcbiAgfVxuICBzZXREZWZhdWx0TmFtZXNwYWNlKG5zKSB7XG4gICAgdGhpcy5vcHRpb25zLmRlZmF1bHROUyA9IG5zO1xuICB9XG4gIGhhc0xvYWRlZE5hbWVzcGFjZShucykge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignaGFzTG9hZGVkTmFtZXNwYWNlOiBpMThuZXh0IHdhcyBub3QgaW5pdGlhbGl6ZWQnLCB0aGlzLmxhbmd1YWdlcyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghdGhpcy5sYW5ndWFnZXMgfHwgIXRoaXMubGFuZ3VhZ2VzLmxlbmd0aCkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignaGFzTG9hZGVkTmFtZXNwYWNlOiBpMThuLmxhbmd1YWdlcyB3ZXJlIHVuZGVmaW5lZCBvciBlbXB0eScsIHRoaXMubGFuZ3VhZ2VzKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbG5nID0gb3B0aW9ucy5sbmcgfHwgdGhpcy5yZXNvbHZlZExhbmd1YWdlIHx8IHRoaXMubGFuZ3VhZ2VzWzBdO1xuICAgIGNvbnN0IGZhbGxiYWNrTG5nID0gdGhpcy5vcHRpb25zID8gdGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nIDogZmFsc2U7XG4gICAgY29uc3QgbGFzdExuZyA9IHRoaXMubGFuZ3VhZ2VzW3RoaXMubGFuZ3VhZ2VzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsbmcudG9Mb3dlckNhc2UoKSA9PT0gJ2NpbW9kZScpIHJldHVybiB0cnVlO1xuICAgIGNvbnN0IGxvYWROb3RQZW5kaW5nID0gKGwsIG4pID0+IHtcbiAgICAgIGNvbnN0IGxvYWRTdGF0ZSA9IHRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5zdGF0ZVtgJHtsfXwke259YF07XG4gICAgICByZXR1cm4gbG9hZFN0YXRlID09PSAtMSB8fCBsb2FkU3RhdGUgPT09IDAgfHwgbG9hZFN0YXRlID09PSAyO1xuICAgIH07XG4gICAgaWYgKG9wdGlvbnMucHJlY2hlY2spIHtcbiAgICAgIGNvbnN0IHByZVJlc3VsdCA9IG9wdGlvbnMucHJlY2hlY2sodGhpcywgbG9hZE5vdFBlbmRpbmcpO1xuICAgICAgaWYgKHByZVJlc3VsdCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcHJlUmVzdWx0O1xuICAgIH1cbiAgICBpZiAodGhpcy5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKCF0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IuYmFja2VuZCB8fCB0aGlzLm9wdGlvbnMucmVzb3VyY2VzICYmICF0aGlzLm9wdGlvbnMucGFydGlhbEJ1bmRsZWRMYW5ndWFnZXMpIHJldHVybiB0cnVlO1xuICAgIGlmIChsb2FkTm90UGVuZGluZyhsbmcsIG5zKSAmJiAoIWZhbGxiYWNrTG5nIHx8IGxvYWROb3RQZW5kaW5nKGxhc3RMbmcsIG5zKSkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsb2FkTmFtZXNwYWNlcyhucywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubnMpIHtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgaWYgKGlzU3RyaW5nKG5zKSkgbnMgPSBbbnNdO1xuICAgIG5zLmZvckVhY2gobiA9PiB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5zLmluZGV4T2YobikgPCAwKSB0aGlzLm9wdGlvbnMubnMucHVzaChuKTtcbiAgICB9KTtcbiAgICB0aGlzLmxvYWRSZXNvdXJjZXMoZXJyID0+IHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQ7XG4gIH1cbiAgbG9hZExhbmd1YWdlcyhsbmdzLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBpZiAoaXNTdHJpbmcobG5ncykpIGxuZ3MgPSBbbG5nc107XG4gICAgY29uc3QgcHJlbG9hZGVkID0gdGhpcy5vcHRpb25zLnByZWxvYWQgfHwgW107XG4gICAgY29uc3QgbmV3TG5ncyA9IGxuZ3MuZmlsdGVyKGxuZyA9PiBwcmVsb2FkZWQuaW5kZXhPZihsbmcpIDwgMCAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuaXNTdXBwb3J0ZWRDb2RlKGxuZykpO1xuICAgIGlmICghbmV3TG5ncy5sZW5ndGgpIHtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zLnByZWxvYWQgPSBwcmVsb2FkZWQuY29uY2F0KG5ld0xuZ3MpO1xuICAgIHRoaXMubG9hZFJlc291cmNlcyhlcnIgPT4ge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfVxuICBkaXIobG5nKSB7XG4gICAgaWYgKCFsbmcpIGxuZyA9IHRoaXMucmVzb2x2ZWRMYW5ndWFnZSB8fCAodGhpcy5sYW5ndWFnZXM/Lmxlbmd0aCA+IDAgPyB0aGlzLmxhbmd1YWdlc1swXSA6IHRoaXMubGFuZ3VhZ2UpO1xuICAgIGlmICghbG5nKSByZXR1cm4gJ3J0bCc7XG4gICAgY29uc3QgcnRsTG5ncyA9IFsnYXInLCAnc2h1JywgJ3NxcicsICdzc2gnLCAneGFhJywgJ3loZCcsICd5dWQnLCAnYWFvJywgJ2FiaCcsICdhYnYnLCAnYWNtJywgJ2FjcScsICdhY3cnLCAnYWN4JywgJ2FjeScsICdhZGYnLCAnYWRzJywgJ2FlYicsICdhZWMnLCAnYWZiJywgJ2FqcCcsICdhcGMnLCAnYXBkJywgJ2FyYicsICdhcnEnLCAnYXJzJywgJ2FyeScsICdhcnonLCAnYXV6JywgJ2F2bCcsICdheWgnLCAnYXlsJywgJ2F5bicsICdheXAnLCAnYmJ6JywgJ3BnYScsICdoZScsICdpdycsICdwcycsICdwYnQnLCAncGJ1JywgJ3BzdCcsICdwcnAnLCAncHJkJywgJ3VnJywgJ3VyJywgJ3lkZCcsICd5ZHMnLCAneWloJywgJ2ppJywgJ3lpJywgJ2hibycsICdtZW4nLCAneG1uJywgJ2ZhJywgJ2pwcicsICdwZW8nLCAncGVzJywgJ3BycycsICdkdicsICdzYW0nLCAnY2tiJ107XG4gICAgY29uc3QgbGFuZ3VhZ2VVdGlscyA9IHRoaXMuc2VydmljZXM/Lmxhbmd1YWdlVXRpbHMgfHwgbmV3IExhbmd1YWdlVXRpbChnZXQoKSk7XG4gICAgcmV0dXJuIHJ0bExuZ3MuaW5kZXhPZihsYW5ndWFnZVV0aWxzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGxuZykpID4gLTEgfHwgbG5nLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignLWFyYWInKSA+IDEgPyAncnRsJyA6ICdsdHInO1xuICB9XG4gIHN0YXRpYyBjcmVhdGVJbnN0YW5jZSgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIG5ldyBJMThuKG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuICBjbG9uZUluc3RhbmNlKCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG5vb3A7XG4gICAgY29uc3QgZm9ya1Jlc291cmNlU3RvcmUgPSBvcHRpb25zLmZvcmtSZXNvdXJjZVN0b3JlO1xuICAgIGlmIChmb3JrUmVzb3VyY2VTdG9yZSkgZGVsZXRlIG9wdGlvbnMuZm9ya1Jlc291cmNlU3RvcmU7XG4gICAgY29uc3QgbWVyZ2VkT3B0aW9ucyA9IHtcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAuLi57XG4gICAgICAgIGlzQ2xvbmU6IHRydWVcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGNsb25lID0gbmV3IEkxOG4obWVyZ2VkT3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLnByZWZpeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbG9uZS5sb2dnZXIgPSBjbG9uZS5sb2dnZXIuY2xvbmUob3B0aW9ucyk7XG4gICAgfVxuICAgIGNvbnN0IG1lbWJlcnNUb0NvcHkgPSBbJ3N0b3JlJywgJ3NlcnZpY2VzJywgJ2xhbmd1YWdlJ107XG4gICAgbWVtYmVyc1RvQ29weS5mb3JFYWNoKG0gPT4ge1xuICAgICAgY2xvbmVbbV0gPSB0aGlzW21dO1xuICAgIH0pO1xuICAgIGNsb25lLnNlcnZpY2VzID0ge1xuICAgICAgLi4udGhpcy5zZXJ2aWNlc1xuICAgIH07XG4gICAgY2xvbmUuc2VydmljZXMudXRpbHMgPSB7XG4gICAgICBoYXNMb2FkZWROYW1lc3BhY2U6IGNsb25lLmhhc0xvYWRlZE5hbWVzcGFjZS5iaW5kKGNsb25lKVxuICAgIH07XG4gICAgaWYgKGZvcmtSZXNvdXJjZVN0b3JlKSB7XG4gICAgICBjb25zdCBjbG9uZWREYXRhID0gT2JqZWN0LmtleXModGhpcy5zdG9yZS5kYXRhKS5yZWR1Y2UoKHByZXYsIGwpID0+IHtcbiAgICAgICAgcHJldltsXSA9IHtcbiAgICAgICAgICAuLi50aGlzLnN0b3JlLmRhdGFbbF1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHByZXZbbF0pLnJlZHVjZSgoYWNjLCBuKSA9PiB7XG4gICAgICAgICAgYWNjW25dID0ge1xuICAgICAgICAgICAgLi4ucHJldltsXVtuXVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwge30pO1xuICAgICAgfSwge30pO1xuICAgICAgY2xvbmUuc3RvcmUgPSBuZXcgUmVzb3VyY2VTdG9yZShjbG9uZWREYXRhLCBtZXJnZWRPcHRpb25zKTtcbiAgICAgIGNsb25lLnNlcnZpY2VzLnJlc291cmNlU3RvcmUgPSBjbG9uZS5zdG9yZTtcbiAgICB9XG4gICAgY2xvbmUudHJhbnNsYXRvciA9IG5ldyBUcmFuc2xhdG9yKGNsb25lLnNlcnZpY2VzLCBtZXJnZWRPcHRpb25zKTtcbiAgICBjbG9uZS50cmFuc2xhdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYgPiAxID8gX2xlbjYgLSAxIDogMCksIF9rZXk2ID0gMTsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgICAgICBhcmdzW19rZXk2IC0gMV0gPSBhcmd1bWVudHNbX2tleTZdO1xuICAgICAgfVxuICAgICAgY2xvbmUuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgfSk7XG4gICAgY2xvbmUuaW5pdChtZXJnZWRPcHRpb25zLCBjYWxsYmFjayk7XG4gICAgY2xvbmUudHJhbnNsYXRvci5vcHRpb25zID0gbWVyZ2VkT3B0aW9ucztcbiAgICBjbG9uZS50cmFuc2xhdG9yLmJhY2tlbmRDb25uZWN0b3Iuc2VydmljZXMudXRpbHMgPSB7XG4gICAgICBoYXNMb2FkZWROYW1lc3BhY2U6IGNsb25lLmhhc0xvYWRlZE5hbWVzcGFjZS5iaW5kKGNsb25lKVxuICAgIH07XG4gICAgcmV0dXJuIGNsb25lO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgc3RvcmU6IHRoaXMuc3RvcmUsXG4gICAgICBsYW5ndWFnZTogdGhpcy5sYW5ndWFnZSxcbiAgICAgIGxhbmd1YWdlczogdGhpcy5sYW5ndWFnZXMsXG4gICAgICByZXNvbHZlZExhbmd1YWdlOiB0aGlzLnJlc29sdmVkTGFuZ3VhZ2VcbiAgICB9O1xuICB9XG59XG5jb25zdCBpbnN0YW5jZSA9IEkxOG4uY3JlYXRlSW5zdGFuY2UoKTtcbmluc3RhbmNlLmNyZWF0ZUluc3RhbmNlID0gSTE4bi5jcmVhdGVJbnN0YW5jZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnN0YW5jZTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdzdW5jYWxjJyksIHJlcXVpcmUoJ2kxOG5leHQnKSkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydzdW5jYWxjJywgJ2kxOG5leHQnXSwgZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwub3BlbmluZ19ob3VycyA9IGZhY3RvcnkoZ2xvYmFsLlN1bkNhbGMsIGdsb2JhbC5pMThuZXh0KSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKFN1bkNhbGMsIGkxOG5leHQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBkYXRhJEQgPSB7IFBIOlsgeyBuYW1lOlwiQcOxbyBOdWV2b1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkNhcm5hdmFsXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi00OCB9LFxuICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICB7IG5hbWU6XCJEw61hIE5hY2lvbmFsIGRlIGxhIE1lbW9yaWEgcG9yIGxhIFZlcmRhZCB5IGxhIEp1c3RpY2lhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgIDI0IF0gfSxcbiAgICAgIHsgbmFtZTpcIlZpZXJuZXMgU2FudG9cIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgIHsgbmFtZTpcIkZlcmlhZG8gY29uIGZpbmVzIHR1csOtc3RpY29zXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZWwgVmV0ZXJhbm8geSBkZSBsb3MgQ2HDrWRvcyBlbiBsYSBHdWVycmEgZGUgTWFsdmluYXNcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgMiBdIH0sXG4gICAgICB7IG5hbWU6XCJEw61hIGRlbCBUcmFiYWphZG9yXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZSBsYSBSZXZvbHVjacOzbiBkZSBNYXlvXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcIlBhc28gYSBsYSBJbm1vcnRhbGlkYWQgZGVsIEdyYWwuIERvbiBNYXJ0w61uIE1pZ3VlbCBkZSBHw7xlbWVzXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgIDE3IF0gfSxcbiAgICAgIHsgbmFtZTpcIlBhc28gYSBsYSBJbm1vcnRhbGlkYWQgZGVsIEdlbmVyYWwgTWFudWVsIEJlbGdyYW5vXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgIDIwIF0gfSxcbiAgICAgIHsgbmFtZTpcIkZlcmlhZG8gY29uIGZpbmVzIHR1csOtc3RpY29zXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgIDIxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkTDrWEgZGUgbGEgSW5kZXBlbmRlbmNpYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICA5IF0gfSxcbiAgICAgIHsgbmFtZTpcIlBhc28gYSBsYSBJbm1vcnRhbGlkYWQgZGVsIEdyYWwuIEpvc8OpIGRlIFNhbiBNYXJ0w61uXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDE3IF0gfSxcbiAgICAgIHsgbmFtZTpcIkZlcmlhZG8gY29uIGZpbmVzIHR1csOtc3RpY29zXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAxMSBdIH0sXG4gICAgICB7IG5hbWU6XCJEw61hIGRlbCBSZXNwZXRvIGEgbGEgRGl2ZXJzaWRhZCBDdWx0dXJhbFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgMTIgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZSBsYSBTb2JlcmFuw61hIE5hY2lvbmFsXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxOCBdIH0sXG4gICAgICB7IG5hbWU6XCJJbm1hY3VsYWRhIENvbmNlcGNpw7NuIGRlIE1hcsOtYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgOCBdIH0sXG4gICAgICB7IG5hbWU6XCJOYXZpZGFkXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0gXSB9O1xuICBkYXRhJEQuUEg7XG5cbiAgdmFyIGRhdGEkQyA9IHsgUEg6WyB7IG5hbWU6XCJOZXVqYWhyc3RhZ1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkhlaWxpZ2UgRHJlaSBLw7ZuaWdlXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDYgXSB9LFxuICAgICAgeyBuYW1lOlwiT3N0ZXJtb250YWdcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgeyBuYW1lOlwiU3RhYXRzZmVpZXJ0YWdcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJDaHJpc3RpIEhpbW1lbGZhaHJ0XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjM5IH0sXG4gICAgICB7IG5hbWU6XCJQZmluZ3N0bW9udGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjUwIH0sXG4gICAgICB7IG5hbWU6XCJGcm9ubGVpY2huYW1cIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgIHsgbmFtZTpcIk1hcmnDpCBIaW1tZWxmYWhydFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOCxcbiAgICAgICAgICAxNSBdIH0sXG4gICAgICB7IG5hbWU6XCJOYXRpb25hbGZlaWVydGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAyNiBdIH0sXG4gICAgICB7IG5hbWU6XCJBbGxlcmhlaWxpZ2VuXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIk1hcmnDpCBFbXBmw6RuZ25pc1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgOCBdIH0sXG4gICAgICB7IG5hbWU6XCJDaHJpc3R0YWdcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcIlN0ZWZhbml0YWdcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI2IF0gfSBdLFxuICAgIFNIOlsgeyAyMDE3OlsgNCxcbiAgICAgICAgICA4LFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMTggXSxcbiAgICAgICAgMjAxODpbIDMsXG4gICAgICAgICAgMjQsXG4gICAgICAgICAgNCxcbiAgICAgICAgICAzIF0sXG4gICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgIDEzLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMjMgXSxcbiAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgNCxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDE0IF0sXG4gICAgICAgIDIwMjE6WyAzLFxuICAgICAgICAgIDI3LFxuICAgICAgICAgIDQsXG4gICAgICAgICAgNiBdLFxuICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICA5LFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMTkgXSxcbiAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDExIF0sXG4gICAgICAgIDIwMjQ6WyAzLFxuICAgICAgICAgIDIzLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMiBdLFxuICAgICAgICBuYW1lOlwiT3N0ZXJmZXJpZW5cIiB9LFxuICAgICAgeyAyMDE3OlsgNixcbiAgICAgICAgICAzLFxuICAgICAgICAgIDYsXG4gICAgICAgICAgNiBdLFxuICAgICAgICAyMDE4OlsgNSxcbiAgICAgICAgICAxOSxcbiAgICAgICAgICA1LFxuICAgICAgICAgIDIyIF0sXG4gICAgICAgIDIwMTk6WyA2LFxuICAgICAgICAgIDgsXG4gICAgICAgICAgNixcbiAgICAgICAgICAxMSBdLFxuICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAzMCxcbiAgICAgICAgICA2LFxuICAgICAgICAgIDIgXSxcbiAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgMjIsXG4gICAgICAgICAgNSxcbiAgICAgICAgICAyNSBdLFxuICAgICAgICAyMDIyOlsgNixcbiAgICAgICAgICA0LFxuICAgICAgICAgIDYsXG4gICAgICAgICAgNyBdLFxuICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICA1NyxcbiAgICAgICAgICA1LFxuICAgICAgICAgIDMwIF0sXG4gICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgIDE4LFxuICAgICAgICAgIDUsXG4gICAgICAgICAgMjEgXSxcbiAgICAgICAgbmFtZTpcIlBmaW5nc3RmZXJpZW5cIiB9LFxuICAgICAgeyAyMDE2OlsgMTEsXG4gICAgICAgICAgMiBdLFxuICAgICAgICAyMDE3OlsgMTEsXG4gICAgICAgICAgMiBdLFxuICAgICAgICAyMDE4OlsgMTEsXG4gICAgICAgICAgMiBdLFxuICAgICAgICAyMDE5OlsgMTEsXG4gICAgICAgICAgMiBdLFxuICAgICAgICAyMDIwOlsgMTEsXG4gICAgICAgICAgMiBdLFxuICAgICAgICAyMDIxOlsgMTEsXG4gICAgICAgICAgMiBdLFxuICAgICAgICAyMDIyOlsgMTEsXG4gICAgICAgICAgMiBdLFxuICAgICAgICAyMDIzOlsgMTEsXG4gICAgICAgICAgMiBdLFxuICAgICAgICBuYW1lOlwiQWxsZXJzZWVsZW5cIiB9LFxuICAgICAgeyAyMDE2OlsgMTIsXG4gICAgICAgICAgMjQsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA3IF0sXG4gICAgICAgIDIwMTc6WyAxMixcbiAgICAgICAgICAyNCxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDYgXSxcbiAgICAgICAgMjAxODpbIDEyLFxuICAgICAgICAgIDI0LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgNiBdLFxuICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgMjMsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA2IF0sXG4gICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAyNCxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDYgXSxcbiAgICAgICAgMjAyMTpbIDEyLFxuICAgICAgICAgIDI0LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgNiBdLFxuICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgMjQsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA2IF0sXG4gICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAyNCxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDYgXSxcbiAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9IF0sXG4gICAgQnVyZ2VubGFuZDp7IF9zdGF0ZV9jb2RlOjEsXG4gICAgICBTSDpbIHsgMjAxNjpbIDIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAxNzpbIDIsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMTg6WyAyLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIG5hbWU6XCJTZW1lc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxNjpbIDcsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTg6WyA2LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA2LFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICBuYW1lOlwiU29tbWVyZmVyaWVuXCIgfSBdIH0sXG4gICAgXCJLw6RybnRlblwiOnsgX3N0YXRlX2NvZGU6MixcbiAgICAgIFNIOlsgeyAyMDE2OlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICAyMDE3OlsgMixcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAxODpbIDIsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgbmFtZTpcIlNlbWVzdGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDE2OlsgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE4OlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICBuYW1lOlwiU29tbWVyZmVyaWVuXCIgfSBdIH0sXG4gICAgXCJOaWVkZXLDtnN0ZXJyZWljaFwiOnsgX3N0YXRlX2NvZGU6MyxcbiAgICAgIFNIOlsgeyAyMDE2OlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTc6WyAyLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTg6WyAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIG5hbWU6XCJTZW1lc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxNjpbIDcsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTg6WyA2LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA2LFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICBuYW1lOlwiU29tbWVyZmVyaWVuXCIgfSBdIH0sXG4gICAgXCJPYmVyw7ZzdGVycmVpY2hcIjp7IF9zdGF0ZV9jb2RlOjQsXG4gICAgICBTSDpbIHsgMjAxNjpbIDIsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMCBdLFxuICAgICAgICAgIDIwMTc6WyAyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDE4OlsgMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgbmFtZTpcIlNlbWVzdGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDE2OlsgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE4OlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICBuYW1lOlwiU29tbWVyZmVyaWVuXCIgfSBdIH0sXG4gICAgU2FsemJ1cmc6eyBfc3RhdGVfY29kZTo1LFxuICAgICAgU0g6WyB7IDIwMTY6WyAyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTc6WyAyLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE4OlsgMixcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICBuYW1lOlwiU2VtZXN0ZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTY6WyA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTc6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTg6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9IF0gfSxcbiAgICBTdGVpZXJtYXJrOnsgX3N0YXRlX2NvZGU6NixcbiAgICAgIFNIOlsgeyAyMDE2OlsgMixcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAxNzpbIDIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMTg6WyAyLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICBuYW1lOlwiU2VtZXN0ZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTY6WyA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTc6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTg6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9IF0gfSxcbiAgICBUaXJvbDp7IF9zdGF0ZV9jb2RlOjcsXG4gICAgICBTSDpbIHsgMjAxNjpbIDIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAxNzpbIDIsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMTg6WyAyLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIG5hbWU6XCJTZW1lc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxNjpbIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxNzpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxODpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgbmFtZTpcIlNvbW1lcmZlcmllblwiIH0gXSB9LFxuICAgIFZvcmFybGJlcmc6eyBfc3RhdGVfY29kZTo4LFxuICAgICAgU0g6WyB7IDIwMTY6WyAyLFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICAyMDE3OlsgMixcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAxODpbIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICBuYW1lOlwiU2VtZXN0ZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTY6WyA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTc6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTg6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9IF0gfSxcbiAgICBXaWVuOnsgX3N0YXRlX2NvZGU6OSxcbiAgICAgIFNIOlsgeyAyMDE2OlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTc6WyAyLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTg6WyAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIG5hbWU6XCJTZW1lc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxNjpbIDcsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTg6WyA2LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA2LFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICBuYW1lOlwiU29tbWVyZmVyaWVuXCIgfSBdIH0gfTtcbiAgZGF0YSRDLlBIO1xuICBkYXRhJEMuU0g7XG4gIGRhdGEkQy5CdXJnZW5sYW5kO1xuICBkYXRhJEMuU2FsemJ1cmc7XG4gIGRhdGEkQy5TdGVpZXJtYXJrO1xuICBkYXRhJEMuVGlyb2w7XG4gIGRhdGEkQy5Wb3JhcmxiZXJnO1xuICBkYXRhJEMuV2llbjtcblxuICB2YXIgZGF0YSRCID0geyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFycyBEYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJBdXN0cmFsaWEgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDI2IF0gfSxcbiAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcIkFOWkFDIERheVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCJCb3hpbmcgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNiBdIH0gXSxcbiAgICBcIkF1c3RyYWxpYW4gQ2FwaXRhbCBUZXJyaXRvcnlcIjp7IF9zdGF0ZV9jb2RlOlwiYWN0XCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFycyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJBdXN0cmFsaWEgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhbmJlcnJhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE1hcmNoTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhc3RlciBTYXR1cmRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTEgfSxcbiAgICAgICAgeyBuYW1lOlwiRWFzdGVyIFN1bmRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIiB9LFxuICAgICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDoxIH0sXG4gICAgICAgIHsgbmFtZTpcIkFOWkFDIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJSZWNvbmNpbGlhdGlvbiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlF1ZWVucyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEp1bmVNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJGYW1pbHkgYW5kIENvbW11bml0eSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm91ciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQm94aW5nIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI2IF0gfSBdIH0sXG4gICAgXCJOZXcgU291dGggV2FsZXNcIjp7IF9zdGF0ZV9jb2RlOlwibnN3XCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFycyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJBdXN0cmFsaWEgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJFYXN0ZXIgU2F0dXJkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0xIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhc3RlciBTdW5kYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIgfSxcbiAgICAgICAgeyBuYW1lOlwiRWFzdGVyIE1vbmRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgICB7IG5hbWU6XCJBTlpBQyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUXVlZW5zIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SnVuZU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm91ciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQm94aW5nIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI2IF0gfSBdIH0sXG4gICAgXCJOb3J0aGVybiBUZXJyaXRvcnlcIjp7IF9zdGF0ZV9jb2RlOlwibnRcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXJzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkF1c3RyYWxpYSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDI2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhc3RlciBTYXR1cmRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTEgfSxcbiAgICAgICAgeyBuYW1lOlwiRWFzdGVyIE1vbmRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgICB7IG5hbWU6XCJBTlpBQyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWF5IERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlF1ZWVucyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEp1bmVNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJQaWNuaWMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0QXVndXN0TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQm94aW5nIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI2IF0gfSBdIH0sXG4gICAgUXVlZW5zbGFuZDp7IF9zdGF0ZV9jb2RlOlwicWxkXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFycyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJBdXN0cmFsaWEgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJFYXN0ZXIgU2F0dXJkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0xIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhc3RlciBNb25kYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQU5aQUMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm91ciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJRdWVlbnMgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQm94aW5nIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI2IF0gfSBdIH0sXG4gICAgXCJTb3V0aCBBdXN0cmFsaWFcIjp7IF9zdGF0ZV9jb2RlOlwic2FcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXJzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkF1c3RyYWxpYSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDI2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQWRlbGFpZGUgQ3VwXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0TWFyY2hNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJHb29kIEZyaWRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiRWFzdGVyIFNhdHVyZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMSB9LFxuICAgICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDoxIH0sXG4gICAgICAgIHsgbmFtZTpcIkFOWkFDIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJRdWVlbnMgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKdW5lTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3VyIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJCb3hpbmcgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjYgXSB9IF0gfSxcbiAgICBUYXNtYW5pYTp7IF9zdGF0ZV9jb2RlOlwidGFzXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFycyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJBdXN0cmFsaWEgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkVpZ2h0IEhvdXJzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE1hcmNoTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhc3RlciBNb25kYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQU5aQUMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlF1ZWVucyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEp1bmVNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJCb3hpbmcgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjYgXSB9IF0gfSxcbiAgICBWaWN0b3JpYTp7IF9zdGF0ZV9jb2RlOlwidmljXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFycyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJBdXN0cmFsaWEgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm91ciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RNYXJjaE1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJFYXN0ZXIgU2F0dXJkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0xIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhc3RlciBTdW5kYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIgfSxcbiAgICAgICAgeyBuYW1lOlwiRWFzdGVyIE1vbmRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgICB7IG5hbWU6XCJBTlpBQyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUXVlZW5zIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SnVuZU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIkFGTCBHcmFuZCBGaW5hbFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0U2VwdGVtYmVyRnJpZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVsYm91cm5lIEN1cFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVHVlc2RheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkJveGluZyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNiBdIH0gXSB9LFxuICAgIFwiV2VzdGVybiBBdXN0cmFsaWFcIjp7IF9zdGF0ZV9jb2RlOlwid2FcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXJzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkF1c3RyYWxpYSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDI2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3VyIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE1hcmNoTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhc3RlciBNb25kYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQU5aQUMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIldlc3Rlcm4gQXVzdHJhbGlhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEp1bmVNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJCb3hpbmcgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjYgXSB9IF0gfSB9O1xuICBkYXRhJEIuUEg7XG4gIGRhdGEkQi5RdWVlbnNsYW5kO1xuICBkYXRhJEIuVGFzbWFuaWE7XG4gIGRhdGEkQi5WaWN0b3JpYTtcblxuICB2YXIgZGF0YSRBID0geyBQSDpbIHsgbmFtZTpcIk5pZXV3amFhciAtIEpvdXIgZGUgbCdhblwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIlBhYXNtYWFuZGFnIC0gTHVuZGkgZGUgUMOicXVlc1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDoxIH0sXG4gICAgICB7IG5hbWU6XCJEYWcgdmFuIGRlIEFyYmVpZCAtIEbDqnRlIGR1IFRyYXZhaWxcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJPbnplLUxpZXZlLUhlZXItSGVtZWx2YWFydCAtIEpldWRpIGRlIGwnQXNjZW5zaW9ublwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDozOSB9LFxuICAgICAgeyBuYW1lOlwiUGlua3N0ZXJtYWFuZGFnIC0gTHVuZGkgZGUgUGVudGVjw7R0ZVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo1MCB9LFxuICAgICAgeyBuYW1lOlwiTmF0aW9uYWxlIGZlZXN0ZGFnIHZhbiBCZWxnacOrIC0gRsOqdGUgbmF0aW9uYWxlXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgIDIxIF0gfSxcbiAgICAgIHsgbmFtZTpcIk9uemUtTGlldmUtVnJvdXctSGVtZWx2YWFydCAtIEFzc29tcHRpb25cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgMTUgXSB9LFxuICAgICAgeyBuYW1lOlwiQWxsZXJoZWlsaWdlbiAtIFRvdXNzYWludFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJXYXBlbnN0aWxzdGFuZCAtIEFybWlzdGljZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgMTEgXSB9LFxuICAgICAgeyBuYW1lOlwiS2Vyc3RtaXMgLSBOb8OrbFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjUgXSB9IF0sXG4gICAgU0g6WyB7IDIwMjA6WyAyLFxuICAgICAgICAgIDI0LFxuICAgICAgICAgIDMsXG4gICAgICAgICAgMSBdLFxuICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAxNSxcbiAgICAgICAgICAyLFxuICAgICAgICAgIDIxIF0sXG4gICAgICAgIDIwMjI6WyAyLFxuICAgICAgICAgIDI4LFxuICAgICAgICAgIDMsXG4gICAgICAgICAgNiBdLFxuICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAyMCxcbiAgICAgICAgICAyLFxuICAgICAgICAgIDI2IF0sXG4gICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgIDEyLFxuICAgICAgICAgIDIsXG4gICAgICAgICAgMTggXSxcbiAgICAgICAgMjAyNTpbIDMsXG4gICAgICAgICAgMyxcbiAgICAgICAgICAzLFxuICAgICAgICAgIDkgXSxcbiAgICAgICAgMjAyNjpbIDIsXG4gICAgICAgICAgMTYsXG4gICAgICAgICAgMixcbiAgICAgICAgICAyMiBdLFxuICAgICAgICBuYW1lOlwiS3Jva3VzdmFrYW50aWUgLSBWYWNhbmNlcyBkZSBjYXJuYXZhbFwiIH0sXG4gICAgICB7IDIwMjA6WyA0LFxuICAgICAgICAgIDYsXG4gICAgICAgICAgNCxcbiAgICAgICAgICAxOSBdLFxuICAgICAgICAyMDIxOlsgNCxcbiAgICAgICAgICA1LFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMTggXSxcbiAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgNCxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDE4IF0sXG4gICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgIDMsXG4gICAgICAgICAgNCxcbiAgICAgICAgICAxNiBdLFxuICAgICAgICAyMDI0OlsgNCxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMTQgXSxcbiAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgNyxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDIxIF0sXG4gICAgICAgIDIwMjY6WyA0LFxuICAgICAgICAgIDYsXG4gICAgICAgICAgNCxcbiAgICAgICAgICAxOSBdLFxuICAgICAgICBuYW1lOlwiUGFhc3Zha2FudGllIC0gVmFjYW5jZXMgZGUgcMOicXVlc1wiIH0sXG4gICAgICB7IDIwMjA6WyA3LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgOCxcbiAgICAgICAgICAzMSBdLFxuICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDgsXG4gICAgICAgICAgMzEgXSxcbiAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA4LFxuICAgICAgICAgIDMxIF0sXG4gICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgOCxcbiAgICAgICAgICAzMSBdLFxuICAgICAgICAyMDI0OlsgNyxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDgsXG4gICAgICAgICAgMzEgXSxcbiAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA4LFxuICAgICAgICAgIDMxIF0sXG4gICAgICAgIDIwMjY6WyA3LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgOCxcbiAgICAgICAgICAzMSBdLFxuICAgICAgICBuYW1lOlwiWm9tZXJ2YWthbnRpZSAtIFZhY2FuY2VzIGQnw6l0w6lcIiB9LFxuICAgICAgeyAyMDE5OlsgMTAsXG4gICAgICAgICAgMjgsXG4gICAgICAgICAgMTEsXG4gICAgICAgICAgMyBdLFxuICAgICAgICAyMDIwOlsgMTEsXG4gICAgICAgICAgMixcbiAgICAgICAgICAxMSxcbiAgICAgICAgICAxNSBdLFxuICAgICAgICAyMDIxOlsgMTEsXG4gICAgICAgICAgMSxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICA3IF0sXG4gICAgICAgIDIwMjI6WyAxMCxcbiAgICAgICAgICAzMSxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICA2IF0sXG4gICAgICAgIDIwMjM6WyAxMCxcbiAgICAgICAgICAzMCxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICA1IF0sXG4gICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAyOCxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICAzIF0sXG4gICAgICAgIDIwMjU6WyAxMCxcbiAgICAgICAgICAyNyxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICAyIF0sXG4gICAgICAgIG5hbWU6XCJIZXJmc3R2YWthbnRpZSAtIFZhY2FuY2VzIGF1dG9tbmVcIiB9LFxuICAgICAgeyAyMDE5OlsgMTIsXG4gICAgICAgICAgMjMsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA1IF0sXG4gICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAyMSxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDMgXSxcbiAgICAgICAgMjAyMTpbIDEyLFxuICAgICAgICAgIDI3LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgOSBdLFxuICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgMjYsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA4IF0sXG4gICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAyNSxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDcgXSxcbiAgICAgICAgMjAyNDpbIDEyLFxuICAgICAgICAgIDIzLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgNSBdLFxuICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgMjIsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA0IF0sXG4gICAgICAgIG5hbWU6XCJLZXJzdHZha2FudGllIC0gVmFjYW5jZXMgZGUgTm/Dq2xcIiB9IF0gfTtcbiAgZGF0YSRBLlBIO1xuICBkYXRhJEEuU0g7XG5cbiAgdmFyIGRhdGEkeiA9IHsgUEg6WyB7IG5hbWU6XCJBbm8gTm92b1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkNhcm5hdmFsXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgeyBuYW1lOlwiU2V4dGEtZmVpcmEgc2FudGFcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgIHsgbmFtZTpcIlRpcmFkZW50ZXNcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgMjEgXSB9LFxuICAgICAgeyBuYW1lOlwiRGlhIGRvIFRyYWJhbGhhZG9yXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiQ29ycHVzIENocmlzdGlcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgIHsgbmFtZTpcIkluZGVwZW5kw6puY2lhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgIDcgXSB9LFxuICAgICAgeyBuYW1lOlwiTm9zc2EgU2VuaG9yYSBBcGFyZWNpZGFcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgIDEyIF0gfSxcbiAgICAgIHsgbmFtZTpcIkZpbmFkb3NcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDIgXSB9LFxuICAgICAgeyBuYW1lOlwiUHJvY2xhbWHDp8OjbyBkYSBSZXDDumJsaWNhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxNSBdIH0sXG4gICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjUgXSB9IF0sXG4gICAgQWNyZTp7IFBIOlsgeyBuYW1lOlwiQW5vIE5vdm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gZXZhbmfDqWxpY29cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJBbHVzaXZvIGFvIERpYSBJbnRlcm5hY2lvbmFsIGRhIE11bGhlclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJBbml2ZXJzw6FyaW8gZG8gZXN0YWRvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkYSBBbWF6w7RuaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQXNzaW5hdHVyYSBkbyBUcmF0YWRvIGRlIFBldHLDs3BvbGlzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgQWxhZ29hczp7IFBIOlsgeyBuYW1lOlwiQW5vIE5vdm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDYXJuYXZhbFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJTw6NvIEpvw6NvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAyNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlPDo28gUGVkcm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAgIDI5IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJFbWFuY2lwYcOnw6NvIHBvbMOtdGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgMTYgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1vcnRlIGRlIFp1bWJpIGRvcyBQYWxtYXJlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIwIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFwiQW1hcMOhXCI6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZGUgU8OjbyBKb3PDqVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgMTkgXSB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEYXRhIE1hZ25hIGRvIGVzdGFkb1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgMTMgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBBbWF6b25hczp7IFBIOlsgeyBuYW1lOlwiQW5vIE5vdm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDYXJuYXZhbFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJEYXRhIE1hZ25hIGRvIGVzdGFkb1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kw6puY2lhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTm9zc2EgU2VuaG9yYSBBcGFyZWNpZGFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkZpbmFkb3NcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUHJvY2xhbWHDp8OjbyBkYSBSZXDDumJsaWNhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZGEgQ29uc2Npw6puY2lhIE5lZ3JhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMjAgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgQmFoaWE6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiRGF0YSBtYWduYSBkbyBlc3RhZG9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFwiQ2VhcsOhXCI6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJEYXRhIG1hZ25hIGRvIGVzdGFkb1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIkRpc3RyaXRvIEZlZGVyYWxcIjp7IFBIOlsgeyBuYW1lOlwiQW5vIE5vdm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDYXJuYXZhbFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGlhIGRvIGV2YW5nw6lsaWNvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMzAgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgXCJFc3DDrXJpdG8gU2FudG9cIjp7IFBIOlsgeyBuYW1lOlwiQW5vIE5vdm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDYXJuYXZhbFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRhdGEgbWFnbmEgZG8gZXN0YWRvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFwiR29pw6FzXCI6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIk1hcmFuaMOjb1wiOnsgUEg6WyB7IG5hbWU6XCJBbm8gTm92b1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhcm5hdmFsXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotNDcgfSxcbiAgICAgICAgeyBuYW1lOlwiU2V4dGEtZmVpcmEgc2FudGFcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlRpcmFkZW50ZXNcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDIxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGlhIGRvIFRyYWJhbGhhZG9yXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ29ycHVzIENocmlzdGlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjYwIH0sXG4gICAgICAgIHsgbmFtZTpcIkRhdGEgbWFnbmEgZG8gZXN0YWRvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICAyOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kw6puY2lhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTm9zc2EgU2VuaG9yYSBBcGFyZWNpZGFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkZpbmFkb3NcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUHJvY2xhbWHDp8OjbyBkYSBSZXDDumJsaWNhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgXCJNYXRvIEdyb3Nzb1wiOnsgUEg6WyB7IG5hbWU6XCJBbm8gTm92b1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhcm5hdmFsXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotNDcgfSxcbiAgICAgICAgeyBuYW1lOlwiU2V4dGEtZmVpcmEgc2FudGFcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlRpcmFkZW50ZXNcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDIxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGlhIGRvIFRyYWJhbGhhZG9yXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ29ycHVzIENocmlzdGlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjYwIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kw6puY2lhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTm9zc2EgU2VuaG9yYSBBcGFyZWNpZGFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkZpbmFkb3NcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUHJvY2xhbWHDp8OjbyBkYSBSZXDDumJsaWNhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZGEgQ29uc2Npw6puY2lhIE5lZ3JhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMjAgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgXCJNYXRvIEdyb3NzbyBkbyBTdWxcIjp7IFBIOlsgeyBuYW1lOlwiQW5vIE5vdm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDYXJuYXZhbFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNyaWHDp8OjbyBkbyBlc3RhZG9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFwiTWluYXMgR2VyYWlzXCI6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEYXRhIG1hZ25hIGRvIGVzdGFkb1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIlBhcsOhXCI6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiRGF0YSBtYWduYSBkbyBlc3RhZG9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOCxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIlBhcmHDrWJhXCI6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiSG9tZW5hZ2VtIGEgSm/Do28gUGVzc29hXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICAyNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRhdGEgbWFnbmEgZG8gZXN0YWRvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIlBhcmFuw6FcIjp7IFBIOlsgeyBuYW1lOlwiQW5vIE5vdm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDYXJuYXZhbFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGF0YSBtYWduYSBkbyBlc3RhZG9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAxOSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBQZXJuYW1idWNvOnsgUEg6WyB7IG5hbWU6XCJBbm8gTm92b1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhcm5hdmFsXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotNDcgfSxcbiAgICAgICAgeyBuYW1lOlwiRGF0YSBtYWduYSBkbyBlc3RhZG9cIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RNYXJjaFN1bmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFwiUGlhdcOtXCI6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGF0YSBtYWduYSBkbyBlc3RhZG9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICAxOSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkZpbmFkb3NcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUHJvY2xhbWHDp8OjbyBkYSBSZXDDumJsaWNhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgXCJSaW8gZGUgSmFuZWlyb1wiOnsgUEg6WyB7IG5hbWU6XCJBbm8gTm92b1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhcm5hdmFsXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotNDcgfSxcbiAgICAgICAgeyBuYW1lOlwiU2V4dGEtZmVpcmEgc2FudGFcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlRpcmFkZW50ZXNcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDIxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGlhIGRvIFRyYWJhbGhhZG9yXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ29ycHVzIENocmlzdGlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjYwIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kw6puY2lhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTm9zc2EgU2VuaG9yYSBBcGFyZWNpZGFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkZpbmFkb3NcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUHJvY2xhbWHDp8OjbyBkYSBSZXDDumJsaWNhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZGEgQ29uc2Npw6puY2lhIE5lZ3JhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMjAgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgXCJSaW8gR3JhbmRlIGRvIE5vcnRlXCI6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJTw6NvIEpvcmdlXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk3DoXJ0aXJlcyBkZSBDdW5oYcO6IGUgVXJ1YcOndVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDMgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIlJpbyBHcmFuZGUgZG8gU3VsXCI6eyBQSDpbIHsgbmFtZTpcIkFubyBOb3ZvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2EgUmlvLUdyYW5kZW5zZVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgMjAgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIlJvbmTDtG5pYVwiOnsgUEg6WyB7IG5hbWU6XCJBbm8gTm92b1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRhdGEgbWFnbmEgZG8gZXN0YWRvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FybmF2YWxcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi00NyB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiRGlhIGRvIGV2YW5nw6lsaWNvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAxOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kw6puY2lhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTm9zc2EgU2VuaG9yYSBBcGFyZWNpZGFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkZpbmFkb3NcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUHJvY2xhbWHDp8OjbyBkYSBSZXDDumJsaWNhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgUm9yYWltYTp7IFBIOlsgeyBuYW1lOlwiQW5vIE5vdm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDYXJuYXZhbFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRhdGEgbWFnbmEgZG8gZXN0YWRvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFwiU2FudGEgQ2F0YXJpbmFcIjp7IFBIOlsgeyBuYW1lOlwiQW5vIE5vdm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDYXJuYXZhbFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICAgIHsgbmFtZTpcIlNleHRhLWZlaXJhIHNhbnRhXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJUaXJhZGVudGVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRpYSBkbyBUcmFiYWxoYWRvclwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvcnB1cyBDaHJpc3RpXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgICB7IG5hbWU6XCJEYXRhIG1hZ25hIGRvIGVzdGFkb1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiU2FudGEgQ2F0YXJpbmEgZGUgQWxleGFuZHJpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFwiU8OjbyBQYXVsb1wiOnsgUEg6WyB7IG5hbWU6XCJBbm8gTm92b1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhcm5hdmFsXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotNDcgfSxcbiAgICAgICAgeyBuYW1lOlwiU2V4dGEtZmVpcmEgc2FudGFcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlRpcmFkZW50ZXNcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDIxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGlhIGRvIFRyYWJhbGhhZG9yXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ29ycHVzIENocmlzdGlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjYwIH0sXG4gICAgICAgIHsgbmFtZTpcIkRhdGEgbWFnbmEgZG8gZXN0YWRvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA5IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIEFwYXJlY2lkYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmluYWRvc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcm9jbGFtYcOnw6NvIGRhIFJlcMO6YmxpY2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGFsXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBTZXJnaXBlOnsgUEg6WyB7IG5hbWU6XCJBbm8gTm92b1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhcm5hdmFsXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotNDcgfSxcbiAgICAgICAgeyBuYW1lOlwiQW5pdmVyc8OhcmlvIGRlIEFyYWNhanVcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDE3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiU2V4dGEtZmVpcmEgc2FudGFcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlRpcmFkZW50ZXNcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDIxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGlhIGRvIFRyYWJhbGhhZG9yXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ29ycHVzIENocmlzdGlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjYwIH0sXG4gICAgICAgIHsgbmFtZTpcIlPDo28gSm/Do29cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAgIDI0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGF0YSBtYWduYSBkbyBlc3RhZG9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZMOqbmNpYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTm9zc2EgU2VuaG9yYSBkYSBDb25jZWnDp8Ojb1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgVG9jYW50aW5zOnsgUEg6WyB7IG5hbWU6XCJBbm8gTm92b1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhcm5hdmFsXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotNDcgfSxcbiAgICAgICAgeyBuYW1lOlwiQXV0b25vbWlhIGRvIGVzdGFkb1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgMTggXSB9LFxuICAgICAgICB7IG5hbWU6XCJTZXh0YS1mZWlyYSBzYW50YVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGlyYWRlbnRlc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgICAgMjEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEaWEgZG8gVHJhYmFsaGFkb3JcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDb3JwdXMgQ2hyaXN0aVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6NjAgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmTDqm5jaWFcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOb3NzYSBTZW5ob3JhIGRhIE5hdGl2aWRhZGVcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCJDcmlhw6fDo28gZG8gZXN0YWRvXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5vc3NhIFNlbmhvcmEgQXBhcmVjaWRhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGaW5hZG9zXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlByb2NsYW1hw6fDo28gZGEgUmVww7pibGljYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9IH07XG4gIGRhdGEkei5QSDtcbiAgZGF0YSR6LkFjcmU7XG4gIGRhdGEkei5BbGFnb2FzO1xuICBkYXRhJHouQW1hem9uYXM7XG4gIGRhdGEkei5CYWhpYTtcbiAgZGF0YSR6LlBlcm5hbWJ1Y287XG4gIGRhdGEkei5Sb3JhaW1hO1xuICBkYXRhJHouU2VyZ2lwZTtcbiAgZGF0YSR6LlRvY2FudGlucztcblxuICB2YXIgZGF0YSR5ID0geyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgIHsgbmFtZTpcIkNhbmFkYSBEYXlcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImNhbmFkYURheVwiIH0sXG4gICAgICB7IG5hbWU6XCJMYWJvdXIgRGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0gXSxcbiAgICBBbGJlcnRhOnsgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkFsYmVydGEgRmFtaWx5IERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDoxIH0sXG4gICAgICAgIHsgbmFtZTpcIlZpY3RvcmlhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJ2aWN0b3JpYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhbmFkYSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiY2FuYWRhRGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSGVyaXRhZ2UgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0QXVndXN0TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3VyIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJSZW1lbWJyYW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkJveGluZyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNiBdIH0gXSB9LFxuICAgIFwiQnJpdGlzaCBDb2x1bWJpYVwiOnsgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkZhbWlseSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJWaWN0b3JpYSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwidmljdG9yaWFEYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDYW5hZGEgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImNhbmFkYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkJyaXRpc2ggQ29sdW1iaWEgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0QXVndXN0TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3VyIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJSZW1lbWJyYW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIE1hbml0b2JhOnsgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxvdWlzIFJpZWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlZpY3RvcmlhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJ2aWN0b3JpYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhbmFkYSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiY2FuYWRhRGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2l2aWMgSG9saWRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEF1Z3VzdE1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm91ciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiUmVtZW1icmFuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIk5ldyBCcnVuc3dpY2tcIjp7IFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJHb29kIEZyaWRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiVmljdG9yaWEgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcInZpY3RvcmlhRGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FuYWRhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJjYW5hZGFEYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJOZXcgQnJ1bnN3aWNrIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEF1Z3VzdE1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm91ciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiUmVtZW1icmFuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJCb3hpbmcgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjYgXSB9IF0gfSxcbiAgICBcIk5ld2ZvdW5kbGFuZCBhbmQgTGFicmFkb3JcIjp7IFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJTYWludCBQYXRyaWNrJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgICAxNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJTYWludCBHZW9yZ2UncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGlzY292ZXJ5IERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMjQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJPcmFuZ2VtZW4ncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3VyIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkFybWlzdGljZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFwiTm9ydGh3ZXN0IFRlcnJpdG9yaWVzXCI6eyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlZpY3RvcmlhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJ2aWN0b3JpYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGlvbmFsIEFib3JpZ2luYWwgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhbmFkYSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiY2FuYWRhRGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2l2aWMgSG9saWRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEF1Z3VzdE1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm91ciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiUmVtZW1icmFuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIk5vdmEgU2NvdGlhXCI6eyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlZpY3RvcmlhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJ2aWN0b3JpYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhbmFkYSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiY2FuYWRhRGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0QXVndXN0TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3VyIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJSZW1lbWJyYW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkJveGluZyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNiBdIH0gXSB9LFxuICAgIE51bmF2dXQ6eyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlZpY3RvcmlhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJ2aWN0b3JpYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhbmFkYSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiY2FuYWRhRGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiTnVuYXZ1dCBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDaXZpYyBIb2xpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0QXVndXN0TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3VyIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJSZW1lbWJyYW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIE9udGFyaW86eyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmFtaWx5IERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJWaWN0b3JpYSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwidmljdG9yaWFEYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDYW5hZGEgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImNhbmFkYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkF1Z3VzdCBDaXZpYyBQdWJsaWMgSG9saWRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEF1Z3VzdE1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm91ciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiUmVtZW1icmFuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJCb3hpbmcgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjYgXSB9IF0gfSxcbiAgICBcIlByaW5jZSBFZHdhcmQgSXNsYW5kXCI6eyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiSXNsYW5kZXIgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhc3RlciBNb25kYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgICAgeyBuYW1lOlwiVmljdG9yaWEgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcInZpY3RvcmlhRGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2FuYWRhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJjYW5hZGFEYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDaXZpYyBIb2xpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0QXVndXN0TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiR29sZCBDdXAgUGFyYWRlIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEF1Z3VzdE1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxOCB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvdXIgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlJlbWVtYnJhbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQm94aW5nIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI2IF0gfSBdIH0sXG4gICAgUXVlYmVjOnsgUEg6WyB7IG5hbWU6XCJKb3VyIGRlIGwnYW5cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJWZW5kcmVkaSBzYWludFwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiTHVuZGkgZGUgUMOicXVlc1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgICB7IG5hbWU6XCJKb3VybsOpZSBuYXRpb25hbGUgZGVzIHBhdHJpb3Rlc1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJ2aWN0b3JpYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkbDqnRlIG5hdGlvbmFsZSBkdSBRdcOpYmVjXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAyNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkbDqnRlIGR1IENhbmFkYVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJjYW5hZGFEYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJGw6p0ZSBkdSBUcmF2YWlsXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSm91ciBkZSBsJ0FjdGlvbiBkZSBncsOiY2VcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiTm/Dq2xcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFNhc2thdGNoZXdhbjp7IFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJGYW1pbHkgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIlZpY3RvcmlhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJ2aWN0b3JpYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhbmFkYSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiY2FuYWRhRGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiU2Fza2F0Y2hld2FuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEF1Z3VzdE1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm91ciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiUmVtZW1icmFuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBZdWtvbjp7IFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJIZXJpdGFnZSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdEZlYnJ1YXJ5U3VuZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDoxIH0sXG4gICAgICAgIHsgbmFtZTpcIlZpY3RvcmlhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJ2aWN0b3JpYURheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhbmFkYSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiY2FuYWRhRGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiRGlzY292ZXJ5IERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEF1Z3VzdE1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvdXIgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlJlbWVtYnJhbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQm94aW5nIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI2IF0gfSBdIH0gfTtcbiAgZGF0YSR5LlBIO1xuICBkYXRhJHkuQWxiZXJ0YTtcbiAgZGF0YSR5Lk1hbml0b2JhO1xuICBkYXRhJHkuTnVuYXZ1dDtcbiAgZGF0YSR5Lk9udGFyaW87XG4gIGRhdGEkeS5RdWViZWM7XG4gIGRhdGEkeS5TYXNrYXRjaGV3YW47XG4gIGRhdGEkeS5ZdWtvbjtcblxuICB2YXIgZGF0YSR4ID0geyBQSDpbIHsgbmFtZTpcIk5ldWphaHJzdGFnL05vdXZlbCBhbi9DYXBvIGQnYW5ub1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkJlcmNodG9sZHN0YWcvMiBqYW52aWVyXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDIgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIlrDvHJpY2hcIixcbiAgICAgICAgICBcIkJlcm5cIixcbiAgICAgICAgICBcIkx1emVyblwiLFxuICAgICAgICAgIFwiT2J3YWxkZW5cIixcbiAgICAgICAgICBcIk5pZHdhbGRlblwiLFxuICAgICAgICAgIFwiR2xhcnVzXCIsXG4gICAgICAgICAgXCJadWdcIixcbiAgICAgICAgICBcIkZyZWlidXJnXCIsXG4gICAgICAgICAgXCJTb2xvdGh1cm5cIixcbiAgICAgICAgICBcIlNjaGFmZmhhdXNlblwiLFxuICAgICAgICAgIFwiR3JhdWLDvG5kZW5cIixcbiAgICAgICAgICBcIkFhcmdhdVwiLFxuICAgICAgICAgIFwiVGh1cmdhdVwiLFxuICAgICAgICAgIFwiV2FhZHRcIixcbiAgICAgICAgICBcIk5ldWVuYnVyZ1wiLFxuICAgICAgICAgIFwiR2VuZlwiLFxuICAgICAgICAgIFwiSnVyYVwiLFxuICAgICAgICAgIFwiU2Fua3QgR2FsbGVuXCIsXG4gICAgICAgICAgXCJXYWxsaXNcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJIZWlsaWdlIERyZWkgS8O2bmlnZS9FcGlmYW5pYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICA2IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJVcmlcIixcbiAgICAgICAgICBcIlNjaHd5elwiLFxuICAgICAgICAgIFwiR3JhdWLDvG5kZW5cIixcbiAgICAgICAgICBcIlRlc3NpblwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkluc3RhdXJhdGlvbiBkZSBsYSBSw6lwdWJsaXF1ZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAxIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJOZXVlbmJ1cmdcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJKb3NlZnN0YWcvU2FpbnQtSm9zZXBoL1NhbiBHaXVzZXBwZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAxOSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiTHV6ZXJuXCIsXG4gICAgICAgICAgXCJVcmlcIixcbiAgICAgICAgICBcIlNjaHd5elwiLFxuICAgICAgICAgIFwiTmlkd2FsZGVuXCIsXG4gICAgICAgICAgXCJadWdcIixcbiAgICAgICAgICBcIkdyYXViw7xuZGVuXCIsXG4gICAgICAgICAgXCJUZXNzaW5cIixcbiAgICAgICAgICBcIldhbGxpc1wiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkthcmZyZWl0YWcvVmVuZHJlZGkgc2FpbnRcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTIsXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJaw7xyaWNoXCIsXG4gICAgICAgICAgXCJCZXJuXCIsXG4gICAgICAgICAgXCJMdXplcm5cIixcbiAgICAgICAgICBcIlVyaVwiLFxuICAgICAgICAgIFwiU2Nod3l6XCIsXG4gICAgICAgICAgXCJPYndhbGRlblwiLFxuICAgICAgICAgIFwiTmlkd2FsZGVuXCIsXG4gICAgICAgICAgXCJHbGFydXNcIixcbiAgICAgICAgICBcIlp1Z1wiLFxuICAgICAgICAgIFwiRnJlaWJ1cmdcIixcbiAgICAgICAgICBcIlNvbG90aHVyblwiLFxuICAgICAgICAgIFwiQmFzZWwtU3RhZHRcIixcbiAgICAgICAgICBcIkJhc2VsLUxhbmRzY2hhZnRcIixcbiAgICAgICAgICBcIlNjaGFmZmhhdXNlblwiLFxuICAgICAgICAgIFwiQXBwZW56ZWxsIEF1c3NlcnJob2RlblwiLFxuICAgICAgICAgIFwiQXBwZW56ZWxsIElubmVycmhvZGVuXCIsXG4gICAgICAgICAgXCJTYW5rdCBHYWxsZW5cIixcbiAgICAgICAgICBcIkdyYXViw7xuZGVuXCIsXG4gICAgICAgICAgXCJBYXJnYXVcIixcbiAgICAgICAgICBcIlRodXJnYXVcIixcbiAgICAgICAgICBcIldhYWR0XCIsXG4gICAgICAgICAgXCJOZXVlbmJ1cmdcIixcbiAgICAgICAgICBcIkdlbmZcIixcbiAgICAgICAgICBcIkp1cmFcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJPc3Rlcm1vbnRhZy9MdW5kaSBkZSBQw6JxdWVzL0x1bmVkaSBkaSBQYXNxdWFcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIlrDvHJpY2hcIixcbiAgICAgICAgICBcIkJlcm5cIixcbiAgICAgICAgICBcIkx1emVyblwiLFxuICAgICAgICAgIFwiVXJpXCIsXG4gICAgICAgICAgXCJTY2h3eXpcIixcbiAgICAgICAgICBcIk9id2FsZGVuXCIsXG4gICAgICAgICAgXCJOaWR3YWxkZW5cIixcbiAgICAgICAgICBcIkdsYXJ1c1wiLFxuICAgICAgICAgIFwiWnVnXCIsXG4gICAgICAgICAgXCJGcmVpYnVyZ1wiLFxuICAgICAgICAgIFwiU29sb3RodXJuXCIsXG4gICAgICAgICAgXCJCYXNlbC1TdGFkdFwiLFxuICAgICAgICAgIFwiQmFzZWwtTGFuZHNjaGFmdFwiLFxuICAgICAgICAgIFwiU2NoYWZmaGF1c2VuXCIsXG4gICAgICAgICAgXCJBcHBlbnplbGwgQXVzc2VycmhvZGVuXCIsXG4gICAgICAgICAgXCJBcHBlbnplbGwgSW5uZXJyaG9kZW5cIixcbiAgICAgICAgICBcIlNhbmt0IEdhbGxlblwiLFxuICAgICAgICAgIFwiR3JhdWLDvG5kZW5cIixcbiAgICAgICAgICBcIkFhcmdhdVwiLFxuICAgICAgICAgIFwiVGh1cmdhdVwiLFxuICAgICAgICAgIFwiVGVzc2luXCIsXG4gICAgICAgICAgXCJXYWFkdFwiLFxuICAgICAgICAgIFwiTmV1ZW5idXJnXCIsXG4gICAgICAgICAgXCJHZW5mXCIsXG4gICAgICAgICAgXCJKdXJhXCIsXG4gICAgICAgICAgXCJXYWxsaXNcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJUYWcgZGVyIEFyYmVpdC9GZXN0YSBkZWkgbGF2b3JhdG9yaVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAxIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJaw7xyaWNoXCIsXG4gICAgICAgICAgXCJGcmVpYnVyZ1wiLFxuICAgICAgICAgIFwiU29sb3RodXJuXCIsXG4gICAgICAgICAgXCJCYXNlbC1TdGFkdFwiLFxuICAgICAgICAgIFwiQmFzZWwtTGFuZHNjaGFmdFwiLFxuICAgICAgICAgIFwiU2NoYWZmaGF1c2VuXCIsXG4gICAgICAgICAgXCJBYXJnYXVcIixcbiAgICAgICAgICBcIlRodXJnYXVcIixcbiAgICAgICAgICBcIlRlc3NpblwiLFxuICAgICAgICAgIFwiTmV1ZW5idXJnXCIsXG4gICAgICAgICAgXCJKdXJhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiQXVmZmFocnQvQXNjZW5zaW9uL0FzY2Vuc2lvbmVcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MzkgfSxcbiAgICAgIHsgbmFtZTpcIlBmaW5nc3Rtb250YWcvTHVuZGkgZGUgUGVudGVjw7R0ZS9MdW5lZGkgZGkgUGVudGVjb3N0ZVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo1MCxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIlrDvHJpY2hcIixcbiAgICAgICAgICBcIkJlcm5cIixcbiAgICAgICAgICBcIkx1emVyblwiLFxuICAgICAgICAgIFwiVXJpXCIsXG4gICAgICAgICAgXCJTY2h3eXpcIixcbiAgICAgICAgICBcIk9id2FsZGVuXCIsXG4gICAgICAgICAgXCJOaWR3YWxkZW5cIixcbiAgICAgICAgICBcIkdsYXJ1c1wiLFxuICAgICAgICAgIFwiWnVnXCIsXG4gICAgICAgICAgXCJGcmVpYnVyZ1wiLFxuICAgICAgICAgIFwiU29sb3RodXJuXCIsXG4gICAgICAgICAgXCJCYXNlbC1TdGFkdFwiLFxuICAgICAgICAgIFwiQmFzZWwtTGFuZHNjaGFmdFwiLFxuICAgICAgICAgIFwiU2NoYWZmaGF1c2VuXCIsXG4gICAgICAgICAgXCJBcHBlbnplbGwgQXVzc2VycmhvZGVuXCIsXG4gICAgICAgICAgXCJBcHBlbnplbGwgSW5uZXJyaG9kZW5cIixcbiAgICAgICAgICBcIlNhbmt0IEdhbGxlblwiLFxuICAgICAgICAgIFwiR3JhdWLDvG5kZW5cIixcbiAgICAgICAgICBcIkFhcmdhdVwiLFxuICAgICAgICAgIFwiVGh1cmdhdVwiLFxuICAgICAgICAgIFwiVGVzc2luXCIsXG4gICAgICAgICAgXCJXYWFkdFwiLFxuICAgICAgICAgIFwiTmV1ZW5idXJnXCIsXG4gICAgICAgICAgXCJHZW5mXCIsXG4gICAgICAgICAgXCJKdXJhXCIsXG4gICAgICAgICAgXCJXYWxsaXNcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJGcm9ubGVpY2huYW0vRsOqdGUtRGlldS9Db3JwdXMgZG9taW5pXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjYwLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiTHV6ZXJuXCIsXG4gICAgICAgICAgXCJVcmlcIixcbiAgICAgICAgICBcIlNjaHd5elwiLFxuICAgICAgICAgIFwiT2J3YWxkZW5cIixcbiAgICAgICAgICBcIk5pZHdhbGRlblwiLFxuICAgICAgICAgIFwiWnVnXCIsXG4gICAgICAgICAgXCJGcmVpYnVyZ1wiLFxuICAgICAgICAgIFwiU29sb3RodXJuXCIsXG4gICAgICAgICAgXCJCYXNlbC1MYW5kc2NoYWZ0XCIsXG4gICAgICAgICAgXCJBcHBlbnplbGwgSW5uZXJyaG9kZW5cIixcbiAgICAgICAgICBcIkdyYXViw7xuZGVuXCIsXG4gICAgICAgICAgXCJBYXJnYXVcIixcbiAgICAgICAgICBcIlRlc3NpblwiLFxuICAgICAgICAgIFwiV2FsbGlzXCIsXG4gICAgICAgICAgXCJOZXVlbmJ1cmdcIixcbiAgICAgICAgICBcIkp1cmFcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJDb21tw6ltb3JhdGlvbiBkdSBwbMOpYmlzY2l0ZSBqdXJhc3NpZW5cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgMjMgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkp1cmFcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJTYW4gUGlldHJvIGUgUGFvbG9cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgMjkgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIlRlc3NpblwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkJ1bmRlc2ZlaWVydGFnL0pvdXIgZGUgbGEgZsOqdGUgbmF0aW9uYWxlL0dpb3JubyBmZXN0aXZvIGZlZGVyYWxlXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiTWFyacOkIEhpbW1lbGZhaHJ0L0Fzc29tcHRpb24vQXNzdW56aW9uZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOCxcbiAgICAgICAgICAxNSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiTHV6ZXJuXCIsXG4gICAgICAgICAgXCJVcmlcIixcbiAgICAgICAgICBcIlNjaHd5elwiLFxuICAgICAgICAgIFwiT2J3YWxkZW5cIixcbiAgICAgICAgICBcIk5pZHdhbGRlblwiLFxuICAgICAgICAgIFwiWnVnXCIsXG4gICAgICAgICAgXCJGcmVpYnVyZ1wiLFxuICAgICAgICAgIFwiU29sb3RodXJuXCIsXG4gICAgICAgICAgXCJCYXNlbC1MYW5kc2NoYWZ0XCIsXG4gICAgICAgICAgXCJBcHBlbnplbGwgSW5uZXJyaG9kZW5cIixcbiAgICAgICAgICBcIkdyYXViw7xuZGVuXCIsXG4gICAgICAgICAgXCJBYXJnYXVcIixcbiAgICAgICAgICBcIlRlc3NpblwiLFxuICAgICAgICAgIFwiV2FsbGlzXCIsXG4gICAgICAgICAgXCJKdXJhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiTWF1cml0aXVzdGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgIDIyIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJBcHBlbnplbGwgSW5uZXJyaG9kZW5cIiBdIH0sXG4gICAgICB7IG5hbWU6XCJCcnVkZXJrbGF1c2VuZmVzdFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAyNSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiT2J3YWxkZW5cIiBdIH0sXG4gICAgICB7IG5hbWU6XCJBbGxlcmhlaWxpZ2VuL1RvdXNzYWludC9PZ25pc3NhbnRpXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJMdXplcm5cIixcbiAgICAgICAgICBcIlVyaVwiLFxuICAgICAgICAgIFwiU2Nod3l6XCIsXG4gICAgICAgICAgXCJPYndhbGRlblwiLFxuICAgICAgICAgIFwiTmlkd2FsZGVuXCIsXG4gICAgICAgICAgXCJHbGFydXNcIixcbiAgICAgICAgICBcIlp1Z1wiLFxuICAgICAgICAgIFwiRnJlaWJ1cmdcIixcbiAgICAgICAgICBcIlNvbG90aHVyblwiLFxuICAgICAgICAgIFwiQXBwZW56ZWxsIElubmVycmhvZGVuXCIsXG4gICAgICAgICAgXCJTYW5rdCBHYWxsZW5cIixcbiAgICAgICAgICBcIkdyYXViw7xuZGVuXCIsXG4gICAgICAgICAgXCJBYXJnYXVcIixcbiAgICAgICAgICBcIlRlc3NpblwiLFxuICAgICAgICAgIFwiV2FsbGlzXCIsXG4gICAgICAgICAgXCJKdXJhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiTWFyacOkIEVtcGbDpG5nbmlzL0ltbWFjdWzDqWUgQ29uY2VwdGlvbi9PZ25pc3NhbnRpXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICA4IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJMdXplcm5cIixcbiAgICAgICAgICBcIlVyaVwiLFxuICAgICAgICAgIFwiU2Nod3l6XCIsXG4gICAgICAgICAgXCJPYndhbGRlblwiLFxuICAgICAgICAgIFwiTmlkd2FsZGVuXCIsXG4gICAgICAgICAgXCJadWdcIixcbiAgICAgICAgICBcIkZyZWlidXJnXCIsXG4gICAgICAgICAgXCJTb2xvdGh1cm5cIixcbiAgICAgICAgICBcIkFwcGVuemVsbCBJbm5lcnJob2RlblwiLFxuICAgICAgICAgIFwiR3JhdWLDvG5kZW5cIixcbiAgICAgICAgICBcIkFhcmdhdVwiLFxuICAgICAgICAgIFwiVGVzc2luXCIsXG4gICAgICAgICAgXCJXYWxsaXNcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJXZWlobmFjaHRzdGFnL05vw6tsL05hdGFsZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjUgXSB9LFxuICAgICAgeyBuYW1lOlwiU3RlcGhhbnN0YWcvU2FpbnQtRXRpZW5uZS9TYW50byBTdGVmYW5vXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNiBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiWsO8cmljaFwiLFxuICAgICAgICAgIFwiQmVyblwiLFxuICAgICAgICAgIFwiTHV6ZXJuXCIsXG4gICAgICAgICAgXCJVcmlcIixcbiAgICAgICAgICBcIlNjaHd5elwiLFxuICAgICAgICAgIFwiT2J3YWxkZW5cIixcbiAgICAgICAgICBcIk5pZHdhbGRlblwiLFxuICAgICAgICAgIFwiR2xhcnVzXCIsXG4gICAgICAgICAgXCJadWdcIixcbiAgICAgICAgICBcIkZyZWlidXJnXCIsXG4gICAgICAgICAgXCJTb2xvdGh1cm5cIixcbiAgICAgICAgICBcIkJhc2VsLVN0YWR0XCIsXG4gICAgICAgICAgXCJCYXNlbC1MYW5kc2NoYWZ0XCIsXG4gICAgICAgICAgXCJTY2hhZmZoYXVzZW5cIixcbiAgICAgICAgICBcIkFwcGVuemVsbCBBdXNzZXJyaG9kZW5cIixcbiAgICAgICAgICBcIkFwcGVuemVsbCBJbm5lcnJob2RlblwiLFxuICAgICAgICAgIFwiU2Fua3QgR2FsbGVuXCIsXG4gICAgICAgICAgXCJHcmF1YsO8bmRlblwiLFxuICAgICAgICAgIFwiQWFyZ2F1XCIsXG4gICAgICAgICAgXCJUaHVyZ2F1XCIsXG4gICAgICAgICAgXCJUZXNzaW5cIixcbiAgICAgICAgICBcIldhbGxpc1wiIF0gfSxcbiAgICAgIHsgbmFtZTpcIlJlc3RhdXJhdGlvbiBkZSBsYSBSw6lwdWJsaXF1ZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMzEgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkdlbmZcIiBdIH0gXSxcbiAgICBBYXJnYXU6eyBfc3RhdGVfY29kZTpcImFnXCIgfSxcbiAgICBcIkFwcGVuemVsbCBBdXNzZXJyaG9kZW5cIjp7IF9zdGF0ZV9jb2RlOlwiYXJcIiB9LFxuICAgIFwiQXBwZW56ZWxsIElubmVycmhvZGVuXCI6eyBfc3RhdGVfY29kZTpcImFpXCIgfSxcbiAgICBcIkJhc2VsLUxhbmRzY2hhZnRcIjp7IF9zdGF0ZV9jb2RlOlwiYmxcIiB9LFxuICAgIFwiQmFzZWwtU3RhZHRcIjp7IF9zdGF0ZV9jb2RlOlwiYnNcIiB9LFxuICAgIEJlcm46eyBfc3RhdGVfY29kZTpcImJlXCIgfSxcbiAgICBGcmVpYnVyZzp7IF9zdGF0ZV9jb2RlOlwiZnJcIiB9LFxuICAgIEdlbmY6eyBfc3RhdGVfY29kZTpcImdlXCIgfSxcbiAgICBHbGFydXM6eyBfc3RhdGVfY29kZTpcImdsXCIgfSxcbiAgICBcIkdyYXViw7xuZGVuXCI6eyBfc3RhdGVfY29kZTpcImdyXCIgfSxcbiAgICBKdXJhOnsgX3N0YXRlX2NvZGU6XCJqdVwiIH0sXG4gICAgTHV6ZXJuOnsgX3N0YXRlX2NvZGU6XCJsdVwiIH0sXG4gICAgTmV1ZW5idXJnOnsgX3N0YXRlX2NvZGU6XCJuZVwiIH0sXG4gICAgTmlkd2FsZGVuOnsgX3N0YXRlX2NvZGU6XCJud1wiIH0sXG4gICAgT2J3YWxkZW46eyBfc3RhdGVfY29kZTpcIm93XCIgfSxcbiAgICBTY2hhZmZoYXVzZW46eyBfc3RhdGVfY29kZTpcInNoXCIgfSxcbiAgICBTY2h3eXo6eyBfc3RhdGVfY29kZTpcInN6XCIgfSxcbiAgICBTb2xvdGh1cm46eyBfc3RhdGVfY29kZTpcInNvXCIgfSxcbiAgICBcIlNhbmt0IEdhbGxlblwiOnsgX3N0YXRlX2NvZGU6XCJzZ1wiIH0sXG4gICAgVGVzc2luOnsgX3N0YXRlX2NvZGU6XCJ0aVwiIH0sXG4gICAgVGh1cmdhdTp7IF9zdGF0ZV9jb2RlOlwidGdcIiB9LFxuICAgIFVyaTp7IF9zdGF0ZV9jb2RlOlwidXJcIiB9LFxuICAgIFdhYWR0OnsgX3N0YXRlX2NvZGU6XCJ2ZFwiIH0sXG4gICAgV2FsbGlzOnsgX3N0YXRlX2NvZGU6XCJ2c1wiIH0sXG4gICAgWnVnOnsgX3N0YXRlX2NvZGU6XCJ6Z1wiIH0sXG4gICAgXCJaw7xyaWNoXCI6eyBfc3RhdGVfY29kZTpcInpoXCIgfSB9O1xuICBkYXRhJHguUEg7XG4gIGRhdGEkeC5BYXJnYXU7XG4gIGRhdGEkeC5CZXJuO1xuICBkYXRhJHguRnJlaWJ1cmc7XG4gIGRhdGEkeC5HZW5mO1xuICBkYXRhJHguR2xhcnVzO1xuICBkYXRhJHguSnVyYTtcbiAgZGF0YSR4Lkx1emVybjtcbiAgZGF0YSR4Lk5ldWVuYnVyZztcbiAgZGF0YSR4Lk5pZHdhbGRlbjtcbiAgZGF0YSR4Lk9id2FsZGVuO1xuICBkYXRhJHguU2NoYWZmaGF1c2VuO1xuICBkYXRhJHguU2Nod3l6O1xuICBkYXRhJHguU29sb3RodXJuO1xuICBkYXRhJHguVGVzc2luO1xuICBkYXRhJHguVGh1cmdhdTtcbiAgZGF0YSR4LlVyaTtcbiAgZGF0YSR4LldhYWR0O1xuICBkYXRhJHguV2FsbGlzO1xuICBkYXRhJHguWnVnO1xuXG4gIHZhciBkYXRhJHcgPSB7IFBIOlsgeyBuYW1lOlwiRsOqdGUgZHUgMeG1icqzIGphbnZpZXJcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJMdW5kaSBkZSBQw6JxdWVzXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcIkbDqnRlIGR1IHRyYXZhaWxcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJMZW5kZW1haW4gZGUgbGEgRsOqdGUgZHUgdHJhdmFpbFwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwibmV4dE1vLVNhMDFNYXlcIiB9LFxuICAgICAgeyBuYW1lOlwiSm91ciBkZSBs4oCZQXNjZW5zaW9uXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjM5IH0sXG4gICAgICB7IG5hbWU6XCJMdW5kaSBkZSBsYSBQZW50ZWPDtHRlXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjUwIH0sXG4gICAgICB7IG5hbWU6XCJGw6p0ZSBuYXRpb25hbGVcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgNyBdIH0sXG4gICAgICB7IG5hbWU6XCJMZW5kZW1haW4gZGUgbGEgRsOqdGUgbmF0aW9uYWxlXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJuZXh0TW8tU2EwN0F1Z3VzdFwiIH0sXG4gICAgICB7IG5hbWU6XCJGw6p0ZSBkZSBs4oCZQXNzb21wdGlvblwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOCxcbiAgICAgICAgICAxNSBdIH0sXG4gICAgICB7IG5hbWU6XCJGw6p0ZSBkZSBsYSBUb3Vzc2FpbnRcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiSm91cm7DqWUgTmF0aW9uYWxlIGRlIGxhIFBhaXhcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDE1IF0gfSxcbiAgICAgIHsgbmFtZTpcIkbDqnRlIGRlIE5vw6tsXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCJMZW5kZW1haW4gZGUgbGEgRsOqdGUgZGUgTm/Dq2xcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcIm5leHRNby1TYTI1RGVjZW1iZXJcIiB9IF0gfTtcbiAgZGF0YSR3LlBIO1xuXG4gIHZhciBkYXRhJHYgPSB7IFBIOlsgeyBuYW1lOlwi5YWD5pemXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwi5aaH5aWz6IqCXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgIDggXSB9LFxuICAgICAgeyBuYW1lOlwi5Yqz5Yqo6IqCXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwi6Z2S5bm06IqCXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDQgXSB9LFxuICAgICAgeyBuYW1lOlwi5YS/56ul6IqCXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwi5Zu95bqG6IqCXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIuWbveW6huiKguS8keaBr+aXpVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgMiBdIH0sXG4gICAgICB7IG5hbWU6XCLlm73luoboioLkvJHmga/ml6VcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgIDMgXSB9IF0sXG4gICAgXCLopb/ol4/oh6rmsrvljLpcIjp7IFBIOlsgeyBuYW1lOlwi5YWD5pemXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi6KW/6JeP55m+5LiH5Yac5aW06Kej5pS+57qq5b+15pelXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgICAyOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIuWmh+Wls+iKglwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIuWKs+WKqOiKglwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIumdkuW5tOiKglwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIuWEv+erpeiKglwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIuWbveW6huiKglwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCLlm73luoboioLkvJHmga/ml6VcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi5Zu95bqG6IqC5LyR5oGv5pelXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMyBdIH0gXSB9IH07XG4gIGRhdGEkdi5QSDtcblxuICB2YXIgZGF0YSR1ID0geyBQSDpbIHsgbmFtZTpcIkRlbiBvYm5vdnkgc2Ftb3N0YXRuw6lobyDEjWVza8OpaG8gc3TDoXR1XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiVmVsa8O9IHDDoXRla1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgeyBuYW1lOlwiVmVsaWtvbm/EjW7DrSBwb25kxJtsw61cIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgeyBuYW1lOlwiU3bDoXRlayBwcsOhY2VcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJEZW4gdsOtdMSbenN0dsOtXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDggXSB9LFxuICAgICAgeyBuYW1lOlwiRGVuIHNsb3ZhbnNrw71jaCB2xJtyb3p2xJtzdMWvIEN5cmlsYSBhIE1ldG9kxJtqZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICA1IF0gfSxcbiAgICAgIHsgbmFtZTpcIkRlbiB1cMOhbGVuw60gbWlzdHJhIEphbmEgSHVzYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICA2IF0gfSxcbiAgICAgIHsgbmFtZTpcIkRlbiDEjWVza8OpIHN0w6F0bm9zdGlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgMjggXSB9LFxuICAgICAgeyBuYW1lOlwiRGVuIHZ6bmlrdSBzYW1vc3RhdG7DqWhvIMSNZXNrb3Nsb3ZlbnNrw6lobyBzdMOhdHVcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgIDI4IF0gfSxcbiAgICAgIHsgbmFtZTpcIkRlbiBib2plIHphIHN2b2JvZHUgYSBkZW1va3JhY2lpXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxNyBdIH0sXG4gICAgICB7IG5hbWU6XCLFoHTEm2Ryw70gZGVuXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNCBdIH0sXG4gICAgICB7IG5hbWU6XCIxLiBzdsOhdGVrIHbDoW5vxI1uw61cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcIjIuIHN2w6F0ZWsgdsOhbm/EjW7DrVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjYgXSB9IF0gfTtcbiAgZGF0YSR1LlBIO1xuXG4gIHZhciBkYXRhJHQgPSB7IFBIOlsgeyBuYW1lOlwiTmV1amFocnN0YWdcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJIZWlsaWdlIERyZWkgS8O2bmlnZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICA2IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJCYWRlbi1Xw7xydHRlbWJlcmdcIixcbiAgICAgICAgICBcIkJheWVyblwiLFxuICAgICAgICAgIFwiU2FjaHNlbi1BbmhhbHRcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJGcmF1ZW50YWdcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgOCBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQmVybGluXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiVGFnIGRlciBBcmJlaXRcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJLYXJmcmVpdGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICB7IG5hbWU6XCJPc3RlcnNvbm50YWdcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQnJhbmRlbmJ1cmdcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJPc3Rlcm1vbnRhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDoxIH0sXG4gICAgICB7IG5hbWU6XCJDaHJpc3RpIEhpbW1lbGZhaHJ0XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjM5IH0sXG4gICAgICB7IG5hbWU6XCJQZmluZ3N0c29ubnRhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo0OSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkJyYW5kZW5idXJnXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiUGZpbmdzdG1vbnRhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo1MCB9LFxuICAgICAgeyBuYW1lOlwiRnJvbmxlaWNobmFtXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjYwLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQmFkZW4tV8O8cnR0ZW1iZXJnXCIsXG4gICAgICAgICAgXCJCYXllcm5cIixcbiAgICAgICAgICBcIkhlc3NlblwiLFxuICAgICAgICAgIFwiTm9yZHJoZWluLVdlc3RmYWxlblwiLFxuICAgICAgICAgIFwiUmhlaW5sYW5kLVBmYWx6XCIsXG4gICAgICAgICAgXCJTYWFybGFuZFwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIk1hcmnDpCBIaW1tZWxmYWhydFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOCxcbiAgICAgICAgICAxNSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiU2FhcmxhbmRcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJXZWx0a2luZGVydGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgIDIwIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJUaMO8cmluZ2VuXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiVGFnIGRlciBEZXV0c2NoZW4gRWluaGVpdFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgMyBdIH0sXG4gICAgICB7IG5hbWU6XCJSZWZvcm1hdGlvbnN0YWdcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgIDMxIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJCcmFuZGVuYnVyZ1wiLFxuICAgICAgICAgIFwiQnJlbWVuXCIsXG4gICAgICAgICAgXCJIYW1idXJnXCIsXG4gICAgICAgICAgXCJNZWNrbGVuYnVyZy1Wb3Jwb21tZXJuXCIsXG4gICAgICAgICAgXCJOaWVkZXJzYWNoc2VuXCIsXG4gICAgICAgICAgXCJTYWNoc2VuXCIsXG4gICAgICAgICAgXCJTYWNoc2VuLUFuaGFsdFwiLFxuICAgICAgICAgIFwiU2NobGVzd2lnLUhvbHN0ZWluXCIsXG4gICAgICAgICAgXCJUaMO8cmluZ2VuXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiQWxsZXJoZWlsaWdlblwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgMSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQmFkZW4tV8O8cnR0ZW1iZXJnXCIsXG4gICAgICAgICAgXCJCYXllcm5cIixcbiAgICAgICAgICBcIk5vcmRyaGVpbi1XZXN0ZmFsZW5cIixcbiAgICAgICAgICBcIlJoZWlubGFuZC1QZmFselwiLFxuICAgICAgICAgIFwiU2FhcmxhbmRcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJCdcOfLSB1bmQgQmV0dGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJuZXh0V2VkbmVzZGF5MTZOb3ZcIixcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIlNhY2hzZW5cIiBdIH0sXG4gICAgICB7IG5hbWU6XCIxLiBXZWlobmFjaHRzdGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCIyLiBXZWlobmFjaHRzdGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNiBdIH0gXSxcbiAgICBcIkJhZGVuLVfDvHJ0dGVtYmVyZ1wiOnsgX3N0YXRlX2NvZGU6XCJid1wiLFxuICAgICAgU0g6WyB7IDIwMTI6WyA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTM6WyAzLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTQ6WyA0LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDE1OlsgMyxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxNjpbIDMsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNzpbIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMTg6WyAzLFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDI0OlsgMyxcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgbmFtZTpcIk9zdGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNSxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDEzOlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDE0OlsgNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAxNTpbIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNjpbIDUsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMTc6WyA2LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMTg6WyA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA2LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDIwOlsgNixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICAyMDI0OlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyNTpbIDYsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyMCBdLFxuICAgICAgICAgIG5hbWU6XCJQZmluZ3N0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNyxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDEzOlsgNyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDE0OlsgNyxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAxNTpbIDcsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMTY6WyA3LFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDE4OlsgNyxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAyNDpbIDcsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyAxMCxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxMzpbIDEwLFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxNDpbIDEwLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxNTpbIDEwLFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNjpbIDEwLFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxNzpbIDEwLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE4OlsgMTAsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICBuYW1lOlwiSGVyYnN0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDExOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAxMjpbIDEyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE0OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAxNTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMTY6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDE3OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAxODpbIDEyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTk6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIG5hbWU6XCJXZWlobmFjaHRzZmVyaWVuXCIgfSBdIH0sXG4gICAgQmF5ZXJuOnsgX3N0YXRlX2NvZGU6XCJieVwiLFxuICAgICAgU0g6WyB7IDIwMTI6WyAyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDEzOlsgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxNDpbIDMsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDE1OlsgMixcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAxNjpbIDIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAxNzpbIDIsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxODpbIDIsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMTk6WyAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTkgXSxcbiAgICAgICAgICAyMDIyOlsgMixcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyNDpbIDIsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjU6WyAzLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgbmFtZTpcIldpbnRlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAxMzpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNDpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTU6WyAzLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE2OlsgMyxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDE3OlsgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxODpbIDMsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjA6WyA0LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjE6WyAzLFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAyNDpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIG5hbWU6XCJPc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDUsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAxMzpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMTQ6WyA2LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE1OlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE2OlsgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAxNzpbIDYsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAxODpbIDUsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxOTpbIDYsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMjA6WyA2LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMjI6WyA2LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjM6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjU6WyA2LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICBuYW1lOlwiUGZpbmdzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDgsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAxMzpbIDcsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTQ6WyA3LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDE1OlsgOCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDE2OlsgNyxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAxNzpbIDcsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTg6WyA3LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMjpbIDgsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMjU6WyA4LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyAxMCxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxMzpbIDEwLFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAxNDpbIDEwLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTkgXSxcbiAgICAgICAgICAyMDE1OlsgMTEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE2OlsgMTAsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAxNzpbIDEwLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICAyOCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyMCBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDIxOlsgMTEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyMzpbIDEwLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyNTpbIDExLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDE5IF0sXG4gICAgICAgICAgbmFtZTpcIkhlcmJzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMTpbIDEyLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTI6WyAxMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDEzOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxNDpbIDEyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTU6WyAxMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE2OlsgMTIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAxNzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9IF0gfSxcbiAgICBCZXJsaW46eyBfc3RhdGVfY29kZTpcImJlXCIsXG4gICAgICBTSDpbIHsgMjAxMjpbIDEsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxMzpbIDIsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDE0OlsgMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMTU6WyAyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAxNjpbIDIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE3OlsgMSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE4OlsgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIyOlsgMSxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDIzOlsgMSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDI0OlsgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIG5hbWU6XCJXaW50ZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTM6WyAzLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTQ6WyA0LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNTpbIDMsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTY6WyAzLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTc6WyA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE4OlsgMyxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAyMTpbIDMsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjI6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDI0OlsgMyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIG5hbWU6XCJPc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDUsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMTM6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE0OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxNTpbIDUsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTY6WyA1LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAxNzpbIDUsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDE4OlsgNCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIxOlsgNSxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAyMjpbIDUsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAyNDpbIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjU6WyA2LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICBuYW1lOlwiUGZpbmdzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDYsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxMzpbIDYsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNDpbIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxNTpbIDcsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMTY6WyA3LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTc6WyA3LFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMTg6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMTk6WyA2LFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjA6WyA2LFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMjE6WyA2LFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDI0OlsgNyxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgbmFtZTpcIlNvbW1lcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDEwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICAyMDEzOlsgOSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMTQ6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAxNTpbIDEwLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAxNjpbIDEwLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAxNzpbIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE4OlsgMTAsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE5IF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMjpbIDEwLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICBuYW1lOlwiSGVyYnN0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDExOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxMjpbIDEyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE0OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTY6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE3OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxODpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTk6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9IF0gfSxcbiAgICBCcmFuZGVuYnVyZzp7IF9zdGF0ZV9jb2RlOlwiYmJcIixcbiAgICAgIFNIOlsgeyAyMDEyOlsgMSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDEzOlsgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMTQ6WyAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAxNTpbIDIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDE2OlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTc6WyAxLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTg6WyAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjI6WyAxLFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjM6WyAxLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICBuYW1lOlwiV2ludGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDEzOlsgMyxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE0OlsgNCxcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTU6WyA0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTY6WyAzLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTc6WyA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDE4OlsgMyxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAyMTpbIDMsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjQ6WyAzLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjU6WyA0LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgbmFtZTpcIk9zdGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNSxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAxMzpbIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTQ6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDE1OlsgNSxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxNjpbIDUsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDE3OlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAxODpbIDQsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTk6WyA1LFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE5IF0sXG4gICAgICAgICAgMjAyNDpbIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjU6WyA2LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICBuYW1lOlwiUGZpbmdzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDYsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxMzpbIDYsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNDpbIDcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMTU6WyA3LFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDE2OlsgNyxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDE4OlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE5OlsgNixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgNixcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIxOlsgNixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyNDpbIDcsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjU6WyA3LFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyAxMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAxMzpbIDksXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDE0OlsgMTAsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMTU6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTY6WyAxMCxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMTc6WyAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxODpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjI6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMzpbIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjU6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgbmFtZTpcIkhlcmJzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTI6WyAxMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDEzOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxNDpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTU6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE2OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxNzpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjI6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIzOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNDpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIG5hbWU6XCJXZWlobmFjaHRzZmVyaWVuXCIgfSBdIH0sXG4gICAgQnJlbWVuOnsgX3N0YXRlX2NvZGU6XCJoYlwiLFxuICAgICAgU0g6WyB7IDIwMTI6WyAxLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDEzOlsgMSxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDE0OlsgMSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAxNTpbIDIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE2OlsgMSxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDI5IF0sXG4gICAgICAgICAgMjAxNzpbIDEsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMTg6WyAyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxOTpbIDEsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjI6WyAxLFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjM6WyAxLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDI0OlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgbmFtZTpcIldpbnRlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDMsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTM6WyAzLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTQ6WyA0LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE1OlsgMyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxNjpbIDMsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNzpbIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMTg6WyAzLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjA6WyAzLFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDIxOlsgMyxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE5IF0sXG4gICAgICAgICAgMjAyMzpbIDMsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMjQ6WyAzLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjU6WyA0LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIG5hbWU6XCJPc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDUsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMTM6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE0OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxNTpbIDUsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTY6WyA1LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAxNzpbIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE4OlsgNCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMzpbIDUsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIG5hbWU6XCJQZmluZ3N0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNyxcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAxMzpbIDYsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAxNDpbIDcsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTU6WyA3LFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTY6WyA2LFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTc6WyA2LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTg6WyA2LFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyNDpbIDYsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgbmFtZTpcIlNvbW1lcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDEzOlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMTQ6WyAxMCxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAxNTpbIDEwLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAxNjpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDE3OlsgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxODpbIDEwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjI6WyAxMCxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMjM6WyAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgbmFtZTpcIkhlcmJzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTI6WyAxMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDEzOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxNDpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTU6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE2OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNzpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTg6WyAxMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9IF0gfSxcbiAgICBIYW1idXJnOnsgX3N0YXRlX2NvZGU6XCJoaFwiLFxuICAgICAgU0g6WyB7IDIwMTI6WyAxLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDEzOlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMTQ6WyAxLFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDE1OlsgMSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxNjpbIDEsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMTc6WyAxLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDE4OlsgMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMDpbIDEsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjE6WyAxLFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDIyOlsgMSxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAyMzpbIDEsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyNTpbIDEsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIG5hbWU6XCJXaW50ZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyAzLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMTM6WyAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMTQ6WyAzLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMTU6WyAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTY6WyAzLFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMTc6WyAzLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMTg6WyAzLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTk6WyAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMjA6WyAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMjE6WyAzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMjI6WyAzLFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjM6WyAzLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMjQ6WyAzLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDI1OlsgMyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgbmFtZTpcIk9zdGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDEzOlsgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE0OlsgNCxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDE1OlsgNSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxNjpbIDUsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICAyMDE3OlsgNSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAxODpbIDUsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE5IF0sXG4gICAgICAgICAgMjAyNDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjU6WyA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgbmFtZTpcIlBmaW5nc3RmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyA2LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMTM6WyA2LFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDE0OlsgNyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAxNTpbIDcsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTY6WyA3LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxODpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxOTpbIDYsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMDpbIDYsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMTpbIDYsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDI1OlsgNyxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICBuYW1lOlwiU29tbWVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgMTAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMTM6WyA5LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxNDpbIDEwLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAxNTpbIDEwLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxNjpbIDEwLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAxNzpbIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAxODpbIDEwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTIgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjU6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIG5hbWU6XCJIZXJic3RmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTE6WyAxMixcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDEyOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxMzpbIDEyLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTQ6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE1OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAxNjpbIDEyLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTc6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIG5hbWU6XCJXZWlobmFjaHRzZmVyaWVuXCIgfSBdIH0sXG4gICAgSGVzc2VuOnsgX3N0YXRlX2NvZGU6XCJoZVwiLFxuICAgICAgU0g6WyB7IDIwMTI6WyA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMTM6WyAzLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTQ6WyA0LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDE1OlsgMyxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxNjpbIDMsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAxNzpbIDQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxODpbIDMsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjA6WyA0LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjI6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDI0OlsgMyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgbmFtZTpcIk9zdGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDEzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDE0OlsgNyxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE1OlsgNyxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE2OlsgNyxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAxNzpbIDcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxODpbIDYsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNDpbIDcsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjU6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyAxMCxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMTM6WyAxMCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTQ6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAxNTpbIDEwLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAxNjpbIDEwLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI5IF0sXG4gICAgICAgICAgMjAxNzpbIDEwLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE4OlsgMTAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTk6WyA5LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDIxOlsgMTAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDI0OlsgIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICBuYW1lOlwiSGVyYnN0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDExOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxMjpbIDEyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTIgXSxcbiAgICAgICAgICAyMDEzOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTQ6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxNTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMTY6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDE3OlsgMTIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTg6WyAxMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAyMTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMjI6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIzOlsgMTIsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMjQ6WyAgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIG5hbWU6XCJXZWlobmFjaHRzZmVyaWVuXCIgfSBdIH0sXG4gICAgXCJNZWNrbGVuYnVyZy1Wb3Jwb21tZXJuXCI6eyBfc3RhdGVfY29kZTpcIm12XCIsXG4gICAgICBTSDpbIHsgMjAxMjpbIDIsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAxMzpbIDIsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxNDpbIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxNTpbIDIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAxNjpbIDIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAxNzpbIDIsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAxODpbIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjI6WyAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMjM6WyAyLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIG5hbWU6XCJXaW50ZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTM6WyAzLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTQ6WyA0LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDE1OlsgMyxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDE2OlsgMyxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxNzpbIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMTg6WyAzLFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDIxOlsgMyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyNDpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIG5hbWU6XCJPc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDUsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMTM6WyA1LFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE0OlsgNixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE1OlsgNSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAxNjpbIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMTc6WyA2LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxODpbIDUsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMTk6WyA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMjM6WyA1LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDI0OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyNTpbIDYsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgbmFtZTpcIlBmaW5nc3RmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyA2LFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTM6WyA2LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTQ6WyA3LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDE1OlsgNyxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI5IF0sXG4gICAgICAgICAgMjAxNjpbIDcsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxNzpbIDcsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxODpbIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAyMDpbIDYsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDYsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDI0OlsgNyxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICAyOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgbmFtZTpcIlNvbW1lcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDEwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTM6WyAxMCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMTQ6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMTU6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTY6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMTc6WyAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNDpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgbmFtZTpcIkhlcmJzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTI6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDEzOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxNDpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTU6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE2OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNzpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTg6WyAxMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjI6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIzOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNDpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjU6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICBuYW1lOlwiV2VpaG5hY2h0c2ZlcmllblwiIH0gXSB9LFxuICAgIE5pZWRlcnNhY2hzZW46eyBfc3RhdGVfY29kZTpcIm5pXCIsXG4gICAgICBTSDpbIHsgMjAxMjpbIDEsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMTM6WyAxLFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMTQ6WyAxLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDE1OlsgMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTY6WyAxLFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDE3OlsgMSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAxODpbIDIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE5OlsgMSxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMjpbIDEsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMzpbIDEsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICBuYW1lOlwiV2ludGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgMyxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxMzpbIDMsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNDpbIDQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTU6WyAzLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE2OlsgMyxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE3OlsgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxODpbIDMsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMDpbIDMsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjE6WyAzLFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMjI6WyA0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjM6WyAzLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDI0OlsgMyxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICBuYW1lOlwiT3N0ZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyA1LFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDEzOlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAxNDpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTU6WyA1LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDE2OlsgNSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMTc6WyA1LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxODpbIDQsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMTk6WyA1LFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMjM6WyA1LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDI0OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyNTpbIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICBuYW1lOlwiUGZpbmdzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDcsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMTM6WyA2LFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMTQ6WyA3LFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE1OlsgNyxcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE2OlsgNixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE3OlsgNixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE4OlsgNixcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjQ6WyA2LFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjU6WyA3LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyAxMCxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxMzpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE0OlsgMTAsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMTU6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMTY6WyAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxNzpbIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDIxOlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjU6WyAxMCxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIG5hbWU6XCJIZXJic3RmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTE6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDEyOlsgMTIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAxMzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTQ6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE1OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNjpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTc6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIG5hbWU6XCJXZWlobmFjaHRzZmVyaWVuXCIgfSBdIH0sXG4gICAgXCJOb3JkcmhlaW4tV2VzdGZhbGVuXCI6eyBfc3RhdGVfY29kZTpcIm53XCIsXG4gICAgICBTSDpbIHsgMjAxMjpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAxMzpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNDpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTU6WyAzLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE2OlsgMyxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE3OlsgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxODpbIDMsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjA6WyA0LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjE6WyAzLFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAyNDpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIG5hbWU6XCJPc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDUsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMTM6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE0OlsgNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxNTpbIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTY6WyA1LFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDE3OlsgNixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTg6WyA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDE5OlsgNixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAyMDpbIDYsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIxOlsgNSxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAyMzpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDI1OlsgNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgbmFtZTpcIlBmaW5nc3RmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMTM6WyA3LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTQ6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMTU6WyA2LFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE2OlsgNyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAxNzpbIDcsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMTg6WyA3LFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMDpbIDYsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMjI6WyA2LFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMjM6WyA2LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMCBdLFxuICAgICAgICAgIDIwMjU6WyA3LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICBuYW1lOlwiU29tbWVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgMTAsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMCBdLFxuICAgICAgICAgIDIwMTM6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNDpbIDEwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE1OlsgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMTY6WyAxMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMTc6WyAxMCxcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxODpbIDEwLFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMjpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjU6WyAxMCxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIG5hbWU6XCJIZXJic3RmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTE6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDEyOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxMzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMTQ6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE1OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNjpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTc6WyAxMixcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIG5hbWU6XCJXZWlobmFjaHRzZmVyaWVuXCIgfSBdIH0sXG4gICAgXCJSaGVpbmxhbmQtUGZhbHpcIjp7IF9zdGF0ZV9jb2RlOlwicnBcIixcbiAgICAgIFNIOlsgeyAyMDE5OlsgMixcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMjQ6WyAgXSxcbiAgICAgICAgICAyMDI1OlsgIF0sXG4gICAgICAgICAgbmFtZTpcIldpbnRlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDMsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTM6WyAzLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTQ6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDE1OlsgMyxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxNjpbIDMsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAxNzpbIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMTg6WyAzLFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDIxOlsgMyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDI0OlsgMyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgbmFtZTpcIk9zdGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDIxOlsgNSxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDI0OlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI5IF0sXG4gICAgICAgICAgMjAyNTpbICBdLFxuICAgICAgICAgIG5hbWU6XCJQZmluZ3N0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDEzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDE0OlsgNyxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE1OlsgNyxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE2OlsgNyxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAxNzpbIDcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxODpbIDYsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNDpbIDcsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjU6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyAxMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAxMzpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE0OlsgMTAsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDE1OlsgMTAsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDE2OlsgMTAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE3OlsgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAxOTpbIDksXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDIxOlsgMTAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDI1OlsgMTAsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICBuYW1lOlwiSGVyYnN0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDExOlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxMjpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDE0OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAxNTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMTY6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE3OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAxODpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTk6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9IF0gfSxcbiAgICBTYWFybGFuZDp7IF9zdGF0ZV9jb2RlOlwic2xcIixcbiAgICAgIFNIOlsgeyAyMDEyOlsgMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAxMzpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMTQ6WyAzLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAxNTpbIDIsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMTY6WyAyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTc6WyAyLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTg6WyAyLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjI6WyAyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjM6WyAyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDI0OlsgMixcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgbmFtZTpcIldpbnRlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAxMzpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNDpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTU6WyAzLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE2OlsgMyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDE3OlsgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxODpbIDMsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjA6WyA0LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIxOlsgMyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyNDpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIG5hbWU6XCJPc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAyMTpbIDUsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMjI6WyA2LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjM6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDI1OlsgIF0sXG4gICAgICAgICAgbmFtZTpcIlBmaW5nc3RmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyA3LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMTM6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMTQ6WyA3LFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTU6WyA3LFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTY6WyA3LFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDE4OlsgNixcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI0OlsgNyxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgbmFtZTpcIlNvbW1lcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDEzOlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTQ6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMTU6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMTY6WyAxMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMTc6WyAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAxODpbIDEwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTIgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMjI6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyMzpbIDEwLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDI1OlsgMTAsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICBuYW1lOlwiSGVyYnN0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDExOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxMjpbIDEyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTM6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE0OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAxNTpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTY6WyAxMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMTc6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9IF0gfSxcbiAgICBTYWNoc2VuOnsgX3N0YXRlX2NvZGU6XCJzblwiLFxuICAgICAgU0g6WyB7IDIwMTI6WyAyLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDEzOlsgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDE0OlsgMixcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDE1OlsgMixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE2OlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICAyMDE3OlsgMixcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAxODpbIDIsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICAyMDIyOlsgMixcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICBuYW1lOlwiV2ludGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDEzOlsgMyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE0OlsgNCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAxNTpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxNjpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNzpbIDQsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMTg6WyAzLFxuICAgICAgICAgICAgMjksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAyMTpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMjQ6WyAzLFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjU6WyA0LFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICBuYW1lOlwiT3N0ZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyA1LFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDEzOlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxNDpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTU6WyA1LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDE2OlsgNSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTc6WyA1LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDE4OlsgNSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIxOlsgNSxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAyMjpbIDUsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjM6WyA1LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTkgXSxcbiAgICAgICAgICAyMDI0OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyNTpbICBdLFxuICAgICAgICAgIG5hbWU6XCJQZmluZ3N0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNyxcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAxMzpbIDcsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMTQ6WyA3LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDE1OlsgNyxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAxNjpbIDYsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAxNzpbIDYsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxODpbIDcsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAyNDpbIDYsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjU6WyA2LFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyAxMCxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxMzpbIDEwLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDE0OlsgMTAsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDE1OlsgMTAsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDE2OlsgMTAsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMTc6WyAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDE4OlsgMTAsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMCBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjI6WyAxMCxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMjM6WyAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjU6WyAxMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgbmFtZTpcIkhlcmJzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTI6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDEzOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxNDpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTU6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE2OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9IF0gfSxcbiAgICBcIlNhY2hzZW4tQW5oYWx0XCI6eyBfc3RhdGVfY29kZTpcInN0XCIsXG4gICAgICBTSDpbIHsgMjAxMjpbIDIsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxMzpbIDIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDE0OlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTIgXSxcbiAgICAgICAgICAyMDE1OlsgMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDE2OlsgMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE3OlsgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE4OlsgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjM6WyAyLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjU6WyAxLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICBuYW1lOlwiV2ludGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMTM6WyAzLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDE0OlsgNCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAxNTpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE2OlsgMyxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAxNzpbIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTg6WyAzLFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAyMTpbIDMsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyNDpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjU6WyA0LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIG5hbWU6XCJPc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDUsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMTM6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE0OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDE1OlsgNSxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAxNjpbIDUsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAxNzpbIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTg6WyA1LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTkgXSxcbiAgICAgICAgICAyMDE5OlsgNSxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE5IF0sXG4gICAgICAgICAgMjAyNDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjU6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICBuYW1lOlwiUGZpbmdzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDcsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAxMzpbIDcsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMTQ6WyA3LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTU6WyA3LFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDE2OlsgNixcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxNzpbIDYsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAxODpbIDYsXG4gICAgICAgICAgICAyOCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDI0OlsgNixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgNixcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICBuYW1lOlwiU29tbWVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgMTAsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTM6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMTQ6WyAxMCxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTU6WyAxMCxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMTY6WyAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxNzpbIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIxOlsgMTAsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMjM6WyAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjQ6WyA5LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgbmFtZTpcIkhlcmJzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMTI6WyAxMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDEzOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxNDpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTU6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE2OlsgMTIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNzpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMTg6WyAxMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9IF0gfSxcbiAgICBcIlNjaGxlc3dpZy1Ib2xzdGVpblwiOnsgX3N0YXRlX2NvZGU6XCJzaFwiLFxuICAgICAgU0g6WyB7IDIwMTI6WyAzLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICAyMDEzOlsgMyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDE0OlsgNCxcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE1OlsgNCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDE2OlsgMyxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDE3OlsgNCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE4OlsgMyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAyMDpbIDMsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNyBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjI6WyA0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMjQ6WyA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjU6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgbmFtZTpcIk9zdGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNSxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAxMzpbIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTQ6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDE1OlsgNSxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxNjpbIDUsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE3OlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAxODpbIDUsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTk6WyA1LFxuICAgICAgICAgICAgMzEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyNDpbIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMjU6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICBuYW1lOlwiUGZpbmdzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDYsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxMzpbIDYsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxNDpbIDcsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMTU6WyA3LFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDE2OlsgNyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE3OlsgNyxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE4OlsgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDIwOlsgNixcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIxOlsgNixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDI1OlsgNyxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICBuYW1lOlwiU29tbWVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMTM6WyAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAxNDpbIDEwLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAxNTpbIDEwLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAxNjpbIDEwLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI5IF0sXG4gICAgICAgICAgMjAxNzpbIDEwLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAxODpbIDEwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTkgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjU6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgbmFtZTpcIkhlcmJzdGZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTI6WyAxMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDEzOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNDpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTU6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE2OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNzpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMjQ6WyAgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIG5hbWU6XCJXaW50ZXJmZXJpZW5cIiB9IF0gfSxcbiAgICBcIlRow7xyaW5nZW5cIjp7IF9zdGF0ZV9jb2RlOlwidGhcIixcbiAgICAgIFNIOlsgeyAyMDEyOlsgMixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDEzOlsgMixcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAxNDpbIDIsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMTU6WyAyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAxNjpbIDIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE3OlsgMixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE4OlsgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjM6WyAyLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTcgXSxcbiAgICAgICAgICAyMDI0OlsgMixcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICBuYW1lOlwiV2ludGVyZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDEyOlsgNCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICAyMDEzOlsgMyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE0OlsgNCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE1OlsgMyxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxNjpbIDMsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxNzpbIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMTg6WyAzLFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDIxOlsgMyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMjQ6WyAzLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjU6WyA0LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIG5hbWU6XCJPc3RlcmZlcmllblwiIH0sXG4gICAgICAgIHsgMjAxMjpbIDUsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMTM6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE0OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAxNTpbIDUsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMTY6WyA1LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxNzpbIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMTg6WyA1LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE5OlsgNSxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMDpbIDUsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMzpbIDUsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDI1OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgbmFtZTpcIlBmaW5nc3RmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyA3LFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDEzOlsgNyxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAxNDpbIDcsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMTU6WyA3LFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDE2OlsgNixcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxNzpbIDYsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAxODpbIDcsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE5IF0sXG4gICAgICAgICAgMjAyNDpbIDYsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjU6WyA2LFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIG5hbWU6XCJTb21tZXJmZXJpZW5cIiB9LFxuICAgICAgICB7IDIwMTI6WyAxMCxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxMzpbIDEwLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE0OlsgMTAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMTU6WyAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAxNjpbIDEwLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxNzpbIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDE4OlsgMTAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE5IF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjQ6WyA5LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICBuYW1lOlwiSGVyYnN0ZmVyaWVuXCIgfSxcbiAgICAgICAgeyAyMDExOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAxMjpbIDEyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMTM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE0OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxNTpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTY6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMTc6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgbmFtZTpcIldlaWhuYWNodHNmZXJpZW5cIiB9IF0gfSB9O1xuICBkYXRhJHQuUEg7XG4gIGRhdGEkdC5CYXllcm47XG4gIGRhdGEkdC5CZXJsaW47XG4gIGRhdGEkdC5CcmFuZGVuYnVyZztcbiAgZGF0YSR0LkJyZW1lbjtcbiAgZGF0YSR0LkhhbWJ1cmc7XG4gIGRhdGEkdC5IZXNzZW47XG4gIGRhdGEkdC5OaWVkZXJzYWNoc2VuO1xuICBkYXRhJHQuU2FhcmxhbmQ7XG4gIGRhdGEkdC5TYWNoc2VuO1xuXG4gIHZhciBkYXRhJHMgPSB7IFBIOlsgeyBuYW1lOlwiTnl0w6Vyc2RhZ1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIlNrw6ZydG9yc2RhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDotMyB9LFxuICAgICAgeyBuYW1lOlwiTGFuZ2ZyZWRhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgeyBuYW1lOlwiUMOlc2tlZGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIiB9LFxuICAgICAgeyBuYW1lOlwiMi4gUMOlc2tlZGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcIlN0b3JlIEJlZGVkYWdcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MjYgfSxcbiAgICAgIHsgbmFtZTpcIktyaXN0aSBIaW1tZWxmYXJ0c2RhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDozOSB9LFxuICAgICAgeyBuYW1lOlwiUGluc2VkYWdcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6NDkgfSxcbiAgICAgIHsgbmFtZTpcIjIuIFBpbnNlZGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjUwIH0sXG4gICAgICB7IG5hbWU6XCJHcnVuZGxvdnNkYWdcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgNSBdIH0sXG4gICAgICB7IG5hbWU6XCJKdWxlYWZ0ZW5zZGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNCBdIH0sXG4gICAgICB7IG5hbWU6XCJKdWxlZGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCIyLiBKdWxlZGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNiBdIH0gXSB9O1xuICBkYXRhJHMuUEg7XG5cbiAgdmFyIGRhdGEkciA9IHsgUEg6WyB7IG5hbWU6XCJDYXAgZCdBbnlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQ2F0YWx1w7FhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiQcOxbyBOdWV2b1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIlJlaXNcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgNiBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQ2F0YWx1w7FhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRXBpZmFuw61hIGRlbCBTZcOxb3JcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgNiBdIH0sXG4gICAgICB7IG5hbWU6XCJEw61hIGRlIEFuZGFsdWPDrWFcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDIsXG4gICAgICAgICAgMjggXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkFuZGFsdWPDrWFcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJEaWEgZGUgbGVzIElsbGVzIEJhbGVhcnNcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgMSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiSXNsYXMgQmFsZWFyZXNcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJTYW50IEpvc2VwXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgIDE5IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDb211bmlkYWQgVmFsZW5jaWFuYVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIlNhbiBKb3PDqVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAxOSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiTXVyY2lhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiSnVldmUgU2FudG9cIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTMsXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJBbmRhbHVjw61hXCIsXG4gICAgICAgICAgXCJBcmFnw7NuXCIsXG4gICAgICAgICAgXCJDYXN0aWxsYSB5IExlw7NuXCIsXG4gICAgICAgICAgXCJDYXN0aWxsYS1MYSBNYW5jaGFcIixcbiAgICAgICAgICBcIkNhbmFyaWFzXCIsXG4gICAgICAgICAgXCJFeHRyZW1hZHVyYVwiLFxuICAgICAgICAgIFwiR2FsaWNpYVwiLFxuICAgICAgICAgIFwiSXNsYXMgQmFsZWFyZXNcIixcbiAgICAgICAgICBcIkxhIFJpb2phXCIsXG4gICAgICAgICAgXCJDb211bmlkYWQgZGUgTWFkcmlkXCIsXG4gICAgICAgICAgXCJSZWdpw7NuIGRlIE11cmNpYVwiLFxuICAgICAgICAgIFwiTmF2YXJyYVwiLFxuICAgICAgICAgIFwiQXN0dXJpYXNcIixcbiAgICAgICAgICBcIlBhw61zIFZhc2NvXCIsXG4gICAgICAgICAgXCJDYW50YWJyaWFcIixcbiAgICAgICAgICBcIkNldXRhXCIsXG4gICAgICAgICAgXCJNZWxpbGxhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRGl2ZW5kcmVzIFNhbnRcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTIsXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDYXRhbHXDsWFcIixcbiAgICAgICAgICBcIkNvbXVuaWRhZCBWYWxlbmNpYW5hXCIsXG4gICAgICAgICAgXCJJc2xhcyBCYWxlYXJlc1wiIF0gfSxcbiAgICAgIHsgbmFtZTpcIlZpZXJuZXMgU2FudG9cIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgIHsgbmFtZTpcIkRpbGx1bnMgZGUgUGFzcXVhIEZsb3JpZGFcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkNhdGFsdcOxYVwiLFxuICAgICAgICAgIFwiQ29tdW5pZGFkIFZhbGVuY2lhbmFcIixcbiAgICAgICAgICBcIklzbGFzIEJhbGVhcmVzXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiTHVuZXMgZGUgUGFzY3VhIGRlIFJlc3VycmVjY2nDs25cIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIlBhw61zIFZhc2NvXCIsXG4gICAgICAgICAgXCJOYXZhcnJhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZSBBcmFnw7NuXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJBcmFnw7NuXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZSBDYXN0aWxsYSB5IExlw7NuXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDYXN0aWxsYSB5IExlw7NuXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRmVzdGEgZGVsIFRyZWJhbGxcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQ2F0YWx1w7FhXCIsXG4gICAgICAgICAgXCJDb211bmlkYWQgVmFsZW5jaWFuYVwiLFxuICAgICAgICAgIFwiSXNsYXMgQmFsZWFyZXNcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJGaWVzdGEgZGVsIFRyYWJham9cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJGaWVzdGEgZGUgbGEgQ29tdW5pZGFkIGRlIE1hZHJpZFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAyIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDb211bmlkYWQgZGUgTWFkcmlkXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkYXMgTGV0cmFzIEdhbGVnYXNcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMiBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiR2FsaWNpYVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkTDrWEgZGUgQ2FuYXJpYXNcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMzAgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkNhbmFyaWFzXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZSBsYSBSZWdpw7NuIENhc3RpbGxhLUxhIE1hbmNoYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAzMSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQ2FzdGlsbGEtTGEgTWFuY2hhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZSBsYSBSZWdpw7NuIGRlIE11cmNpYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICA5IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJSZWdpw7NuIGRlIE11cmNpYVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkTDrWEgZGUgbGEgUmlvamFcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgOSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiTGEgUmlvamFcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJTYW4gQW50b25pb1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAxMyBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQ2V1dGFcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJTYW50IEpvYW5cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgMjQgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkNhdGFsdcOxYVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIlNhbiBKdWFuXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgIDI0IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDZXV0YVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIlNhbnRpYWdvIEFww7NzdG9sXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgIDI1IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJHYWxpY2lhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiU2FudGEgTWFyw61hIGRlIMOBZnJpY2FcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgNiBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQ2V1dGFcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJsJ0Fzc3VtcGNpw7NcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgMTUgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkNhdGFsdcOxYVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkFzdW5jacOzbiBkZSBsYSBWaXJnZW5cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgMTUgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZSBDZXV0YVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAyIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDZXV0YVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkTDrWEgZGUgQXN0dXJpYXNcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgOCBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQXN0dXJpYXNcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJEw61hIGRlIEV4dHJlbWFkdXJhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgIDggXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkV4dHJlbWFkdXJhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRGlhZGEgTmFjaW9uYWwgZGUgQ2F0YWx1bnlhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgIDExIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDYXRhbHXDsWFcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJEw61hIGRlIENhbnRhYnJpYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAxNyBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiQ2FudGFicmlhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZSBNZWxpbGxhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgIDE1IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJNZWxpbGxhXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRGlhIGRlIGxhIENvbXVuaXRhdCBWYWxlbmNpYW5hXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICA5IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDb211bmlkYWQgVmFsZW5jaWFuYVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkZlc3RhIE5hY2lvbmFsIGQnRXNwYW55YVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgMTIgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkNhdGFsdcOxYVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkZpZXN0YSBOYWNpb25hbCBkZSBFc3Bhw7FhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAxMiBdIH0sXG4gICAgICB7IG5hbWU6XCJFdXNrYWRpIEVndW5hXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAyNSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiUGHDrXMgVmFzY29cIiBdIH0sXG4gICAgICB7IG5hbWU6XCJUb3RzIFNhbnRzXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxIF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDYXRhbHXDsWFcIixcbiAgICAgICAgICBcIkNvbXVuaWRhZCBWYWxlbmNpYW5hXCIsXG4gICAgICAgICAgXCJJc2xhcyBCYWxlYXJlc1wiIF0gfSxcbiAgICAgIHsgbmFtZTpcIlRvZG9zIGxvcyBTYW50b3NcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiRMOtYSBkZSBsYSBDb25zdGl0dWNpw7NuIEVzcGHDsW9sYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgNiBdIH0sXG4gICAgICB7IG5hbWU6XCJMYSBQdXLDrXNzaW1hXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICA4IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDYXRhbHXDsWFcIixcbiAgICAgICAgICBcIkNvbXVuaWRhZCBWYWxlbmNpYW5hXCIsXG4gICAgICAgICAgXCJJc2xhcyBCYWxlYXJlc1wiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkxhIEltbWFjdWxhZGEgQ29uY2VwY2nDs25cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDggXSB9LFxuICAgICAgeyBuYW1lOlwiTmFkYWxcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJDYXRhbHXDsWFcIixcbiAgICAgICAgICBcIkNvbXVuaWRhZCBWYWxlbmNpYW5hXCIsXG4gICAgICAgICAgXCJJc2xhcyBCYWxlYXJlc1wiIF0gfSxcbiAgICAgIHsgbmFtZTpcIk5hdGl2aWRhZCBkZWwgU2XDsW9yXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCJTYW50IEVzdGV2ZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjYgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkNhdGFsdcOxYVwiIF0gfSBdLFxuICAgIFwiQW5kYWx1Y8OtYVwiOnsgX3N0YXRlX2NvZGU6XCJhblwiIH0sXG4gICAgXCJBcmFnw7NuXCI6eyBfc3RhdGVfY29kZTpcImFyXCIgfSxcbiAgICBcIkNhc3RpbGxhIHkgTGXDs25cIjp7IF9zdGF0ZV9jb2RlOlwiY2xcIiB9LFxuICAgIFwiQ2FzdGlsbGEtTGEgTWFuY2hhXCI6eyBfc3RhdGVfY29kZTpcImNtXCIgfSxcbiAgICBDYW5hcmlhczp7IF9zdGF0ZV9jb2RlOlwiY25cIiB9LFxuICAgIFwiQ2F0YWx1w7FhXCI6eyBfc3RhdGVfY29kZTpcImN0XCIgfSxcbiAgICBFeHRyZW1hZHVyYTp7IF9zdGF0ZV9jb2RlOlwiZXhcIiB9LFxuICAgIEdhbGljaWE6eyBfc3RhdGVfY29kZTpcImdhXCIgfSxcbiAgICBcIklzbGFzIEJhbGVhcmVzXCI6eyBfc3RhdGVfY29kZTpcImliXCIgfSxcbiAgICBcIkxhIFJpb2phXCI6eyBfc3RhdGVfY29kZTpcInJpXCIgfSxcbiAgICBcIkNvbXVuaWRhZCBkZSBNYWRyaWRcIjp7IF9zdGF0ZV9jb2RlOlwibWRcIiB9LFxuICAgIFwiUmVnacOzbiBkZSBNdXJjaWFcIjp7IF9zdGF0ZV9jb2RlOlwibWNcIiB9LFxuICAgIE5hdmFycmE6eyBfc3RhdGVfY29kZTpcIm5jXCIgfSxcbiAgICBBc3R1cmlhczp7IF9zdGF0ZV9jb2RlOlwiYXNcIiB9LFxuICAgIFwiUGHDrXMgVmFzY29cIjp7IF9zdGF0ZV9jb2RlOlwicHZcIiB9LFxuICAgIENhbnRhYnJpYTp7IF9zdGF0ZV9jb2RlOlwiY2JcIiB9LFxuICAgIFwiQ29tdW5pZGFkIFZhbGVuY2lhbmFcIjp7IF9zdGF0ZV9jb2RlOlwidmNcIiB9LFxuICAgIENldXRhOnsgX3N0YXRlX2NvZGU6XCJjZVwiIH0sXG4gICAgTWVsaWxsYTp7IF9zdGF0ZV9jb2RlOlwibWxcIiB9IH07XG4gIGRhdGEkci5QSDtcbiAgZGF0YSRyLkNhbmFyaWFzO1xuICBkYXRhJHIuRXh0cmVtYWR1cmE7XG4gIGRhdGEkci5HYWxpY2lhO1xuICBkYXRhJHIuTmF2YXJyYTtcbiAgZGF0YSRyLkFzdHVyaWFzO1xuICBkYXRhJHIuQ2FudGFicmlhO1xuICBkYXRhJHIuQ2V1dGE7XG4gIGRhdGEkci5NZWxpbGxhO1xuXG4gIHZhciBkYXRhJHEgPSB7IFBIOlsgeyBuYW1lOlwidXVkZW52dW9kZW5ww6RpdsOkIC0gbnnDpXJzZGFnZW5cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJsb3BwaWFpbmVuIC0gdHJldHRvbmRlZGFnZW5cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgNiBdIH0sXG4gICAgICB7IG5hbWU6XCJwaXRrw6RwZXJqYW50YWkgLSBsw6VuZ2ZyZWRhZ2VuXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICB7IG5hbWU6XCJww6TDpHNpw6Rpc3DDpGl2w6QgLSBww6Vza2RhZ2VuXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIiB9LFxuICAgICAgeyBuYW1lOlwidG9pbmVuIHDDpMOkc2nDpGlzcMOkaXbDpCAtIGFubmFuZGFnIHDDpXNrXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcInZhcHB1IC0gZsO2cnN0YSBtYWpcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJoZWxhdG9yc3RhaSAtIEtyaXN0aSBoaW1tZWxzZsOkcmRzZGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjM5IH0sXG4gICAgICB7IG5hbWU6XCJoZWxsdW50YWkgLSBwaW5nc3RcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6NDkgfSxcbiAgICAgIHsgbmFtZTpcImp1aGFubnVzcMOkaXbDpCAtIG1pZHNvbW1hcmRhZ2VuXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJuZXh0U2F0dXJkYXkyMEp1blwiIH0sXG4gICAgICB7IG5hbWU6XCJweWjDpGlucMOkaXbDpCAtIGFsbGEgaGVsZ29ucyBkYWdcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcIm5leHRTYXR1cmRheTMxT2N0XCIgfSxcbiAgICAgIHsgbmFtZTpcIml0c2Vuw6Rpc3l5c3DDpGl2w6QgLSBzasOkbHZzdMOkbmRpZ2hldHNkYWdlblwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgNiBdIH0sXG4gICAgICB7IG5hbWU6XCJqb3VsdXDDpGl2w6QgLSBqdWxkYWdlblwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjUgXSB9LFxuICAgICAgeyBuYW1lOlwidG9pbmVuIGpvdWx1cMOkaXbDpCAtIGFubmFuZGFnIGp1bFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjYgXSB9IF0gfTtcbiAgZGF0YSRxLlBIO1xuXG4gIHZhciBkYXRhJHAgPSB7IFBIOlsgeyBuYW1lOlwiSm91ciBkZSBsJ2FuXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiVmVuZHJlZGkgc2FpbnRcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTIsXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJNb3NlbGxlXCIsXG4gICAgICAgICAgXCJCYXMtUmhpblwiLFxuICAgICAgICAgIFwiSGF1dC1SaGluXCIsXG4gICAgICAgICAgXCJHdWFkZWxvdXBlXCIsXG4gICAgICAgICAgXCJNYXJ0aW5pcXVlXCIsXG4gICAgICAgICAgXCJQb2x5bsOpc2llIGZyYW7Dp2Fpc2VcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJMdW5kaSBkZSBQw6JxdWVzXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcIkFib2xpdGlvbiBkZSBsJ2VzY2xhdmFnZSAoTWF5b3R0ZSlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgMjcgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIk1heW90dGVcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJTYWludC1QaWVycmUtQ2hhbmVsXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgIDI4IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJXYWxsaXMtZXQtRnV0dW5hXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiRsOqdGUgZHUgVHJhdmFpbFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkbDqnRlIGRlIGxhIFZpY3RvaXJlXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDggXSB9LFxuICAgICAgeyBuYW1lOlwiQWJvbGl0aW9uIGRlIGwnZXNjbGF2YWdlIChNYXJ0aW5pcXVlKVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAyMiBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiTWFydGluaXF1ZVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkFib2xpdGlvbiBkZSBsJ2VzY2xhdmFnZSAoR3VhZGVsb3VwZSlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMjcgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkd1YWRlbG91cGVcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJBYm9saXRpb24gZGUgbCdlc2NsYXZhZ2UgKFNhaW50LU1hcnRpbilcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMjggXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIlNhaW50LU1hcnRpbiAoRnJhbmNlKVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkpldWRpIGRlIGwnQXNjZW5zaW9uXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjM5IH0sXG4gICAgICB7IG5hbWU6XCJMdW5kaSBkZSBQZW50ZWPDtHRlXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjUwIH0sXG4gICAgICB7IG5hbWU6XCJBYm9saXRpb24gZGUgbCdlc2NsYXZhZ2UgKEd1eWFuZSlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgMTAgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkd1eWFuZVwiIF0gfSxcbiAgICAgIHsgbmFtZTpcIkbDqnRlIGRlIGwnYXV0b25vbWllXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgIDI5IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJQb2x5bsOpc2llIGZyYW7Dp2Fpc2VcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJGw6p0ZSBuYXRpb25hbGVcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgMTQgXSB9LFxuICAgICAgeyBuYW1lOlwiRsOqdGUgVmljdG9yIFNjaG9lbGNoZXJcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgMjEgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIkd1YWRlbG91cGVcIixcbiAgICAgICAgICBcIk1hcnRpbmlxdWVcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJGw6p0ZSBkdSBUZXJyaXRvaXJlXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgIDI5IF0sXG4gICAgICAgIG9ubHlfc3RhdGVzOlsgXCJXYWxsaXMtZXQtRnV0dW5hXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiQXNzb21wdGlvblwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOCxcbiAgICAgICAgICAxNSBdIH0sXG4gICAgICB7IG5hbWU6XCJGw6p0ZSBkZSBsYSBjaXRveWVubmV0w6lcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgMjQgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIk5vdXZlbGxlLUNhbMOpZG9uaWVcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJBYm9saXRpb24gZGUgbCdlc2NsYXZhZ2UgKFNhaW50LUJhcnRow6lsZW15KVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgOSBdLFxuICAgICAgICBvbmx5X3N0YXRlczpbIFwiU2FpbnQtQmFydGjDqWxlbXlcIiBdIH0sXG4gICAgICB7IG5hbWU6XCJUb3Vzc2FpbnRcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiQXJtaXN0aWNlXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxMSBdIH0sXG4gICAgICB7IG5hbWU6XCJBYm9saXRpb24gZGUgbCdlc2NsYXZhZ2UgKFLDqXVuaW9uKVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjAgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIlLDqXVuaW9uXCIgXSB9LFxuICAgICAgeyBuYW1lOlwiTm/Dq2xcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcIlNhaW50LcOJdGllbm5lIFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjYgXSxcbiAgICAgICAgb25seV9zdGF0ZXM6WyBcIk1vc2VsbGVcIixcbiAgICAgICAgICBcIkJhcy1SaGluXCIsXG4gICAgICAgICAgXCJIYXV0LVJoaW5cIiBdIH0gXSxcbiAgICBcIkF1dmVyZ25lLVJow7RuZS1BbHBlc1wiOnsgX3N0YXRlX2NvZGU6XCJhcmFcIixcbiAgICAgIFNIOlsgeyAyMDE4OlsgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjM6WyAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkJ0hpdmVyXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMTpbIDQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMjI6WyA0LFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjQ6WyA0LFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgUHJpbnRlbXBzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMzpbIDUsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIG5hbWU6XCJQb250IGRlIGwnQXNjZW5zaW9uXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnw4l0w6lcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIFwiQm91cmdvZ25lLUZyYW5jaGUtQ29tdMOpXCI6eyBfc3RhdGVfY29kZTpcImJmY1wiLFxuICAgICAgU0g6WyB7IDIwMTg6WyAyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDIyOlsgMixcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE5IF0sXG4gICAgICAgICAgMjAyNDpbIDIsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnSGl2ZXJcIiB9LFxuICAgICAgICB7IDIwMTg6WyA0LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIxOlsgNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyNDpbIDQsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMjU6WyA0LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBQcmludGVtcHNcIiB9LFxuICAgICAgICB7IDIwMTg6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE5OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyNDpbIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgbmFtZTpcIlBvbnQgZGUgbCdBc2NlbnNpb25cIiB9LFxuICAgICAgICB7IDIwMTg6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNDpbIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI1OlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCfDiXTDqVwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEwLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjM6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNDpbIDEwLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBsYSBUb3Vzc2FpbnRcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIE5vw6tsXCIgfSBdIH0sXG4gICAgXCJOb3V2ZWxsZS1BcXVpdGFpbmVcIjp7IF9zdGF0ZV9jb2RlOlwibmFxXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMjI6WyAyLFxuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTkgXSxcbiAgICAgICAgICAyMDI0OlsgMixcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCdIaXZlclwiIH0sXG4gICAgICAgIHsgMjAxODpbIDQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMjA6WyA0LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDI0OlsgNCxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIFByaW50ZW1wc1wiIH0sXG4gICAgICAgIHsgMjAxODpbIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTk6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIxOlsgNSxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyMjpbIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjM6WyA1LFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDI0OlsgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTIgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICBuYW1lOlwiUG9udCBkZSBsJ0FzY2Vuc2lvblwiIH0sXG4gICAgICAgIHsgMjAxODpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI0OlsgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjU6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkJ8OJdMOpXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIxOlsgMTAsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMjI6WyAxMCxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMzpbIDEwLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjU6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIGxhIFRvdXNzYWludFwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTk6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMTpbIDEyLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjI6WyAxMixcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIzOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyNDpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjU6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgTm/Dq2xcIiB9IF0gfSxcbiAgICBCcmV0YWduZTp7IF9zdGF0ZV9jb2RlOlwiYnJlXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIyOlsgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyNDpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkJ0hpdmVyXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNCxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyMTpbIDQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMjI6WyA0LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjQ6WyA0LFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjU6WyA0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBQcmludGVtcHNcIiB9LFxuICAgICAgICB7IDIwMTg6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE5OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyNDpbIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgbmFtZTpcIlBvbnQgZGUgbCdBc2NlbnNpb25cIiB9LFxuICAgICAgICB7IDIwMTg6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNDpbIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI1OlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCfDiXTDqVwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEwLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjM6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNDpbIDEwLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBsYSBUb3Vzc2FpbnRcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIE5vw6tsXCIgfSBdIH0sXG4gICAgXCJDZW50cmUtVmFsIGRlIExvaXJlXCI6eyBfc3RhdGVfY29kZTpcImN2bFwiLFxuICAgICAgU0g6WyB7IDIwMTg6WyAyLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCdIaXZlclwiIH0sXG4gICAgICAgIHsgMjAxODpbIDQsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI0OlsgNCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgUHJpbnRlbXBzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMzpbIDUsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIG5hbWU6XCJQb250IGRlIGwnQXNjZW5zaW9uXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnw4l0w6lcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIFwiR3JhbmQgRXN0XCI6eyBfc3RhdGVfY29kZTpcImdlc1wiLFxuICAgICAgU0g6WyB7IDIwMTg6WyAyLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCdIaXZlclwiIH0sXG4gICAgICAgIHsgMjAxODpbIDQsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI0OlsgNCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgUHJpbnRlbXBzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMzpbIDUsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIG5hbWU6XCJQb250IGRlIGwnQXNjZW5zaW9uXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnw4l0w6lcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIFwiSGF1dHMtZGUtRnJhbmNlXCI6eyBfc3RhdGVfY29kZTpcImhkZlwiLFxuICAgICAgU0g6WyB7IDIwMTg6WyAyLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCdIaXZlclwiIH0sXG4gICAgICAgIHsgMjAxODpbIDQsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI0OlsgNCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgUHJpbnRlbXBzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMzpbIDUsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIG5hbWU6XCJQb250IGRlIGwnQXNjZW5zaW9uXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnw4l0w6lcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIE5vcm1hbmRpZTp7IF9zdGF0ZV9jb2RlOlwibm9yXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIyOlsgMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyNDpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkJ0hpdmVyXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNCxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAyMTpbIDQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMjI6WyA0LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjQ6WyA0LFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjU6WyA0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBQcmludGVtcHNcIiB9LFxuICAgICAgICB7IDIwMTg6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE5OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyNDpbIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgbmFtZTpcIlBvbnQgZGUgbCdBc2NlbnNpb25cIiB9LFxuICAgICAgICB7IDIwMTg6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNDpbIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI1OlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCfDiXTDqVwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEwLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjM6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNDpbIDEwLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBsYSBUb3Vzc2FpbnRcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIE5vw6tsXCIgfSBdIH0sXG4gICAgXCJQYXlzIGRlIGxhIExvaXJlXCI6eyBfc3RhdGVfY29kZTpcInBkbFwiLFxuICAgICAgU0g6WyB7IDIwMTg6WyAyLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCdIaXZlclwiIH0sXG4gICAgICAgIHsgMjAxODpbIDQsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI0OlsgNCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgUHJpbnRlbXBzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMzpbIDUsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIG5hbWU6XCJQb250IGRlIGwnQXNjZW5zaW9uXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnw4l0w6lcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIFwiUHJvdmVuY2UtQWxwZXMtQ8O0dGUgZCdBenVyXCI6eyBfc3RhdGVfY29kZTpcInBhY1wiLFxuICAgICAgU0g6WyB7IDIwMTg6WyAyLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCdIaXZlclwiIH0sXG4gICAgICAgIHsgMjAxODpbIDQsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI0OlsgNCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgUHJpbnRlbXBzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMzpbIDUsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyMSBdLFxuICAgICAgICAgIDIwMjQ6WyA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMiBdLFxuICAgICAgICAgIDIwMjU6WyAyLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIG5hbWU6XCJQb250IGRlIGwnQXNjZW5zaW9uXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjQ6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyNTpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnw4l0w6lcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIzOlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNTpbIDEwLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjM6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNTpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIFwiw45sZS1kZS1GcmFuY2VcIjp7IF9zdGF0ZV9jb2RlOlwiaWRmXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjggXSxcbiAgICAgICAgICAyMDIyOlsgMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI0OlsgMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnSGl2ZXJcIiB9LFxuICAgICAgICB7IDIwMTg6WyA0LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTkgXSxcbiAgICAgICAgICAyMDIxOlsgNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyNDpbIDQsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBQcmludGVtcHNcIiB9LFxuICAgICAgICB7IDIwMTg6WyA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDE5OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyNDpbIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyNTpbIDIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgbmFtZTpcIlBvbnQgZGUgbCdBc2NlbnNpb25cIiB9LFxuICAgICAgICB7IDIwMTg6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyNDpbIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDI1OlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCfDiXTDqVwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEwLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDcgXSxcbiAgICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjM6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyNDpbIDEwLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI1OlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBsYSBUb3Vzc2FpbnRcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIyOlsgMTIsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMjQ6WyAxMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIE5vw6tsXCIgfSBdIH0sXG4gICAgT2NjaXRhbmllOnsgX3N0YXRlX2NvZGU6XCJvY2NcIixcbiAgICAgIFNIOlsgeyAyMDE4OlsgMixcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMjI6WyAyLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMjM6WyAyLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjQ6WyAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCdIaXZlclwiIH0sXG4gICAgICAgIHsgMjAxODpbIDQsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyA0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDI0OlsgNCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDI1OlsgNCxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIFByaW50ZW1wc1wiIH0sXG4gICAgICAgIHsgMjAxODpbIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMTk6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIxOlsgNSxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyMjpbIDUsXG4gICAgICAgICAgICAyNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjM6WyA1LFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDI0OlsgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTIgXSxcbiAgICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICBuYW1lOlwiUG9udCBkZSBsJ0FzY2Vuc2lvblwiIH0sXG4gICAgICAgIHsgMjAxODpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDI0OlsgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjU6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkJ8OJdMOpXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIxOlsgMTAsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIDIwMjI6WyAxMCxcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMzpbIDEwLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjU6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIGxhIFRvdXNzYWludFwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTk6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMTpbIDEyLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjI6WyAxMixcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIzOlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyNDpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjU6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgTm/Dq2xcIiB9IF0gfSxcbiAgICBDb3JzZTp7IF9zdGF0ZV9jb2RlOlwiY29yXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnSGl2ZXJcIiB9LFxuICAgICAgICB7IDIwMTg6WyA0LFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTk6WyA0LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyA0LFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgUHJpbnRlbXBzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgbmFtZTpcIlBvbnQgZGUgbCdBc2NlbnNpb25cIiB9LFxuICAgICAgICB7IDIwMTg6WyA3LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMwIF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDMxIF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCfDiXTDqVwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEwLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDQgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIGxhIFRvdXNzYWludFwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEyLFxuICAgICAgICAgICAgMjMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTk6WyAxMixcbiAgICAgICAgICAgIDIyLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIE5vw6tsXCIgfSBdIH0sXG4gICAgR3VhZGVsb3VwZTp7IF9zdGF0ZV9jb2RlOlwiZ3VhXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDIyOlsgMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIENhcm5hdmFsXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIxOlsgMyxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBQw6JxdWVzXCIgfSxcbiAgICAgICAgeyAyMDE5OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAyOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyOSBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICBuYW1lOlwiUG9udCBkZSBsJ0FzY2Vuc2lvblwiIH0sXG4gICAgICAgIHsgMjAxODpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgbmFtZTpcIkdyYW5kZXMgVmFjYW5jZXNcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBsYSBUb3Vzc2FpbnRcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIFwiU2FpbnQtTWFydGluIChGcmFuY2UpXCI6eyBfc3RhdGVfY29kZTpcIm1mXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIENhcm5hdmFsXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIxOlsgMyxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIFDDonF1ZXNcIiB9LFxuICAgICAgICB7IDIwMTk6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIxOlsgNSxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgbmFtZTpcIlBvbnQgZGUgbCdBc2NlbnNpb25cIiB9LFxuICAgICAgICB7IDIwMTg6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIG5hbWU6XCJHcmFuZGVzIFZhY2FuY2VzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgTm/Dq2xcIiB9IF0gfSxcbiAgICBcIlNhaW50LUJhcnRow6lsZW15XCI6eyBfc3RhdGVfY29kZTpcImJsXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIENhcm5hdmFsXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMyxcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIxOlsgMyxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIFDDonF1ZXNcIiB9LFxuICAgICAgICB7IDIwMTk6WyA1LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICBuYW1lOlwiUG9udCBkZSBsJ0FzY2Vuc2lvblwiIH0sXG4gICAgICAgIHsgMjAxODpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDE5OlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIDIwMjE6WyA3LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjM6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgbmFtZTpcIkdyYW5kZXMgVmFjYW5jZXNcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBsYSBUb3Vzc2FpbnRcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIEd1eWFuZTp7IF9zdGF0ZV9jb2RlOlwiZ3VmXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMjQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDIwOlsgMixcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIENhcm5hdmFsXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMyxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIDIwMjI6WyA0LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBQw6JxdWVzXCIgfSxcbiAgICAgICAgeyAyMDE5OlsgNSxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgbmFtZTpcIlBvbnQgZGUgbCdBc2NlbnNpb25cIiB9LFxuICAgICAgICB7IDIwMTg6WyA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIG5hbWU6XCJHcmFuZGVzIFZhY2FuY2VzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgTm/Dq2xcIiB9IF0gfSxcbiAgICBNYXJ0aW5pcXVlOnsgX3N0YXRlX2NvZGU6XCJtdHFcIixcbiAgICAgIFNIOlsgeyAyMDE4OlsgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE5OlsgMixcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAyMDpbIDIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAyMTpbIDIsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBDYXJuYXZhbFwiIH0sXG4gICAgICAgIHsgMjAxODpbIDMsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMjA6WyA0LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjE6WyAzLFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgUMOicXVlc1wiIH0sXG4gICAgICAgIHsgMjAxODpbIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAxOTpbIDUsXG4gICAgICAgICAgICAzMCxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAyIF0sXG4gICAgICAgICAgMjAyMDpbIDUsXG4gICAgICAgICAgICAxNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgbmFtZTpcIlBvbnQgZGUgbCdBc2NlbnNpb25cIiB9LFxuICAgICAgICB7IDIwMTg6WyA3LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICAyMDIwOlsgNyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzAgXSxcbiAgICAgICAgICAyMDIyOlsgNyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMzEgXSxcbiAgICAgICAgICAyMDIzOlsgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIG5hbWU6XCJHcmFuZGVzIFZhY2FuY2VzXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTAsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDggXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgTm/Dq2xcIiB9IF0gfSxcbiAgICBNYXlvdHRlOnsgX3N0YXRlX2NvZGU6XCJtYXlcIixcbiAgICAgIFNIOlsgeyAyMDE4OlsgMixcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDExIF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIDIwMjA6WyAzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxNSBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgMjgsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMTQgXSxcbiAgICAgICAgICAyMDIyOlsgMixcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMzpbIDIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIENhcm5hdmFsXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNSxcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTMgXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDI3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDUgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDIxOlsgNSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA4IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIFDDonF1ZXNcIiB9LFxuICAgICAgICB7IDIwMjA6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICBuYW1lOlwiUG9udCBkZSBsJ0FzY2Vuc2lvblwiIH0sXG4gICAgICAgIHsgMjAxODpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgbmFtZTpcIkdyYW5kZXMgVmFjYW5jZXNcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIGxhIFRvdXNzYWludFwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEyLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTIgXSxcbiAgICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIFwiTGEgUsOpdW5pb25cIjp7IF9zdGF0ZV9jb2RlOlwibHJlXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDMsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMTk6WyAzLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDIwOlsgMyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIxOlsgMyxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDIyOlsgMyxcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMzpbIDMsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAyNiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBhcHLDqHMgM8OobWUgcMOpcmlvZGVcIiB9LFxuICAgICAgICB7IDIwMTg6WyA1LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMTk6WyA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjA6WyA1LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxNiBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI5IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGFwcsOocyA0w6htZSBww6lyaW9kZVwiIH0sXG4gICAgICAgIHsgMjAxODpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAyMjpbIDcsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGhpdmVyIGF1c3RyYWxcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMCxcbiAgICAgICAgICAgIDE0LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyOCBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBhcHLDqHMgMcOocmUgcMOpcmlvZGVcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMixcbiAgICAgICAgICAgIDIzLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyDDqXTDqSBhdXN0cmFsXCIgfSBdIH0sXG4gICAgXCJOb3V2ZWxsZS1DYWzDqWRvbmllXCI6eyBfc3RhdGVfY29kZTpcIm5jXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDQsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMTpbIDQsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE2IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIDHDqHJlIHDDqXJpb2RlXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICAyMDE5OlsgNixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDIwOlsgNixcbiAgICAgICAgICAgIDYsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMjEgXSxcbiAgICAgICAgICAyMDIxOlsgNixcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMjAgXSxcbiAgICAgICAgICAyMDIyOlsgNixcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDIzOlsgNCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgMsOobWUgcMOpcmlvZGVcIiB9LFxuICAgICAgICB7IDIwMTg6WyA4LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMjYgXSxcbiAgICAgICAgICAyMDE5OlsgOCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAyMDpbIDgsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMTpbIDgsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMjpbIDgsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyMzpbIDgsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIDPDqG1lIHDDqXJpb2RlXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTAsXG4gICAgICAgICAgICAxMyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICAyMDIxOlsgMTAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjI6WyAxMCxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDIyIF0sXG4gICAgICAgICAgMjAyMzpbIDEwLFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgNMOobWUgcMOpcmlvZGVcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMixcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE3IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxNCBdLFxuICAgICAgICAgIDIwMjE6WyAxMixcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMTcsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTIgXSxcbiAgICAgICAgICAyMDIzOlsgMTIsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkJ8OJdMOpXCIgfSBdIH0sXG4gICAgXCJQb2x5bsOpc2llIGZyYW7Dp2Fpc2VcIjp7IF9zdGF0ZV9jb2RlOlwicGZcIixcbiAgICAgIFNIOlsgeyAyMDE4OlsgMixcbiAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAxOTpbIDIsXG4gICAgICAgICAgICAxNyxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjMgXSxcbiAgICAgICAgICAyMDIxOlsgMixcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAyMjpbIDIsXG4gICAgICAgICAgICAxOSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAyNyBdLFxuICAgICAgICAgIDIwMjM6WyAyLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMjUgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgZsOpdnJpZXJcIiB9LFxuICAgICAgICB7IDIwMTg6WyAzLFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAgIDcsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIwOlsgMyxcbiAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMTpbIDQsXG4gICAgICAgICAgICA2LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE4IF0sXG4gICAgICAgICAgMjAyMzpbIDQsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGQnYXZyaWxcIiB9LFxuICAgICAgICB7IDIwMTg6WyA1LFxuICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjcgXSxcbiAgICAgICAgICAyMDE5OlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIwOlsgNSxcbiAgICAgICAgICAgIDE3LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAyMTpbIDUsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzMCBdLFxuICAgICAgICAgIDIwMjI6WyA1LFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMjkgXSxcbiAgICAgICAgICAyMDIzOlsgNSxcbiAgICAgICAgICAgIDIxLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIG1haVwiIH0sXG4gICAgICAgIHsgMjAxODpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDE1IF0sXG4gICAgICAgICAgMjAxOTpbIDcsXG4gICAgICAgICAgICA3LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDkgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMzpbIDcsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICBuYW1lOlwiR3JhbmRlcyBWYWNhbmNlc1wiIH0sXG4gICAgICAgIHsgMjAxODpbIDksXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMTk6WyA5LFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMjIgXSxcbiAgICAgICAgICAyMDIwOlsgOSxcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgMjAyMTpbIDksXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICAxOSBdLFxuICAgICAgICAgIDIwMjI6WyA5LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMTggXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgc2VwdGVtYnJlXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTAsXG4gICAgICAgICAgICAyOCxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDE5OlsgMTAsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgMTEgXSxcbiAgICAgICAgICAyMDIwOlsgMTAsXG4gICAgICAgICAgICAyNSxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAgIDI0LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA3IF0sXG4gICAgICAgICAgMjAyMjpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDYgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCdvY3RvYnJlLW5vdmVtYnJlXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAxNixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMTk6WyAxMixcbiAgICAgICAgICAgIDE1LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDEyIF0sXG4gICAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMTAgXSxcbiAgICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAyMjpbIDEyLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkZSBOb8OrbFwiIH0gXSB9LFxuICAgIFwiU2FpbnQtUGllcnJlLWV0LU1pcXVlbG9uXCI6eyBfc3RhdGVfY29kZTpcInBtXCIsXG4gICAgICBTSDpbIHsgMjAxODpbIDIsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAxMSBdLFxuICAgICAgICAgIDIwMTk6WyAyLFxuICAgICAgICAgICAgMTYsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgMyBdLFxuICAgICAgICAgIDIwMjA6WyAyLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgOCBdLFxuICAgICAgICAgIDIwMjE6WyAyLFxuICAgICAgICAgICAgMTksXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNyBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkJ0hpdmVyXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgNCxcbiAgICAgICAgICAgIDI4LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEzIF0sXG4gICAgICAgICAgMjAxOTpbIDQsXG4gICAgICAgICAgICAyMCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgICAxOCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAzIF0sXG4gICAgICAgICAgMjAyMTpbIDQsXG4gICAgICAgICAgICAyNCxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICA5IF0sXG4gICAgICAgICAgMjAyMjpbIDQsXG4gICAgICAgICAgICAxNSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIGRlIFByaW50ZW1wc1wiIH0sXG4gICAgICAgIHsgMjAyMDpbIDUsXG4gICAgICAgICAgICAyMSxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAyNCBdLFxuICAgICAgICAgIDIwMjE6WyA1LFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTYgXSxcbiAgICAgICAgICAyMDIyOlsgNSxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDI5IF0sXG4gICAgICAgICAgbmFtZTpcIlBvbnQgZGUgbCdBc2NlbnNpb25cIiB9LFxuICAgICAgICB7IDIwMTg6WyA2LFxuICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgNiBdLFxuICAgICAgICAgIDIwMTk6WyA3LFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDksXG4gICAgICAgICAgICA0IF0sXG4gICAgICAgICAgMjAyMDpbIDcsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDIgXSxcbiAgICAgICAgICAyMDIxOlsgNyxcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgMSBdLFxuICAgICAgICAgIDIwMjI6WyA3LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAzMSBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyBkJ8OJdMOpXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTAsXG4gICAgICAgICAgICAyNyxcbiAgICAgICAgICAgIDExLFxuICAgICAgICAgICAgNCBdLFxuICAgICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAgIDI2LFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICA1IF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMjIsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDEgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgbGEgVG91c3NhaW50XCIgfSxcbiAgICAgICAgeyAyMDE4OlsgMTIsXG4gICAgICAgICAgICAyMixcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA2IF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMjEsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDE5LFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDMgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZGUgTm/Dq2xcIiB9IF0gfSxcbiAgICBcIldhbGxpcy1ldC1GdXR1bmFcIjp7IF9zdGF0ZV9jb2RlOlwid2ZcIixcbiAgICAgIFNIOlsgeyAyMDE4OlsgNCxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0LFxuICAgICAgICAgICAgMTUgXSxcbiAgICAgICAgICAyMDE5OlsgMyxcbiAgICAgICAgICAgIDMxLFxuICAgICAgICAgICAgNCxcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAyMDpbIDMsXG4gICAgICAgICAgICAyOSxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxMyBdLFxuICAgICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAxOCBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyAxw6hyZSBww6lyaW9kZVwiIH0sXG4gICAgICAgIHsgMjAxODpbIDYsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDI0IF0sXG4gICAgICAgICAgMjAxOTpbIDYsXG4gICAgICAgICAgICA5LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIzIF0sXG4gICAgICAgICAgMjAyMDpbIDYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIxIF0sXG4gICAgICAgICAgMjAyMTpbIDYsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgNixcbiAgICAgICAgICAgIDIwIF0sXG4gICAgICAgICAgbmFtZTpcIlZhY2FuY2VzIDLDqG1lIHDDqXJpb2RlXCIgfSxcbiAgICAgICAgeyAyMDE4OlsgOCxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgOCxcbiAgICAgICAgICAgIDI2IF0sXG4gICAgICAgICAgMjAxOTpbIDgsXG4gICAgICAgICAgICAxMSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyNSBdLFxuICAgICAgICAgIDIwMjA6WyA4LFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMyBdLFxuICAgICAgICAgIDIwMjE6WyA4LFxuICAgICAgICAgICAgNyxcbiAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAyMiBdLFxuICAgICAgICAgIG5hbWU6XCJWYWNhbmNlcyAzw6htZSBww6lyaW9kZVwiIH0sXG4gICAgICAgIHsgMjAxODpbIDEwLFxuICAgICAgICAgICAgMTQsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI4IF0sXG4gICAgICAgICAgMjAxOTpbIDEwLFxuICAgICAgICAgICAgMTMsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI3IF0sXG4gICAgICAgICAgMjAyMDpbIDEwLFxuICAgICAgICAgICAgMTEsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDI1IF0sXG4gICAgICAgICAgMjAyMTpbIDEwLFxuICAgICAgICAgICAgOSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMjQgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgNMOobWUgcMOpcmlvZGVcIiB9LFxuICAgICAgICB7IDIwMTg6WyAxMixcbiAgICAgICAgICAgIDE2LFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDEwIF0sXG4gICAgICAgICAgMjAxOTpbIDEyLFxuICAgICAgICAgICAgMTUsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgOSBdLFxuICAgICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAgIDEzLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDE0IF0sXG4gICAgICAgICAgMjAyMTpbIDEyLFxuICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMTkgXSxcbiAgICAgICAgICBuYW1lOlwiVmFjYW5jZXMgZCfDiXTDqVwiIH0gXSB9IH07XG4gIGRhdGEkcC5QSDtcbiAgZGF0YSRwLkJyZXRhZ25lO1xuICBkYXRhJHAuTm9ybWFuZGllO1xuICBkYXRhJHAuT2NjaXRhbmllO1xuICBkYXRhJHAuQ29yc2U7XG4gIGRhdGEkcC5HdWFkZWxvdXBlO1xuICBkYXRhJHAuR3V5YW5lO1xuICBkYXRhJHAuTWFydGluaXF1ZTtcbiAgZGF0YSRwLk1heW90dGU7XG5cbiAgdmFyIGRhdGEkbyA9IHsgRW5nbGFuZDp7IFBIOlsgeyBuYW1lOlwiTmV3IFllYXLigJlzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDoxIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhcmx5IE1heSBiYW5rIGhvbGlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJTcHJpbmcgYmFuayBob2xpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJTdW1tZXIgYmFuayBob2xpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RBdWd1c3RNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXNcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkJveGluZyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNiBdIH0gXSB9LFxuICAgIFdhbGVzOnsgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcuKAmXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICAgIHsgbmFtZTpcIkVhc3RlciBNb25kYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgICAgeyBuYW1lOlwiRWFybHkgTWF5IGJhbmsgaG9saWRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlNwcmluZyBiYW5rIGhvbGlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlN1bW1lciBiYW5rIGhvbGlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdEF1Z3VzdE1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQm94aW5nIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI2IF0gfSBdIH0gfTtcbiAgZGF0YSRvLkVuZ2xhbmQ7XG4gIGRhdGEkby5XYWxlcztcblxuICB2YXIgZGF0YSRuID0geyBQSDpbIHsgbmFtZTpcIs6gz4HPic+Ezr/Ph8+Bzr/Ovc65zqxcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCLOmM61zr/Phs6szr3Ouc6xXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDYgXSB9LFxuICAgICAgeyBuYW1lOlwizprOsc64zrHPgc6sIM6UzrXPhc+Ezq3Pgc6xXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJvcnRob2RveCBlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi00OCB9LFxuICAgICAgeyBuYW1lOlwiMjXOtyDOnM6xz4HPhM6vzr/PhVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCLOnM61zrPOrM67zrcgzqDOsc+BzrHPg866zrXPhc6uXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJvcnRob2RveCBlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICB7IG5hbWU6XCLOoM6sz4PPh86xXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJvcnRob2RveCBlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjAgfSxcbiAgICAgIHsgbmFtZTpcIs6UzrXPhc+Ezq3Pgc6xIM+Ezr/PhSDOoM6sz4PPh86xXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJvcnRob2RveCBlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcIs6gz4HPic+Ezr/OvM6xzrPOuc6sXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwizprOv86vzrzOt8+Dzrcgz4TOt8+CIM6YzrXOv8+Ez4zOus6/z4VcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgMTUgXSB9LFxuICAgICAgeyBuYW1lOlwiMjjOtyDOn866z4TPic6yz4HOr86/z4VcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgIDI4IF0gfSxcbiAgICAgIHsgbmFtZTpcIs6nz4HOuc+Dz4TOv8+NzrPOtc69zr3OsVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjUgXSB9LFxuICAgICAgeyBuYW1lOlwiMs63IM68zq3Pgc6xIM6nz4HOuc+Dz4TOv8+FzrPOrc69zr3Pic69XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNiBdIH0gXSxcbiAgICBTSDpbIHsgMjAxOTpbIDEsXG4gICAgICAgICAgMzAsXG4gICAgICAgICAgMSxcbiAgICAgICAgICAzMCBdLFxuICAgICAgICAyMDIwOlsgMSxcbiAgICAgICAgICAzMCxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDMwIF0sXG4gICAgICAgIG5hbWU6XCLOpM+BzrnPjs69IM6ZzrXPgc6xz4HPh8+Ozr1cIiB9LFxuICAgICAgeyAyMDE5OlsgNCxcbiAgICAgICAgICAyMixcbiAgICAgICAgICA1LFxuICAgICAgICAgIDYgXSxcbiAgICAgICAgMjAyMDpbIDQsXG4gICAgICAgICAgMTMsXG4gICAgICAgICAgNCxcbiAgICAgICAgICAyNiBdLFxuICAgICAgICBuYW1lOlwizqDOrM+Dz4fOsVwiIH0sXG4gICAgICB7IDIwMTk6WyA2LFxuICAgICAgICAgIDE3LFxuICAgICAgICAgIDYsXG4gICAgICAgICAgMTcgXSxcbiAgICAgICAgMjAyMDpbIDYsXG4gICAgICAgICAgOCxcbiAgICAgICAgICA2LFxuICAgICAgICAgIDggXSxcbiAgICAgICAgbmFtZTpcIs6RzrPOr86/z4UgzqDOvc61z43OvM6xz4TOv8+CXCIgfSxcbiAgICAgIHsgMjAxOTpbIDcsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA4LFxuICAgICAgICAgIDMxIF0sXG4gICAgICAgIDIwMjA6WyA3LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgOCxcbiAgICAgICAgICAzMSBdLFxuICAgICAgICBuYW1lOlwizprOsc67zr/Ous6xzq/Pgc65XCIgfSxcbiAgICAgIHsgMjAxOTpbIDExLFxuICAgICAgICAgIDE3LFxuICAgICAgICAgIDExLFxuICAgICAgICAgIDE3IF0sXG4gICAgICAgIG5hbWU6XCLOoM6/zrvPhc+EzrXPh869zrXOr86/XCIgfSxcbiAgICAgIHsgMjAxODpbIDEyLFxuICAgICAgICAgIDI0LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgNyBdLFxuICAgICAgICAyMDE5OlsgMTIsXG4gICAgICAgICAgMjQsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA3IF0sXG4gICAgICAgIDIwMjA6WyAxMixcbiAgICAgICAgICAyNCxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDcgXSxcbiAgICAgICAgbmFtZTpcIs6nz4HOuc+Dz4TOv8+NzrPOtc69zr3OsVwiIH0gXSB9O1xuICBkYXRhJG4uUEg7XG4gIGRhdGEkbi5TSDtcblxuICB2YXIgZGF0YSRtID0geyBQSDpbIHsgbmFtZTpcIk5vdmEgZ29kaW5hXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiU3ZldGEgdHJpIGtyYWxqYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICA2IF0gfSxcbiAgICAgIHsgbmFtZTpcIlVza3LFoW5qaSBwb25lZGplbGpha1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDoxIH0sXG4gICAgICB7IG5hbWU6XCJQcmF6bmlrIHJhZGFcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJUaWplbG92b1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgeyBuYW1lOlwiRGFuIGFudGlmYcWhaXN0acSNa2UgYm9yYmVcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgMjIgXSB9LFxuICAgICAgeyBuYW1lOlwiRGFuIHBvYmplZGUgaSBkb21vdmluc2tlIHphaHZhbG5vc3RpXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDUgXSB9LFxuICAgICAgeyBuYW1lOlwiVmVsaWthIEdvc3BhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDE1IF0gfSxcbiAgICAgIHsgbmFtZTpcIlN2aSBzdmV0aVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJEYW4gc2plxIdhbmphIG5hIMW+cnR2ZSBEb21vdmluc2tvZyByYXRhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxOCBdIH0sXG4gICAgICB7IG5hbWU6XCJCb8W+acSHXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCJTdmV0aSBTdGplcGFuXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNiBdIH0gXSxcbiAgICBTSDpbIHsgMjAyMjpbIDIsXG4gICAgICAgICAgMjEsXG4gICAgICAgICAgMixcbiAgICAgICAgICAyNyBdLFxuICAgICAgICAyMDIzOlsgMixcbiAgICAgICAgICAyMCxcbiAgICAgICAgICAyLFxuICAgICAgICAgIDI2IF0sXG4gICAgICAgIG5hbWU6XCJEcnVnaSBkaW8gemltc2tvZyBvZG1vcmFcIiB9LFxuICAgICAgeyAyMDIyOlsgNCxcbiAgICAgICAgICAxNCxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDI0IF0sXG4gICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgIDYsXG4gICAgICAgICAgNCxcbiAgICAgICAgICAxNiBdLFxuICAgICAgICBuYW1lOlwiUHJvbGpldG5pIG9kbW9yXCIgfSxcbiAgICAgIHsgMjAyMjpbIDYsXG4gICAgICAgICAgMjMsXG4gICAgICAgICAgOSxcbiAgICAgICAgICAzIF0sXG4gICAgICAgIDIwMjM6WyA2LFxuICAgICAgICAgIDIzLFxuICAgICAgICAgIDksXG4gICAgICAgICAgNCBdLFxuICAgICAgICBuYW1lOlwiTGpldG5pIHByYXpuaWNpXCIgfSxcbiAgICAgIHsgMjAyMTpbIDExLFxuICAgICAgICAgIDIsXG4gICAgICAgICAgMTEsXG4gICAgICAgICAgMyBdLFxuICAgICAgICAyMDIyOlsgMTAsXG4gICAgICAgICAgMzEsXG4gICAgICAgICAgMTEsXG4gICAgICAgICAgMSBdLFxuICAgICAgICBuYW1lOlwiSmVzZW5za2kgb2Rtb3JcIiB9LFxuICAgICAgeyAyMDIxOlsgMTIsXG4gICAgICAgICAgMjQsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA5IF0sXG4gICAgICAgIDIwMjI6WyAxMixcbiAgICAgICAgICAyNyxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDggXSxcbiAgICAgICAgbmFtZTpcIlBydmkgZGlvIHppbXNrb2cgb2Rtb3JhXCIgfSBdIH07XG4gIGRhdGEkbS5QSDtcbiAgZGF0YSRtLlNIO1xuXG4gIHZhciBkYXRhJGwgPSB7IFBIOlsgeyBuYW1lOlwiw7pqw6l2XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiYXogMTg0OC1hcyBmb3JyYWRhbG9tIMO8bm5lcGVcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgMTUgXSB9LFxuICAgICAgeyBuYW1lOlwibmFneXDDqW50ZWtcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgIHsgbmFtZTpcImjDunN2w6l0dmFzw6FybmFwXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIiB9LFxuICAgICAgeyBuYW1lOlwiaMO6c3bDqXRow6l0ZsWRXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcInDDvG5rw7ZzZHZhc8Ohcm5hcFwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo0OSB9LFxuICAgICAgeyBuYW1lOlwicMO8bmvDtnNkaMOpdGbFkVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo1MCB9LFxuICAgICAgeyBuYW1lOlwiYSBtdW5rYSDDvG5uZXBlXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiYXogw6FsbGFtYWxhcMOtdMOhcyDDvG5uZXBlXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDIwIF0gfSxcbiAgICAgIHsgbmFtZTpcImF6IDE5NTYtb3MgZm9ycmFkYWxvbSDDvG5uZXBlXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAyMyBdIH0sXG4gICAgICB7IG5hbWU6XCJtaW5kZW5zemVudGVrXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcImthcsOhY3NvbnlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcImthcsOhY3NvbnkgbcOhc25hcFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjYgXSB9IF0sXG4gICAgU0g6WyB7IDIwMTQ6WyAxMCxcbiAgICAgICAgICAyMyxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICAyIF0sXG4gICAgICAgIDIwMTU6WyAxMCxcbiAgICAgICAgICAyMyxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICAxIF0sXG4gICAgICAgIDIwMTY6WyAxMCxcbiAgICAgICAgICAyOSxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICA2IF0sXG4gICAgICAgIDIwMTc6WyAxMCxcbiAgICAgICAgICAyOCxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICA1IF0sXG4gICAgICAgIDIwMTg6WyAxMCxcbiAgICAgICAgICAyNyxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICA0IF0sXG4gICAgICAgIDIwMTk6WyAxMCxcbiAgICAgICAgICAyNixcbiAgICAgICAgICAxMSxcbiAgICAgICAgICAzIF0sXG4gICAgICAgIDIwMjA6WyAxMCxcbiAgICAgICAgICAyMyxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICAxIF0sXG4gICAgICAgIDIwMjE6WyAxMCxcbiAgICAgICAgICAyMyxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICAxIF0sXG4gICAgICAgIDIwMjM6WyAxMCxcbiAgICAgICAgICAyOCxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICA1IF0sXG4gICAgICAgIDIwMjQ6WyAxMCxcbiAgICAgICAgICAyNixcbiAgICAgICAgICAxMSxcbiAgICAgICAgICAzIF0sXG4gICAgICAgIG5hbWU6XCLFkXN6aSBzesO8bmV0XCIgfSxcbiAgICAgIHsgMjAxNDpbIDEyLFxuICAgICAgICAgIDIwLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgNCBdLFxuICAgICAgICAyMDE1OlsgMTIsXG4gICAgICAgICAgMTksXG4gICAgICAgICAgMSxcbiAgICAgICAgICAzIF0sXG4gICAgICAgIDIwMTY6WyAxMixcbiAgICAgICAgICAyMixcbiAgICAgICAgICAxLFxuICAgICAgICAgIDIgXSxcbiAgICAgICAgMjAxNzpbIDEyLFxuICAgICAgICAgIDIzLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgMiBdLFxuICAgICAgICAyMDE4OlsgMTIsXG4gICAgICAgICAgMjIsXG4gICAgICAgICAgMSxcbiAgICAgICAgICAyIF0sXG4gICAgICAgIDIwMTk6WyAxMixcbiAgICAgICAgICAyMSxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDUgXSxcbiAgICAgICAgMjAyMDpbIDEyLFxuICAgICAgICAgIDE5LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgMyBdLFxuICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgMjIsXG4gICAgICAgICAgMSxcbiAgICAgICAgICAyIF0sXG4gICAgICAgIDIwMjI6WyAxMixcbiAgICAgICAgICAyMixcbiAgICAgICAgICAxLFxuICAgICAgICAgIDggXSxcbiAgICAgICAgMjAyMzpbIDEyLFxuICAgICAgICAgIDIyLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgNyBdLFxuICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgMjEsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA1IF0sXG4gICAgICAgIG5hbWU6XCJ0w6lsaSBzesO8bmV0XCIgfSxcbiAgICAgIHsgMjAxNTpbIDQsXG4gICAgICAgICAgMixcbiAgICAgICAgICA0LFxuICAgICAgICAgIDcgXSxcbiAgICAgICAgMjAxNjpbIDMsXG4gICAgICAgICAgMjQsXG4gICAgICAgICAgMyxcbiAgICAgICAgICAyOSBdLFxuICAgICAgICAyMDE3OlsgNCxcbiAgICAgICAgICAxMyxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDE4IF0sXG4gICAgICAgIDIwMTg6WyAzLFxuICAgICAgICAgIDI5LFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMyBdLFxuICAgICAgICAyMDE5OlsgNCxcbiAgICAgICAgICAxOCxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIDIwMjA6WyA0LFxuICAgICAgICAgIDcsXG4gICAgICAgICAgNCxcbiAgICAgICAgICAxNCBdLFxuICAgICAgICAyMDIxOlsgNCxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgNiBdLFxuICAgICAgICAyMDIyOlsgNCxcbiAgICAgICAgICAxNCxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDE5IF0sXG4gICAgICAgIDIwMjM6WyA0LFxuICAgICAgICAgIDYsXG4gICAgICAgICAgNCxcbiAgICAgICAgICAxMSBdLFxuICAgICAgICAyMDI0OlsgMyxcbiAgICAgICAgICAyOCxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDcgXSxcbiAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgMTcsXG4gICAgICAgICAgNCxcbiAgICAgICAgICAyNyBdLFxuICAgICAgICBuYW1lOlwidGF2YXN6aSBzesO8bmV0XCIgfSxcbiAgICAgIHsgMjAxNTpbIDYsXG4gICAgICAgICAgMTYsXG4gICAgICAgICAgOCxcbiAgICAgICAgICAzMSBdLFxuICAgICAgICAyMDE2OlsgNixcbiAgICAgICAgICAxNixcbiAgICAgICAgICA4LFxuICAgICAgICAgIDMxIF0sXG4gICAgICAgIDIwMTc6WyA2LFxuICAgICAgICAgIDE2LFxuICAgICAgICAgIDgsXG4gICAgICAgICAgMzEgXSxcbiAgICAgICAgMjAxODpbIDYsXG4gICAgICAgICAgMTYsXG4gICAgICAgICAgOSxcbiAgICAgICAgICAyIF0sXG4gICAgICAgIDIwMTk6WyA2LFxuICAgICAgICAgIDE1LFxuICAgICAgICAgIDksXG4gICAgICAgICAgMSBdLFxuICAgICAgICAyMDIwOlsgNixcbiAgICAgICAgICAxNixcbiAgICAgICAgICA4LFxuICAgICAgICAgIDMxIF0sXG4gICAgICAgIDIwMjE6WyA2LFxuICAgICAgICAgIDE2LFxuICAgICAgICAgIDgsXG4gICAgICAgICAgMzEgXSxcbiAgICAgICAgMjAyMjpbIDYsXG4gICAgICAgICAgMTYsXG4gICAgICAgICAgOCxcbiAgICAgICAgICAzMSBdLFxuICAgICAgICAyMDIzOlsgNixcbiAgICAgICAgICAxNyxcbiAgICAgICAgICA4LFxuICAgICAgICAgIDMxIF0sXG4gICAgICAgIDIwMjQ6WyA2LFxuICAgICAgICAgIDIyLFxuICAgICAgICAgIDksXG4gICAgICAgICAgMSBdLFxuICAgICAgICAyMDI1OlsgNixcbiAgICAgICAgICAyMSxcbiAgICAgICAgICA4LFxuICAgICAgICAgIDMxIF0sXG4gICAgICAgIG5hbWU6XCJuecOhcmkgc3rDvG5ldFwiIH0gXSB9O1xuICBkYXRhJGwuUEg7XG4gIGRhdGEkbC5TSDtcblxuICB2YXIgZGF0YSRrID0geyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFy4oCZcyBEYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJTdCBQYXRyaWNr4oCZcyBEYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgMTcgXSB9LFxuICAgICAgeyBuYW1lOlwiU3QgUGF0cmlja+KAmXMgRGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJuZXh0TW8tRnIxN01hcmNoXCIgfSxcbiAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcIk1heSBCYW5rIEhvbGlkYXlcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0TWF5TW9uZGF5XCIgfSxcbiAgICAgIHsgbmFtZTpcIkp1bmUgQmFuayBIb2xpZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEp1bmVNb25kYXlcIiB9LFxuICAgICAgeyBuYW1lOlwiQXVndXN0IEJhbmsgSG9saWRheVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RBdWd1c3RNb25kYXlcIiB9LFxuICAgICAgeyBuYW1lOlwiT2N0b2JlciBCYW5rIEhvbGlkYXkgKEhhbGxvd2VlbilcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RPY3RvYmVyTW9uZGF5XCIgfSxcbiAgICAgIHsgbmFtZTpcIkNocmlzdG1hc1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjUgXSB9LFxuICAgICAgeyBuYW1lOlwiU3QgU3RlcGhlbuKAmXMgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNiBdIH0sXG4gICAgICB7IG5hbWU6XCJCYW5rIEhvbGlkYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI3IF0gfSBdIH07XG4gIGRhdGEkay5QSDtcblxuICB2YXIgZGF0YSRqID0geyBQSDpbIHsgbmFtZTpcIkNhcG9kYW5ub1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkVwaWZhbmlhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDYgXSB9LFxuICAgICAgeyBuYW1lOlwiTGliZXJhemlvbmUgZGFsIG5hemlmYXNjaXNtbyAoMTk0NSlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgMjUgXSB9LFxuICAgICAgeyBuYW1lOlwiUGFzcXVhXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIiB9LFxuICAgICAgeyBuYW1lOlwiTHVuZWTDrCBkaSBQYXNxdWFcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgeyBuYW1lOlwiRmVzdGEgZGVsIGxhdm9yb1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkZlc3RhIGRlbGxhIFJlcHViYmxpY2FcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgMiBdIH0sXG4gICAgICB7IG5hbWU6XCJBc3N1bnppb25lIGRpIE1hcmlhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDE1IF0gfSxcbiAgICAgIHsgbmFtZTpcIk9nbmlzc2FudGlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiSW1tYWNvbGF0YSBDb25jZXppb25lXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICA4IF0gfSxcbiAgICAgIHsgbmFtZTpcIk5hdGFsZSBkaSBHZXPDuVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjUgXSB9LFxuICAgICAgeyBuYW1lOlwiU2FudG8gU3RlZmFub1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjYgXSB9IF0gfTtcbiAgZGF0YSRqLlBIO1xuXG4gIHZhciBkYXRhJGkgPSB7IFBIOlsgeyBuYW1lOlwi5YWD5pelXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwi5oiQ5Lq644Gu5pelXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgIHsgbmFtZTpcIuW7uuWbveiomOW/teOBruaXpVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAxMSBdIH0sXG4gICAgICB7IG5hbWU6XCLlpKnnmofoqpXnlJ/ml6VcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDIsXG4gICAgICAgICAgMjMgXSB9LFxuICAgICAgeyBuYW1lOlwi5pit5ZKM44Gu5pelXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgIDI5IF0gfSxcbiAgICAgIHsgbmFtZTpcIuaGsuazleiomOW/teaXpVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAzIF0gfSxcbiAgICAgIHsgbmFtZTpcIuOBv+OBqeOCiuOBruaXpVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICA0IF0gfSxcbiAgICAgIHsgbmFtZTpcIuOBk+OBqeOCguOBruaXpVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICA1IF0gfSxcbiAgICAgIHsgbmFtZTpcIua1t+OBruaXpVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKdWx5TW9uZGF5XCIsXG4gICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgeyBuYW1lOlwi5bGx44Gu5pelXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDExIF0gfSxcbiAgICAgIHsgbmFtZTpcIuaVrOiAgeOBruaXpVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIixcbiAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICB7IG5hbWU6XCLjgrnjg53jg7zjg4Tjga7ml6VcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJNb25kYXlcIixcbiAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgIHsgbmFtZTpcIuaWh+WMluOBruaXpVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgMyBdIH0sXG4gICAgICB7IG5hbWU6XCLli6TlirTmhJ/orJ3jga7ml6VcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDIzIF0gfSxcbiAgICAgIHsgbmFtZTpcIuaYpeWIhuOBruaXpVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwic3ByaW5nRXF1aW5veFwiIH0sXG4gICAgICB7IG5hbWU6XCLnp4vliIbjga7ml6VcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImF1dHVtbmFsRXF1aW5veFwiIH0gXSB9O1xuICBkYXRhJGkuUEg7XG5cbiAgdmFyIGRhdGEkaCA9IHsgUEg6WyB7IG5hbWU6XCJOZWlqb2Vyc2NoZGFnIC0gTmV1amFociAtIE5vdXZlbCBBblwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIk91c2NodGVybcOpaW5kZWcgLSBPc3Rlcm1vbnRhZyAtIEx1bmRpIGRlIFDDonF1ZXNcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgeyBuYW1lOlwiRGFnIHZ1biBkZXIgQWFyYmVjaHQgLSBUYWcgZGVyIEFyYmVpdCAtIFByZW1pZXIgTWFpXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiRXVyb3BhZGFnIC0gRXVyb3BhdGFnIC0gSm91cm7DqWUgZGUgbCdFdXJvcGVcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJDaHJpc3RpIEhpbW1lbGZhYXJ0IC0gQ2hyaXN0aSBIaW1tZWxmYWhydCAtIEFzY2Vuc2lvblwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDozOSB9LFxuICAgICAgeyBuYW1lOlwiUMOpbmdzY2h0bcOpaW5kZWcgLSBQZmluZ3N0bW9udGFnIC0gTHVuZGkgZGUgUGVudGVjw7R0ZVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo1MCB9LFxuICAgICAgeyBuYW1lOlwiTmF0aW9uYWxmZWllcmRhZyAtIE5hdGlvbmFsZmVpZXJ0YWcgLSBGw6p0ZSBuYXRpb25hbGVcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgMjMgXSB9LFxuICAgICAgeyBuYW1lOlwiTWFyacOkIEhpbW1lbGZhYXJ0IC0gTWFyaWEgSGltbWVsZmFocnQgLSBBc3NvbXB0aW9uXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDE1IF0gfSxcbiAgICAgIHsgbmFtZTpcIkFsbGVyaGVsbGdlbiAtIFdlaWhuYWNodGVuIC0gQWxsZXJoZWlsaWdlbiAtIFRvdXNzYWludFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJDaHLDq3NjaHRkYWcgLSBOb8OrbFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjUgXSB9LFxuICAgICAgeyBuYW1lOlwiU3RpZWZlc2RhZyAtIFp3ZWl0ZXIgV2VpaG5hY2h0c2ZlaWVydGFnIC0gU3QuIEV0aWVubmVcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI2IF0gfSBdLFxuICAgIFNIOlsgeyAyMDIzOlsgMTAsXG4gICAgICAgICAgMjgsXG4gICAgICAgICAgMTEsXG4gICAgICAgICAgNSBdLFxuICAgICAgICAyMDI0OlsgMTAsXG4gICAgICAgICAgMjYsXG4gICAgICAgICAgMTEsXG4gICAgICAgICAgMyBdLFxuICAgICAgICAyMDI1OlsgMTEsXG4gICAgICAgICAgMSxcbiAgICAgICAgICAxMSxcbiAgICAgICAgICA5IF0sXG4gICAgICAgIG5hbWU6XCJBbGxlcmhlbGxlZ2VuIC0gQWxsZXJoZWlsaWdlbnVybGF1YiAtIENvbmfDqSBkZSBsYSBUb3Vzc2FpbnRcIiB9LFxuICAgICAgeyAyMDIzOlsgMTIsXG4gICAgICAgICAgNiBdLFxuICAgICAgICAyMDI0OlsgMTIsXG4gICAgICAgICAgNiBdLFxuICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgNiBdLFxuICAgICAgICBuYW1lOlwiRmVzdCB2dW0gSGVsbGVnZSBOaWtvbGF1cyAobsOrbW1lIGZpciBHcm9uZGF1c2JpbGR1bmcpIC0gTmlrb2xhdXNmZXN0IChudXIgZsO8ciBkaWUgR3J1bmRzY2h1bGUpIC0gRsOqdGUgZGUgU2FpbnQgTmljb2xhcyAodW5pcXVlbWVudCBwb3VyIGwnZW5zZWlnbmVtZW50IGZvbmRhbWVudGFsKVwiIH0sXG4gICAgICB7IDIwMjM6WyAxMixcbiAgICAgICAgICAyMyxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDcgXSxcbiAgICAgICAgMjAyNDpbIDEyLFxuICAgICAgICAgIDIxLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgNSBdLFxuICAgICAgICAyMDI1OlsgMTIsXG4gICAgICAgICAgMjAsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA0IF0sXG4gICAgICAgIG5hbWU6XCJDaHLDq3NjaHRkYWcgVmFrYW56IC0gV2VpaG5hY2h0c2ZlcmllbiAtIFZhY2FuY2VzIGRlIE5vw6tsXCIgfSxcbiAgICAgIHsgMjAyNDpbIDIsXG4gICAgICAgICAgMTAsXG4gICAgICAgICAgMixcbiAgICAgICAgICAxOCBdLFxuICAgICAgICAyMDI1OlsgMixcbiAgICAgICAgICAxNSxcbiAgICAgICAgICAyLFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIDIwMjY6WyAyLFxuICAgICAgICAgIDE0LFxuICAgICAgICAgIDIsXG4gICAgICAgICAgMjIgXSxcbiAgICAgICAgbmFtZTpcIkthcm5ldmFsIFZha2FueiAtIEthcm5ldmFsc2ZlcmllbiAtIENvbmfDqSBkZSBDYXJuYXZhbFwiIH0sXG4gICAgICB7IDIwMjQ6WyAzLFxuICAgICAgICAgIDMwLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMTQgXSxcbiAgICAgICAgMjAyNTpbIDQsXG4gICAgICAgICAgNSxcbiAgICAgICAgICA0LFxuICAgICAgICAgIDIwIF0sXG4gICAgICAgIDIwMjY6WyAzLFxuICAgICAgICAgIDI4LFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMTIgXSxcbiAgICAgICAgbmFtZTpcIk91c2NodGVydmFrYW56IC0gT3N0ZXJmZXJpZW4gLSBWYWNhbmNlcyBkZSBQw6JxdWVzXCIgfSxcbiAgICAgIHsgMjAyNDpbIDUsXG4gICAgICAgICAgMjUsXG4gICAgICAgICAgNixcbiAgICAgICAgICAyIF0sXG4gICAgICAgIDIwMjU6WyA1LFxuICAgICAgICAgIDI0LFxuICAgICAgICAgIDYsXG4gICAgICAgICAgMSBdLFxuICAgICAgICAyMDI2OlsgNSxcbiAgICAgICAgICAyMyxcbiAgICAgICAgICA1LFxuICAgICAgICAgIDMxIF0sXG4gICAgICAgIG5hbWU6XCJQw6Rpc2NodHZha2FueiAtIFBmaW5nc3RmZXJpZW4gLSBDb25nw6kgZGUgbGEgUGVudGVjw7R0ZVwiIH0sXG4gICAgICB7IDIwMjU6WyA2LFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIDIwMjY6WyA2LFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIG5hbWU6XCJHZWJ1ZXJ0c2RhZyB2dW0gR3JhbmQtRHVjIC0gR2VidXJ0c3RhZyBkZXMgR3Jvw59oZXJ6b2dzIC0gbCdhbm5pdmVyc2FpcmUgZHUgR3JhbmQtRHVjXCIgfSxcbiAgICAgIHsgMjAyNDpbIDcsXG4gICAgICAgICAgMTYsXG4gICAgICAgICAgOSxcbiAgICAgICAgICAxNSBdLFxuICAgICAgICAyMDI1OlsgNyxcbiAgICAgICAgICAxNixcbiAgICAgICAgICA5LFxuICAgICAgICAgIDE0IF0sXG4gICAgICAgIDIwMjY6WyA3LFxuICAgICAgICAgIDE2LFxuICAgICAgICAgIDksXG4gICAgICAgICAgMTQgXSxcbiAgICAgICAgbmFtZTpcIlN1bW1lcnZha2FueiAtIFNvbW1lcmZlcmllbiAtIFZhY2FuY2VzIGTigJnDqXTDqVwiIH0gXSB9O1xuICBkYXRhJGguUEg7XG4gIGRhdGEkaC5TSDtcblxuICB2YXIgZGF0YSRnID0geyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFy4oCZcyBEYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgIDIxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcIldvcmtlcuKAmXMgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiQ2Fzc2luZ2EgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDQgXSB9LFxuICAgICAgeyBuYW1lOlwiQXNjZW5zaW9uIERheVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDozOSB9LFxuICAgICAgeyBuYW1lOlwiQWZyaWNhIERheVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCJIZXJvZXPigJkgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDI2IF0gfSxcbiAgICAgIHsgbmFtZTpcIkh1bWFuIFJpZ2h0cyBEYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDEwIF0gfSxcbiAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcIkZhbWlseSBEYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI2IF0gfSBdIH07XG4gIGRhdGEkZy5QSDtcblxuICB2YXIgZGF0YSRmID0geyBQSDpbIHsgbmFtZTpcIk5pZXV3amFhcnNkYWdcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJHb2VkZSB2cmlqZGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICB7IG5hbWU6XCJUd2VlZGUgUGFhc2RhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDoxIH0sXG4gICAgICB7IG5hbWU6XCJLb25pbmdzZGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgIDI3IF0gfSxcbiAgICAgIHsgbmFtZTpcIkJldnJpamRpbmdzZGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDUgXSB9LFxuICAgICAgeyBuYW1lOlwiSGVtZWx2YWFydHNkYWdcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MzkgfSxcbiAgICAgIHsgbmFtZTpcIlR3ZWVkZSBQaW5rc3RlcmRhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo1MCB9LFxuICAgICAgeyBuYW1lOlwiRWVyc3RlIEtlcnN0ZGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCJUd2VlZGUgS2Vyc3RkYWdcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI2IF0gfSBdIH07XG4gIGRhdGEkZi5QSDtcblxuICB2YXIgZGF0YSRlID0geyBQSDpbIHsgbmFtZTpcIk55dHTDpXJzZGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiU2tqw6ZydG9yc2RhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDotMyB9LFxuICAgICAgeyBuYW1lOlwiTGFuZ2ZyZWRhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgeyBuYW1lOlwiUMOlc2tlZGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIiB9LFxuICAgICAgeyBuYW1lOlwiMi4gUMOlc2tlZGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcIjEuIE1haVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkdydW5ubG92c2RhZ2VuXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDE3IF0gfSxcbiAgICAgIHsgbmFtZTpcIktyaXN0aSBIaW1tZWxmYXJ0c2RhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDozOSB9LFxuICAgICAgeyBuYW1lOlwiUGluc2VkYWdcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6NDkgfSxcbiAgICAgIHsgbmFtZTpcIjIuIFBpbnNlZGFnXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjUwIH0sXG4gICAgICB7IG5hbWU6XCJKdWxlZGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCIyLiBKdWxlZGFnXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNiBdIH0gXSB9O1xuICBkYXRhJGUuUEg7XG5cbiAgdmFyIGRhdGEkZCA9IHsgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkRheSBhZnRlciBOZXcgWWVhcidzIERheVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAyIF0gfSxcbiAgICAgIHsgbmFtZTpcIldhaXRhbmdpIERheVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICA2IF0gfSxcbiAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjEgfSxcbiAgICAgIHsgbmFtZTpcIkFuemFjIERheVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCJRdWVlbidzIEJpcnRoZGF5XCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEp1bmVNb25kYXlcIiB9LFxuICAgICAgeyBuYW1lOlwiTGFib3VyIERheVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjUgXSB9LFxuICAgICAgeyBuYW1lOlwiQm94aW5nIERheVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjYgXSB9IF0gfTtcbiAgZGF0YSRkLlBIO1xuXG4gIHZhciBkYXRhJGMgPSB7IFBIOlsgeyBuYW1lOlwiTm93eSBSb2tcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCLFmndpxJl0byBUcnplY2ggS3LDs2xpXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDYgXSB9LFxuICAgICAgeyBuYW1lOlwiV2llbGthbm9jXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIiB9LFxuICAgICAgeyBuYW1lOlwiTGFueSBQb25pZWR6aWHFgmVrIC0gZHJ1Z2kgZHppZcWEIFdpZWxraWVqIE5vY3lcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgeyBuYW1lOlwiUGllcndzenkgTWFqYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIlRyemVjaSBNYWphXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDMgXSB9LFxuICAgICAgeyBuYW1lOlwiWmllbG9uZSDFmndpxIV0a2lcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6NDkgfSxcbiAgICAgIHsgbmFtZTpcIkJvxbxlIENpYcWCb1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo2MCB9LFxuICAgICAgeyBuYW1lOlwiV25pZWJvd3ppxJljaWUgTmFqxZt3acSZdHN6ZWogTWFyeWkgUGFubnlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgMTUgXSB9LFxuICAgICAgeyBuYW1lOlwiV3N6eXN0a2ljaCDFmndpxJl0eWNoXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIsWad2nEmXRvIE5pZXBvZGxlZ8WCb8WbY2lcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDExIF0gfSxcbiAgICAgIHsgbmFtZTpcInBpZXJ3c3p5IGR6aWXFhCBCb8W8ZWdvIE5hcm9kemVuaWFcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcImRydWdpIGR6aWXFhCBCb8W8ZWdvIE5hcm9kemVuaWFcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI2IF0gfSBdIH07XG4gIGRhdGEkYy5QSDtcblxuICB2YXIgZGF0YSRiID0geyBQSDpbIHsgbmFtZTpcIkFudWwgTm91XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiQSBkb3VhIHppIGRlIEFudWwgTm91XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDIgXSB9LFxuICAgICAgeyBuYW1lOlwiWml1YSBVbmlyaWkgUHJpbmNpcGF0ZWxvciBSb23Dom5lIChaaXVhIFVuaXJpaSlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMjQgXSB9LFxuICAgICAgeyBuYW1lOlwiUGHImXRlbGUgb3J0b2RveFwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwib3J0aG9kb3ggZWFzdGVyXCIgfSxcbiAgICAgIHsgbmFtZTpcIkEgZG91YSB6aSBkZSBQYciZdGUgb3J0b2RveFwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwib3J0aG9kb3ggZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDoxIH0sXG4gICAgICB7IG5hbWU6XCJaaXVhIE11bmNpaVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIlJ1c2FsaWlsZVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwib3J0aG9kb3ggZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDo1MCB9LFxuICAgICAgeyBuYW1lOlwiQSBkb3VhIHppIGRlIFJ1c2FsaWlcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcIm9ydGhvZG94IGVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6NTEgfSxcbiAgICAgIHsgbmFtZTpcIkFkb3JtaXJlYSBNYWljaWkgRG9tbnVsdWlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgMTUgXSB9LFxuICAgICAgeyBuYW1lOlwiU2bDom50dWwgQXBvc3RvbCBBbmRyZWlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDMwIF0gfSxcbiAgICAgIHsgbmFtZTpcIlppdWEgTmHIm2lvbmFsxIMgKFppdWEgTWFyaWkgVW5pcmkpXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkNyxINjaXVudWxcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcIkEgZG91YSB6aSBkZSBDcsSDY2l1blwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjYgXSB9IF0sXG4gICAgU0g6WyB7IDIwMTU6WyAxLFxuICAgICAgICAgIDMxLFxuICAgICAgICAgIDIsXG4gICAgICAgICAgOCBdLFxuICAgICAgICAyMDE2OlsgMSxcbiAgICAgICAgICAzMCxcbiAgICAgICAgICAyLFxuICAgICAgICAgIDcgXSxcbiAgICAgICAgMjAyMTpbIDEsXG4gICAgICAgICAgMzAsXG4gICAgICAgICAgMixcbiAgICAgICAgICA3IF0sXG4gICAgICAgIG5hbWU6XCJWYWNhbsWjYSBpbnRlcnNlbWVzdHJpYWzEg1wiIH0sXG4gICAgICB7IDIwMTU6WyA0LFxuICAgICAgICAgIDExLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgMTkgXSxcbiAgICAgICAgMjAxNjpbIDQsXG4gICAgICAgICAgMjMsXG4gICAgICAgICAgNSxcbiAgICAgICAgICAzIF0sXG4gICAgICAgIDIwMjE6WyA0LFxuICAgICAgICAgIDMwLFxuICAgICAgICAgIDUsXG4gICAgICAgICAgOSBdLFxuICAgICAgICBuYW1lOlwiVmFjYW7Im2EgZGUgcHJpbcSDdmFyxINcIiB9LFxuICAgICAgeyAyMDE1OlsgNixcbiAgICAgICAgICAyMCxcbiAgICAgICAgICA5LFxuICAgICAgICAgIDEzIF0sXG4gICAgICAgIDIwMTY6WyA2LFxuICAgICAgICAgIDE4LFxuICAgICAgICAgIDksXG4gICAgICAgICAgNCBdLFxuICAgICAgICAyMDIxOlsgNixcbiAgICAgICAgICAyNixcbiAgICAgICAgICA5LFxuICAgICAgICAgIDEzIF0sXG4gICAgICAgIG5hbWU6XCJWYWNhbsibYSBkZSB2YXLEg1wiIH0sXG4gICAgICB7IDIwMTQ6WyAxMixcbiAgICAgICAgICAyMCxcbiAgICAgICAgICAxLFxuICAgICAgICAgIDQgXSxcbiAgICAgICAgMjAxNTpbIDEyLFxuICAgICAgICAgIDE5LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgMyBdLFxuICAgICAgICAyMDIwOlsgMTIsXG4gICAgICAgICAgMjMsXG4gICAgICAgICAgMSxcbiAgICAgICAgICAxMCBdLFxuICAgICAgICAyMDIxOlsgMTIsXG4gICAgICAgICAgMjMsXG4gICAgICAgICAgMSxcbiAgICAgICAgICA5IF0sXG4gICAgICAgIG5hbWU6XCJWYWNhbsibYSBkZSBpYXJuxINcIiB9IF0gfTtcbiAgZGF0YSRiLlBIO1xuICBkYXRhJGIuU0g7XG5cbiAgdmFyIGRhdGEkYSA9IHsgUEg6WyB7IG5hbWU6XCIxLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiMi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAyIF0gfSxcbiAgICAgIHsgbmFtZTpcIjMuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMyBdIH0sXG4gICAgICB7IG5hbWU6XCI0LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDQgXSB9LFxuICAgICAgeyBuYW1lOlwiNS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICA1IF0gfSxcbiAgICAgIHsgbmFtZTpcIjYuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgNiBdIH0sXG4gICAgICB7IG5hbWU6XCLQoNC+0LbQtNC10YHRgtCy0L4g0KXRgNC40YHRgtC+0LLQvlwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICA3IF0gfSxcbiAgICAgIHsgbmFtZTpcIjguINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgOCBdIH0sXG4gICAgICB7IG5hbWU6XCLQlNC10L3RjCDQt9Cw0YnQuNGC0L3QuNC60LAg0J7RgtC10YfQtdGB0YLQstCwXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAyLFxuICAgICAgICAgIDIzIF0gfSxcbiAgICAgIHsgbmFtZTpcItCc0LXQttC00YPQvdCw0YDQvtC00L3Ri9C5INC20LXQvdGB0LrQuNC5INC00LXQvdGMXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgIDggXSB9LFxuICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0J/QvtCx0LXQtNGLXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDkgXSB9LFxuICAgICAgeyBuYW1lOlwi0J/RgNCw0LfQtNC90LjQuiDQktC10YHQvdGLINC4INCi0YDRg9C00LBcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCLQlNC10L3RjCDQvdCw0YDQvtC00L3QvtCz0L4g0LXQtNC40L3RgdGC0LLQsFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgNCBdIH0sXG4gICAgICB7IG5hbWU6XCLQlNC10L3RjCDQoNC+0YHRgdC40LhcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgMTIgXSB9IF0sXG4gICAgXCLQotCw0YLQsNGA0YHRgtCw0L1cIjp7IF9zdGF0ZV9jb2RlOlwidGF0YXJzdGFuXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQo9GA0LDQt9CwLdCx0LDQudGA0LDQvFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgMjggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQoNC10YHQv9GD0LHQu9C40LrQuCDQotCw0YLQsNGA0YHRgtCw0L1cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOCxcbiAgICAgICAgICAgIDMwIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JrRg9GA0LHQsNC9LdCx0LDQudGA0LDQvFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQmtC+0L3RgdGC0LjRgtGD0YbQuNC4INCg0LXRgdC/0YPQsdC70LjQutC4INCi0LDRgtCw0YDRgdGC0LDQvVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDYgXSB9IF0gfSxcbiAgICBcItCR0LDRiNC60L7RgNGC0L7RgdGC0LDQvVwiOnsgX3N0YXRlX2NvZGU6XCJiYXNoa29ydG9zdGFuXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQo9GA0LDQt9CwLdCx0LDQudGA0LDQvFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgMjggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQmtGD0YDQsdCw0L0t0LHQsNC50YDQsNC8XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0LXRgdC/0YPQsdC70LjQutC4INCR0LDRiNC60LjRgNC40LhcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCa0L7QvdGB0YLQuNGC0YPRhtC40Lgg0JHQsNGI0LrQvtGA0YLQvtGB0YLQsNC90LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNCBdIH0gXSB9LFxuICAgIFwi0KfRg9Cy0LDRiNC40Y9cIjp7IF9zdGF0ZV9jb2RlOlwiY2h1dmFzaGlhXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQp9GD0LLQsNGI0YHQutC+0Lkg0YDQtdGB0L/Rg9Cx0LvQuNC60LhcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAgIDI0IF0gfSBdIH0sXG4gICAgXCLQoNC10YHQv9GD0LHQu9C40LrQsCDQodCw0YXQsCAo0K/QutGD0YLQuNGPKVwiOnsgX3N0YXRlX2NvZGU6XCJzYWtoYVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCIxLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjMuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDMgXSB9LFxuICAgICAgICB7IG5hbWU6XCI0LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjYuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDYgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQoNC+0LbQtNC10YHRgtCy0L4g0KXRgNC40YHRgtC+0LLQvlwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjguINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQt9Cw0YnQuNGC0L3QuNC60LAg0J7RgtC10YfQtdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDIsXG4gICAgICAgICAgICAyMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCc0LXQttC00YPQvdCw0YDQvtC00L3Ri9C5INC20LXQvdGB0LrQuNC5INC00LXQvdGMXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgICA4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0J/QvtCx0LXQtNGLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICA5IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0J/RgNCw0LfQtNC90LjQuiDQktC10YHQvdGLINC4INCi0YDRg9C00LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQvdCw0YDQvtC00L3QvtCz0L4g0LXQtNC40L3RgdGC0LLQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQoNC+0YHRgdC40LhcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0KDQtdGB0L/Rg9Cx0LvQuNC60Lgg0KHQsNGF0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDI3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0KvRgdGL0LDRhVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMjMgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQs9C+0YHRg9C00LDRgNGB0YLQstC10L3QvdC+0YHRgtC4INCg0LXRgdC/0YPQsdC70LjQutC4INCh0LDRhdCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgICAyNyBdIH0gXSB9LFxuICAgIFwi0JrQsNC70LzRi9C60LjRj1wiOnsgX3N0YXRlX2NvZGU6XCJrYWxteWtpYVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCIxLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjMuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDMgXSB9LFxuICAgICAgICB7IG5hbWU6XCI0LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjYuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDYgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQoNC+0LbQtNC10YHRgtCy0L4g0KXRgNC40YHRgtC+0LLQvlwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjguINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQt9Cw0YnQuNGC0L3QuNC60LAg0J7RgtC10YfQtdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDIsXG4gICAgICAgICAgICAyMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCc0LXQttC00YPQvdCw0YDQvtC00L3Ri9C5INC20LXQvdGB0LrQuNC5INC00LXQvdGMXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgICA4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0J/QvtCx0LXQtNGLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICA5IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0J/RgNCw0LfQtNC90LjQuiDQktC10YHQvdGLINC4INCi0YDRg9C00LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQvdCw0YDQvtC00L3QvtCz0L4g0LXQtNC40L3RgdGC0LLQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQoNC+0YHRgdC40LhcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0KbQsNCz0LDQvSDQodCw0YBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDE0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0L/RgNC40L3Rj9GC0LjRjyDQodGC0LXQv9C90L7Qs9C+INCj0LvQvtC20LXQvdC40Y8gKNCa0L7QvdGB0YLQuNGC0YPRhtC40LgpINCg0LXRgdC/0YPQsdC70LjQutC4INCa0LDQu9C80YvQutC40Y9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDUgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDRgNC+0LbQtNC10L3QuNGPINCR0YPQtNC00Ysg0KjQsNC60YzRj9C80YPQvVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCX0YPQu1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0L/QsNC80Y/RgtC4INC20LXRgNGC0LIg0LTQtdC/0L7RgNGC0LDRhtC40Lgg0LrQsNC70LzRi9GG0LrQvtCz0L4g0L3QsNGA0L7QtNCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjggXSB9IF0gfSxcbiAgICBcItCg0LXRgdC/0YPQsdC70LjQutCwINCR0YPRgNGP0YLQuNGPXCI6eyBfc3RhdGVfY29kZTpcImJ1cnlhdGlhXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQodCw0LPQsNCw0LvQs9Cw0L1cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDE0IF0gfSBdIH0sXG4gICAgXCLQoNC10YHQv9GD0LHQu9C40LrQsCDQmtCw0YDQtdC70LjRj1wiOnsgX3N0YXRlX2NvZGU6XCJrYXJlbGlhXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQoNC10YHQv9GD0LHQu9C40LrQuCDQmtCw0YDQtdC70LjRj1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC+0YHQstC+0LHQvtC20LTQtdC90LjRjyDQmtCw0YDQtdC70LjQuCDQvtGCINGE0LDRiNC40YHRgtGB0LrQuNGFINC30LDRhdCy0LDRgtGH0LjQutC+0LJcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDMwIF0gfSBdIH0sXG4gICAgXCLQn9GA0LjQstC+0LvQttGB0LrQuNC5INGE0LXQtNC10YDQsNC70YzQvdGL0Lkg0L7QutGA0YPQs1wiOnsgX3N0YXRlX2NvZGU6XCJ1ZG11cnRpYVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCIxLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjMuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDMgXSB9LFxuICAgICAgICB7IG5hbWU6XCI0LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjYuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDYgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQoNC+0LbQtNC10YHRgtCy0L4g0KXRgNC40YHRgtC+0LLQvlwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjguINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQt9Cw0YnQuNGC0L3QuNC60LAg0J7RgtC10YfQtdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDIsXG4gICAgICAgICAgICAyMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCc0LXQttC00YPQvdCw0YDQvtC00L3Ri9C5INC20LXQvdGB0LrQuNC5INC00LXQvdGMXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgICA4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0J/QvtCx0LXQtNGLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICA5IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0J/RgNCw0LfQtNC90LjQuiDQktC10YHQvdGLINC4INCi0YDRg9C00LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQvdCw0YDQvtC00L3QvtCz0L4g0LXQtNC40L3RgdGC0LLQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQoNC+0YHRgdC40LhcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0JPQvtGB0YPQtNCw0YDRgdGC0LLQtdC90L3QvtGB0YLQuCDQo9C00LzRg9GA0YLRgdC60L7QuSDQoNC10YHQv9GD0LHQu9C40LrQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMzEgXSB9IF0gfSxcbiAgICBcItCQ0LTRi9Cz0LXRj1wiOnsgX3N0YXRlX2NvZGU6XCJhZHlnZWFcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiMS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjIuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCIzLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjUuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDUgXSB9LFxuICAgICAgICB7IG5hbWU6XCI2LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0KDQvtC20LTQtdGB0YLQstC+INCl0YDQuNGB0YLQvtCy0L5cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCI4LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0LfQsNGJ0LjRgtC90LjQutCwINCe0YLQtdGH0LXRgdGC0LLQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAyLFxuICAgICAgICAgICAgMjMgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQnNC10LbQtNGD0L3QsNGA0L7QtNC90YvQuSDQttC10L3RgdC60LjQuSDQtNC10L3RjFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCf0L7QsdC10LTRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgOSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCf0YDQsNC30LTQvdC40Log0JLQtdGB0L3RiyDQuCDQotGA0YPQtNCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0L3QsNGA0L7QtNC90L7Qs9C+INC10LTQuNC90YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0KDQvtGB0YHQuNC4XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCj0YDQsNC30LAt0LHQsNC50YDQsNC8XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICAyOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCa0YPRgNCx0LDQvS3QsdCw0LnRgNCw0LxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0L7QsdGA0LDQt9C+0LLQsNC90LjRjyDQoNC10YHQv9GD0LHQu9C40LrQuCDQkNC00YvQs9C10Y9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICA1IF0gfSBdIH0sXG4gICAgXCLQlNCw0LPQtdGB0YLQsNC9XCI6eyBfc3RhdGVfY29kZTpcImRhZ2VzdGFuXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQmtC+0L3RgdGC0LjRgtGD0YbQuNC4INCg0LXRgdC/0YPQsdC70LjQutC4INCU0LDQs9C10YHRgtCw0L1cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDI2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0KPRgNCw0LfQsC3QsdCw0LnRgNCw0LxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDI4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0LXQtNC40L3RgdGC0LLQsCDQvdCw0YDQvtC00L7QsiDQlNCw0LPQtdGB0YLQsNC90LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDE1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JrRg9GA0LHQsNC9LdCx0LDQudGA0LDQvFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDQgXSB9IF0gfSxcbiAgICBcItCY0L3Qs9GD0YjQtdGC0LjRj1wiOnsgX3N0YXRlX2NvZGU6XCJpbmd1c2hldGlhXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQvtCx0YDQsNC30L7QstCw0L3QuNGPINCg0LXRgdC/0YPQsdC70LjQutC4INCY0L3Qs9GD0YjQtdGC0LjRj1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCj0YDQsNC30LAt0LHQsNC50YDQsNC8XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICAyOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCa0YPRgNCx0LDQvS3QsdCw0LnRgNCw0LxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICA0IF0gfSBdIH0sXG4gICAgXCLQmtCw0YDQsNGH0LDQtdCy0L4t0KfQtdGA0LrQtdGB0LjRj1wiOnsgX3N0YXRlX2NvZGU6XCJrYXJhY2hheV9jaGVya2Vzc1wiLFxuICAgICAgUEg6WyB7IG5hbWU6XCIxLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjMuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDMgXSB9LFxuICAgICAgICB7IG5hbWU6XCI0LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjYuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDYgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQoNC+0LbQtNC10YHRgtCy0L4g0KXRgNC40YHRgtC+0LLQvlwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjguINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQt9Cw0YnQuNGC0L3QuNC60LAg0J7RgtC10YfQtdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDIsXG4gICAgICAgICAgICAyMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCc0LXQttC00YPQvdCw0YDQvtC00L3Ri9C5INC20LXQvdGB0LrQuNC5INC00LXQvdGMXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgICA4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0J/QvtCx0LXQtNGLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICA5IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0J/RgNCw0LfQtNC90LjQuiDQktC10YHQvdGLINC4INCi0YDRg9C00LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQvdCw0YDQvtC00L3QvtCz0L4g0LXQtNC40L3RgdGC0LLQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQoNC+0YHRgdC40LhcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0LLQvtC30YDQvtC20LTQtdC90LjRjyDQutCw0YDQsNGH0LDQtdCy0YHQutC+0LPQviDQvdCw0YDQvtC00LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDMgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQo9GA0LDQt9CwLdCx0LDQudGA0LDQvFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgMjggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQmtGD0YDQsdCw0L0t0LHQsNC50YDQsNC8XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgNCBdIH0gXSB9LFxuICAgIFwi0KfQtdGH0L3Rj1wiOnsgX3N0YXRlX2NvZGU6XCJjaGVjaG55YVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCIxLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjMuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDMgXSB9LFxuICAgICAgICB7IG5hbWU6XCI0LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjYuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDYgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQoNC+0LbQtNC10YHRgtCy0L4g0KXRgNC40YHRgtC+0LLQvlwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjguINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQt9Cw0YnQuNGC0L3QuNC60LAg0J7RgtC10YfQtdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDIsXG4gICAgICAgICAgICAyMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCc0LXQttC00YPQvdCw0YDQvtC00L3Ri9C5INC20LXQvdGB0LrQuNC5INC00LXQvdGMXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgICA4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0J/QvtCx0LXQtNGLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICA5IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0J/RgNCw0LfQtNC90LjQuiDQktC10YHQvdGLINC4INCi0YDRg9C00LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQvdCw0YDQvtC00L3QvtCz0L4g0LXQtNC40L3RgdGC0LLQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQoNC+0YHRgdC40LhcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAgIDEyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0LzQuNGA0LAg0LIg0KfQtdGH0LXQvdGB0LrQvtC5INCg0LXRgdC/0YPQsdC70LjQutC1XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAxNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCj0YDQsNC30LAt0LHQsNC50YDQsNC8XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICAyOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCa0YPRgNCx0LDQvS3QsdCw0LnRgNCw0LxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTAsXG4gICAgICAgICAgICA0IF0gfSBdIH0sXG4gICAgXCLQmtCw0LHQsNGA0LTQuNC90L4t0JHQsNC70LrQsNGA0LjRj1wiOnsgX3N0YXRlX2NvZGU6XCJrYWJhcmRpbm9fYmFsa2FyaWFcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiMS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjIuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCIzLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjUuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDUgXSB9LFxuICAgICAgICB7IG5hbWU6XCI2LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0KDQvtC20LTQtdGB0YLQstC+INCl0YDQuNGB0YLQvtCy0L5cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCI4LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0LfQsNGJ0LjRgtC90LjQutCwINCe0YLQtdGH0LXRgdGC0LLQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAyLFxuICAgICAgICAgICAgMjMgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQnNC10LbQtNGD0L3QsNGA0L7QtNC90YvQuSDQttC10L3RgdC60LjQuSDQtNC10L3RjFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCf0L7QsdC10LTRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgOSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCf0YDQsNC30LTQvdC40Log0JLQtdGB0L3RiyDQuCDQotGA0YPQtNCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0L3QsNGA0L7QtNC90L7Qs9C+INC10LTQuNC90YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0KDQvtGB0YHQuNC4XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCy0L7Qt9GA0L7QttC00LXQvdC40Y8g0LHQsNC70LrQsNGA0YHQutC+0LPQviDQvdCw0YDQvtC00LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDI4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0KfQtdGA0LrQtdGB0YHQutC40Lkg0LTQtdC90Ywg0YLRgNCw0YPRgNCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAyMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCj0YDQsNC30LAt0LHQsNC50YDQsNC8XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICAyOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCz0L7RgdGD0LTQsNGA0YHRgtCy0LXQvdC90L7RgdGC0Lgg0JrQsNCx0LDRgNC00LjQvdC+LdCR0LDQu9C60LDRgNGB0LrQvtC5INCg0LXRgdC/0YPQsdC70LjQutC4XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDksXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JrRg9GA0LHQsNC9LdCx0LDQudGA0LDQvFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDQgXSB9IF0gfSxcbiAgICBcItCg0LXRgdC/0YPQsdC70LjQutCwINCQ0LvRgtCw0LlcIjp7IF9zdGF0ZV9jb2RlOlwiYWx0YWlcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiMS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjIuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCIzLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjUuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDUgXSB9LFxuICAgICAgICB7IG5hbWU6XCI2LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0KDQvtC20LTQtdGB0YLQstC+INCl0YDQuNGB0YLQvtCy0L5cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCI4LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0LfQsNGJ0LjRgtC90LjQutCwINCe0YLQtdGH0LXRgdGC0LLQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAyLFxuICAgICAgICAgICAgMjMgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQnNC10LbQtNGD0L3QsNGA0L7QtNC90YvQuSDQttC10L3RgdC60LjQuSDQtNC10L3RjFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCf0L7QsdC10LTRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgOSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCf0YDQsNC30LTQvdC40Log0JLQtdGB0L3RiyDQuCDQotGA0YPQtNCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0L3QsNGA0L7QtNC90L7Qs9C+INC10LTQuNC90YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0KDQvtGB0YHQuNC4XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCn0LDQs9CwLdCR0LDQudGA0LDQvFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMTQgXSB9IF0gfSxcbiAgICBcItCg0LXRgdC/0YPQsdC70LjQutCwINCi0YvQstCwXCI6eyBfc3RhdGVfY29kZTpcInR1dmFcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiMS4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjIuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDIgXSB9LFxuICAgICAgICB7IG5hbWU6XCIzLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjUuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDUgXSB9LFxuICAgICAgICB7IG5hbWU6XCI2LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0KDQvtC20LTQtdGB0YLQstC+INCl0YDQuNGB0YLQvtCy0L5cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDcgXSB9LFxuICAgICAgICB7IG5hbWU6XCI4LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA4IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0LfQsNGJ0LjRgtC90LjQutCwINCe0YLQtdGH0LXRgdGC0LLQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAyLFxuICAgICAgICAgICAgMjMgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQnNC10LbQtNGD0L3QsNGA0L7QtNC90YvQuSDQttC10L3RgdC60LjQuSDQtNC10L3RjFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCf0L7QsdC10LTRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgOSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCf0YDQsNC30LTQvdC40Log0JLQtdGB0L3RiyDQuCDQotGA0YPQtNCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0L3QsNGA0L7QtNC90L7Qs9C+INC10LTQuNC90YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0KDQvtGB0YHQuNC4XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCd0LDRgNC+0LTQvdGL0Lkg0L/RgNCw0LfQtNC90LjQuiDQqNCw0LPQsNCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0LXRgdC/0YPQsdC70LjQutC4INCi0YvQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgICAxNSBdIH0gXSB9LFxuICAgIFwi0KHQsNGA0LDRgtC+0LLRgdC60LDRjyDQvtCx0LvQsNGB0YLRjFwiOnsgX3N0YXRlX2NvZGU6XCJzYXJhdG92XCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQoNCw0LTQvtC90LjRhtCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyOSBdIH0gXSB9LFxuICAgIFwi0JHRgNGP0L3RgdC60LDRjyDQvtCx0LvQsNGB0YLRjFwiOnsgX3N0YXRlX2NvZGU6XCJicnlhbnNrXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQoNCw0LTQvtC90LjRhtCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDQsXG4gICAgICAgICAgICAyOSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC+0YHQstC+0LHQvtC20LTQtdC90LjRjyDQs9C+0YDQvtC00LAg0JHRgNGP0L3RgdC60LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAgIDE3IF0gfSBdIH0sXG4gICAgXCLQoNC10YHQv9GD0LHQu9C40LrQsCDQmtC+0LzQuFwiOnsgX3N0YXRlX2NvZGU6XCJrb21pXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIjEuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCIyLiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiMy4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMyBdIH0sXG4gICAgICAgIHsgbmFtZTpcIjQuINCd0L7QstC+0LPQvtC00L3QuNC1INC60LDQvdC40LrRg9C70YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCI1LiDQndC+0LLQvtCz0L7QtNC90LjQtSDQutCw0L3QuNC60YPQu9GLXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiNi4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCg0L7QttC00LXRgdGC0LLQviDQpdGA0LjRgdGC0L7QstC+XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiOC4g0J3QvtCy0L7Qs9C+0LTQvdC40LUg0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC30LDRidC40YLQvdC40LrQsCDQntGC0LXRh9C10YHRgtCy0LBcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMixcbiAgICAgICAgICAgIDIzIF0gfSxcbiAgICAgICAgeyBuYW1lOlwi0JzQtdC20LTRg9C90LDRgNC+0LTQvdGL0Lkg0LbQtdC90YHQutC40Lkg0LTQtdC90YxcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDggXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C+0LHQtdC00YtcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAgIDkgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQn9GA0LDQt9C00L3QuNC6INCS0LXRgdC90Ysg0Lgg0KLRgNGD0LTQsFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINC90LDRgNC+0LTQvdC+0LPQviDQtdC00LjQvdGB0YLQstCwXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcItCU0LXQvdGMINCg0L7RgdGB0LjQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCLQlNC10L3RjCDQoNC10YHQv9GD0LHQu9C40LrQuCDQmtC+0LzQuFwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgICAgMjIgXSB9IF0gfSB9O1xuICBkYXRhJGEuUEg7XG5cbiAgdmFyIGRhdGEkOSA9IHsgUEg6WyB7IG5hbWU6XCJuecOlcnNkYWdlblwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcInRyZXR0b25kZWRhZyBqdWxcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgNiBdIH0sXG4gICAgICB7IG5hbWU6XCJsw6VuZ2ZyZWRhZ2VuXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0Oi0yIH0sXG4gICAgICB7IG5hbWU6XCJww6Vza2RhZ2VuXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIiB9LFxuICAgICAgeyBuYW1lOlwiYW5uYW5kYWcgcMOlc2tcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgeyBuYW1lOlwiZsO2cnN0YSBtYWpcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJLcmlzdGkgaGltbWVsc2bDpHJkc2RhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDozOSB9LFxuICAgICAgeyBuYW1lOlwicGluZ3N0ZGFnZW5cIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICBvZmZzZXQ6NDkgfSxcbiAgICAgIHsgbmFtZTpcIm5hdGlvbmFsZGFnZW5cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgNiBdIH0sXG4gICAgICB7IG5hbWU6XCJtaWRzb21tYXJkYWdlblwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwibmV4dFNhdHVyZGF5MjBKdW5cIiB9LFxuICAgICAgeyBuYW1lOlwiYWxsYSBoZWxnb25zIGRhZ1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwibmV4dFNhdHVyZGF5MzFPY3RcIiB9LFxuICAgICAgeyBuYW1lOlwianVsZGFnZW5cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcImFubmFuZGFnIGp1bFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgMjYgXSB9IF0gfTtcbiAgZGF0YSQ5LlBIO1xuXG4gIHZhciBkYXRhJDggPSB7IFBIOlsgeyBuYW1lOlwibm92byBsZXRvXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiUHJlxaFlcm5vdiBkYW4sIHNsb3ZlbnNraSBrdWx0dXJuaSBwcmF6bmlrXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAyLFxuICAgICAgICAgIDggXSB9LFxuICAgICAgeyBuYW1lOlwidmVsaWtvbm/EjW5hIG5lZGVsamFcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiIH0sXG4gICAgICB7IG5hbWU6XCJ2ZWxpa29ub8SNbmkgcG9uZWRlbGpla1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDoxIH0sXG4gICAgICB7IG5hbWU6XCJkYW4gdXBvcmEgcHJvdGkgb2t1cGF0b3JqdVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAyNyBdIH0sXG4gICAgICB7IG5hbWU6XCJwcmF6bmlrIGRlbGEgMVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcInByYXpuaWsgZGVsYSAyXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDIgXSB9LFxuICAgICAgeyBuYW1lOlwiYmlua2/FoXRuYSBuZWRlbGphIC0gYmlua2/FoXRpXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgb2Zmc2V0OjQ5IH0sXG4gICAgICB7IG5hbWU6XCJkYW4gZHLFvmF2bm9zdGlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgMjUgXSB9LFxuICAgICAgeyBuYW1lOlwiTWFyaWppbm8gdm5lYm92emV0amVcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgMTUgXSB9LFxuICAgICAgeyBuYW1lOlwiZGFuIHJlZm9ybWFjaWplXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAzMSBdIH0sXG4gICAgICB7IG5hbWU6XCJkYW4gc3BvbWluYSBuYSBtcnR2ZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJib8W+acSNXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNSBdIH0sXG4gICAgICB7IG5hbWU6XCJkYW4gc2Ftb3N0b2pub3N0aSBpbiBlbm90bm9zdGlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI2IF0gfSBdIH07XG4gIGRhdGEkOC5QSDtcblxuICB2YXIgZGF0YSQ3ID0geyBQSDpbIHsgbmFtZTpcIkRlxYggdnpuaWt1IFNsb3ZlbnNrZWogcmVwdWJsaWt5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiWmphdmVuaWUgUMOhbmFcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgNiBdIH0sXG4gICAgICB7IG5hbWU6XCJWZcS+a8O9IHBpYXRva1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgeyBuYW1lOlwiVmXEvmtvbm/EjW7DoSBuZWRlxL5hXCIsXG4gICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIiB9LFxuICAgICAgeyBuYW1lOlwiVmXEvmtvbm/EjW7DvSBwb25kZWxva1wiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDoxIH0sXG4gICAgICB7IG5hbWU6XCJTdmlhdG9rIHByw6FjZVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIkRlxYggdsOtxaVhenN0dmEgbmFkIGZhxaFpem1vbVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNSxcbiAgICAgICAgICA4IF0gfSxcbiAgICAgIHsgbmFtZTpcIlN2aWF0b2sgc3bDpHTDqWhvIEN5cmlsYSBhIE1ldG9kYVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICA1IF0gfSxcbiAgICAgIHsgbmFtZTpcIlbDvXJvxI1pZSBTbG92ZW5za8OpaG8gbsOhcm9kbsOpaG8gcG92c3RhbmlhXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA4LFxuICAgICAgICAgIDI5IF0gfSxcbiAgICAgIHsgbmFtZTpcIkRlxYggw5pzdGF2eSBTbG92ZW5za2VqIHJlcHVibGlreVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAxIF0gfSxcbiAgICAgIHsgbmFtZTpcIlN2aWF0b2sgUGFubnkgTcOhcmllIFNlZGVtYm9sZXN0bmVqXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA5LFxuICAgICAgICAgIDE1IF0gfSxcbiAgICAgIHsgbmFtZTpcIlN2aWF0b2sgdsWhZXRrw71jaCBzdsOkdMO9Y2hcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiRGXFiCBib2phIHphIHNsb2JvZHUgYSBkZW1va3JhY2l1XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxNyBdIH0sXG4gICAgICB7IG5hbWU6XCLFoHRlZHLDvSBkZcWIXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAyNCBdIH0sXG4gICAgICB7IG5hbWU6XCJQcnbDvSBzdmlhdG9rIHZpYW5vxI1uw71cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSxcbiAgICAgIHsgbmFtZTpcIkRydWjDvSBzdmlhdG9rIHZpYW5vxI1uw71cIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI2IF0gfSBdIH07XG4gIGRhdGEkNy5QSDtcblxuICB2YXIgZGF0YSQ2ID0geyBQSDpbIHsgbmFtZTpcItCd0L7QstC40Lkg0YDRltC6XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwi0KDRltC30LTQstC+XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDcgXSB9LFxuICAgICAgeyBuYW1lOlwi0JzRltC20L3QsNGA0L7QtNC90LjQuSDQttGW0L3QvtGH0LjQuSDQtNC10L3RjFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICA4IF0gfSxcbiAgICAgIHsgbmFtZTpcItCS0LXQu9C40LrQtNC10L3RjFwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwib3J0aG9kb3ggZWFzdGVyXCIsXG4gICAgICAgIG9mZnNldDoxIH0sXG4gICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9GA0LDRhtGWIDFcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9GA0LDRhtGWIDJcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgMiBdIH0sXG4gICAgICB7IG5hbWU6XCLQlNC10L3RjCDQn9C10YDQtdC80L7Qs9C4XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDkgXSB9LFxuICAgICAgeyBuYW1lOlwi0JTQtdC90Ywg0JrQvtC90YHRgtC40YLRg9GG0ZbRlyDQo9C60YDQsNGX0L3QuFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAyOCBdIH0sXG4gICAgICB7IG5hbWU6XCLQlNC10L3RjCDQndC10LfQsNC70LXQttC90L7RgdGC0ZYg0KPQutGA0LDRl9C90LhcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDgsXG4gICAgICAgICAgMjQgXSB9IF0gfTtcbiAgZGF0YSQ2LlBIO1xuXG4gIHZhciBkYXRhJDUgPSB7IFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgMSBdIH0sXG4gICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICA0IF0gfSxcbiAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAxMSBdIH0sXG4gICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSBdLFxuICAgIEFsYWJhbWE6eyBfc3RhdGVfY29kZTpcImFsXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUm9iZXJ0IEUuIExlZS9NYXJ0aW4gTHV0aGVyIEtpbmcgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIkdlb3JnZSBXYXNoaW5ndG9uL1Rob21hcyBKZWZmZXJzb24gQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbmZlZGVyYXRlIE1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEFwcmlsTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkplZmZlcnNvbiBEYXZpcycgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKdW5lTW9uZGF5XCIgfSBdIH0sXG4gICAgQWxhc2thOnsgX3N0YXRlX2NvZGU6XCJha1wiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlNld2FyZCdzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWFyY2hNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJBbGFza2EgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEwLFxuICAgICAgICAgICAgMTggXSB9IF0gfSxcbiAgICBBcml6b25hOnsgX3N0YXRlX2NvZGU6XCJhelwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkRyLiBNYXJ0aW4gTHV0aGVyIEtpbmcgSnIuL0NpdmlsIFJpZ2h0cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgQXJrYW5zYXM6eyBfc3RhdGVfY29kZTpcImFyXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRHIuIE1hcnRpbiBMdXRoZXIgS2luZyBKci4gYW5kIFJvYmVydCBFLiBMZWUncyBCaXJ0aGRheXNcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIkdlb3JnZSBXYXNoaW5ndG9uJ3MgQmlydGhkYXkgYW5kIERhaXN5IEdhdHNvbiBCYXRlcyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBFdmVcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIENhbGlmb3JuaWE6eyBfc3RhdGVfY29kZTpcImNhXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkPDqXNhciBDaMOhdmV6IERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgMzEgXSB9IF0gfSxcbiAgICBDb2xvcmFkbzp7IF9zdGF0ZV9jb2RlOlwiY29cIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgQ29ubmVjdGljdXQ6eyBfc3RhdGVfY29kZTpcImN0XCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxpbmNvbG4ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAyLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJHb29kIEZyaWRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSBdIH0sXG4gICAgRGVsYXdhcmU6eyBfc3RhdGVfY29kZTpcImRlXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkRheSBBZnRlciBUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIyIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9IF0gfSxcbiAgICBcIkRpc3RyaWN0IG9mIENvbHVtYmlhXCI6eyBfc3RhdGVfY29kZTpcImRjXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkVtYW5jaXBhdGlvbiBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNCxcbiAgICAgICAgICAgIDE2IF0gfSBdIH0sXG4gICAgRmxvcmlkYTp7IF9zdGF0ZV9jb2RlOlwiZmxcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJGcmlkYXkgYWZ0ZXIgVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMiB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBHZW9yZ2lhOnsgX3N0YXRlX2NvZGU6XCJnYVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJSb2JlcnQgRS4gTGVlJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIyIH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ29uZmVkZXJhdGUgTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RBcHJpbE1vbmRheVwiIH0gXSB9LFxuICAgIEd1YW06eyBfc3RhdGVfY29kZTpcImd1XCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJHdWFtIERpc2NvdmVyeSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJHb29kIEZyaWRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiTGliZXJhdGlvbiBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDIxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQWxsIFNvdWxzJyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWR5IG9mIENhbWFyaW4gRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgOCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIEhhd2FpaTp7IF9zdGF0ZV9jb2RlOlwiaGlcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQcmluY2UgSm9uYWggS3VoaW8gS2FsYW5pYW5hb2xlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgICAgMjYgXSB9LFxuICAgICAgICB7IG5hbWU6XCJLYW1laGFtZWhhIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJTdGF0ZWhvb2QgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0QXVndXN0RnJpZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIkVsZWN0aW9uIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjEgfSBdIH0sXG4gICAgSWRhaG86eyBfc3RhdGVfY29kZTpcImlkXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4tSWRhaG8gSHVtYW4gUmlnaHRzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBJbGxpbm9pczp7IF9zdGF0ZV9jb2RlOlwiaWxcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGluY29sbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDIsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNhc2ltaXIgUHVsYXNraSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RNYXJjaE1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkVsZWN0aW9uIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjEgfSBdIH0sXG4gICAgSW5kaWFuYTp7IF9zdGF0ZV9jb2RlOlwiaW5cIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiTGluY29sbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMiB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJHb29kIEZyaWRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiUHJpbWFyeSBFbGVjdGlvbiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RNYXlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgICB7IG5hbWU6XCJFbGVjdGlvbiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxIH0gXSB9LFxuICAgIElvd2E6eyBfc3RhdGVfY29kZTpcImlhXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxpbmNvbG4ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAyLFxuICAgICAgICAgICAgMTIgXSB9IF0gfSxcbiAgICBLYW5zYXM6eyBfc3RhdGVfY29kZTpcImtzXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIEtlbnR1Y2t5OnsgX3N0YXRlX2NvZGU6XCJreVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRXZlXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOZXcgWWVhcidzIEV2ZVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDMxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0gXSB9LFxuICAgIExvdWlzaWFuYTp7IF9zdGF0ZV9jb2RlOlwibGFcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFyZGkgR3Jhc1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTQ3IH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJFbGVjdGlvbiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxIH0gXSB9LFxuICAgIE1haW5lOnsgX3N0YXRlX2NvZGU6XCJtZVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQYXRyaW90cycgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0QXByaWxNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSBdIH0sXG4gICAgTWFyeWxhbmQ6eyBfc3RhdGVfY29kZTpcIm1kXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIk5hdGl2ZSBBbWVyaWNhbiBIZXJpdGFnZSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIyIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIE1hc3NhY2h1c2V0dHM6eyBfc3RhdGVfY29kZTpcIm1hXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlBhdHJpb3RzJyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RBcHJpbE1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9IF0gfSxcbiAgICBNaWNoaWdhbjp7IF9zdGF0ZV9jb2RlOlwibWlcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIEV2ZVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmV3IFllYXIncyBFdmVcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAzMSBdIH0gXSB9LFxuICAgIE1pbm5lc290YTp7IF9zdGF0ZV9jb2RlOlwibW5cIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgTWlzc2lzc2lwcGk6eyBfc3RhdGVfY29kZTpcIm1zXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nJ3MgYW5kIFJvYmVydCBFLiBMZWUncyBCaXJ0aGRheXNcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ29uZmVkZXJhdGUgTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RBcHJpbE1vbmRheVwiIH0gXSB9LFxuICAgIE1pc3NvdXJpOnsgX3N0YXRlX2NvZGU6XCJtb1wiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUcnVtYW4gRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICA4IF0gfSBdIH0sXG4gICAgTW9udGFuYTp7IF9zdGF0ZV9jb2RlOlwibXRcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRWxlY3Rpb24gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRXZlXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOZXcgWWVhcidzIEV2ZVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDMxIF0gfSBdIH0sXG4gICAgTmVicmFza2E6eyBfc3RhdGVfY29kZTpcIm5lXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkFyYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0QXByaWxGcmlkYXlcIiB9IF0gfSxcbiAgICBOZXZhZGE6eyBfc3RhdGVfY29kZTpcIm52XCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmV2YWRhIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0T2N0b2JlckZyaWRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkZhbWlseSBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIyIH0gXSB9LFxuICAgIFwiTmV3IEhhbXBzaGlyZVwiOnsgX3N0YXRlX2NvZGU6XCJuaFwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIENpdmlsIFJpZ2h0cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiRGF5IGFmdGVyIFRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRWxlY3Rpb24gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MSB9IF0gfSxcbiAgICBcIk5ldyBKZXJzZXlcIjp7IF9zdGF0ZV9jb2RlOlwibmpcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGluY29sbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDIsXG4gICAgICAgICAgICAxMiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJFbGVjdGlvbiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxIH0gXSB9LFxuICAgIFwiTmV3IE1leGljb1wiOnsgX3N0YXRlX2NvZGU6XCJubVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJEYXkgYWZ0ZXIgVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMiB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIk5ldyBZb3JrXCI6eyBfc3RhdGVfY29kZTpcIm55XCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxpbmNvbG4ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAyLFxuICAgICAgICAgICAgMTIgXSB9LFxuICAgICAgICB7IG5hbWU6XCJFbGVjdGlvbiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxIH0gXSB9LFxuICAgIFwiTm9ydGggQ2Fyb2xpbmFcIjp7IF9zdGF0ZV9jb2RlOlwibmNcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiRGF5IGFmdGVyIFRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIEV2ZVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGF5IGFmdGVyIENocmlzdG1hc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiR29vZCBGcmlkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0yIH0gXSB9LFxuICAgIFwiTm9ydGggRGFrb3RhXCI6eyBfc3RhdGVfY29kZTpcIm5kXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIE9oaW86eyBfc3RhdGVfY29kZTpcIm9oXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIE9rbGFob21hOnsgX3N0YXRlX2NvZGU6XCJva1wiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJEYXkgYWZ0ZXIgVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMiB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBPcmVnb246eyBfc3RhdGVfY29kZTpcIm9yXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0gXSB9LFxuICAgIFBlbm5zeWx2YW5pYTp7IF9zdGF0ZV9jb2RlOlwicGFcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRmxhZyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNixcbiAgICAgICAgICAgIDE0IF0gfSBdIH0sXG4gICAgXCJQdWVydG8gUmljb1wiOnsgX3N0YXRlX2NvZGU6XCJwclwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJEw61hIGRlIEHDsW8gTnVldm9cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJEw61hIGRlIFJleWVzXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxpY2lvIGRlIEV1Z2VuaW8gTWFyw61hIGRlIEhvc3Rvc1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbGljaW8gZGUgTWFydGluIEx1dGhlciBLaW5nLCBKci5cIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIkTDrWEgZGUgbG9zIFByZXNpZGVudGVzXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiRMOtYSBkZSBsYSBBYm9saWNpw7NuIGRlIEVzY2xhdml0dWRcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICAgIDIyIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVmllcm5lcyBTYW50b1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJlYXN0ZXJcIixcbiAgICAgICAgICBvZmZzZXQ6LTIgfSxcbiAgICAgICAgeyBuYW1lOlwiTmF0YWxpY2lvIGRlIEpvc8OpIGRlIERpZWdvXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0QXByaWxNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiUmVjb3JkYWNpw7NuIGRlIGxvcyBNdWVydG9zIGRlIGxhIEd1ZXJyYVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiRMOtYSBkZSBsYSBJbmRlcGVuZGVuY2lhXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ29uc3RpdHVjacOzbiBkZSBQdWVydG8gUmljb1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRhbGljaW8gZGUgRHIuIEpvc8OpIENlbHNvIEJhcmJvc2FcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDI3IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRMOtYSBkZWwgVHJhYmFqb1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkTDrWEgZGUgbGEgUmF6YSBEZXNjdWJyaW1pZW50byBkZSBBbcOpcmljYVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJEw61hIGRlbCBWZXRlcmFub1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRMOtYSBkZWwgRGVzY3VicmltaWVudG8gZGUgUHVlcnRvIFJpY29cIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxOSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkTDrWEgZGUgQWNjacOzbiBkZSBHcmFjaWFzXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJOb2NoZSBCdWVuYVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRMOtYSBkZSBOYXZpZGFkXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBcIlJob2RlIElzbGFuZFwiOnsgX3N0YXRlX2NvZGU6XCJyaVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJWaWN0b3J5IERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEF1Z3VzdE1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0gXSB9LFxuICAgIFwiU291dGggQ2Fyb2xpbmFcIjp7IF9zdGF0ZV9jb2RlOlwic2NcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ29uZmVkZXJhdGUgTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDUsXG4gICAgICAgICAgICAxMCBdIH0gXSB9LFxuICAgIFwiU291dGggRGFrb3RhXCI6eyBfc3RhdGVfY29kZTpcInNkXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJOYXRpdmUgQW1lcmljYW4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSxcbiAgICBUZW5uZXNzZWU6eyBfc3RhdGVfY29kZTpcInRuXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBFdmVcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9IF0gfSxcbiAgICBUZXhhczp7IF9zdGF0ZV9jb2RlOlwidHhcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiRnJpZGF5IGFmdGVyIFRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIEV2ZVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiRGF5IGFmdGVyIENocmlzdG1hc1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI2IF0gfSBdIH0sXG4gICAgXCJVbml0ZWQgU3RhdGVzIFZpcmdpbiBJc2xhbmRzXCI6eyBfc3RhdGVfY29kZTpcInZpXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJWaXJnaW4gSXNsYW5kcy1QdWVydG8gUmljbyBGcmllbmRzaGlwIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhyZWUgS2luZ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICA2IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVHJhbnNmZXIgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDMsXG4gICAgICAgICAgICAzMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkhvbHkgVGh1cnNkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZWFzdGVyXCIsXG4gICAgICAgICAgb2Zmc2V0Oi0zIH0sXG4gICAgICAgIHsgbmFtZTpcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDotMiB9LFxuICAgICAgICB7IG5hbWU6XCJFYXN0ZXIgTW9uZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImVhc3RlclwiLFxuICAgICAgICAgIG9mZnNldDoxIH0sXG4gICAgICAgIHsgbmFtZTpcIkVtYW5jaXBhdGlvbiBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDMgXSB9LFxuICAgICAgICB7IG5hbWU6XCJIdXJyaWNhbmUgU3VwcGxpY2F0aW9uIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEp1bHlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiSHVycmljYW5lIFRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMCxcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGliZXJ0eSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIFNlY29uZCBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNiBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRXZlXCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMzEgXSB9IF0gfSxcbiAgICBVdGFoOnsgX3N0YXRlX2NvZGU6XCJ1dFwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJQaW9uZWVyIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgMjQgXSB9IF0gfSxcbiAgICBWZXJtb250OnsgX3N0YXRlX2NvZGU6XCJ2dFwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUb3duIE1lZXRpbmcgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0TWFyY2hUdWVzZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQmF0dGxlIG9mIEJlbm5pbmd0b25cIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RBdWd1c3RNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSBdIH0sXG4gICAgVmlyZ2luaWE6eyBfc3RhdGVfY29kZTpcInZhXCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiRWxlY3Rpb24gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MSB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgV2FzaGluZ3Rvbjp7IF9zdGF0ZV9jb2RlOlwid2FcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSBdIH0sXG4gICAgXCJXZXN0IFZpcmdpbmlhXCI6eyBfc3RhdGVfY29kZTpcInd2XCIsXG4gICAgICBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyJ3MgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEsXG4gICAgICAgICAgICAxIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTWFydGluIEx1dGhlciBLaW5nLCBKci4gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0SmFudWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJXYXNoaW5ndG9uJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RGZWJydWFyeU1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDoxNCB9LFxuICAgICAgICB7IG5hbWU6XCJNZW1vcmlhbCBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwibGFzdE1heU1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkluZGVwZW5kZW5jZSBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgNyxcbiAgICAgICAgICAgIDQgXSB9LFxuICAgICAgICB7IG5hbWU6XCJMYWJvciBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RTZXB0ZW1iZXJNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJDb2x1bWJ1cyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RPY3RvYmVyTW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiVmV0ZXJhbnMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDExLFxuICAgICAgICAgICAgMTEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJUaGFua3NnaXZpbmdcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIxIH0sXG4gICAgICAgIHsgbmFtZTpcIkNocmlzdG1hcyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTIsXG4gICAgICAgICAgICAyNSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIldlc3QgVmlyZ2luaWEgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDYsXG4gICAgICAgICAgICAyMCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxpbmNvbG4ncyBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3ROb3ZlbWJlclRodXJzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjIyIH0gXSB9LFxuICAgIFdpc2NvbnNpbjp7IF9zdGF0ZV9jb2RlOlwid2lcIixcbiAgICAgIFBIOlsgeyBuYW1lOlwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMSxcbiAgICAgICAgICAgIDEgXSB9LFxuICAgICAgICB7IG5hbWU6XCJNYXJ0aW4gTHV0aGVyIEtpbmcsIEpyLiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RKYW51YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIldhc2hpbmd0b24ncyBCaXJ0aGRheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEZlYnJ1YXJ5TW9uZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjE0IH0sXG4gICAgICAgIHsgbmFtZTpcIk1lbW9yaWFsIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJsYXN0TWF5TW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiSW5kZXBlbmRlbmNlIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyA3LFxuICAgICAgICAgICAgNCBdIH0sXG4gICAgICAgIHsgbmFtZTpcIkxhYm9yIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdFNlcHRlbWJlck1vbmRheVwiIH0sXG4gICAgICAgIHsgbmFtZTpcIkNvbHVtYnVzIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE9jdG9iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6NyB9LFxuICAgICAgICB7IG5hbWU6XCJWZXRlcmFucyBEYXlcIixcbiAgICAgICAgICBmaXhlZF9kYXRlOlsgMTEsXG4gICAgICAgICAgICAxMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIlRoYW5rc2dpdmluZ1wiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdE5vdmVtYmVyVGh1cnNkYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MjEgfSxcbiAgICAgICAgeyBuYW1lOlwiQ2hyaXN0bWFzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMixcbiAgICAgICAgICAgIDI1IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiUHJpbWFyeSBFbGVjdGlvbiBEYXlcIixcbiAgICAgICAgICB2YXJpYWJsZV9kYXRlOlwiZmlyc3RBdWd1c3RUdWVzZGF5XCIsXG4gICAgICAgICAgb2Zmc2V0OjcgfSxcbiAgICAgICAgeyBuYW1lOlwiRWxlY3Rpb24gRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MSB9IF0gfSxcbiAgICBXeW9taW5nOnsgX3N0YXRlX2NvZGU6XCJ3eVwiLFxuICAgICAgUEg6WyB7IG5hbWU6XCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgICAgMSBdIH0sXG4gICAgICAgIHsgbmFtZTpcIk1hcnRpbiBMdXRoZXIgS2luZywgSnIuIERheVwiLFxuICAgICAgICAgIHZhcmlhYmxlX2RhdGU6XCJmaXJzdEphbnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiV2FzaGluZ3RvbidzIEJpcnRoZGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0RmVicnVhcnlNb25kYXlcIixcbiAgICAgICAgICBvZmZzZXQ6MTQgfSxcbiAgICAgICAgeyBuYW1lOlwiTWVtb3JpYWwgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImxhc3RNYXlNb25kYXlcIiB9LFxuICAgICAgICB7IG5hbWU6XCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDcsXG4gICAgICAgICAgICA0IF0gfSxcbiAgICAgICAgeyBuYW1lOlwiTGFib3IgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0U2VwdGVtYmVyTW9uZGF5XCIgfSxcbiAgICAgICAgeyBuYW1lOlwiQ29sdW1idXMgRGF5XCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0T2N0b2Jlck1vbmRheVwiLFxuICAgICAgICAgIG9mZnNldDo3IH0sXG4gICAgICAgIHsgbmFtZTpcIlZldGVyYW5zIERheVwiLFxuICAgICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAgIDExIF0gfSxcbiAgICAgICAgeyBuYW1lOlwiVGhhbmtzZ2l2aW5nXCIsXG4gICAgICAgICAgdmFyaWFibGVfZGF0ZTpcImZpcnN0Tm92ZW1iZXJUaHVyc2RheVwiLFxuICAgICAgICAgIG9mZnNldDoyMSB9LFxuICAgICAgICB7IG5hbWU6XCJDaHJpc3RtYXMgRGF5XCIsXG4gICAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgICAgMjUgXSB9IF0gfSB9O1xuICBkYXRhJDUuUEg7XG4gIGRhdGEkNS5BbGFiYW1hO1xuICBkYXRhJDUuQWxhc2thO1xuICBkYXRhJDUuQXJpem9uYTtcbiAgZGF0YSQ1LkFya2Fuc2FzO1xuICBkYXRhJDUuQ2FsaWZvcm5pYTtcbiAgZGF0YSQ1LkNvbG9yYWRvO1xuICBkYXRhJDUuQ29ubmVjdGljdXQ7XG4gIGRhdGEkNS5EZWxhd2FyZTtcbiAgZGF0YSQ1LkZsb3JpZGE7XG4gIGRhdGEkNS5HZW9yZ2lhO1xuICBkYXRhJDUuR3VhbTtcbiAgZGF0YSQ1Lkhhd2FpaTtcbiAgZGF0YSQ1LklkYWhvO1xuICBkYXRhJDUuSWxsaW5vaXM7XG4gIGRhdGEkNS5JbmRpYW5hO1xuICBkYXRhJDUuSW93YTtcbiAgZGF0YSQ1LkthbnNhcztcbiAgZGF0YSQ1LktlbnR1Y2t5O1xuICBkYXRhJDUuTG91aXNpYW5hO1xuICBkYXRhJDUuTWFpbmU7XG4gIGRhdGEkNS5NYXJ5bGFuZDtcbiAgZGF0YSQ1Lk1hc3NhY2h1c2V0dHM7XG4gIGRhdGEkNS5NaWNoaWdhbjtcbiAgZGF0YSQ1Lk1pbm5lc290YTtcbiAgZGF0YSQ1Lk1pc3Npc3NpcHBpO1xuICBkYXRhJDUuTWlzc291cmk7XG4gIGRhdGEkNS5Nb250YW5hO1xuICBkYXRhJDUuTmVicmFza2E7XG4gIGRhdGEkNS5OZXZhZGE7XG4gIGRhdGEkNS5PaGlvO1xuICBkYXRhJDUuT2tsYWhvbWE7XG4gIGRhdGEkNS5PcmVnb247XG4gIGRhdGEkNS5QZW5uc3lsdmFuaWE7XG4gIGRhdGEkNS5UZW5uZXNzZWU7XG4gIGRhdGEkNS5UZXhhcztcbiAgZGF0YSQ1LlV0YWg7XG4gIGRhdGEkNS5WZXJtb250O1xuICBkYXRhJDUuVmlyZ2luaWE7XG4gIGRhdGEkNS5XYXNoaW5ndG9uO1xuICBkYXRhJDUuV2lzY29uc2luO1xuICBkYXRhJDUuV3lvbWluZztcblxuICB2YXIgZGF0YSQ0ID0geyBQSDpbIHsgbmFtZTpcIlThur90IETGsMahbmcgTOG7i2NoXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiTmfDoHkgUXXhu5FjIHThur8gUGjhu6UgbuG7r1wiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgMyxcbiAgICAgICAgICA4IF0gfSxcbiAgICAgIHsgbmFtZTpcIk5nw6B5IHRow6BuaCBs4bqtcCDEkG/DoG4gVGhhbmggbmnDqm4gQ+G7mW5nIHPhuqNuIEjhu5MgQ2jDrSBNaW5oXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAzLFxuICAgICAgICAgIDI2IF0gfSxcbiAgICAgIHsgbmFtZTpcIk5nw6B5IFF14buRYyB04bq/IFRoaeG6v3UgbmhpXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA2LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiTmfDoHkgTmjDoCBnacOhbyBWaeG7h3QgTmFtXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxMSxcbiAgICAgICAgICAyMCBdIH0sXG4gICAgICB7IG5hbWU6XCJOZ8OgeSBHaeG6o2kgcGjDs25nIG1p4buBbiBOYW0sIFRo4buRbmcgbmjhuqV0IMSQ4bqldCBuxrDhu5tjXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA0LFxuICAgICAgICAgIDMwIF0gfSxcbiAgICAgIHsgbmFtZTpcIk5nw6B5IFF14buRYyB04bq/IGxhbyDEkeG7mW5nXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyA1LFxuICAgICAgICAgIDEgXSB9LFxuICAgICAgeyBuYW1lOlwiUXXhu5FjIEtow6FuaFwiLFxuICAgICAgICBmaXhlZF9kYXRlOlsgOSxcbiAgICAgICAgICAyIF0gfSxcbiAgICAgIHsgbmFtZTpcIkzhu4UgR2nDoW5nIFNpbmhcIixcbiAgICAgICAgZml4ZWRfZGF0ZTpbIDEyLFxuICAgICAgICAgIDI1IF0gfSBdIH07XG4gIGRhdGEkNC5QSDtcblxuICB2YXIgZGF0YSQzID0geyBQSDpbIHsgbmFtZTpcIk5ldyBZZWFyXCIsXG4gICAgICAgIGZpeGVkX2RhdGU6WyAxLFxuICAgICAgICAgIDEgXSB9IF0sXG4gICAgU0g6WyB7IDIwMjA6WyA2LFxuICAgICAgICAgIDIxLFxuICAgICAgICAgIDksXG4gICAgICAgICAgMjMgXSxcbiAgICAgICAgMjAyMTpbIDYsXG4gICAgICAgICAgMjEsXG4gICAgICAgICAgOSxcbiAgICAgICAgICAyMyBdLFxuICAgICAgICAyMDIyOlsgNixcbiAgICAgICAgICAyMSxcbiAgICAgICAgICA5LFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIDIwMjM6WyA2LFxuICAgICAgICAgIDIxLFxuICAgICAgICAgIDksXG4gICAgICAgICAgMjMgXSxcbiAgICAgICAgMjAyNDpbIDYsXG4gICAgICAgICAgMjEsXG4gICAgICAgICAgOSxcbiAgICAgICAgICAyMyBdLFxuICAgICAgICAyMDI1OlsgNixcbiAgICAgICAgICAyMSxcbiAgICAgICAgICA5LFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIDIwMjY6WyA2LFxuICAgICAgICAgIDIxLFxuICAgICAgICAgIDksXG4gICAgICAgICAgMjMgXSxcbiAgICAgICAgMjAyNzpbIDYsXG4gICAgICAgICAgMjEsXG4gICAgICAgICAgOSxcbiAgICAgICAgICAyMyBdLFxuICAgICAgICAyMDI4OlsgNixcbiAgICAgICAgICAyMSxcbiAgICAgICAgICA5LFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIDIwMjk6WyA2LFxuICAgICAgICAgIDIxLFxuICAgICAgICAgIDksXG4gICAgICAgICAgMjMgXSxcbiAgICAgICAgMjAzMDpbIDYsXG4gICAgICAgICAgMjEsXG4gICAgICAgICAgOSxcbiAgICAgICAgICAyMyBdLFxuICAgICAgICAyMDMxOlsgNixcbiAgICAgICAgICAyMSxcbiAgICAgICAgICA5LFxuICAgICAgICAgIDIzIF0sXG4gICAgICAgIDIwMzI6WyA2LFxuICAgICAgICAgIDIxLFxuICAgICAgICAgIDksXG4gICAgICAgICAgMjMgXSxcbiAgICAgICAgbmFtZTpcIlN1bW1lclwiIH0gXSB9O1xuICBkYXRhJDMuUEg7XG4gIGRhdGEkMy5TSDtcblxuICB2YXIgaG9saWRheV9kZWZpbml0aW9ucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgYXI6IGRhdGEkRCxcbiAgICBhdDogZGF0YSRDLFxuICAgIGF1OiBkYXRhJEIsXG4gICAgYmU6IGRhdGEkQSxcbiAgICBicjogZGF0YSR6LFxuICAgIGNhOiBkYXRhJHksXG4gICAgY2g6IGRhdGEkeCxcbiAgICBjaTogZGF0YSR3LFxuICAgIGNuOiBkYXRhJHYsXG4gICAgY3o6IGRhdGEkdSxcbiAgICBkZTogZGF0YSR0LFxuICAgIGRrOiBkYXRhJHMsXG4gICAgZXM6IGRhdGEkcixcbiAgICBmaTogZGF0YSRxLFxuICAgIGZyOiBkYXRhJHAsXG4gICAgZ2I6IGRhdGEkbyxcbiAgICBncjogZGF0YSRuLFxuICAgIGhyOiBkYXRhJG0sXG4gICAgaHU6IGRhdGEkbCxcbiAgICBpZTogZGF0YSRrLFxuICAgIGl0OiBkYXRhJGosXG4gICAganA6IGRhdGEkaSxcbiAgICBsdTogZGF0YSRoLFxuICAgIG5hOiBkYXRhJGcsXG4gICAgbmw6IGRhdGEkZixcbiAgICBubzogZGF0YSRlLFxuICAgIG56OiBkYXRhJGQsXG4gICAgcGw6IGRhdGEkYyxcbiAgICBybzogZGF0YSRiLFxuICAgIHJ1OiBkYXRhJGEsXG4gICAgc2U6IGRhdGEkOSxcbiAgICBzaTogZGF0YSQ4LFxuICAgIHNrOiBkYXRhJDcsXG4gICAgdWE6IGRhdGEkNixcbiAgICB1czogZGF0YSQ1LFxuICAgIHZuOiBkYXRhJDQsXG4gICAgeGE6IGRhdGEkM1xuICB9KTtcblxuICB2YXIgZGF0YSQyID0geyBcImFzc3VtaW5nIG9rIGZvciBrb1wiOnsgZGF5dGltZTpcInN1bnJpc2Utc3Vuc2V0XCIsXG4gICAgICBzcHJpbmc6XCJNYXItTWF5XCIsXG4gICAgICBzdW1tZXI6XCJKdW4tQXVnXCIsXG4gICAgICBhdXR1bW46XCJTZXAtTm92XCIsXG4gICAgICB3aW50ZXI6XCJEZWMtRmViXCIsXG4gICAgICBfOlwiLVwiLFxuICAgICAgXCI9XCI6XCItXCIsXG4gICAgICBcImZyw7xobGluZ1wiOlwiTWFyLU1heVwiLFxuICAgICAgXCJmcsO8aGphaHJcIjpcIk1hci1NYXlcIixcbiAgICAgIHNvbW1lcjpcIkp1bi1BdWdcIixcbiAgICAgIGhlcmJzdDpcIlNlcC1Ob3ZcIixcbiAgICAgIGdlc2xvdGVuOlwib2ZmXCIsXG4gICAgICBmZWVzdGRhZzpcIlBIXCIsXG4gICAgICBmZWVzdGRhZ2VuOlwiUEhcIixcbiAgICAgIG06XCJNb1wiLFxuICAgICAgdzpcIldlXCIsXG4gICAgICBmOlwiRnJcIixcbiAgICAgIHByaW1hdmVyYTpcIk1hci1NYXlcIixcbiAgICAgIGVzdGF0ZTpcIkp1bi1BdWdcIixcbiAgICAgIGF1dHVubm86XCJTZXAtTm92XCIsXG4gICAgICBpbnZlcm5vOlwiRGVjLUZlYlwiIH0sXG4gICAgXCJwbGVhc2UgdXNlIEVuZ2xpc2ggd3JpdHRlbiBvayBmb3Iga29cIjp7IFwiKD86YW4gKT9mZWllcnRhZyg/OnN8ZW4/KT9cIjpcIlBIXCIgfSxcbiAgICBcInBsZWFzZSB1c2Ugb2ZmIGZvciBrb1wiOnsgXCJydWhldGFnZT9cIjpcIm9mZlwiLFxuICAgICAgZ2VzY2hsb3NzZW46XCJvZmZcIixcbiAgICAgIGdlc2NobDpcIm9mZlwiLFxuICAgICAgZXhjZXB0Olwib2ZmXCIgfSxcbiAgICBcInBsZWFzZSB1c2Ugb2sgZm9yIHdvcmtkYXlcIjp7IHdkOlwiTW8tRnJcIixcbiAgICAgIFwib24gd29yayBkYXlzP1wiOlwiTW8tRnJcIixcbiAgICAgIFwid2Vla2RheXM/XCI6XCJNby1GclwiLFxuICAgICAgXCJ3ZXJrdGFncz9cIjpcIk1vLVNhXCIsXG4gICAgICB2YXJkYWdhcjpcIk1vLUZyXCIgfSxcbiAgICBcIm9taXQgaG91ciBrZXl3b3JkXCI6eyBoOlwiXCIgfSxcbiAgICBcIm9taXQga29cIjp7IHNlYXNvbjpcIlwiLFxuICAgICAgaHM6XCJcIixcbiAgICAgIGhyczpcIlwiLFxuICAgICAgaG91cnM6XCJcIixcbiAgICAgIHVocjpcIlwiLFxuICAgICAgXCJnZcO2ZmZuZXRcIjpcIlwiLFxuICAgICAgendpc2NoZW46XCJcIixcbiAgICAgIGlzdDpcIlwiLFxuICAgICAgZHVyY2hnZWhlbmQ6XCJcIixcbiAgICAgIFwiw7ZmZm51bmdzemVpdCg/OmVuKT86P1wiOlwiXCIgfSxcbiAgICBcIm9taXQgdGFnIGtleVwiOnsgXCJvcGVuaW5nX2hvdXJzXFxcXHMqPVwiOlwiXCIgfSxcbiAgICBcIm9taXQgd3Jvbmcga2V5d29yZCBvcGVuIGVuZFwiOnsgZnJvbTpcIlwiLFxuICAgICAgYWI6XCJcIixcbiAgICAgIHZvbjpcIlwiIH0sXG4gICAgXCJhc3N1bWluZyBvcGVuIGVuZCBmb3Iga29cIjp7IFwiKD86YmlzfHRpbGw/fC184oCTKT8gPyg/Om9wZW4gP2VuZHxsYXRlKVwiOlwiK1wiIH0sXG4gICAgXCJwbGVhc2UgdXNlIG9rIGZvciB1bmNlcnRhaW50eVwiOnsgXCJ+XCI6XCItXCIsXG4gICAgICBcIu+9nlwiOlwiLVwiIH0sXG4gICAgXCJwbGVhc2UgdXNlIGZhbGxiYWNrIHJ1bGVcIjp7IG90aGVyd2lzZTpcInx8XCIgfSxcbiAgICBcInBsZWFzZSB1c2Ugb2sgZm9yIG1pc3NpbmcgZGF0YVwiOnsgXCJcXFxcP1wiOlwiXCIgfSxcbiAgICBcInBsZWFzZSB1c2Ugb2sgZm9yIGtvXCI6eyBcIuKGklwiOlwiLVwiLFxuICAgICAgXCLiiJJcIjpcIi1cIixcbiAgICAgIFwi4oCUXCI6XCItXCIsXG4gICAgICBcIuODvFwiOlwiLVwiLFxuICAgICAgdG86XCItXCIsXG4gICAgICBcItC00L5cIjpcIi1cIixcbiAgICAgIGE6XCItXCIsXG4gICAgICBhczpcIi1cIixcbiAgICAgIFwiw6FcIjpcIi1cIixcbiAgICAgIFwiw6FzXCI6XCItXCIsXG4gICAgICBcIsOgc1wiOlwiLVwiLFxuICAgICAgYXRlOlwiLVwiLFxuICAgICAgXCJ0aWxsP1wiOlwiLVwiLFxuICAgICAgdW50aWw6XCItXCIsXG4gICAgICB0aHJvdWdoOlwiLVwiLFxuICAgICAgYW5kOlwiLFwiLFxuICAgICAgXCImXCI6XCIsXCIsXG4gICAgICBcIu+8mlwiOlwiOlwiLFxuICAgICAgXCInXCI6XCJcXFwiXCIsXG4gICAgICBhbHdheXM6XCIyNC83XCIsXG4gICAgICBcImFsd2F5cyBvcGVuXCI6XCIyNC83XCIsXG4gICAgICBcImFsd2F5cyBjbG9zZWRcIjpcImNsb3NlZFwiLFxuICAgICAgbm9uc3RvcDpcIjI0LzdcIixcbiAgICAgIFwiMjR4N1wiOlwiMjQvN1wiLFxuICAgICAgYW55dGltZTpcIjI0LzdcIixcbiAgICAgIFwiYWxsIGRheVwiOlwiMjQvN1wiLFxuICAgICAgZGFpbHk6XCJNby1TdVwiLFxuICAgICAgZXZlcnlkYXk6XCJNby1TdVwiLFxuICAgICAgXCJldmVyeSBkYXlcIjpcIk1vLVN1XCIsXG4gICAgICBcImFsbCBkYXlzXCI6XCJNby1TdVwiLFxuICAgICAgXCI3ai83XCI6XCJNby1TdVwiLFxuICAgICAgXCI3LzdcIjpcIk1vLVN1XCIsXG4gICAgICBcIjdkYXlzXCI6XCJNby1TdVwiLFxuICAgICAgXCI3IGRheXNcIjpcIk1vLVN1XCIsXG4gICAgICBcIjcgZGF5cyBhIHdlZWtcIjpcIk1vLVN1XCIsXG4gICAgICBcIjcgZGF5cy93ZWVrXCI6XCJNby1TdVwiLFxuICAgICAgXCIyNCBob3VycyA3IGRheXMgYSB3ZWVrXCI6XCIyNC83XCIsXG4gICAgICBcIjI0IGhvdXJzXCI6XCIwMDowMC0yNDowMFwiLFxuICAgICAgbWlkZGF5OlwiMTI6MDBcIixcbiAgICAgIG1pZG5pZ2h0OlwiMDA6MDBcIixcbiAgICAgIFwiKD86cHVibGljICk/aG9saWRheXM/XCI6XCJQSFwiLFxuICAgICAgXCIoPzpvbmUgKT9kYXkgYWZ0ZXIgcHVibGljIGhvbGlkYXlcIjpcIlBIICsxIGRheVwiLFxuICAgICAgXCIoPzpvbmUgKT9kYXkgYmVmb3JlIHB1YmxpYyBob2xpZGF5XCI6XCJQSCAtMSBkYXlcIixcbiAgICAgIFwic2Nob29sID9ob2xpZGF5cz9cIjpcIlNIXCIsXG4gICAgICBcIndlZWtlbmRzP1wiOlwiU2EsU3VcIixcbiAgICAgIGRheWxpZ2h0Olwic3VucmlzZS1zdW5zZXRcIixcbiAgICAgIFwib24oPzpffCApP2FwcG9pbnRtZW50cz9cIjpcIlxcXCJvbiBhcHBvaW50bWVudFxcXCJcIixcbiAgICAgIFwiYnkoPzpffCApP2FwcG9pbnRtZW50cz9cIjpcIlxcXCJieSBhcHBvaW50bWVudFxcXCJcIixcbiAgICAgIFwibmFjaCg/OiB8Xyl2ZXJlaW5iYXJ1bmdcIjpcIlxcXCJOYWNoIFZlcmVpbmJhcnVuZ1xcXCJcIixcbiAgICAgIFwibmFjaCg/OiB8XylhYnNwcmFjaGVcIjpcIlxcXCJOYWNoIEFic3ByYWNoZVxcXCJcIixcbiAgICAgIGJpczpcIi1cIixcbiAgICAgIFwidMOkZ2xpY2hcIjpcIk1vLVN1XCIsXG4gICAgICBcIig/OnNjaHVsKT9mZXJpZW5cIjpcIlNIXCIsXG4gICAgICBcIig/OmFufG51cik/ID9zb25uLT8oPzogdW5kIHwvKWZlaWVydGFnKD86c3xlbj8pP1wiOlwiUEgsU3VcIixcbiAgICAgIHVuZDpcIixcIixcbiAgICAgIHU6XCIsXCIsXG4gICAgICBhdWNoOlwiLFwiLFxuICAgICAgXCJmZXJtw6lcIjpcIm9mZlwiLFxuICAgICAgZXQ6XCIsXCIsXG4gICAgICBcIsOgXCI6XCItXCIsXG4gICAgICBcImpvdXJzIGbDqXJpw6lzXCI6XCJQSFwiLFxuICAgICAgc3VuZG93bjpcInN1bnNldFwiLFxuICAgICAgXCJtb3JnZW5kw6RtbWVydW5nXCI6XCJkYXduXCIsXG4gICAgICBcImFiZW5kZMOkbW1lcnVuZ1wiOlwiZHVza1wiLFxuICAgICAgc29ubmVuYXVmZ2FuZzpcInN1bnJpc2VcIixcbiAgICAgIHNvbm5lbnVudGVyZ2FuZzpcInN1bnNldFwiLFxuICAgICAgb3N0ZXJuOlwiZWFzdGVyXCIgfSxcbiAgICBcInBsZWFzZSB1c2UgRW5nbGlzaCBhYmJyZXZpYXRpb24gb2sgZm9yIHNvXCI6eyBzbzpcIlN1XCIgfSxcbiAgICBcInBsZWFzZSB1c2UgRW5nbGlzaCBhYmJyZXZpYXRpb24gb2sgZm9yIGtvXCI6eyBzdW46XCJTdVwiLFxuICAgICAgXCJzdW5kYXlzP1wiOlwiU3VcIixcbiAgICAgIG1vbjpcIk1vXCIsXG4gICAgICBcIm1vbmRheXM/XCI6XCJNb1wiLFxuICAgICAgXCJ0dWVzP1wiOlwiVHVcIixcbiAgICAgIFwidHVlc2RheXM/XCI6XCJUdVwiLFxuICAgICAgXCJ3ZWRzP1wiOlwiV2VcIixcbiAgICAgIFwid2VkbmVzZGF5cz9cIjpcIldlXCIsXG4gICAgICB0aHU6XCJUaFwiLFxuICAgICAgXCJ0aHVycz9cIjpcIlRoXCIsXG4gICAgICBcInRodXJzZGF5cz9cIjpcIlRoXCIsXG4gICAgICBmcmk6XCJGclwiLFxuICAgICAgXCJmcmlkYXlzP1wiOlwiRnJcIixcbiAgICAgIHNhdDpcIlNhXCIsXG4gICAgICBcInNhdHVyZGF5cz9cIjpcIlNhXCIsXG4gICAgICBzb246XCJTdVwiLFxuICAgICAgXCJzb25uLVwiOlwiU3VcIixcbiAgICAgIFwic29ubnRhZ3M/XCI6XCJTdVwiLFxuICAgICAgXCJtb250YWdzP1wiOlwiTW9cIixcbiAgICAgIGRpOlwiVHVcIixcbiAgICAgIFwiZGllP1wiOlwiVHVcIixcbiAgICAgIFwiZGllbnN0YWdzP1wiOlwiVHVcIixcbiAgICAgIG1pOlwiV2VcIixcbiAgICAgIFwibWl0P1wiOlwiV2VcIixcbiAgICAgIFwibWl0dHdvY2hzP1wiOlwiV2VcIixcbiAgICAgIFwiZG9uP1wiOlwiVGhcIixcbiAgICAgIFwiZG9ubmVyc3RhZ3M/XCI6XCJUaFwiLFxuICAgICAgZnJlOlwiRnJcIixcbiAgICAgIFwiZnJlaXRhZ3M/XCI6XCJGclwiLFxuICAgICAgc2FtOlwiU2FcIixcbiAgICAgIFwic2Ftc3RhZ3M/XCI6XCJTYVwiLFxuICAgICAgZGltOlwiU3VcIixcbiAgICAgIGRpbWFuY2hlOlwiU3VcIixcbiAgICAgIFwibHVuP1wiOlwiTW9cIixcbiAgICAgIGx1bmRpOlwiTW9cIixcbiAgICAgIG1hcmRpOlwiVHVcIixcbiAgICAgIG1lcjpcIldlXCIsXG4gICAgICBtZXJjcmVkaTpcIldlXCIsXG4gICAgICBcImpldT9cIjpcIlRoXCIsXG4gICAgICBqZXVkaTpcIlRoXCIsXG4gICAgICBcInZlbj9cIjpcIkZyXCIsXG4gICAgICB2ZW5kcmVkaTpcIkZyXCIsXG4gICAgICBzYW1lZGk6XCJTYVwiLFxuICAgICAgXCJ6b24/XCI6XCJTdVwiLFxuICAgICAgem9udGFnOlwiU3VcIixcbiAgICAgIHpvbmRhZzpcIlN1XCIsXG4gICAgICBtYWFuZGFnOlwiTW9cIixcbiAgICAgIGRpbjpcIlR1XCIsXG4gICAgICBkaW5zZGFnOlwiVHVcIixcbiAgICAgIFwid29lP1wiOlwiV2VcIixcbiAgICAgIHdvZW5zZGFnOlwiV2VcIixcbiAgICAgIGRvbmRlcmRhZzpcIlRoXCIsXG4gICAgICBcInZyaT9cIjpcIkZyXCIsXG4gICAgICB2cmlqZGFnOlwiRnJcIixcbiAgICAgIFwiemF0P1wiOlwiU2FcIixcbiAgICAgIHphdGVyZGFnOlwiU2FcIixcbiAgICAgIFwibmVkxJtsZVwiOlwiU3VcIixcbiAgICAgIG5lOlwiU3VcIixcbiAgICAgIFwicG9uZMSbbMOtXCI6XCJNb1wiLFxuICAgICAgcG86XCJNb1wiLFxuICAgICAgXCLDunRlcsO9XCI6XCJUdVwiLFxuICAgICAgXCLDunRcIjpcIlR1XCIsXG4gICAgICBcInN0xZllZGFcIjpcIldlXCIsXG4gICAgICBzdDpcIldlXCIsXG4gICAgICBcIsSNdHZydGVrXCI6XCJUaFwiLFxuICAgICAgXCLEjXRcIjpcIlRoXCIsXG4gICAgICBcInDDoXRla1wiOlwiRnJcIixcbiAgICAgIFwicMOhXCI6XCJGclwiLFxuICAgICAgc29ib3RhOlwiU2FcIixcbiAgICAgIG1hcnRlczpcIlR1XCIsXG4gICAgICBcIm1pw6lyY29sZXNcIjpcIldlXCIsXG4gICAgICBqdWV2ZXM6XCJUaFwiLFxuICAgICAgdmllcm5lczpcIkZyXCIsXG4gICAgICBcInPDoWJhZG9cIjpcIlNhXCIsXG4gICAgICBkb21pbmdvOlwiU3VcIixcbiAgICAgIGx1bmVzOlwiTW9cIixcbiAgICAgIHNlbGFzYTpcIlN1XCIsXG4gICAgICByYWJ1OlwiTW9cIixcbiAgICAgIGthbWk6XCJUdVwiLFxuICAgICAganVtYXQ6XCJXZVwiLFxuICAgICAgc2FidHU6XCJUaFwiLFxuICAgICAgbWluZ2d1OlwiRnJcIixcbiAgICAgIHNlbmluOlwiU2FcIixcbiAgICAgIFwic8O2bmRhZ1wiOlwiU3VcIixcbiAgICAgIFwic8O2bmRhZ2FyXCI6XCJTdVwiLFxuICAgICAgXCJtw6VuZGFnXCI6XCJNb1wiLFxuICAgICAgbWE6XCJNb1wiLFxuICAgICAgdGlzZGFnOlwiVHVcIixcbiAgICAgIG9uc2RhZzpcIldlXCIsXG4gICAgICB0b3JzZGFnOlwiVGhcIixcbiAgICAgIGZyZWRhZzpcIkZyXCIsXG4gICAgICBcImzDtnJkYWdcIjpcIlNhXCIsXG4gICAgICBcImzDtnJkYWdhclwiOlwiU2FcIixcbiAgICAgIG5pZWR6aWVsYTpcIlN1XCIsXG4gICAgICBuaWVkejpcIlN1XCIsXG4gICAgICBuOlwiU3VcIixcbiAgICAgIG5kejpcIlN1XCIsXG4gICAgICBcInBvbmllZHppYcWCZWtcIjpcIk1vXCIsXG4gICAgICBwb25pZWR6aWFsZWs6XCJNb1wiLFxuICAgICAgcG9uOlwiTW9cIixcbiAgICAgIHBuOlwiTW9cIixcbiAgICAgIHd0b3JlazpcIlR1XCIsXG4gICAgICB3dDpcIlR1XCIsXG4gICAgICBcIsWbcm9kYVwiOlwiV2VcIixcbiAgICAgIHNyb2RhOlwiV2VcIixcbiAgICAgIFwixZtyXCI6XCJXZVwiLFxuICAgICAgc3I6XCJXZVwiLFxuICAgICAgY3p3YXJ0ZWs6XCJUaFwiLFxuICAgICAgY3p3OlwiVGhcIixcbiAgICAgIGN6OlwiVGhcIixcbiAgICAgIFwicGnEhXRla1wiOlwiRnJcIixcbiAgICAgIHBpYXRlazpcIkZyXCIsXG4gICAgICBwdDpcIkZyXCIsXG4gICAgICBzb2I6XCJTYVwiLFxuICAgICAgXCLQstC+0YHQutGA0LXRgdC10L3RjNC1XCI6XCJTdVwiLFxuICAgICAgXCLQktGBXCI6XCJTdVwiLFxuICAgICAgXCJ2b3NrcmVzZW4neWVcIjpcIlN1XCIsXG4gICAgICBcItC/0L7QvdC10LTQtdC70YzQvdC40LpcIjpcIk1vXCIsXG4gICAgICBcItCf0L1cIjpcIk1vXCIsXG4gICAgICBcInBvbmVkZWwnbmlrXCI6XCJNb1wiLFxuICAgICAgXCLQstGC0L7RgNC90LjQulwiOlwiVHVcIixcbiAgICAgIHZ0b3JuaWs6XCJUdVwiLFxuICAgICAgXCLRgdGA0LXQtNCwXCI6XCJXZVwiLFxuICAgICAgc3JlZGE6XCJXZVwiLFxuICAgICAgXCLRh9C10YLQstC10YDQs1wiOlwiVGhcIixcbiAgICAgIGNoZXR2ZXJrOlwiVGhcIixcbiAgICAgIFwi0L/Rj9GC0L3QuNGG0LBcIjpcIkZyXCIsXG4gICAgICBweWF0bml0c2E6XCJGclwiLFxuICAgICAgXCLRgdGD0LHQsdC+0YLQsFwiOlwiU2FcIixcbiAgICAgIHN1YmJvdGE6XCJTYVwiLFxuICAgICAgXCJzw7huZGFnXCI6XCJTdVwiLFxuICAgICAgbWFuZGFnOlwiTW9cIixcbiAgICAgIHRpcnNkYWc6XCJUdVwiLFxuICAgICAgXCJsw7hyZGFnXCI6XCJTYVwiLFxuICAgICAgZG9tOlwiU3VcIixcbiAgICAgIFwiZG9tZW5pY2E/XCI6XCJTdVwiLFxuICAgICAgXCJkb21lbmljaGU/XCI6XCJTdVwiLFxuICAgICAgbHVuOlwiTW9cIixcbiAgICAgIFwibHVuZWTDrD9cIjpcIk1vXCIsXG4gICAgICBcIm1hcj9cIjpcIlR1XCIsXG4gICAgICBcIm1hcnRlZMOsP1wiOlwiVHVcIixcbiAgICAgIFwibWVyP1wiOlwiV2VcIixcbiAgICAgIFwibWVyY29sZWTDrD9cIjpcIldlXCIsXG4gICAgICBnaW86XCJUaFwiLFxuICAgICAgXCJnaW92ZWTDrD9cIjpcIlRoXCIsXG4gICAgICB2ZW46XCJGclwiLFxuICAgICAgXCJ2ZW5lcmTDrD9cIjpcIkZyXCIsXG4gICAgICBzYWI6XCJTYVwiLFxuICAgICAgXCJzYWJhdG8/XCI6XCJTYVwiLFxuICAgICAgXCJqw6RubmVyXCI6XCJKYW5cIixcbiAgICAgIGphbnVhcnk6XCJKYW5cIixcbiAgICAgIGZlYnJ1YXJ5OlwiRmViXCIsXG4gICAgICBtYXJjaDpcIk1hclwiLFxuICAgICAgYXByaWw6XCJBcHJcIixcbiAgICAgIFwianVuZT9cIjpcIkp1blwiLFxuICAgICAgXCJqdWx5P1wiOlwiSnVsXCIsXG4gICAgICBhdWd1c3Q6XCJBdWdcIixcbiAgICAgIHNlcHRlbWJlcjpcIlNlcFwiLFxuICAgICAgc2VwdDpcIlNlcFwiLFxuICAgICAgb2N0b2JlcjpcIk9jdFwiLFxuICAgICAgbm92ZW1iZXI6XCJOb3ZcIixcbiAgICAgIGRlY2VtYmVyOlwiRGVjXCIsXG4gICAgICBqYW51YXI6XCJKYW5cIixcbiAgICAgIGZlYnJ1YXI6XCJGZWJcIixcbiAgICAgIFwibcOkcno/XCI6XCJNYXJcIixcbiAgICAgIG1hZXJ6OlwiTWFyXCIsXG4gICAgICBtYWk6XCJNYXlcIixcbiAgICAgIGp1bmk6XCJKdW5cIixcbiAgICAgIGp1bGk6XCJKdWxcIixcbiAgICAgIG9rdDpcIk9jdFwiLFxuICAgICAgb2t0b2JlcjpcIk9jdFwiLFxuICAgICAgZGV6OlwiRGVjXCIsXG4gICAgICBkZXplbWJlcjpcIkRlY1wiLFxuICAgICAgamFudmllcjpcIkphblwiLFxuICAgICAgXCJmw6l2cmllclwiOlwiRmViXCIsXG4gICAgICBcImbDqXZcIjpcIkZlYlwiLFxuICAgICAgbWFyczpcIk1hclwiLFxuICAgICAgYXZyaWw6XCJBcHJcIixcbiAgICAgIGF2cjpcIkFwclwiLFxuICAgICAganVpbjpcIkp1blwiLFxuICAgICAganVpbGxldDpcIkp1bFwiLFxuICAgICAgXCJhb8O7dFwiOlwiQXVnXCIsXG4gICAgICBcImFvw7tcIjpcIkF1Z1wiLFxuICAgICAgc2VwdGVtYnJlOlwiU2VwXCIsXG4gICAgICBvY3RvYnJlOlwiT2N0XCIsXG4gICAgICBub3ZlbWJyZTpcIk5vdlwiLFxuICAgICAgXCJkw6ljZW1icmVcIjpcIkRlY1wiLFxuICAgICAgamFudWFyaTpcIkphblwiLFxuICAgICAgZmVicnVhcmk6XCJGZWJcIixcbiAgICAgIG1hYXJ0OlwiTWFyXCIsXG4gICAgICBtZWk6XCJNYXlcIixcbiAgICAgIGF1Z3VzdHVzOlwiQXVnXCIsXG4gICAgICBnZW5uYWlvOlwiSmFuXCIsXG4gICAgICBmZWJicmFpbzpcIkZlYlwiLFxuICAgICAgbWFyem86XCJNYXJcIixcbiAgICAgIGFwcmlsZTpcIkFwclwiLFxuICAgICAgXCJnaXVnbm8/XCI6XCJKdW5cIixcbiAgICAgIFwibHVnbGlvP1wiOlwiSnVsXCIsXG4gICAgICBhZ29zdG86XCJBdWdcIixcbiAgICAgIHNldHRlbWJyZTpcIlNlcFwiLFxuICAgICAgb3R0b2JyZTpcIk9jdFwiLFxuICAgICAgZGljZW1icmU6XCJEZWNcIiB9LFxuICAgIFwicGxlYXNlIHVzZSBvayBmb3Igc2ltaWxhciBsb29raW5nIGtvXCI6eyBcItC+ZmZcIjpcIm9mZlwiIH0sXG4gICAgXCJwbGVhc2UgdXNlIDI0IGhvdXJzIHRpbWUgZm9yIGtvXCI6eyBwbTpcInBtXCIsXG4gICAgICBcInAubS5cIjpcInBtXCIsXG4gICAgICBcItGA0LxcIjpcInBtXCIsXG4gICAgICBhbTpcImFtXCIsXG4gICAgICBcImEubS5cIjpcImFtXCIsXG4gICAgICBcItCw0LxcIjpcImFtXCIgfSxcbiAgICBcInBsZWFzZSB1c2UgcmVzdHJpY3Rpb24gY29tbWVudCB0aW1lIGZvciBrb1wiOnsgZGFtZW46XCJvcGVuIFxcXCJEYW1lblxcXCJcIixcbiAgICAgIGhlcnJlbjpcIm9wZW4gXFxcIkhlcnJlblxcXCJcIiB9LFxuICAgIFwicGxlYXNlIHVzZSBvayBmb3IgdHlwb2dyYXBoaWNhbGx5IGNvcnJlY3RcIjp7IFwi4oCTXCI6XCItXCIsXG4gICAgICBcIuKAnlwiOlwiXFxcIlwiLFxuICAgICAgXCLigJxcIjpcIlxcXCJcIixcbiAgICAgIFwi4oCdXCI6XCJcXFwiXCIsXG4gICAgICBcIsKrXCI6XCJcXFwiXCIsXG4gICAgICBcIsK7XCI6XCJcXFwiXCIsXG4gICAgICBcIuKAmlwiOlwiXFxcIlwiLFxuICAgICAgXCLigJhcIjpcIlxcXCJcIixcbiAgICAgIFwi4oCZXCI6XCJcXFwiXCIsXG4gICAgICBcIuOAjFwiOlwiXFxcIlwiLFxuICAgICAgXCLjgI1cIjpcIlxcXCJcIixcbiAgICAgIFwi44COXCI6XCJcXFwiXCIsXG4gICAgICBcIuOAj1wiOlwiXFxcIlwiIH0gfTtcblxuICB2YXIgZGF0YSQxID0geyBcInVuZXhwZWN0ZWQgdG9rZW5cIjpcIlVuZXhwZWN0ZWQgdG9rZW46IFxcXCJ7e3Rva2VufX1cXFwiIFRoaXMgbWVhbnMgdGhhdCB0aGUgc3ludGF4IGlzIG5vdCB2YWxpZCBhdCB0aGF0IHBvaW50IG9yIGl0IGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLlwiLFxuICAgIFwibm8gc3RyaW5nXCI6XCJUaGUgdmFsdWUgKGZpcnN0IHBhcmFtZXRlcikgaXMgbm90IGEgc3RyaW5nLlwiLFxuICAgIG5vdGhpbmc6XCJUaGUgdmFsdWUgY29udGFpbnMgbm90aGluZyBtZWFuaW5nZnVsIHdoaWNoIGNhbiBiZSBwYXJzZWQuXCIsXG4gICAgXCJub3RoaW5nIHVzZWZ1bFwiOlwiVGhpcyBydWxlIGRvZXMgbm90IGNvbnRhaW4gYW55dGhpbmcgdXNlZnVsLiBQbGVhc2UgcmVtb3ZlIHRoaXMgZW1wdHkgcnVsZS5cIixcbiAgICBcImNvbWJpbmUgcnVsZXNcIjpcIlNlcGFyYXRlIHJ1bGVzIGRldGVjdGVkIGVhY2ggb2Ygd2hpY2ggb25seSBjb25zaXN0cyBvZiBhIHRpbWUgc2VsZWN0b3IuIFRoZXNlIHJ1bGVzIHNob3VsZCBiZSB3cml0dGVuIGFzIG9uZSBydWxlIGJ5IGNvbWJpbmluZyB0aGVtIHVzaW5nIFxcXCJ7e29rfX1cXFwiLlwiLFxuICAgIFwidmFsdWUgZW5kcyB3aXRoIHRva2VuXCI6XCJUaGUgdmFsdWUgZW5kcyB3aXRoIFxcXCJ7e3Rva2VufX1cXFwiLiBQbGVhc2UgZWl0aGVyIGNvbnRpbnVlIGFmdGVyIFxcXCJ7e3Rva2VufX1cXFwiIG9yIHJlbW92ZSBcXFwie3t0b2tlbn19XFxcIi5cIixcbiAgICBcInByb2dyYW1tZXJzIGpva2VcIjpcIk1pZ2h0IGl0IGJlIHBvc3NpYmxlIHRoYXQgeW91IGFyZSBhIHByb2dyYW1tZXIgYW5kIGFkZGluZyBhIHNlbWljb2xvbiBhZnRlciBlYWNoIHN0YXRlbWVudCBpcyBoYXJkd2lyZWQgaW4geW91ciBtdXNjbGUgbWVtb3J5IDspID8gVGhlIHRoaW5nIGlzIHRoYXQgdGhlIHNlbWljb2xvbiBpbiB0aGUgb3BlbmluZ19ob3VycyBzeW50YXggaXMgZGVmaW5lZCBhcyBydWxlIHNlcGFyYXRvci4gU28gZm9yIGNvbXBhdGliaWxpdHkgcmVhc29ucyB5b3Ugc2hvdWxkIG9taXQgdGhpcyBsYXN0IHNlbWljb2xvbi5cIixcbiAgICBcImludGVycHJldGVkIGFzIHllYXJcIjpcIlRoZSBudW1iZXIge3tudW1iZXJ9fSB3aWxsIGJlIGludGVycHJldGVkIGFzIHllYXIuIFRoaXMgaXMgcHJvYmFibHkgbm90IGludGVuZGVkLiBUaW1lcyBjYW4gYmUgc3BlY2lmaWVkIGFzIFxcXCIxMjowMFxcXCIuXCIsXG4gICAgXCJydWxlIGJlZm9yZSBmYWxsYmFjayBlbXB0eVwiOlwiUnVsZSBiZWZvcmUgZmFsbGJhY2sgcnVsZSBkb2VzIG5vdCBjb250YWluIGFueXRoaW5nIHVzZWZ1bFwiLFxuICAgIFwiaG91ciBtaW4gc2VwYXJhdG9yXCI6XCJQbGVhc2UgdXNlIFxcXCI6XFxcIiBhcyBob3VyL21pbnV0ZS1zZXBhcmF0b3JcIixcbiAgICBcIndhcm5pbmdzIHNldmVyaXR5XCI6XCJUaGUgcGFyYW1ldGVyIG9wdGlvbmFsX2NvbmZfcGFybVtcXFwid2FybmluZ3Nfc2V2ZXJpdHlcXFwiXSBtdXN0IGJlIGFuIGludGVnZXIgbnVtYmVyIGJldHdlZW4gMCBhbmQgNyAoaW5jbHVzaXZlKS4gR2l2ZW4ge3tzZXZlcml0eX19LCBleHBlY3RlZCBvbmUgb2YgdGhlIGZvbGxvd2luZyBudW1iZXJzOiB7e2FsbG93ZWR9fS5cIixcbiAgICBcIm9wdGlvbmFsIGNvbmYgcGFybSB0eXBlXCI6XCJUaGUgb3B0aW9uYWxfY29uZl9wYXJtIHBhcmFtZXRlciBpcyBvZiB1bmtub3duIHR5cGUuIEdpdmVuIHt7Z2l2ZW59fVwiLFxuICAgIFwiY29uZiBwYXJhbSB0YWcga2V5IG1pc3NpbmdcIjpcIlRoZSBvcHRpb25hbF9jb25mX3Bhcm1bXFxcInRhZ19rZXlcXFwiXSBpcyBtaXNzaW5nLCByZXF1aXJlZCBieSBvcHRpb25hbF9jb25mX3Bhcm1bXFxcIm1hcF92YWx1ZVxcXCJdLlwiLFxuICAgIFwiY29uZiBwYXJhbSBtb2RlIGludmFsaWRcIjpcIlRoZSBvcHRpb25hbF9jb25mX3Bhcm1bXFxcIm1vZGVcXFwiXSBwYXJhbWV0ZXIgaXMgYSBpbnZhbGlkIG51bWJlci4gR2F2ZSB7e2dpdmVufX0sIGV4cGVjdGVkIG9uZSBvZiB0aGUgZm9sbG93aW5nIG51bWJlcnM6IHt7YWxsb3dlZH19LlwiLFxuICAgIFwiY29uZiBwYXJhbSB1bmtub3duIHR5cGVcIjpcIlRoZSBvcHRpb25hbF9jb25mX3Bhcm1bXFxcInt7a2V5fX1cXFwiXSBwYXJhbWV0ZXIgaXMgb2YgdW5rbm93biB0eXBlLiBHaXZlbiB7e2dpdmVufX0sIGV4cGVjdGVkIHt7ZXhwZWN0ZWR9fS5cIixcbiAgICBcImxpYnJhcnkgYnVnXCI6XCJBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgZXZhbHVhdGlvbiBvZiB0aGUgdmFsdWUgXFxcInt7dmFsdWV9fVxcXCIuIFBsZWFzZSBmaWxlIGEgYnVnIHJlcG9ydCBvciBwdWxsIHJlcXVlc3Q6IHt7dXJsfX0ue3ttZXNzYWdlfX1cIixcbiAgICBcImxpYnJhcnkgYnVnIFBSIG9ubHlcIjpcIkFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBldmFsdWF0aW9uIG9mIHRoZSB2YWx1ZSBcXFwie3t2YWx1ZX19XFxcIi4gUGxlYXNlIHN1Ym1pdCBhIHB1bGwgcmVxdWVzdDoge3t1cmx9fS57e21lc3NhZ2V9fVwiLFxuICAgIFwidXNlIG11bHRpXCI6XCJZb3UgaGF2ZSB1c2VkIHt7Y291bnR9fSB7e3BhcnQyfX0gUnVsZXMgY2FuIGJlIHNlcGFyYXRlZCBieSBcXFwiO1xcXCIuXCIsXG4gICAgXCJzZWxlY3RvciBtdWx0aSAyYVwiOlwie3t3aGF0fX0gaW4gb25lIHJ1bGUuIFlvdSBtYXkgb25seSB1c2Ugb25lIGluIG9uZSBydWxlLlwiLFxuICAgIFwic2VsZWN0b3IgbXVsdGkgMmJcIjpcIm5vdCBjb25uZWN0ZWQge3t3aGF0fX0gaW4gb25lIHJ1bGUuIFRoaXMgaXMgcHJvYmFibHkgYW4gZXJyb3IuIEVxdWFsIHNlbGVjdG9yIHR5cGVzIGNhbiAoYW5kIHNob3VsZCkgYWx3YXlzIGJlIHdyaXR0ZW4gaW4gY29uanVuY3Rpb24gc2VwYXJhdGVkIGJ5IGNvbW1hLiBFeGFtcGxlIGZvciB0aW1lIHJhbmdlcyBcXFwiMTI6MDAtMTM6MDAsMTU6MDAtMTg6MDBcXFwiLiBFeGFtcGxlIGZvciB3ZWVrZGF5cyBcXFwiTW8tV2UsRnJcXFwiLlwiLFxuICAgIFwic2VsZWN0b3Igc3RhdGVcIjpcInN0YXRlIGtleXdvcmRzXCIsXG4gICAgY29tbWVudHM6XCJjb21tZW50c1wiLFxuICAgIFwiaG9saWRheSByYW5nZXNcIjpcImhvbGlkYXkgcmFuZ2VzXCIsXG4gICAgbW9udGhzOlwibW9udGhzXCIsXG4gICAgd2Vla2RheXM6XCJ3ZWVrZGF5c1wiLFxuICAgIHJhbmdlczpcInJhbmdlc1wiLFxuICAgIFwiZGVmYXVsdCBzdGF0ZVwiOlwiVGhpcyBydWxlIHdoaWNoIGNoYW5nZXMgdGhlIGRlZmF1bHQgc3RhdGUgKHdoaWNoIGlzIGNsb3NlZCkgZm9yIGFsbCBmb2xsb3dpbmcgcnVsZXMgaXMgbm90IHRoZSBmaXJzdCBydWxlLiBUaGUgcnVsZSB3aWxsIG92ZXJ3cml0ZSBhbGwgcHJldmlvdXMgcnVsZXMuIEl0IGNhbiBiZSBsZWdpdGltYXRlIHRvIGNoYW5nZSB0aGUgZGVmYXVsdCBzdGF0ZSB0byBvcGVuIGZvciBleGFtcGxlIGFuZCB0aGVuIG9ubHkgc3BlY2lmeSBmb3Igd2hpY2ggdGltZXMgdGhlIGZhY2lsaXR5IGlzIGNsb3NlZC5cIixcbiAgICB2YWd1ZTpcIlRoaXMgcnVsZSBpcyBub3QgdmVyeSBleHBsaWNpdCBiZWNhdXNlIHRoZXJlIGlzIG5vIHRpbWUgc2VsZWN0b3IgYmVpbmcgdXNlZC4gQSB0aW1lIHNlbGVjdG9yIGlzIHRoZSBwYXJ0IHNwZWNpZnlpbmcgaG91cnMgd2hlbiB0aGUgb2JqZWN0IGlzIG9wZW5lZCwgZm9yIGV4YW1wbGUgXFxcIjEwOjAwLTE5OjAwXFxcIi4gUGxlYXNlIGFkZCBhIHRpbWUgc2VsZWN0b3IgdG8gdGhpcyBydWxlIG9yIHVzZSBhIGNvbW1lbnQgdG8gbWFrZSBpdCBtb3JlIGV4cGxpY2l0LlwiLFxuICAgIFwiZW1wdHkgY29tbWVudFwiOlwiWW91IGhhdmUgdXNlZCBhbiBlbXB0eSBjb21tZW50LiBQbGVhc2UgZWl0aGVyIHdyaXRlIHNvbWV0aGluZyBpbiB0aGUgY29tbWVudCBvciB1c2UgdGhlIGtleXdvcmQgdW5rbm93biBpbnN0ZWFkLlwiLFxuICAgIHNlcGFyYXRvcl9mb3JfcmVhZGFiaWxpdHk6XCJZb3UgaGF2ZSB1c2VkIHRoZSBvcHRpb25hbCBzeW1ib2wgPHNlcGFyYXRvcl9mb3JfcmVhZGFiaWxpdHk+IGluIHRoZSB3cm9uZyBwbGFjZS4gUGxlYXNlIGNoZWNrIHRoZSBzeW50YXggc3BlY2lmaWNhdGlvbiB0byBzZWUgd2hlcmUgaXQgY291bGQgYmUgdXNlZCBvciByZW1vdmUgaXQuXCIsXG4gICAgXCJzdHJhbmdlIDI0LzdcIjpcIllvdSB1c2VkIDI0LzcgaW4gYSB3YXkgdGhhdCBpcyBwcm9iYWJseSBub3QgaW50ZXJwcmV0ZWQgYXMgXFxcIjI0IGhvdXJzIDcgZGF5cyBhIHdlZWtcXFwiLiBGb3IgY29ycmVjdG5lc3MgeW91IG1pZ2h0IHdhbnQgdG8gdXNlIFxcXCJvcGVuXFxcIiBvciBcXFwiY2xvc2VkXFxcIiBmb3IgdGhpcyBydWxlIGFuZCB0aGVuIHdyaXRlIHlvdXIgZXhjZXB0aW9ucyB3aGljaCBzaG91bGQgYWNoaWV2ZSB0aGUgc2FtZSBnb2FsIGFuZCBpcyBtb3JlIGNsZWFyIGUuZy4gXFxcIm9wZW47IE1vIDEyOjAwLTE0OjAwIG9mZlxcXCIuXCIsXG4gICAgXCJwdWJsaWMgaG9saWRheVwiOlwiVGhlcmUgd2FzIG5vIFBIIChwdWJsaWMgaG9saWRheSkgc3BlY2lmaWVkLiBUaGlzIGlzIG5vdCB2ZXJ5IGV4cGxpY2l0Lnt7cGFydDJ9fSBQbGVhc2UgZWl0aGVyIGFwcGVuZCBhIFxcXCJQSCBvZmZcXFwiIHJ1bGUgaWYgdGhlIGFtZW5pdHkgaXMgY2xvc2VkIG9uIGFsbCBwdWJsaWMgaG9saWRheXMgb3IgdXNlIHNvbWV0aGluZyBsaWtlIFxcXCJTYSxTdSxQSCAxMjowMC0xNjowMFxcXCIgdG8gc2F5IHRoYXQgb24gU2F0dXJkYXlzLCBTdW5kYXlzIGFuZCBvbiBwdWJsaWMgaG9saWRheXMgdGhlIGFtZW5pdHkgaXMgb3BlbiAxMjowMC0xNjowMC4gQmUgY2FyZWZ1bCB3aXRoIG9wZW5pbmcgaG91cnMgbGlrZSBcXFwiRnItU2EgMTg6MDAtMDY6MDBcXFwiIGJlY2F1c2UgXFxcIlBIIG9mZlxcXCIgYXBwbGllcyB0byAwMDowMC0yNDowMC4gU28gXFxcIkZyLVNhIDE4OjAwLTA2OjAwOyBQSCAxODowMC0wNjowMCBvZmZcXFwiIGlzIHByb2JhYmx5IHdoYXQgeW91IHdhbnQuIElmIHRoZSBhbWVuaXR5IGlzIG9wZW4gZXZlcnlkYXkgaW5jbHVkaW5nIHB1YmxpYyBob2xpZGF5cyB0aGVuIHlvdSBjYW4gbWFrZSB0aGlzIGV4cGxpY2l0IGJ5IHdyaXRpbmcgXFxcIk1vLVN1LFBIXFxcIi4gSWYgeW91IGFyZSBub3QgY2VydGFpbiB0cnkgdG8gZmluZCBpdCBvdXQuIElmIHlvdSBjYW7igJl0IHRoZW4gZG8gbm90IGFkZCBQSCB0byB0aGUgdmFsdWUgYW5kIGlnbm9yZSB0aGlzIHdhcm5pbmcuXCIsXG4gICAgXCJwdWJsaWMgaG9saWRheSBwYXJ0MlwiOlwiIFVuZm9ydHVuYXRlbHkgdGhlIHRhZyBrZXkgKGUuZy4gXFxcIm9wZW5pbmdfaG91cnNcXFwiLCBvciBcXFwibGl0XFxcIikgaXMgdW5rbm93biB0byBvcGVuaW5nX2hvdXJzLmpzLiBUaGlzIHdhcm5pbmcgb25seSBhcHBsaWVzIHRvIHRoZSBrZXkge3trZXlzfX0uIElmIHlvdXIgdmFsdWUgaXMgZm9yIHRoYXQga2V5IHRoYW4gcmVhZCBvbi4gSWYgbm90IHlvdSBjYW4gaWdub3JlIHRoZSBmb2xsb3dpbmcuXCIsXG4gICAgXCJhZGRpdGlvbmFsX3J1bGVfc2VwYXJhdG9yIG5vdCB1c2VkIGFmdGVyIHRpbWUgd3JhcHBpbmcgbWlkbmlnaHRcIjpcIlRoaXMgcnVsZSBvdmVyd3JpdGVzIHBhcnRzIG9mIHRoZSBwcmV2aW91cyBydWxlLiBUaGlzIGhhcHBlbnMgYmVjYXVzZSBub3JtYWwgcnVsZXMgYXBwbHkgdG8gdGhlIHdob2xlIGRheSBhbmQgb3ZlcndyaXRlIGFueSBkZWZpbml0aW9uIG1hZGUgYnkgcHJldmlvdXMgcnVsZXMuIFlvdSBjYW4gbWFrZSB0aGlzIHJ1bGUgYW4gYWRkaXRpb25hbCBydWxlIGJ5IHVzaW5nIGEgXFxcIixcXFwiIGluc3RlYWQgb2YgdGhlIG5vcm1hbCBcXFwiO1xcXCIgdG8gc2VwYXJhdGUgdGhlIHJ1bGVzLiBOb3RlIHRoYXQgdGhlIG92ZXJ3cml0aW5nIGNhbiBhbHNvIGJlIGRlc2lyYWJsZSBpbiB3aGljaCBjYXNlIHlvdSBjYW4gaWdub3JlIHRoaXMgd2FybmluZy5cIixcbiAgICBcImFkZGl0aW9uYWwgcnVsZSB3aGljaCBldmFsdWF0ZXMgdG8gY2xvc2VkXCI6XCJUaGlzIHJ1bGUgd2lsbCBiZSBldmFsdWF0ZWQgYXMgY2xvc2VkIGJ1dCBpdCB3YXMgc3BlY2lmaWVkIGFzIGFkZGl0aW9uYWwgcnVsZS4gSXQgc2hvdWxkIGJlIHNwZWNpZmllZCBhcyBub3JtYWwgcnVsZSB1c2luZyBcXFwiO1xcXCIgYXMgcnVsZSBzZXBhcmF0b3IuIFNlZSBodHRwczovL3dpa2kub3BlbnN0cmVldG1hcC5vcmcvd2lraS9LZXk6b3BlbmluZ19ob3Vycy9zcGVjaWZpY2F0aW9uI2V4cGxhaW46cnVsZV9tb2RpZmllcjpjbG9zZWQuXCIsXG4gICAgc3dpdGNoZWQ6XCJUaGUgc2VsZWN0b3IgXFxcInt7Zmlyc3R9fVxcXCIgd2FzIHN3aXRjaGVkIHdpdGggdGhlIHNlbGVjdG9yIFxcXCJ7e3NlY29uZH19XFxcIiBmb3IgcmVhZGFiaWxpdHkgYW5kIGNvbXBhdGliaWxpdHkgcmVhc29ucy5cIixcbiAgICBcIm5vIGNvbG9uIGFmdGVyXCI6XCJQbGVhc2UgZG9u4oCZdCB1c2UgXFxcIjpcXFwiIGFmdGVyIHt7dG9rZW59fS5cIixcbiAgICBcIm51bWJlciAtNSB0byA1XCI6XCJOdW1iZXIgYmV0d2VlbiAtNSBhbmQgNSAoZXhjZXB0IDApIGV4cGVjdGVkLlwiLFxuICAgIFwib25lIHdlZWtkYXkgY29uc3RyYWludFwiOlwiWW91IGNhbiBub3QgdXNlIG1vcmUgdGhhbiBvbmUgY29uc3RyYWluZWQgd2Vla2RheSBpbiBhIG1vbnRoIHJhbmdlXCIsXG4gICAgXCJyYW5nZSBjb25zdHJhaW5lZCB3ZWVrZGF5c1wiOlwiWW91IGNhbiBub3QgdXNlIGEgcmFuZ2Ugb2YgY29uc3RyYWluZWQgd2Vla2RheXMgaW4gYSBtb250aCByYW5nZVwiLFxuICAgIGV4cGVjdGVkOlwiXFxcInt7c3ltYm9sfX1cXFwiIGV4cGVjdGVkLlwiLFxuICAgIFwicmFuZ2UgemVyb1wiOlwiWW91IGNhbiBub3QgdXNlIHt7dHlwZX19IHJhbmdlcyB3aXRoIHBlcmlvZCBlcXVhbHMgemVyby5cIixcbiAgICBcInBlcmlvZCBvbmUgeWVhcitcIjpcIlBsZWFzZSBkb27igJl0IHVzZSB7e3R5cGV9fSByYW5nZXMgd2l0aCBwZXJpb2QgZXF1YWxzIG9uZS4gSWYgeW91IHdhbnQgdG8gZXhwcmVzcyB0aGF0IGEgZmFjaWxpdHkgaXMgb3BlbiBzdGFydGluZyBmcm9tIGEgeWVhciB3aXRob3V0IGxpbWl0IHVzZSBcXFwiPHllYXI+K1xcXCIuXCIsXG4gICAgXCJwZXJpb2Qgb25lXCI6XCJQbGVhc2UgZG9u4oCZdCB1c2Uge3t0eXBlfX0gcmFuZ2VzIHdpdGggcGVyaW9kIGVxdWFscyBvbmUuXCIsXG4gICAgXCJtb250aCAzMVwiOlwiVGhlIGRheSBmb3Ige3ttb250aH19IG11c3QgYmUgYmV0d2VlbiAxIGFuZCAzMS5cIixcbiAgICBcIm1vbnRoIDMwXCI6XCJNb250aCB7e21vbnRofX0gZG9lc24ndCBoYXZlIDMxIGRheXMuIFRoZSBsYXN0IGRheSBvZiB7e21vbnRofX0gaXMgZGF5IDMwLlwiLFxuICAgIFwibW9udGggZmViXCI6XCJNb250aCB7e21vbnRofX0gZWl0aGVyIGhhcyAyOCBvciAyOSBkYXlzIChsZWFwIHllYXJzKS5cIixcbiAgICBcInBvaW50IGluIHRpbWVcIjpcImh5cGhlbiAoLSkgb3Igb3BlbiBlbmQgKCspIGluIHRpbWUgcmFuZ2Uge3tjYWxjfX1leHBlY3RlZC4gRm9yIHdvcmtpbmcgd2l0aCBwb2ludHMgaW4gdGltZSwgdGhlIG1vZGUgZm9yIHt7bGlicmFyeW5hbWV9fSBoYXMgdG8gYmUgYWx0ZXJlZC4gTWF5YmUgd3JvbmcgdGFnP1wiLFxuICAgIGNhbGN1bGF0aW9uOlwiY2FsY3VsYXRpb25cIixcbiAgICBcInRpbWUgcmFuZ2UgY29udGludWVcIjpcIlRpbWUgcmFuZ2UgZG9lcyBub3QgY29udGludWUgYXMgZXhwZWN0ZWRcIixcbiAgICBcInBlcmlvZCBjb250aW51ZVwiOlwiVGltZSBwZXJpb2QgZG9lcyBub3QgY29udGludWUgYXMgZXhwZWN0ZWQuIEV4YW1wbGUgXFxcIi8wMTozMFxcXCIuXCIsXG4gICAgXCJ0aW1lIHJhbmdlIG1vZGVcIjpcInt7bGlicmFyeW5hbWV9fSBpcyBydW5uaW5nIGluIFxcXCJ0aW1lIHJhbmdlIG1vZGVcXFwiLiBGb3VuZCBwb2ludCBpbiB0aW1lLlwiLFxuICAgIFwicG9pbnQgaW4gdGltZSBtb2RlXCI6XCJ7e2xpYnJhcnluYW1lfX0gaXMgcnVubmluZyBpbiBcXFwicG9pbnRzIGluIHRpbWUgbW9kZVxcXCIuIEZvdW5kIHRpbWUgcmFuZ2UuXCIsXG4gICAgXCJvdXRzaWRlIGN1cnJlbnQgZGF5XCI6XCJUaW1lIHJhbmdlIHN0YXJ0cyBvdXRzaWRlIG9mIHRoZSBjdXJyZW50IGRheVwiLFxuICAgIFwidHdvIG1pZG5pZ2h0c1wiOlwiVGltZSBzcGFubmluZyBtb3JlIHRoYW4gdHdvIG1pZG5pZ2h0cyBub3Qgc3VwcG9ydGVkXCIsXG4gICAgXCJ3aXRob3V0IG1pbnV0ZXNcIjpcIlRpbWUgcmFuZ2Ugd2l0aG91dCBtaW51dGVzIHNwZWNpZmllZC4gTm90IHZlcnkgZXhwbGljaXQhIFBsZWFzZSB1c2UgdGhpcyBzeW50YXggaW5zdGVhZCBcXFwie3tzeW50YXh9fVxcXCIuXCIsXG4gICAgXCJvdXRzaWRlIGRheVwiOlwiVGltZSByYW5nZSBzdGFydHMgb3V0c2lkZSBvZiB0aGUgY3VycmVudCBkYXlcIixcbiAgICBcInplcm8gY2FsY3VsYXRpb25cIjpcIkFkZGluZyB6ZXJvIGluIGEgdmFyaWFibGUgdGltZSBjYWxjdWxhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhcmlhYmxlIHRpbWUuIFBsZWFzZSBvbWl0IHRoZSBjYWxjdWxhdGlvbiAoZXhhbXBsZTogXFxcInN1bnJpc2UtKHN1bnNldC0wMDowMClcXFwiKS5cIixcbiAgICBcImNhbGN1bGF0aW9uIHN5bnRheFwiOlwiQ2FsY3VsYXRpb24gd2l0aCB2YXJpYWJsZSB0aW1lIGlzIG5vdCBpbiB0aGUgcmlnaHQgc3ludGF4XCIsXG4gICAgbWlzc2luZzpcIk1pc3NpbmcgXFxcInt7c3ltYm9sfX1cXFwiXCIsXG4gICAgXCIodGltZSlcIjpcIih0aW1lKVwiLFxuICAgIFwiYmFkIHJhbmdlXCI6XCJCYWQgcmFuZ2U6IHt7ZnJvbX19LXt7dG99fVwiLFxuICAgIFwiXSBvciBtb3JlIG51bWJlcnNcIjpcIlxcXCJdXFxcIiBvciBtb3JlIG51bWJlcnMgZXhwZWN0ZWQuXCIsXG4gICAgXCJhZGRpdGlvbmFsIHJ1bGUgbm8gc2Vuc2VcIjpcIkFuIGFkZGl0aW9uYWwgcnVsZSBkb2VzIG5vdCBtYWtlIHNlbnNlIGhlcmUuIEp1c3QgdXNlIGEgXFxcIjtcXFwiIGFzIHJ1bGUgc2VwYXJhdG9yLiBTZWUgaHR0cHM6Ly93aWtpLm9wZW5zdHJlZXRtYXAub3JnL3dpa2kvS2V5Om9wZW5pbmdfaG91cnMvc3BlY2lmaWNhdGlvbiNleHBsYWluOmFkZGl0aW9uYWxfcnVsZV9zZXBhcmF0b3JcIixcbiAgICBcInVuZXhwZWN0ZWQgdG9rZW4gd2Vla2RheSByYW5nZVwiOlwiVW5leHBlY3RlZCB0b2tlbiBpbiB3ZWVrZGF5IHJhbmdlOiB7e3Rva2VufX1cIixcbiAgICBcIm1heCBkaWZmZXJcIjpcIlRoZXJlIHNob3VsZCBiZSBubyByZWFzb24gdG8gZGlmZmVyIG1vcmUgdGhhbiB7e21heGRpZmZlcn19IGRheXMgZnJvbSBhIHt7bmFtZX19LiBJZiBzbyB0ZWxsIHVzIOKAplwiLFxuICAgIFwiYWRkaW5nIDBcIjpcIkFkZGluZyAwIGRvZXMgbm90IGNoYW5nZSB0aGUgZGF0ZS4gUGxlYXNlIG9taXQgdGhpcy5cIixcbiAgICBcInVuZXhwZWN0ZWQgdG9rZW4gaG9saWRheVwiOlwiVW5leHBlY3RlZCB0b2tlbiAoaG9saWRheSBwYXJzZXIpOiB7e3Rva2VufX1cIixcbiAgICBcIm5vIGhvbGlkYXkgZGVmaW5pdGlvblwiOlwiVGhlcmUgYXJlIG5vIGhvbGlkYXlzICh7e25hbWV9fSkgZGVmaW5lZCBmb3IgY291bnRyeSB7e2NjfX0uXCIsXG4gICAgXCJubyBob2xpZGF5IGRlZmluaXRpb24gc3RhdGVcIjpcIlRoZXJlIGFyZSBubyBob2xpZGF5cyAoe3tuYW1lfX0pIGRlZmluZWQgZm9yIGNvdW50cnkge3tjY319IGFuZCBzdGF0ZSB7e3N0YXRlfX0uXCIsXG4gICAgXCJubyBjb3VudHJ5IGNvZGVcIjpcIkNvdW50cnkgY29kZSBtaXNzaW5nIHdoaWNoIGlzIG5lZWRlZCB0byBzZWxlY3QgdGhlIGNvcnJlY3QgaG9saWRheXMgKHNlZSBSRUFETUUgaG93IHRvIHByb3ZpZGUgaXQpXCIsXG4gICAgXCJubyBTSCBkZWZpbml0aW9uXCI6XCJTY2hvb2wgaG9saWRheSB7e25hbWV9fW5vdCBkZWZpbmVkIGZvciB0aGUgeWVhciB7e3llYXJ9fS5cIixcbiAgICBcIm1vdmFibGUgbm8gZm9ybXVsYVwiOlwiTW92YWJsZSBkYXkge3tuYW1lfX0gY2FuIG5vdCBub3QgYmUgY2FsY3VsYXRlZC4gUGxlYXNlIGFkZCB0aGUgZm9ybXVsYSBob3cgdG8gY2FsY3VsYXRlIGl0LlwiLFxuICAgIFwibW92YWJsZSBub3QgaW4geWVhclwiOlwiVGhlIG1vdmFibGUgZGF5IHt7bmFtZX19IHBsdXMge3tkYXlzfX0gZGF5cyBpcyBub3QgaW4gdGhlIHllYXIgb2YgdGhlIG1vdmFibGUgZGF5IGFueW1vcmUuIEN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLlwiLFxuICAgIFwieWVhciByYW5nZSBvbmUgeWVhclwiOlwiQSB5ZWFyIHJhbmdlIGluIHdoaWNoIHRoZSBzdGFydCB5ZWFyIGlzIGVxdWFsIHRvIHRoZSBlbmQgeWVhciBkb2VzIG5vdCBtYWtlIHNlbnNlLiBQbGVhc2UgcmVtb3ZlIHRoZSBlbmQgeWVhci4gRS5nLiBcXFwie3t5ZWFyfX0gTWF5IDIzXFxcIlwiLFxuICAgIFwieWVhciByYW5nZSByZXZlcnNlXCI6XCJBIHllYXIgcmFuZ2UgaW4gd2hpY2ggdGhlIHN0YXJ0IHllYXIgaXMgZ3JlYXRlciB0aGFuIHRoZSBlbmQgeWVhciBkb2VzIG5vdCBtYWtlIHNlbnNlLiBQbGVhc2UgdHVybiBpdCBvdmVyLlwiLFxuICAgIFwieWVhciBwYXN0XCI6XCJUaGUgeWVhciBpcyBpbiB0aGUgcGFzdC5cIixcbiAgICBcInVuZXhwZWN0ZWQgdG9rZW4geWVhciByYW5nZVwiOlwiVW5leHBlY3RlZCB0b2tlbiBpbiB5ZWFyIHJhbmdlOiB7e3Rva2VufX1cIixcbiAgICBcIndlZWsgcmFuZ2UgcmV2ZXJzZVwiOlwiWW91IGhhdmUgc3BlY2lmaWVkIGEgd2VlayByYW5nZSBpbiByZXZlcnNlIG9yZGVyIG9yIGxlYXBpbmcgb3ZlciBhIHllYXIuIFRoaXMgaXMgKGN1cnJlbnRseSkgbm90IHN1cHBvcnRlZC5cIixcbiAgICBcIndlZWsgbmVnYXRpdmVcIjpcIllvdSBoYXZlIHNwZWNpZmllZCBhIHdlZWsgZGF0ZSBsZXNzIHRoZW4gb25lLiBBIHZhbGlkIHdlZWsgZGF0ZSByYW5nZSBpcyAxLTUzLlwiLFxuICAgIFwid2VlayBleGNlZWRcIjpcIllvdSBoYXZlIHNwZWNpZmllZCBhIHdlZWsgZGF0ZSBncmVhdGVyIHRoZW4gNTMuIEEgdmFsaWQgd2VlayBkYXRlIHJhbmdlIGlzIDEtNTMuXCIsXG4gICAgXCJ3ZWVrIHBlcmlvZCBsZXNzIHRoYW4gMlwiOlwiWW91IGhhdmUgc3BlY2lmaWVkIGEgd2VlayBwZXJpb2Qgd2hpY2ggaXMgbGVzcyB0aGFuIHR3by4gSWYgeW91IHdhbnQgdG8gc2VsZWN0IHRoZSB3aG9sZSByYW5nZSBmcm9tIHdlZWsge3t3ZWVrZnJvbX19IHRvIHdlZWsge3t3ZWVrdG99fSB0aGVuIGp1c3Qgb21pdCB0aGUgXFxcIi97e3BlcmlvZH19XFxcIi5cIixcbiAgICBcIndlZWsgcGVyaW9kIGdyZWF0ZXIgdGhhbiAyNlwiOlwiWW91IGhhdmUgc3BlY2lmaWVkIGEgd2VlayBwZXJpb2Qgd2hpY2ggaXMgZ3JlYXRlciB0aGFuIDI2LiAyNi41IGlzIHRoZSBoYWxmIG9mIHRoZSBtYXhpbXVtIDUzIHdlZWsgZGF0ZXMgcGVyIHllYXIgc28gYSB3ZWVrIGRhdGUgcGVyaW9kIGdyZWF0ZXIgdGhhbiAyNiB3b3VsZCBvbmx5IGFwcGx5IG9uY2UgcGVyIHllYXIuIFBsZWFzZSBzcGVjaWZ5IHRoZSB3ZWVrIHNlbGVjdG9yIGFzIFxcXCJ3ZWVrIHt7d2Vla2Zyb219fVxcXCIgaWYgdGhhdCBpcyB3aGF0IHlvdSB3YW50IHRvIGV4cHJlc3MuXCIsXG4gICAgXCJ1bmV4cGVjdGVkIHRva2VuIHdlZWsgcmFuZ2VcIjpcIlVuZXhwZWN0ZWQgdG9rZW4gaW4gd2VlayByYW5nZToge3t0b2tlbn19XCIsXG4gICAgXCJ1bmV4cGVjdGVkIHRva2VuIG1vbnRoIHJhbmdlXCI6XCJVbmV4cGVjdGVkIHRva2VuIGluIG1vbnRoIHJhbmdlOiB7e3Rva2VufX1cIixcbiAgICBcImRheSByYW5nZSByZXZlcnNlXCI6XCJSYW5nZSBpbiB3cm9uZyBvcmRlci4gRnJvbSBkYXkgaXMgZ3JlYXRlciB0aGFuIHRvIGRheS5cIixcbiAgICBcIm9wZW4gZW5kXCI6XCJTcGVjaWZpZWQgYXMgb3BlbiBlbmQuIENsb3NpbmcgdGltZSB3YXMgZ3Vlc3NlZC5cIixcbiAgICBcImRhdGUgcGFyYW1ldGVyIG5lZWRlZFwiOlwiRGF0ZSBwYXJhbWV0ZXIgbmVlZGVkLlwiLFxuICAgIFwiYXNzdW1pbmcgb2sgZm9yIGtvXCI6XCJBc3N1bWluZyBcXFwie3tva319XFxcIiBmb3IgXFxcInt7a299fVxcXCIuXCIsXG4gICAgXCJwbGVhc2UgdXNlIG9rIGZvciBrb1wiOlwiUGxlYXNlIHVzZSBub3RhdGlvbiBcXFwie3tva319XFxcIiBmb3IgXFxcInt7a299fVxcXCIuXCIsXG4gICAgXCJwbGVhc2UgdXNlIG9rIGZvciBzaW1pbGFyIGxvb2tpbmcga29cIjpcIlBsZWFzZSB1c2Ugbm90YXRpb24gXFxcInt7b2t9fVxcXCIgZm9yIFxcXCJ7e2tvfX1cXFwiLiBUaG9zZSBjaGFyYWN0ZXJzIGxvb2sgdmVyeSBzaW1pbGFyIGJ1dCBhcmUgbm90IHRoZSBzYW1lIVwiLFxuICAgIFwicmFudCBkZWdyZWUgc2lnbiB1c2VkIGZvciB6ZXJvXCI6XCJOb3RlIHRoYXQgdGhpcyBpcyBub3QgYSAoc3VwZXJzY3JpcHQpIHplcm8gYnV0IGEgZGVncmVlIHNpZ24gd2hpY2ggaXMgbWlzdXNlZCBhcyB6ZXJvLiBBIHN1cGVyc2NyaXB0IHplcm8gaXMgZGVmaW5lZCBpbiBVbmljb2RlICjCsCkgYW5kIHdvdWxkIGhhdmUgYmVlbiBtb3JlIGFwcHJvcHJpYXRlL3VuaWZvcm0gaGVyZS4gQnV0IG5vdGUgdGhhdCB0aGUgdXNlIG9mIG5vbmUtQVNDSUkgZGlnaXRzIGlzIG5vdCBhbGxvd2VkLlwiLFxuICAgIFwicGxlYXNlIHVzZSBFbmdsaXNoIHdyaXR0ZW4gb2sgZm9yIGtvXCI6XCJQbGVhc2UgdXNlIHRoZSBFbmdsaXNoIHdyaXR0ZW4gXFxcInt7b2t9fVxcXCIgZm9yIFxcXCJ7e2tvfX1cXFwiLlwiLFxuICAgIFwicGxlYXNlIHVzZSBFbmdsaXNoIGFiYnJldmlhdGlvbiBvayBmb3Iga29cIjpcIlBsZWFzZSB1c2UgdGhlIEVuZ2xpc2ggYWJicmV2aWF0aW9uIFxcXCJ7e29rfX1cXFwiIGZvciBcXFwie3trb319XFxcIi5cIixcbiAgICBcInBsZWFzZSB1c2UgRW5nbGlzaCBhYmJyZXZpYXRpb24gb2sgZm9yIHNvXCI6XCJQbGVhc2UgdXNlIHRoZSBFbmdsaXNoIGFiYnJldmlhdGlvbiBcXFwie3tva319XFxcIiBmb3IgXFxcInt7a299fVxcXCIuIE5vdGUgdGhhdCBpdCBtaWdodCBhbHNvIG1lYW4gU2F0dXJkYXkgaW4gUG9saXNoLlwiLFxuICAgIFwicGxlYXNlIHVzZSBvZmYgZm9yIGtvXCI6XCJQbGVhc2UgdXNlIFxcXCJ7e29rfX1cXFwiIGZvciBcXFwie3trb319XFxcIi4gRXhhbXBsZTogXFxcIk1vLUZyIDA4OjAwLTEyOjAwOyBUdSBvZmZcXFwiLlwiLFxuICAgIFwicGxlYXNlIHVzZSBvayBmb3Igd29ya2RheVwiOlwiQXNzdW1pbmcgXFxcInt7b2t9fVxcXCIgZm9yIFxcXCJ7e2tvfX1cXFwiLiBQbGVhc2UgYXZvaWQgdXNpbmcgXFxcIndvcmtkYXlcXFwiOiBodHRwczovL3dpa2kub3BlbnN0cmVldG1hcC5vcmcvd2lraS9UYWxrOktleTpvcGVuaW5nX2hvdXJzI25lZWRfc3ludGF4X2Zvcl9ob2xpZGF5c19hbmRfd29ya2luZ2RheXNcIixcbiAgICBcIm9taXQgaG91ciBrZXl3b3JkXCI6XCJQbGVhc2Ugb21pdCBcXFwie3trb319XFxcIiBvciB1c2UgYSBjb2xvbiBpbnN0ZWFkLiBFeGFtcGxlOiBcXFwiMTI6MDAtMTQ6MDBcXFwiLlwiLFxuICAgIFwib21pdCBrb1wiOlwiUGxlYXNlIG9taXQgXFxcInt7a299fVxcXCIuXCIsXG4gICAgXCJvbWl0IHRhZyBrZXlcIjpcIlBsZWFzZSBvbWl0IFxcXCJ7e2tvfX1cXFwiLiBUaGUgdGFnIGtleSBtdXN0IG5vdCBiZSBpbiB0aGUgdGFnIHZhbHVlLlwiLFxuICAgIFwib21pdCB3cm9uZyBrZXl3b3JkIG9wZW4gZW5kXCI6XCJQbGVhc2Ugb21pdCBcXFwie3trb319XFxcIi4gVGhlIHRhZyBrZXkgbXVzdCBub3QgYmUgaW4gdGhlIHRhZyB2YWx1ZS5cIixcbiAgICBcImFzc3VtaW5nIG9wZW4gZW5kIGZvciBrb1wiOlwiQXNzdW1pbmcgXFxcInt7b2t9fVxcXCIgKG9wZW4gZW5kIHRpbWUpIGZvciBcXFwie3trb319XFxcIi4gRXhhbXBsZTogXFxcIjEyOjAwK1xcXCIuXCIsXG4gICAgXCJwbGVhc2UgdXNlIG9rIGZvciB1bmNlcnRhaW50eVwiOlwiUGxlYXNlIHVzZSBub3RhdGlvbiBcXFwie3tva319XFxcIiBmb3IgXFxcInt7a299fVxcXCIuIElmIHRoZXJlIGlzIHJlYXNvbiB0byBzdXNwZWN0IHVuY2VydGFpbnR5IGNvbnNpZGVyIGFkZGluZyBhIGNvbW1lbnQuIEV4YW1wbGU6IDEyOjAwLTE0OjAwIFxcXCJvbmx5IG9uIHN1bnNoaW5lXFxcIi5cIixcbiAgICBcInBsZWFzZSB1c2UgZmFsbGJhY2sgcnVsZVwiOlwiUGxlYXNlIHVzZSBub3RhdGlvbiBcXFwie3tva319XFxcIiAoRmFsbGJhY2sgcnVsZSkgZm9yIFxcXCJ7e2tvfX1cXFwiLiBFeGFtcGxlOiBNby1GciAxMjowMC0xNDowMDsgUEggb2ZmIHx8IFxcXCJieSBhcHBvaW50bWVudFxcXCJcIixcbiAgICBcInBsZWFzZSB1c2Ugb2sgZm9yIG1pc3NpbmcgZGF0YVwiOlwiUGxlYXNlIGNvbnNpZGVyIGFkZGluZyBhIEZJWE1FIHRhZyBpbnN0ZWFkLlwiLFxuICAgIFwicGxlYXNlIHVzZSAyNCBob3VycyB0aW1lIGZvciBrb1wiOlwiUGxlYXNlIHVzZSB0aW1lIGZvcm1hdCBpbiAyNCBob3VycyBub3RhdGlvbiBpbnN0ZWFkIG9mIHRoZSBsZWdhY3kgMTIgaG91cnMgdmFyaWFudC4gSWYgdGhlIDEyIGhvdXJzIHZhcmlhbnQgaXMgdXNlZCB5b3UgbWlnaHQgaGF2ZSB0byBjb252ZXJ0IHRoZSBob3VycyB0byB0aGUgMjQgaG91cnMgbm90YXRpb24uXCIsXG4gICAgXCJwbGVhc2UgdXNlIHJlc3RyaWN0aW9uIGNvbW1lbnQgdGltZSBmb3Iga29cIjpcIkl0IGxvb2tzIGxpa2UgeW91IG1pZ2h0IHdhbnQgdG8gZGVmaW5lIGFkZGl0aW9uYWwgcmVzdHJpY3Rpb25zLiBJZiB0aGF0IGlzIHRoZSBjYXNlIGFuZCB0aGV5IGNhbiBub3QgYmUgZXhwcmVzc2VkIGJ5IG90aGVyIHN5bnRheCBlbGVtZW50cyB0aGVuIHlvdSBjb3VsZCB1c2UgYSBjb21tZW50IHRvZ2V0aGVyIHdpdGggdGhlIGBvcGVuYCBrZXl3b3JkLiBFeGFtcGxlOiBvcGVuIFxcXCJmZW1hbGUgb25seVxcXCJcIixcbiAgICBcInBsZWFzZSB1c2Ugb2sgZm9yIHR5cG9ncmFwaGljYWxseSBjb3JyZWN0XCI6XCJQbGVhc2UgdXNlIG5vdGF0aW9uIFxcXCJ7e29rfX1cXFwiIGZvciBcXFwie3trb319XFxcIi4gQWx0aG91Z2ggdXNpbmcgXFxcInt7a299fVxcXCIgaXMgdHlwb2dyYXBoaWNhbCBjb3JyZWN0LCBpdCBpcyBub3QgZGVmaW5lZCBpbiB0aGUgb3BlbmluZ19ob3VycyBzeW50YXguIENvcnJlY3QgdHlwb2dyYXBoeSBzaG91bGQgYmUgZG9uZSBvbiBhcHBsaWNhdGlvbiBsZXZlbCDigKZcIiB9O1xuXG4gIHZhciBkYXRhID0geyBlbjp7IG9wZW5pbmdfaG91cnM6eyBwcmV0dHk6eyBvZmY6XCJjbG9zZWRcIixcbiAgICAgICAgICBTSDpcInNjaG9vbCBob2xpZGF5c1wiLFxuICAgICAgICAgIFBIOlwicHVibGljIGhvbGlkYXlzXCIgfSB9IH0sXG4gICAgZGU6eyBvcGVuaW5nX2hvdXJzOnsgdGV4dHM6eyBcInVuZXhwZWN0ZWQgdG9rZW5cIjpcIlVuZXJ3YXJ0ZXRlcyBaZWljaGVuOiBcXFwie3t0b2tlbn19XFxcIiBEYXMgYmVkZXV0ZXQsIGRhc3MgZGllIFN5bnRheCBhbiBkaWVzZXIgU3RlbGxlIG5pY2h0IGVya2FubnQgd2VyZGVuIGtvbm50ZS5cIixcbiAgICAgICAgICBcIm5vIHN0cmluZ1wiOlwiRGVyIFdlcnQgKGVyc3RlciBQYXJhbWV0ZXIpIGlzdCBrZWluIFN0cmluZ1wiLFxuICAgICAgICAgIG5vdGhpbmc6XCJEZXIgV2VydCBlbnRow6RsdCBuaWNodHMsIHdhcyBhdXNnZXdlcnRldCB3ZXJkZW4ga8O2bm50ZS5cIixcbiAgICAgICAgICBcIm5vdGhpbmcgdXNlZnVsXCI6XCJEaWVzZSBSZWdlbCBlbnRow6RsdCBuaWNodHMgbsO8dHpsaWNoZXMuIEJpdHRlIGVudGZlcm5lIGRpZXNlIGxlZXJlIFJlZ2VsLlwiLFxuICAgICAgICAgIFwiY29tYmluZSBydWxlc1wiOlwiR2V0cmVubnRlIFJlZ2VsbiBlcmthbm50IHdlbGNoZSBqZXdlaWxzIG51ciBhdXMgZWluZXIgWmVpdCBCZXJlaWNoc2RlZmluaXRpb24gYmVzdGVoZW4uIERpZXNlIFJlZ2VsbiBzb2xsdGVuIG1pdHRlbHMgXFxcInt7b2t9fVxcXCIgenUgZWluZXIgUmVnZWwga29tYmluaWVydCB3ZXJkZW4uXCIsXG4gICAgICAgICAgXCJ2YWx1ZSBlbmRzIHdpdGggdG9rZW5cIjpcIkRlciBXZXJ0IGVuZGV0IG1pdCBcXFwie3t0b2tlbn19XFxcIi4gQml0dGUgZXJnw6RuemUgZGVuIFdlcnQgbmFjaCBcXFwie3t0b2tlbn19XFxcIiBvZGVyIGzDtnNjaGUgXFxcInt7dG9rZW59fVxcXCIuXCIsXG4gICAgICAgICAgXCJwcm9ncmFtbWVycyBqb2tlXCI6XCJLYW5uIGVzIHNlaW4sIGRhc3MgZHUgZWluIFByb2dyYW1taWVyZXIgYmlzdCB1bmQgZGFzIEhpbnp1ZsO8Z2VuIGVpbmVzIFNlbWlrb2xvbnMgbmFjaCBqZWRlbSBTdGF0ZW1lbnQgaXN0IHp3YW5naGFmdCA7KSA/IEVzIGlzdCBzbywgZGFzcyBkYXMgU2VtaWtvbG9uIGluIGRlciBvcGVuaW5nX2hvdXJzLVN5bnRheCBhbHMgVHJlbm5lciBmw7xyIFJlZ2VsbiBkZWZpbmllcnQgaXN0LiBCaXR0ZSB2ZXJ6aWNodGUgYW4gZGllc2VyIFN0ZWxsZSBhdWYgZWluIFNlbWlrb2xvbi5cIixcbiAgICAgICAgICBcImludGVycHJldGVkIGFzIHllYXJcIjpcIkRpZSBaYWhsIHt7bnVtYmVyfX0gd2lyZCBhbHMgSmFociBpbnRlcnByZXRpZXJ0LiBWZXJtdXRsaWNoIGlzdCBkYXMgbmljaHQgYmVhYnNpY2h0aWd0LiBVaHJ6ZWl0ZW4gd2VyZGVuIGFscyBcXFwiMTI6MDBcXFwiIGFuZ2VnZWJlbi5cIixcbiAgICAgICAgICBcInJ1bGUgYmVmb3JlIGZhbGxiYWNrIGVtcHR5XCI6XCJEaWUgUmVnZWwgdm9yIGRlciBGYWxsYmFjay1SZWdlbCBlbnRow6RsdCBuaWNodHMgbsO8dHpsaWNoZXNcIixcbiAgICAgICAgICBcImhvdXIgbWluIHNlcGFyYXRvclwiOlwiQml0dGUgYmVudXR6ZSBcXFwiOlxcXCIgYWxzIFN0dW5kZW4vTWludXRlbi1UcmVubmVyXCIsXG4gICAgICAgICAgXCJ3YXJuaW5ncyBzZXZlcml0eVwiOlwiRGVyIFBhcmFtZXRlciBvcHRpb25hbF9jb25mX3Bhcm1bXFxcIndhcm5pbmdzX3NldmVyaXR5XFxcIl0gbXVzcyBlaW5lIGdhbnplIFphaGwgendpc2NoZW4gKGVpbnNjaGxpZcOfbGljaCkgMCB1bmQgKGVpbnNjaGxpZcOfbGljaCkgNyBzZWluLiBHZWdlYmVuOiB7e3NldmVyaXR5fX0sIGVyd2FydGV0OiBFaW5lIGRlciBaYWhsZW46IHt7YWxsb3dlZH19LlwiLFxuICAgICAgICAgIFwib3B0aW9uYWwgY29uZiBwYXJtIHR5cGVcIjpcIkRlciBvcHRpb25hbF9jb25mX3Bhcm0gUGFyYW1ldGVyIGhhdCBlaW5lbiB1bmJla2FubnRlbiBUeXAuIEdlZ2ViZW46IHt7Z2l2ZW59fVwiLFxuICAgICAgICAgIFwiY29uZiBwYXJhbSB0YWcga2V5IG1pc3NpbmdcIjpcIkRlciBvcHRpb25hbF9jb25mX3Bhcm1bXFxcInRhZ19rZXlcXFwiXSBmZWhsdCwgaXN0IGFiZXIgbm90d2VuZGlnIHdlZ2VuIG9wdGlvbmFsX2NvbmZfcGFybVtcXFwibWFwX3ZhbHVlXFxcIl0uXCIsXG4gICAgICAgICAgXCJjb25mIHBhcmFtIG1vZGUgaW52YWxpZFwiOlwiRGVyIG9wdGlvbmFsX2NvbmZfcGFybVtcXFwibW9kZVxcXCJdLVBhcmFtZXRlciBpc3QgZWluZSB1bmfDvGx0aWdlIFphaGwuIEdlZ2ViZW46IHt7Z2l2ZW59fSwgZXJ3YXJ0ZXQ6IEVpbmUgZGVyIFphaGxlbjoge3thbGxvd2VkfX0uXCIsXG4gICAgICAgICAgXCJjb25mIHBhcmFtIHVua25vd24gdHlwZVwiOlwiRGVyIG9wdGlvbmFsX2NvbmZfcGFybVtcXFwie3trZXl9fVxcXCJdIFBhcmFtZXRlciBoYXQgZWluZW4gdW5iZWthbm50ZW4gVHlwLiBHZWdlYmVuOiB7e2dpdmVufX0sIGVyd2FydGV0OiB7e2V4cGVjdGVkfX0uXCIsXG4gICAgICAgICAgXCJsaWJyYXJ5IGJ1Z1wiOlwiQmVpIGRlciBBdXN3ZXJ0dW5nIGRlcyBXZXJ0ZXMgXFxcInt7dmFsdWV9fVxcXCIgaXN0IGVpbiBGZWhsZXIgYXVmZ2V0cmV0ZW4uIEJpdHRlIG1lbGRlIGRpZXNlbiBGZWhsZXIgb2RlciBrb3JyaWdpZXJlIGRpZXNlbiBtaXR0ZWxzIGVpbmVzIFB1bGwgUmVxdWVzdHMgb2RlciBQYXRjaGVzOiB7ey11cmx9fS57e21lc3NhZ2V9fVwiLFxuICAgICAgICAgIFwibGlicmFyeSBidWcgUFIgb25seVwiOlwiQmVpIGRlciBBdXN3ZXJ0dW5nIGRlcyBXZXJ0ZXMgXFxcInt7dmFsdWV9fVxcXCIgaXN0IGVpbiBGZWhsZXIgYXVmZ2V0cmV0ZW4uIER1IGthbm5zdCBkaWVzIGtvcnJpZ2llcmVuLCBpbmRlbSBkdSBkYXMgUHJvYmxlbSBsw7ZzdCB1bmQgaW4gRm9ybSBlaW5lcyBQdWxsIFJlcXVlc3RzIG9kZXIgUGF0Y2hlcyB6dW0gUHJvamVrdCBiZWl0csOkZ3N0OiB7ey11cmx9fS57e21lc3NhZ2V9fVwiLFxuICAgICAgICAgIFwidXNlIG11bHRpXCI6XCJEdSBoYXN0IHt7Y291bnR9fSB7ey1wYXJ0Mn19IEVpbnplbG5lIFJlZ2VsbiBrw7ZubmVuIG1pdCBcXFwiO1xcXCIgZ2V0cmVubnQgd2VyZGVuLlwiLFxuICAgICAgICAgIFwic2VsZWN0b3IgbXVsdGkgMmFcIjpcInt7d2hhdH19IGluIGVpbmVyIFJlZ2VsIGJlbnV0enQuIER1IGthbm5zdCBudXIgZWluZW4gZGF2b24gamUgUmVnZWwgdmVyd2VuZGVuXCIsXG4gICAgICAgICAgXCJzZWxlY3RvciBtdWx0aSAyYlwiOlwibmljaHQgdmVyYnVuZGVuZSB7e3doYXR9fSBpbiBlaW5lciBSZWdlbCBiZW51dHp0LiBEYXMgaXN0IHZlcm11dGxpY2ggZWluIEZlaGxlci4gR2xlaWNoZSBTZWxla3RvcmVuIGvDtm5uZW4gKHVuZCBzb2xsdGVuKSBpbW1lciB6dXNhbW1lbiB1bmQgZHVyY2ggS29tbWFzIGdldHJlbm50IGdlc2NocmllYmVuIHdlcmRlbi4gQmVpc3BpZWwgZsO8ciBaZWl0c3Bhbm5lbiBcXFwiMTI6MDAtMTM6MDAsMTU6MDAtMTg6MDBcXFwiLiBCZWlzcGllbCBmw7xyIFdvY2hlbnRhZ2UgXFxcIk1vLVdlLEZyXFxcIi5cIixcbiAgICAgICAgICBcInNlbGVjdG9yIHN0YXRlXCI6XCJTdGF0dXMtU2NobMO8c3NlbHfDtnJ0ZXIgKG9mZmVuLCBnZXNjaGxvc3NlbilcIixcbiAgICAgICAgICBjb21tZW50czpcIktvbW1lbnRhcmVcIixcbiAgICAgICAgICBtb250aHM6XCJNb25hdGVcIixcbiAgICAgICAgICB3ZWVrZGF5czpcIldvY2hlbnRhZ2VcIixcbiAgICAgICAgICByYW5nZXM6XCJaZWl0c3Bhbm5lblwiLFxuICAgICAgICAgIFwiZGVmYXVsdCBzdGF0ZVwiOlwiRGllc2UgUmVnZWwsIHdlbGNoZSBkZW4gU3RhbmRhcmQtU3RhdHVzIChkLmguIGdlc2NobG9zc2VuKSBmw7xyIGFsbGUgZm9sZ2VuZGVuIFJlZ2VsbiDDpG5kZXJ0LCBpc3QgbmljaHQgZGllIGVyc3RlIFJlZ2VsLiBEaWVzZSBSZWdlbCDDvGJlcnNjaHJlaWJ0IGFsbGUgdm9yaGVyaWdlbiBSZWdlbG4uIEVzIGthbm4gbGVnaXRpbSBzZWluLCBkZW4gU3RhbmRhcmQtU3RhdHVzIHouQi4gYXVmIGdlw7ZmZm5ldCBmZXN0enVsZWdlbiB1bmQgZGFubiBudXIgZGllIFplaXRlbiwgenUgZGVuZW4gZ2VzY2hsb3NzZW4gaXN0LCBhbnp1Z2ViZW4uXCIsXG4gICAgICAgICAgdmFndWU6XCJEaWVzZSBSZWdlbCBpc3QgbmljaHQgc2VociBhdXNzYWdla3LDpGZ0aWcsIGRhIGtlaW4gWmVpdCBTZWxla3RvciBhbmdlZ2ViZW4gd3VyZGUuIEVpbiBaZWl0IFNlbGVrdG9yIGlzdCBkaWUgS29tcG9uZW50ZSBkaWUgYW5naWJ0LCB6dSB3ZWxjaGVyIFRhZ2VzemVpdCBlaW4gT2JqZWt0IGdlw7ZmZm5ldCBoYXQsIHp1bSBCZWlzcGllbCBcXFwiMTA6MDAtMTk6MDBcXFwiLiBCaXR0ZSBmw7xnZSBlaW5lIFplaXRhbmdhYmUgb2RlciBlaW5lbiBLb21tZW50YXIgaGluenUsIHVtIGRpZXMgenUgdmVyYmVzc2Vybi5cIixcbiAgICAgICAgICBcImVtcHR5IGNvbW1lbnRcIjpcIkR1IGhhc3QgZWluZW4gbGVlcmVuIEtvbW1lbnRhciB2ZXJ3ZW5kZXQuXFxcIiBCaXR0ZSBzY2hyZWliZSBlbnR3ZWRlciBlaW5lbiBLb21tZW50YXItVGV4dCBvZGVyIGJlbnV0emUgc3RhdHRkZXNzZW4gZGFzIFNjaGzDvHNzZWx3b3J0IFxcXCJ1bmtub3duXFxcIi5cIixcbiAgICAgICAgICBzZXBhcmF0b3JfZm9yX3JlYWRhYmlsaXR5OlwiRHUgaGFzdCBkYXMgb3B0aW9uYWxlIFN5bWJvbCA8c2VwYXJhdG9yX2Zvcl9yZWFkYWJpbGl0eT4gYW4gZGVyIGZhbHNjaGVuIFN0ZWxsZSBiZW51dHp0LiBCaXR0ZSBsaWVzIGRpZSBTeW50YXgtU3BlemlmaWthdGlvbiB1bSB6dSBzZWhlbiwgd28gZXMgdmVyd2VuZGV0IHdlcmRlbiBrYW5uLCBvZGVyIGVudGZlcm5lIGVzLlwiLFxuICAgICAgICAgIFwic3RyYW5nZSAyNC83XCI6XCJEdSBoYXN0IDI0LzcgaW4gZWluZXIgQXJ0IHZlcndlbmRldCwgd2VsY2hlIHdhaHJzY2hlaW5saWNoIG5pY2h0IGFscyBcXFwiMjQgU3R1bmRlbiwgNyBUYWdlIGRpZSBXb2NoZVxcXCIgaW50ZXJwcmV0aWVydCB3aXJkLiBEZXIgUmljaHRpZ2tlaXQgaGFsYmVyIHNvbGx0ZXN0IGR1IFxcXCJvcGVuXFxcIiBvZGVyIFxcXCJjbG9zZWRcXFwiIGbDvHIgZGllc2UgUmVnZWwgdmVyd2VuZGVuIHVuZCBkYW5uIGRpZSBBdXNuYWhtZW4gYW5nZWJlbiB1bSBkYXMgc2VsYmUgWmllbCB6dSBlcnJlaWNoZW4uIFNvIGlzdCBlcyBrbGFyZXIg4oCTIHp1bSBCZWlzcGllbCBcXFwib3BlbjsgTW8gMTI6MDAtMTQ6MDAgb2ZmXFxcIi5cIixcbiAgICAgICAgICBcInB1YmxpYyBob2xpZGF5XCI6XCJFcyB3dXJkZSBrZWluZSBSZWdlbCBmw7xyIFxcXCJQSFxcXCIgKGZlaWVydGFncykgYW5nZWdlYmVuLiBEaWVzIGlzdCBuaWNodCBzZWhyIGF1c3NhZ2VrcsOkZnRpZy57ey1wYXJ0Mn19IEJpdHRlIGbDvGdlIGRpZSBSZWdlbCBcXFwiUEggb2ZmXFxcIiBhbiwgd2VubiBkaWUgRWlucmljaHR1bmcgYW4gYWxsZW4gRmVpZXJ0YWdlbiBnZXNjaGxvc3NlbiBpc3Qgb2RlciBzY2hyZWliZSBcXFwiU2EsU3UsUEggMTI6MDAtMTY6MDBcXFwiIHVtIGF1c3p1ZHLDvGNrZW4sIGRhc3MgU2Ftc3RhZ3MsIFNvbm50YWdzIHVuZCBmZWllcnRhZ3Mgdm9uIDEyOjAwLTE2OjAwIGdlw7ZmZm5ldCBpc3QuIEJlaSBlaW5lciDDlmZmbnVuZ3N6ZWl0IHdpZSBcXFwiRnItU2EgMTg6MDAtMDY6MDBcXFwiIGlzdCBWb3JzaWNodCBnZWJvdGVuLCBkYSBcXFwiUEggb2ZmXFxcIiBhdWYgMDA6MDAtMjQ6MDAgenV0cmlmZnQuIEhpZXIga2FubiBcXFwiRnItU2EgMTg6MDAtMDY6MDA7IFBIIDE4OjAwLTA2OjAwIG9mZlxcXCIgdmVyd2VuZGV0IHdlcmRlbi4gRmFsbHMgZGllIEVpbnJpY2h0dW5nIHTDpGdsaWNoIHVuZCBhbiBGZWllcnRhZ2VuIGdlw7ZmZm5ldCBpc3QsIGthbm4gZGllcyBleHBsaXppdCBtaXR0ZWxzIFxcXCJNby1TdSxQSFxcXCIgYXVzZ2VkcsO8Y2t0IHdlcmRlbi4gV2VubiBkdSBkaXIgaW0gVW5rbGFyZW4gYmlzdCwgdmVyc3VjaGUgZGllIMOWZmZudW5nc3plaXQgenUga2zDpHJlbi4gRmFsbHMgZGFzIG5pY2h0IG3DtmdsaWNoIGlzdCwgbGFzcyBkaWUgQW5nYWJlIHdlZyB1bmQgaWdub3JpZXJlIGRpZXNlIFdhcm51bmcuXCIsXG4gICAgICAgICAgXCJwdWJsaWMgaG9saWRheSBwYXJ0MlwiOlwiIExlaWRlciBpc3QgZGVyIFxcXCJ0YWcga2V5XFxcIiAoYmVpc3BpZWxzd2Vpc2UgXFxcIm9wZW5pbmdfaG91cnNcXFwiLCBvZGVyIFxcXCJsaXRcXFwiKSBpbiBvcGVuaW5nX2hvdXJzLmpzIG5pY2h0IGJla2FubnQuIERpZXNlIFdhcm51bmcgYmV0cmlmZnQgbnVyIGRpZSBLZXlzOiB7e2tleXN9fS4gRmFsbHMgZGVpbmUgQW5nYWJlIG5pY2h0IGbDvHIgZWluZW4gZGllc2VyIGlzdCwgaWdub3JpZXJlIGJpdHRlIGZvbGdlbmRlbiBIaW53ZWlzOlwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbF9ydWxlX3NlcGFyYXRvciBub3QgdXNlZCBhZnRlciB0aW1lIHdyYXBwaW5nIG1pZG5pZ2h0XCI6XCJEaWVzZSBSZWdlbCDDvGJlcnNjaHJlaWJ0IFRlaWxlIGRlciB2b3JoZXJpZ2VuIFJlZ2VsLiBEZXIgR3J1bmQgZGFmw7xyIGlzdCwgZGFzcyBub3JtYWxlIFJlZ2VsbiBhdWYgZGVuIGdhbnplbiBUYWcgenV0cmVmZmVuIHVuZCBhbGxlIERlZmluaXRpb25lbiB2b24gdm9yaGVyZ2VoZW5kZW4gUmVnZWxuIGbDvHIgZGllc2VuIFRhZyDDvGJlcnNjaHJlaWJlbi4gRHUga2FubnN0IGRpZXNlIFJlZ2VsIGFscyBhZGRpdGl2ZSBSZWdlbCBkZWtsYXJpZXJlbiBpbmRlbSBkdSBlaW4gXFxcIixcXFwiIGFuc3RlbGxlIGRlcyDDvGJsaWNoZW4gXFxcIjtcXFwiIGbDvHIgZGllc2UgUmVnZWwgdmVyd2VuZGVzdC4gQmVhY2h0ZSBkYXMgZGllIMOcYmVyc2NocmVpYnVuZyBhdWNoIGdld8O8bnNjaHQgc2VpbiBrYW5uIHVuZCBpbiBzbyBlaW5lbSBGYWxsIGRpZXNlIFdhcm51bmcgaWdub3JpZXJ0IHdlcmRlbiBrYW5uLlwiLFxuICAgICAgICAgIFwiYWRkaXRpb25hbCBydWxlIHdoaWNoIGV2YWx1YXRlcyB0byBjbG9zZWRcIjpcIkRpZXNlIFJlZ2VsIHdpcmQgYWxzIGdlc2NobG9zc2VuIGF1c2dld2VydGV0IGFiZXIgd3VyZGUgYWxzIGFkZGl0aXZlIFJlZ2VsIGFuZ2VnZWJlbi4gU2llIHNvbGx0ZSBhbHMgbm9ybWFsZSBSZWdlbCBtaXR0ZWxzIFxcXCI7XFxcIiBkZWZpbmllcnQgc2Vpbi4gU2llaGUgaHR0cHM6Ly93aWtpLm9wZW5zdHJlZXRtYXAub3JnL3dpa2kvREU6S2V5Om9wZW5pbmdfaG91cnMvc3BlY2lmaWNhdGlvbiNleHBsYWluOnJ1bGVfbW9kaWZpZXI6Y2xvc2VkLlwiLFxuICAgICAgICAgIHN3aXRjaGVkOlwiRGVyIFNlbGVrdG9yIFxcXCJ7e2ZpcnN0fX1cXFwiIHd1cmRlIGbDvHIgZWluZSBiZXNzZXJlIExlc2JhcmtlaXQgdW5kIGRlciBWb2xsc3TDpG5kaWdrZWl0IGhhbGJlciBtaXQgXFxcInt7c2Vjb25kfX1cXFwiIGdldGF1c2NodC5cIixcbiAgICAgICAgICBcIm5vIGNvbG9uIGFmdGVyXCI6XCJCaXR0ZSBCZW51dHplIGtlaW4gXFxcIjpcXFwiIG5hY2ggZGVtIFRva2VuIHt7dG9rZW59fS5cIixcbiAgICAgICAgICBcIm51bWJlciAtNSB0byA1XCI6XCJaYWhsIHp3aXNjaGVuIC01IHVuZCA1IChhdcOfZXIgMCkgZXJ3YXJ0ZXQuXCIsXG4gICAgICAgICAgXCJvbmUgd2Vla2RheSBjb25zdHJhaW50XCI6XCJEdSBrYW5uc3QgaMO2Y2hzdGVucyBlaW5lbiBiZXNjaHLDpG5rdGVuIFdvY2hlbnRhZyBpbiBlaW5lciBNb25hdHMtU3Bhbm5lIHZlcndlbmRlblwiLFxuICAgICAgICAgIFwicmFuZ2UgY29uc3RyYWluZWQgd2Vla2RheXNcIjpcIkR1IGthbm5zdCBrZWluZSBXb2NoZW50YWdzLVNwYW5uZSBhbHMgQmVzY2hyw6Rua3VuZyBpbiBlaW5lciBNb25hdHMtU3Bhbm5lIHZlcndlbmRlblwiLFxuICAgICAgICAgIGV4cGVjdGVkOlwiXFxcInt7LXN5bWJvbH19XFxcIiBlcndhcnRldC5cIixcbiAgICAgICAgICBcInJhbmdlIHplcm9cIjpcIkR1IGthbm5zdCBrZWluZSB7e3R5cGV9fS1TcGFubmUgbWl0IFBlcmlvZGUgXFxcIjBcXFwiIHZlcndlbmRlbi5cIixcbiAgICAgICAgICBcInBlcmlvZCBvbmUgeWVhcitcIjpcIkJpdHRlIHZlcndlbmRlIGtlaW5lIHt7dHlwZX19LVNwYW5uZW4gbWl0IFBlcmlvZGUgXFxcIjFcXFwiLiBXZW5uIGR1IGF1c2Ryw7xja2VuIHdpbGxzdCwgZGFzIGVpbmUgRWlucmljaHR1bmcgYWIgZWluZW0gYmVzdGltbXRlbiBKYWhyIGltbWVyIG9mZmVuIGlzdCwgYmVudXR6ZSBiaXR0ZSBcXFwiPHllYXI+K1xcXCIuXCIsXG4gICAgICAgICAgXCJwZXJpb2Qgb25lXCI6XCJCaXR0ZSB2ZXJ3ZW5kZSBrZWluZSB7e3R5cGV9fS1TcGFubmVuIG1pdCBQZXJpb2RlIFxcXCIxXFxcIi5cIixcbiAgICAgICAgICBcIm1vbnRoIDMxXCI6XCJEaWUgVGFnZXNhbmdhYmUgZsO8ciB7e21vbnRofX0gbXVzcyB6d2lzY2hlbiAxIHVuZCAzMSBsaWVnZW4uXCIsXG4gICAgICAgICAgXCJtb250aCAzMFwiOlwiRGVyIE1vbmF0IHt7bW9udGh9fSBoYXQga2VpbmUgMzEgVGFnZS4gRGVyIGxldHp0ZSBUYWcgdm9uIHt7bW9udGh9fSBpc3QgVGFnIDMwLlwiLFxuICAgICAgICAgIFwibW9udGggZmViXCI6XCJcXFwiRGVyIE1vbmF0IHt7bW9udGh9fSBoYXQgZW50d2VkZXIgMjggb2RlciAyOSBUYWdlIChTY2hhbHRqYWhyZSkuXFxcIlwiLFxuICAgICAgICAgIFwicG9pbnQgaW4gdGltZVwiOlwiRXJ3YXJ0ZSBCaW5kZXN0cmljaCAoLSkgb2RlciBvZmZlbmVzIEVuZGUgKCspIGluIGRlciBaZWl0c3Bhbm5lIHt7Y2FsY319LiBVbSBtaXQgWmVpdHB1bmt0ZW4genUgYXJiZWl0ZW4sIG11c3MgZGVyIE1vZHVzIGbDvHIgIHt7bGlicmFyeW5hbWV9fSB1bWdlc3RlbGx0IHdlcmRlbi4gVmllbGxlaWNodCBmYWxzY2hlcyBPU00tdGFnIHZlcndlbmRldD9cIixcbiAgICAgICAgICBjYWxjdWxhdGlvbjpcIkJlcmVjaG51bmdcIixcbiAgICAgICAgICBcInRpbWUgcmFuZ2UgY29udGludWVcIjpcIkRpZSBaZWl0c3Bhbm5lIGdlaHQgbmljaHQgd2llIGVyd2FydGV0IHdlaXRlclwiLFxuICAgICAgICAgIFwicGVyaW9kIGNvbnRpbnVlXCI6XCJEaWUgWmVpdHNwYW5uZW4tUGVyaW9kZSBnZWh0IG5pY2h0IHdpZSBlcndhcnRldCB3ZWl0ZXIuIEJlaXNwaWVsIFxcXCIvMDE6MzBcXFwiLlwiLFxuICAgICAgICAgIFwidGltZSByYW5nZSBtb2RlXCI6XCJ7e2xpYnJhcnluYW1lfX0gd3VyZGUgaW0gXFxcIlplaXRzcGFubmVuLU1vZHVzXFxcIiBhdWZnZXJ1ZmVuLiBaZWl0cHVua3QgZ2VmdW5kZW4uXCIsXG4gICAgICAgICAgXCJ0aW1lIHJhbmdlc1wiOlwiWmVpdHNwYW5uZW5cIixcbiAgICAgICAgICBcImhvbGlkYXkgcmFuZ2VzXCI6XCJGZWllcnRhZ2VuXCIsXG4gICAgICAgICAgXCJwb2ludCBpbiB0aW1lIG1vZGVcIjpcInt7bGlicmFyeW5hbWV9fSB3dXJkZSBpbSBcXFwiWmVpdHB1bmt0LU1vZHVzXFxcIiBhdWZnZXJ1ZmVuLiBaZWl0c3Bhbm5lIGdlZnVuZGVuLlwiLFxuICAgICAgICAgIFwib3V0c2lkZSBjdXJyZW50IGRheVwiOlwiWmVpdHNwYW5uZSBiZWdpbm50IGF1w59lcmhhbGIgZGVzIGFrdHVlbGxlbiBUYWdlc1wiLFxuICAgICAgICAgIFwidHdvIG1pZG5pZ2h0c1wiOlwiWmVpdHNwYW5uZSB3ZWxjaGUgbWVocm1hbHMgTWl0dGVybmFjaHQgYmVpbmhhbHRldCB3aXJkIG5pY2h0IHVudGVyc3TDvHR6dFwiLFxuICAgICAgICAgIFwid2l0aG91dCBtaW51dGVzXCI6XCJaZWl0c3Bhbm5lIG9obmUgTWludXRlbmFuZ2FiZSBhbmdlZ2ViZW4uIERhcyBpc3QgbmljaHQgc2VociBlaW5kZXV0aWchIEJpdHRlIHZlcndlbmRlIHN0YXR0ZGVzc2VuIGZvbGdlbmRlIFN5bnRheCBcXFwie3tzeW50YXh9fVxcXCIuXCIsXG4gICAgICAgICAgXCJvdXRzaWRlIGRheVwiOlwiRGllIFplaXRzcGFubmUgYmVnaW5udCBhdcOfZXJoYWxiIGRlcyBha3R1ZWxsZW4gVGFnZXNcIixcbiAgICAgICAgICBcInplcm8gY2FsY3VsYXRpb25cIjpcIkRhcyBIaW56dWbDvGdlbiB2b24gMCBpbiBlaW5lciB2YXJpYWJsZW4gWmVpdGJlcmVjaG51bmcgw6RuZGVydCBkaWUgdmFyaWFibGUgWmVpdCBuaWNodC4gQml0dGUgZW50ZmVybmUgZGllIFplaXRiZXJlY2hudW5nIChCZWlzcGllbDogXFxcInN1bnJpc2UtKHN1bnNldC0wMDowMClcXFwiKS5cIixcbiAgICAgICAgICBcImNhbGN1bGF0aW9uIHN5bnRheFwiOlwiQmVyZWNobnVuZyBtaXQgdmFyaWFibGVyIFplaXQgaGF0IG5pY2h0IGRpZSBrb3JyZWt0ZSBTeW50YXhcIixcbiAgICAgICAgICBtaXNzaW5nOlwiRmVobGVuZGVzIFxcXCJ7e3N5bWJvbH19XFxcIlwiLFxuICAgICAgICAgIFwiKHRpbWUpXCI6XCIoWmVpdClcIixcbiAgICAgICAgICBcImJhZCByYW5nZVwiOlwiVW5nw7xsdGlnZSBaZWl0c3Bhbm5lOiB7e2Zyb219fS17e3RvfX1cIixcbiAgICAgICAgICBcIl0gb3IgbW9yZSBudW1iZXJzXCI6XCJcXFwiXVxcXCIgb2RlciB3ZWl0ZXJlIFphaGxlbiBlcndhcnRldC5cIixcbiAgICAgICAgICBcImFkZGl0aW9uYWwgcnVsZSBubyBzZW5zZVwiOlwiRWluZSB3ZWl0ZXJlIFJlZ2VsIGFuIGRpZXNlciBTdGVsbGUgZXJnaWJ0IGtlaW5lbiBTaW5uLiBCZW51dHplIGVpbmZhY2ggXFxcIjtcXFwiIGFscyBUcmVubmVyIGbDvHIgUmVnZWxuLiBTaWVoZSBodHRwczovL3dpa2kub3BlbnN0cmVldG1hcC5vcmcvd2lraS9LZXk6b3BlbmluZ19ob3Vycy9zcGVjaWZpY2F0aW9uI2V4cGxhaW46YWRkaXRpb25hbF9ydWxlX3NlcGFyYXRvclwiLFxuICAgICAgICAgIFwidW5leHBlY3RlZCB0b2tlbiB3ZWVrZGF5IHJhbmdlXCI6XCJVbmVyd2FydGVzIFRva2VuIGluIFRhZ2VzLVNwYW5uZToge3t0b2tlbn19XCIsXG4gICAgICAgICAgXCJtYXggZGlmZmVyXCI6XCJFcyBzb2xsdGUga2VpbmVuIEdydW5kIGdlYmVuLCBtZWhyIGFscyB7e21heGRpZmZlcn19IFRhZ2Ugdm9uIGVpbmVtIHt7bmFtZX19IGFienV3ZWljaGVuLiBXZW5uIG7DtnRpZywgdGVpbGUgdW5zIGRpZXMgYml0dGUgbWl0IOKAplwiLFxuICAgICAgICAgIFwiYWRkaW5nIDBcIjpcIkFkZGl0aW9uIHZvbiAwIHZlcsOkbmRlcnQgZGFzIERhdHVtIG5pY2h0LiBCaXR0ZSB3ZWdsYXNzZW4uXCIsXG4gICAgICAgICAgXCJ1bmV4cGVjdGVkIHRva2VuIGhvbGlkYXlcIjpcIlVuZXJ3YXJ0ZXRlciBUb2tlbiAoaW4gRmVpZXJ0YWdzLUF1c3dlcnR1bmcpOiB7e3Rva2VufX1cIixcbiAgICAgICAgICBcIm5vIGhvbGlkYXkgZGVmaW5pdGlvblwiOlwie3tuYW1lfX0gaXN0IGbDvHIgZGFzIExhbmQge3tjY319IG5pY2h0IGRlZmluaWVydC5cIixcbiAgICAgICAgICBcIm5vIGhvbGlkYXkgZGVmaW5pdGlvbiBzdGF0ZVwiOlwie3tuYW1lfX0gaXN0IGbDvHIgZGFzIExhbmQge3tjY319IHVuZCBCdW5kZXNsYW5kIHt7c3RhdGV9fSBuaWNodCBkZWZpbmllcnQuXCIsXG4gICAgICAgICAgXCJubyBjb3VudHJ5IGNvZGVcIjpcIkRlciBMw6RuZGVyY29kZSBmZWhsdC4gRGllc2VyIHdpcmQgYmVuw7Z0aWd0IHVtIGRpZSBrb3JyZWt0ZW4gRmVpZXJ0YWdlIHp1IGJlc3RpbW1lbiAoc2llaGUgaW4gZGVyIFJFQURNRSB3aWUgZGllc2VyIGFuenVnZWJlbiBpc3QpXCIsXG4gICAgICAgICAgXCJubyBTSCBkZWZpbml0aW9uXCI6XCJEaWUgU2NodWxmZXJpZW4ge3tuYW1lfX1zaW5kIGbDvHIgZGFzIEphaHIge3t5ZWFyfX0gbmljaHQgZGVmaW5pZXJ0XCIsXG4gICAgICAgICAgXCJtb3ZhYmxlIG5vIGZvcm11bGFcIjpcIkRlciBiZXdlZ2xpY2hlIEZlaWVydGFnIHt7bmFtZX19IGthbm4gbmljaHQgYmVyZWNobmV0IHdlcmRlbi4gQml0dGUgZsO8Z2UgZWluZSBlbnRzcHJlY2hlbmRlIEZvcm1lbCBoaW56dS5cIixcbiAgICAgICAgICBcIm1vdmFibGUgbm90IGluIHllYXJcIjpcIkRlciBiZXdlZ2xpY2hlIEZlaWVydGFnIHt7bmFtZX19IHBsdXMge3tkYXlzfX0gVGFnZSBiZWZpbmRldCBzaWNoIG5pY2h0IG1laHIgaW0gc2VsYmVuIEphaHIuIEFrdHVlbGwgbmljaHQgdW50ZXJzdMO8dHp0LlwiLFxuICAgICAgICAgIFwieWVhciByYW5nZSBvbmUgeWVhclwiOlwiRWluZSBKYWhyZXMtU3Bhbm5lIG1pdCBnbGVpY2hlbSBKYWhyIGFscyBCZWdpbm4gdW5kIEVuZGUgZXJnaWJ0IGtlaW5lbiBTaW5uLiBCaXR0ZSBlbnRmZXJuZSBkYXMgRW5kZS1KYWhyLiB6dW0gQmVpc3BpZWw6IFxcXCJ7e3llYXJ9fSBNYXkgMjNcXFwiXCIsXG4gICAgICAgICAgXCJ5ZWFyIHJhbmdlIHJldmVyc2VcIjpcIkVpbmUgSmFocmVzLVNwYW5uZSBtaXQgQmVnaW5uIGdyw7bDn2VyIGFscyBFbmRlIGVyZ2lidCBrZWluZW4gU2lubi4gQml0dGUgdW1kcmVoZW4uXCIsXG4gICAgICAgICAgXCJ5ZWFyIHBhc3RcIjpcIkRhcyBKYWhyIGxpZWd0IGluIGRlciBWZXJnYW5nZW5oZWl0LlwiLFxuICAgICAgICAgIFwidW5leHBlY3RlZCB0b2tlbiB5ZWFyIHJhbmdlXCI6XCJVbmVyd2FydGV0ZXMgVG9rZW4gaW4gZGVyIEphaHJlcy1TcGFubmU6IHt7dG9rZW59fVwiLFxuICAgICAgICAgIFwid2VlayByYW5nZSByZXZlcnNlXCI6XCJEdSBoYXN0IGVpbmUgV29jaGVuLVNwYW5uZSBpbiB1bWdla2VocnRlciBSZWloZW5mb2xnZSBvZGVyIG1laHJlcmUgSmFocmUgdW1mYXNzZW5kZSBhbmdlZ2ViZW4uIERpZXMgaXN0IGFrdHVlbGwgbmljaHQgdW50ZXJzdMO8dHp0LlwiLFxuICAgICAgICAgIFwid2VlayBuZWdhdGl2ZVwiOlwiRHUgaGFzdCBlaW5lIEthbGVuZGVyd29jaGUga2xlaW5lciAxIGFuZ2VnZWJlbi4gS29ycmVrdGUgQW5nYWJlbiBzaW5kIDEtNTMuXCIsXG4gICAgICAgICAgXCJ3ZWVrIGV4Y2VlZFwiOlwiRHUgaGFzdCBlaW5lIEthbGVuZGVyd29jaGUgZ3LDtsOfZXIgYWxzIDUzIGFuZ2VnZWJlbi4gS29ycmVrdGUgQW5nYWJlbiBzaW5kIDEtNTMuXCIsXG4gICAgICAgICAgXCJ3ZWVrIHBlcmlvZCBsZXNzIHRoYW4gMlwiOlwiRHUgaGFzdCBlaW5lIFdvY2hlbnBlcmlvZGUga2xlaW5lciAyIGFuZ2VnZWJlbi4gV2VubiBkdSBkaWUgZ2VzYW10ZSBTcGFubmUgdm9uIHt7d2Vla2Zyb219fSBiaXMge3t3ZWVrdG99fSBhbmdlYmVuIHdpbGxzdCwgbGFzc2UgXFxcIi97e3BlcmlvZH19XFxcIiBlaW5mYWNoIHdlZy5cIixcbiAgICAgICAgICBcIndlZWsgcGVyaW9kIGdyZWF0ZXIgdGhhbiAyNlwiOlwiRHUgaGFzdCBlaW5lIFdvY2hlbi1QZXJpb2RlIGdyw7bDn2VyIGFscyAyNiBhbmdlZ2ViZW4uIDI2LDUgaXN0IGRpZSBIw6RsZnRlIGRlcyBNYXhpbXVtcyB2b24gNTMgV29jaGVuIHBybyBKYWhyLiBEYW1pdCB3w7xyZGUgZWluZSBQZXJpb2RlIGdyw7bDn2VyIGFscyAyNiBudXIgZWlubWFsIHBybyBKYWhyIGF1ZnRyZXRlbi4gQml0dGUgZ2lidCBkZW4gV29jaGVuLVNlbGVrdG9yIGFscyBcXFwid2VlayB7e3dlZWtmcm9tfX1cXFwiIGFuLCB3ZW5uIGVzIGRhcyBpc3QsIHdhcyBkdSBhdXNkcsO8Y2tlbiBtw7ZjaHRlc3QuXCIsXG4gICAgICAgICAgXCJ1bmV4cGVjdGVkIHRva2VuIHdlZWsgcmFuZ2VcIjpcIlVuZXJ3YXJ0ZXRlcyBUb2tlbiBpbiBXb2NoZW4tU3Bhbm5lOiB7e3Rva2VufX1cIixcbiAgICAgICAgICBcInVuZXhwZWN0ZWQgdG9rZW4gbW9udGggcmFuZ2VcIjpcIlVuZXJ3YXJ0ZXRlcyBUb2tlbiBpbiBNb25hdHMtU3Bhbm5lOiB7e3Rva2VufX1cIixcbiAgICAgICAgICBcImRheSByYW5nZSByZXZlcnNlXCI6XCJaZWl0c3Bhbm5lIGluIGZhbHNjaGVyIFJlaWhlbmZvbGdlLiBCZWdpbm4gaXN0IGdyw7bDn2VyIGFscyBFbmRlLlwiLFxuICAgICAgICAgIFwib3BlbiBlbmRcIjpcIkFuZ2VnZWJlbiBhbHMgXFxcIm9wZW4gZW5kXFxcIi4gU2NobGllw596ZWl0IHd1cmRlIGdlcmF0ZW4uXCIsXG4gICAgICAgICAgXCJkYXRlIHBhcmFtZXRlciBuZWVkZWRcIjpcIkRhdHVtc3BhcmFtZXRlciBuw7Z0aWcuXCIsXG4gICAgICAgICAgXCJhc3N1bWluZyBvayBmb3Iga29cIjpcIlxcXCJ7e2tvfX1cXFwiIHdpcmQgYWxzIFxcXCJ7e29rfX1cXFwiIGludGVycHJldGllcnQuXCIsXG4gICAgICAgICAgXCJwbGVhc2UgdXNlIG9rIGZvciBrb1wiOlwiQml0dGUgdmVyd2VuZGUgXFxcInt7LW9rfX1cXFwiIGFuc3RlbGxlIHZvbiBcXFwie3sta299fVxcXCIuXCIsXG4gICAgICAgICAgXCJwbGVhc2UgdXNlIG9rIGZvciBzaW1pbGFyIGxvb2tpbmcga29cIjpcIlBsZWFzZSB1c2Ugbm90YXRpb24gXFxcInt7b2t9fVxcXCIgZm9yIFxcXCJ7e2tvfX1cXFwiLiBUaG9zZSBjaGFyYWN0ZXJzIGxvb2sgdmVyeSBzaW1pbGFyIGJ1dCBhcmUgbm90IHRoZSBzYW1lIVwiLFxuICAgICAgICAgIFwicmFudCBkZWdyZWUgc2lnbiB1c2VkIGZvciB6ZXJvXCI6XCJCZWFjaHRlIGRhcyBkaWVzIGVpbiBHcmFkemVpY2hlbiBpc3QsIHdlbGNoZXMgYWxzIChob2NoZ2VzdGVsbHRlKSBOdWxsIG1pc3NicmF1Y2h0IHd1cmRlLiBFaW5lIGhvY2hnZXN0ZWxsdGUgTnVsbCBpc3QgaW4gVW5pY29kZSBkZWZpbmllcnQgKMKwKSB1bmQgd8OkcmUgYW5nZWJyYWNodGVyL2VpbmhlaXRsaWNoZXIgYW4gZGllc2VyIFN0ZWxsZS4gQWxsZXJkaW5ncyBpc3QgZGllIFZlcndlbmR1bmcgdm9uIG5pY2h0IEFTQ0lJIFppZmZlcm4gbmljaHQgZXJsYXVidC5cIixcbiAgICAgICAgICBcInBsZWFzZSB1c2UgRW5nbGlzaCB3cml0dGVuIG9rIGZvciBrb1wiOlwiQml0dGUgYmVudXR6ZSBkaWUgZW5nbGlzY2hlIFNjaHJlaWJ3ZWlzZSBcXFwie3tva319XFxcIiBmw7xyIFxcXCJ7e2tvfX1cXFwiLlwiLFxuICAgICAgICAgIFwicGxlYXNlIHVzZSBFbmdsaXNoIGFiYnJldmlhdGlvbiBvayBmb3Iga29cIjpcIkJpdHRlIGJlbnV0emUgZGllIGVuZ2xpc2NoZSBBYmvDvHJ6dW5nIFxcXCJ7e29rfX1cXFwiIGbDvHIgXFxcInt7a299fVxcXCIuXCIsXG4gICAgICAgICAgXCJwbGVhc2UgdXNlIEVuZ2xpc2ggYWJicmV2aWF0aW9uIG9rIGZvciBzb1wiOlwiQml0dGUgYmVudXR6ZSBkaWUgZW5nbGlzY2hlIEFia8O8cnp1bmcgXFxcInt7b2t9fVxcXCIgZsO8ciBcXFwie3trb319XFxcIi4gQmVhY2h0ZSBkYXMgU2Ftc3RhZyBpbiBQb2xuaXNjaCBnZW1laW50IHNlaW4ga2Fubi5cIixcbiAgICAgICAgICBcInBsZWFzZSB1c2Ugb2ZmIGZvciBrb1wiOlwiQml0dGUgYmVudXR6ZSBcXFwie3tva319XFxcIiBmw7xyIFxcXCJ7e2tvfX1cXFwiLiBCZWlzcGllbDogXFxcIk1vLUZyIDA4OjAwLTEyOjAwOyBUdSBvZmZcXFwiLlwiLFxuICAgICAgICAgIFwicGxlYXNlIHVzZSBvayBmb3Igd29ya2RheVwiOlwiXFxcInt7a299fVxcXCIgd2lyZCBhbHMgXFxcInt7b2t9fVxcXCIgaW50ZXJwcmV0aWVydC4gV2Vya3RhZyBzb2xsdGUgbmljaHQgdmVyd2VuZGV0IHdlcmRlbi4gU2llaGUgaHR0cHM6Ly93aWtpLm9wZW5zdHJlZXRtYXAub3JnL3dpa2kvVGFsazpLZXk6b3BlbmluZ19ob3VycyNuZWVkX3N5bnRheF9mb3JfaG9saWRheXNfYW5kX3dvcmtpbmdkYXlzXCIsXG4gICAgICAgICAgXCJvbWl0IGhvdXIga2V5d29yZFwiOlwiQml0dGUgbGFzc2UgXFxcInt7a299fVxcXCIgd2VnIG9kZXIgdmVyd2VuZGUgZWluZW4gRG9wcGVscHVua3QuIEJlaXNwaWVsOiBcXFwiMTI6MDAtMTQ6MDBcXFwiLlwiLFxuICAgICAgICAgIFwib21pdCBrb1wiOlwiQml0dGUgdmVyemljaHRlIGF1ZiBcXFwie3trb319XFxcIi5cIixcbiAgICAgICAgICBcIm9taXQgdGFnIGtleVwiOlwiQml0dGUgbGFzc2UgXFxcInt7a299fVxcXCIgd2VnLiBEZXIgVGFnIFNjaGzDvHNzZWwgZGFyZiBuaWNodCBpbSBUYWcgV2VydCBzZWluLlwiLFxuICAgICAgICAgIFwib21pdCB3cm9uZyBrZXl3b3JkIG9wZW4gZW5kXCI6XCJCaXR0ZSBsYXNzZSBcXFwie3trb319XFxcIiB3ZWcuIEZhbGxzIGR1IFxcXCJvcGVuIGVuZFxcXCIgYXVzZHLDvGNrZW4gbcO2Y2h0ZXN0IHZlcndlbmRlIGJpdHRlIGVpbiBcXFwiK1xcXCIuIEJlaXNwaWVsOiBcXFwiMTI6MDArXFxcIi5cIixcbiAgICAgICAgICBcImFzc3VtaW5nIG9wZW4gZW5kIGZvciBrb1wiOlwiXFxcInt7a299fVxcXCIgd2lyZCBhbHMgXFxcInt7b2t9fVxcXCIgKFxcXCJvcGVuIGVuZFxcXCIpIGludGVycHJldGllcnQuIEV4YW1wbGU6IFxcXCIxMjowMCtcXFwiLlwiLFxuICAgICAgICAgIFwicGxlYXNlIHVzZSBvayBmb3IgdW5jZXJ0YWludHlcIjpcIkJpdHRlIHZlcndlbmRlIFxcXCJ7e29rfX1cXFwiIGbDvHIgXFxcInt7a299fVxcXCIuIEZhbGxzIGRlciBiZWdyw7xuZGV0ZSBWZXJkYWNodCBkZXIgVW5nZXdpc3NoZWl0IHZvcmxpZWd0IHppZWhlIGRpZSBWZXJ3ZW5kdW5nIGVpbmVzIEtvbW1lbnRhcnMgaW4gQmV0cmFjaHQuIEJlaXNwaWVsOiAxMjowMC0xNDowMCBcXFwib25seSBvbiBzdW5zaGluZVxcXCIuXCIsXG4gICAgICAgICAgXCJwbGVhc2UgdXNlIGZhbGxiYWNrIHJ1bGVcIjpcIkJpdHRlIHZlcndlbmRlIFxcXCJ7e29rfX1cXFwiIChGYWxsYmFjayBSZWdlbCkgZsO8ciBcXFwie3trb319XFxcIi4gQmVpc3BpZWw6IE1vLUZyIDEyOjAwLTE0OjAwOyBQSCBvZmYgfHwgXFxcIm5hY2ggVmVyZWluYmFydW5nXFxcIlwiLFxuICAgICAgICAgIFwicGxlYXNlIHVzZSBvayBmb3IgbWlzc2luZyBkYXRhXCI6XCJCaXR0ZSB2ZXJ3ZW5kZSBlaW5lIEZJWE1FIE5vdGl6LlwiLFxuICAgICAgICAgIFwicGxlYXNlIHVzZSAyNCBob3VycyB0aW1lIGZvciBrb1wiOlwiQml0dGUgdmVyd2VuZGUgMjQgU3R1bmRlbiBaZWl0YW5nYWJlbiBhbnN0ZWxsZSBkZXIgdmVyYWx0ZXRlbiAxMiBTdHVuZGVuIFZhcmlhbnRlLiBGYWxscyBkaWUgMTIgU3R1bmRlbiBWYXJpYW50ZSB2ZXJ3ZW5kZXQgd2lyZCBpc3QgZXZlbnR1ZWxsZSBlaW5lIEtvbnZlcnRpZXJ1bmcgbm90d2VuZGlnLlwiLFxuICAgICAgICAgIFwicGxlYXNlIHVzZSByZXN0cmljdGlvbiBjb21tZW50IHRpbWUgZm9yIGtvXCI6XCJFcyBzaWVodCBzbyBhdXMgYWxzbyBtw7ZjaHRlc3QgZHUgenVzw6R0emxpY2hlIEVpbnNjaHLDpG5rdW5nZW4gZsO8ciBlaW5lIMOWZmZudW5nc3plaXQgZ2ViZW4uIEZhbGxzIHNpY2ggZGllcyBuaWNodCBtaXQgZGVyIFN5bnRheCBhdXNkcsO8Y2tlbiBsw6Rzc3Qga8O2bm5lbiBLb21tZW50YXJlIHZlcndlbmRldCB3ZXJkZW4uIFp1c8OkdHpsaWNoIHNvbGx0ZSBldmVudHVlbGwgZGFzIFNjaGzDvHNzZWx3b3J0IGBvcGVuYCBiZW51dHp0IHdlcmRlbi4gQmVpc3BpZWw6IG9wZW4gXFxcIk51ciBGcmF1ZW5cXFwiLlwiLFxuICAgICAgICAgIFwicGxlYXNlIHVzZSBvayBmb3IgdHlwb2dyYXBoaWNhbGx5IGNvcnJlY3RcIjpcIkJpdHRlIHZlcndlbmRlIFxcXCJ7ey1va319XFxcIiBmw7xyIFxcXCJ7e2tvfX1cXFwiLiBBdWNoIHdlbm4gXFxcInt7a299fVxcXCIgdHlwb2dyYWZpc2NoIGtvcnJla3QgaXN0LCBpc3QgZGllcyBpbiBkZXIgb3BlbmluZ19ob3VycyBTeW50YXggbmljaHQgZGVmaW5pZXJ0LiBLb3JyZWt0ZSBUeXBvZ3JhcGhpZSBzb2xsdGUgYXVmIEFud2VuZHVuZ3NlYmVuZSBzaWNoZXJnZXN0ZWxsdCB3ZXJkZW4g4oCmXCIgfSxcbiAgICAgICAgcHJldHR5Onsgb2ZmOlwiZ2VzY2hsb3NzZW5cIixcbiAgICAgICAgICBTSDpcIlNjaHVsZmVyaWVuXCIsXG4gICAgICAgICAgUEg6XCJGZWllcnRhZ3NcIiB9IH0gfSxcbiAgICBlbzp7IG9wZW5pbmdfaG91cnM6eyB0ZXh0czp7IFwiYXNzdW1pbmcgb2sgZm9yIGtvXCI6XCJcXFwie3trb319XFxcIiBlc3RhcyBpbnRlcnByZXRpdGEga2llbCBcXFwie3tva319XFxcIi5cIixcbiAgICAgICAgICBcInBsZWFzZSB1c2Ugb2sgZm9yIGtvXCI6XCJCb252b2x1IHV6aSBsYSBlc3ByaW1vbiBcXFwie3stb2t9fVxcXCIgYW5zdGF0YcWtIFxcXCJ7e2tvfX1cXFwiLlwiLFxuICAgICAgICAgIFwicGxlYXNlIHVzZSBFbmdsaXNoIGFiYnJldmlhdGlvbiBvayBmb3Iga29cIjpcIkJvbnZvbHUgdXppIGxhIGFuZ2xhbiBtYWxsb25naWdvbiBcXFwie3tva319XFxcIiBmw7xyIFxcXCJ7e2tvfX1cXFwiLlwiIH0sXG4gICAgICAgIHByZXR0eTp7IG9mZjpcImZlcm1pdGFcIixcbiAgICAgICAgICBTSDpcImxlcm5lamFqIGZlcmlvalwiLFxuICAgICAgICAgIFBIOlwiZmVzdG90YWdvalwiIH0gfSB9LFxuICAgIGZpOnsgb3BlbmluZ19ob3Vyczp7IHByZXR0eTp7IG9mZjpcInN1bGpldHR1XCIsXG4gICAgICAgICAgU0g6XCJrb3VsdWxvbWF0XCIsXG4gICAgICAgICAgUEg6XCJsYWlsbGlzZXQgdmFwYWFww6RpdsOkdFwiIH0gfSB9LFxuICAgIGZyOnsgb3BlbmluZ19ob3Vyczp7IHRleHRzOnsgXCJhc3N1bWluZyBvayBmb3Iga29cIjpcInN1cHBvc2UgXFxcInt7b2t9fVxcXCIgcG91ciBcXFwie3trb319XFxcIi5cIixcbiAgICAgICAgICBcInBsZWFzZSB1c2Ugb2sgZm9yIGtvXCI6XCJTJ2lsIHZvdXMgcGxhw650IHV0aWxpc2V6IFxcXCJ7e29rfX1cXFwiIHBvdXIgXFxcInt7a299fVxcXCIuXCIsXG4gICAgICAgICAgXCJwbGVhc2UgdXNlIEVuZ2xpc2ggYWJicmV2aWF0aW9uIG9rIGZvciBrb1wiOlwiUydpbCB2b3VzIHBsYcOudCB1dGlsaXNlw6kgbCdhYnLDqXZpYXRpb24gXFxcInt7b2t9fVxcXCIgcG91ciBcXFwie3trb319XFxcIi5cIiB9LFxuICAgICAgICBwcmV0dHk6eyBvZmY6XCJmZXJtw6lcIixcbiAgICAgICAgICBTSDpcInZhY2FuY2VzIHNjb2xhaXJlc1wiLFxuICAgICAgICAgIFBIOlwiam91cnMgZsOpcmnDqXNcIiB9IH0gfSxcbiAgICBubDp7IG9wZW5pbmdfaG91cnM6eyB0ZXh0czp7IFwicGxlYXNlIHVzZSBFbmdsaXNoIGFiYnJldmlhdGlvbiBvayBmb3Iga29cIjpcIk5lZW0gZGUgZW5nZWxzZSBhZmtvcnRpbmcgXFxcInt7b2t9fVxcXCIgdm9vciBcXFwie3trb319XFxcIiBhbHN0dWJsaWVmdC5cIiB9LFxuICAgICAgICBwcmV0dHk6eyBvZmY6XCJnZXNsb3RlblwiLFxuICAgICAgICAgIFNIOlwic2Nob29sdmFrYW50aWVcIixcbiAgICAgICAgICBQSDpcImZlZXN0ZGFnZW5cIiB9IH0gfSxcbiAgICBydTp7IG9wZW5pbmdfaG91cnM6eyBwcmV0dHk6eyBvZmY6XCLQt9Cw0LrRgNGL0YLQvlwiLFxuICAgICAgICAgIFNIOlwi0LrQsNC90LjQutGD0LvRi1wiLFxuICAgICAgICAgIFBIOlwi0L/RgNCw0LfQtNC90LjQulwiIH0gfSB9LFxuICAgIGl0Onsgb3BlbmluZ19ob3Vyczp7IHByZXR0eTp7IG9mZjpcImNoaXVzb1wiLFxuICAgICAgICAgIFNIOlwiZmVzdGl2aXTDoCBzY29sYXN0aWNoZVwiLFxuICAgICAgICAgIFBIOlwiZmVzdGl2aXTDoFwiIH0gfSB9IH07XG4gIGRhdGEuZW47XG4gIGRhdGEuZGU7XG4gIGRhdGEuZW87XG4gIGRhdGEuZmk7XG4gIGRhdGEuZnI7XG4gIGRhdGEubmw7XG4gIGRhdGEucnU7XG4gIGRhdGEuaXQ7XG5cbiAgaWYgKCFpMThuZXh0LmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIGkxOG5leHQuaW5pdCh7XG4gICAgICAgICAgZmFsbGJhY2tMbmc6ICdlbicsXG4gICAgICAgICAgLy8gbG5nV2hpdGVsaXN0OiBbJ2VuJywgJ2RlJ10sXG4gICAgICAgICAgcmVzb3VyY2VzOiBkYXRhLFxuICAgICAgICAgIGdldEFzeW5jOiB0cnVlLFxuICAgICAgICAgIHVzZUNvb2tpZTogdHJ1ZSxcbiAgICAgICAgICAvLyBkZWJ1ZzogdHJ1ZSxcbiAgICAgIH0pO1xuICB9IGVsc2Uge1xuICAgICAgLy8gY29tcGF0IHdpdGggYW4gYXBwIHRoYXQgYWxyZWFkeSBpbml0aWFsaXplcyBpMThuXG4gICAgICBmb3IgKHZhciBsYW5nIGluIGRhdGEpIHtcbiAgICAgICAgICBpMThuZXh0LmFkZFJlc291cmNlQnVuZGxlKGxhbmcsICdvcGVuaW5nX2hvdXJzJywgZGF0YVtsYW5nXVsnb3BlbmluZ19ob3VycyddLCB0cnVlKTtcbiAgICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IMKpIDIwMTIgRG1pdHJ5IE1hcmFrYXNvdlxuICAgKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiDCqSAyMDEzIFJvYmluIFNjaG5laWRlciA8eXBpZEByaXNldXAubmV0PlxuICAgKlxuICAgKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0zLjAtb25seVxuICAgKlxuICAgKiBUaGlzIGZpbGUgaXMgYmFzZWQgb24gd29yayB1bmRlciB0aGUgZm9sbG93aW5nIGNvcHlyaWdodCBhbmQgcGVybWlzc2lvblxuICAgKiBub3RpY2U6XG4gICAqXG4gICAqICAgICBDb3B5cmlnaHQgKGMpIDIwMTItMjAxMyBEbWl0cnkgTWFyYWthc292XG4gICAqICAgICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgKlxuICAgKiAgICAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gICAqICAgICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAgICpcbiAgICogICAgIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICAgKiAgICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gICAqXG4gICAqICAgICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gICAqICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gICAqICAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAgICpcbiAgICogICAgIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICAgKiAgICAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAgICogICAgIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAgICogICAgIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEVcbiAgICogICAgIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gICAqICAgICBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICAgKiAgICAgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVJcbiAgICogICAgIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksXG4gICAqICAgICBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICAgKiAgICAgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAgICovXG5cbiAgZnVuY3Rpb24gaW5kZXgodmFsdWUsIG5vbWluYXRpbV9vYmplY3QsIG9wdGlvbmFsX2NvbmZfcGFybSkge1xuICAgICAgLy8gU2hvcnQgY29uc3RhbnRzIHt7e1xuICAgICAgdmFyIHdvcmRfdmFsdWVfcmVwbGFjZW1lbnQgPSB7IC8vIElmIHRoZSBjb3JyZWN0IHZhbHVlcyBjYW4gbm90IGJlIGNhbGN1bGF0ZWQuXG4gICAgICAgICAgZGF3biAgICA6IDYwICogNSArIDMwLFxuICAgICAgICAgIHN1bnJpc2UgOiA2MCAqIDYsXG4gICAgICAgICAgc3Vuc2V0ICA6IDYwICogMTgsXG4gICAgICAgICAgZHVzayAgICA6IDYwICogMTggKyAzMCxcbiAgICAgIH07XG4gICAgICB2YXIgbW9udGhzICAgPSBbJ0phbicsJ0ZlYicsJ01hcicsJ0FwcicsJ01heScsJ0p1bicsJ0p1bCcsJ0F1ZycsJ1NlcCcsJ09jdCcsJ05vdicsJ0RlYyddO1xuICAgICAgdmFyIHdlZWtkYXlzID0gWydTdScsJ01vJywnVHUnLCdXZScsJ1RoJywnRnInLCdTYSddO1xuICAgICAgdmFyIHN0cmluZ190b190b2tlbl9tYXAgPSB7XG4gICAgICAgICAgJ3N1JzogWyAwLCAnd2Vla2RheScgXSxcbiAgICAgICAgICAnbW8nOiBbIDEsICd3ZWVrZGF5JyBdLFxuICAgICAgICAgICd0dSc6IFsgMiwgJ3dlZWtkYXknIF0sXG4gICAgICAgICAgJ3dlJzogWyAzLCAnd2Vla2RheScgXSxcbiAgICAgICAgICAndGgnOiBbIDQsICd3ZWVrZGF5JyBdLFxuICAgICAgICAgICdmcic6IFsgNSwgJ3dlZWtkYXknIF0sXG4gICAgICAgICAgJ3NhJzogWyA2LCAnd2Vla2RheScgXSxcbiAgICAgICAgICAnamFuJzogWyAgMCwgJ21vbnRoJyBdLFxuICAgICAgICAgICdmZWInOiBbICAxLCAnbW9udGgnIF0sXG4gICAgICAgICAgJ21hcic6IFsgIDIsICdtb250aCcgXSxcbiAgICAgICAgICAnYXByJzogWyAgMywgJ21vbnRoJyBdLFxuICAgICAgICAgICdtYXknOiBbICA0LCAnbW9udGgnIF0sXG4gICAgICAgICAgJ2p1bic6IFsgIDUsICdtb250aCcgXSxcbiAgICAgICAgICAnanVsJzogWyAgNiwgJ21vbnRoJyBdLFxuICAgICAgICAgICdhdWcnOiBbICA3LCAnbW9udGgnIF0sXG4gICAgICAgICAgJ3NlcCc6IFsgIDgsICdtb250aCcgXSxcbiAgICAgICAgICAnb2N0JzogWyAgOSwgJ21vbnRoJyBdLFxuICAgICAgICAgICdub3YnOiBbIDEwLCAnbW9udGgnIF0sXG4gICAgICAgICAgJ2RlYyc6IFsgMTEsICdtb250aCcgXSxcbiAgICAgICAgICAnZGF5JzogWyAnZGF5JywgJ2NhbGNkYXknIF0sXG4gICAgICAgICAgJ2RheXMnOiBbICdkYXlzJywgJ2NhbGNkYXknIF0sXG4gICAgICAgICAgJ3N1bnJpc2UnOiBbICdzdW5yaXNlJywgJ3RpbWV2YXInIF0sXG4gICAgICAgICAgJ3N1bnNldCc6IFsgJ3N1bnNldCcsICd0aW1ldmFyJyBdLFxuICAgICAgICAgICdkYXduJzogWyAnZGF3bicsICd0aW1ldmFyJyBdLFxuICAgICAgICAgICdkdXNrJzogWyAnZHVzaycsICd0aW1ldmFyJyBdLFxuICAgICAgICAgICdlYXN0ZXInOiBbICdlYXN0ZXInLCAnZXZlbnQnIF0sXG4gICAgICAgICAgJ3dlZWsnOiBbICd3ZWVrJywgJ3dlZWsnIF0sXG4gICAgICAgICAgJ29wZW4nOiBbICdvcGVuJywgJ3N0YXRlJyBdLFxuICAgICAgICAgICdjbG9zZWQnOiBbICdjbG9zZWQnLCAnc3RhdGUnIF0sXG4gICAgICAgICAgJ29mZic6IFsgJ29mZicsICdzdGF0ZScgXSxcbiAgICAgICAgICAndW5rbm93bic6IFsgJ3Vua25vd24nLCAnc3RhdGUnIF0sXG4gICAgICB9O1xuXG4gICAgICB2YXIgZGVmYXVsdF9wcmV0dGlmeV9jb25mID0ge1xuICAgICAgICAgIC8vIFVwZGF0ZSBSRUFETUUubWQgaWYgY2hhbmdlZC5cbiAgICAgICAgICAnemVyb19wYWRfaG91cic6IHRydWUsICAgICAgICAgICAvLyBlbmZvcmNlIChcIiUwMmRcIiwgaG91cilcbiAgICAgICAgICAnb25lX3plcm9faWZfaG91cl96ZXJvJzogZmFsc2UsICAvLyBvbmx5IG9uZSB6ZXJvIFwiMFwiIGlmIGhvdXIgaXMgemVybyBcIjBcIlxuICAgICAgICAgICdsZWF2ZV9vZmZfY2xvc2VkJzogdHJ1ZSwgICAgICAgIC8vIGxlYXZlIGtleXdvcmRzIFwib2ZmXCIgYW5kIFwiY2xvc2VkXCIgYXMgaXNcbiAgICAgICAgICAna2V5d29yZF9mb3Jfb2ZmX2Nsb3NlZCc6ICdvZmYnLCAvLyB1c2UgZ2l2ZW4ga2V5d29yZCBpbnN0ZWFkIG9mIFwib2ZmXCIgb3IgXCJjbG9zZWRcIlxuICAgICAgICAgICdydWxlX3NlcF9zdHJpbmcnOiAnICcsICAgICAgICAgIC8vIHNlcGFyYXRlIHJ1bGVzIGJ5IHN0cmluZ1xuICAgICAgICAgICdwcmludF9zZW1pY29sb24nOiB0cnVlLCAgICAgICAgIC8vIHByaW50IHRva2VuIHdoaWNoIHNlcGFyYXRlcyBub3JtYWwgcnVsZXNcbiAgICAgICAgICAnbGVhdmVfd2Vla2RheV9zZXBfb25lX2RheV9iZXR3JzogdHJ1ZSwgLy8gdXNlIHRoZSBzZXBhcmF0b3IgKGVpdGhlciBcIixcIiBvciBcIi1cIiB3aGljaCBpcyB1c2VkIHRvIHNlcGFyYXRlIGRheXMgd2hpY2ggZm9sbG93IHRvIGVhY2ggb3RoZXIgbGlrZSBTYSxTdSBvciBTdS1Nb1xuICAgICAgICAgICdzZXBfb25lX2RheV9iZXR3ZWVuJzogJywnLCAgICAgIC8vIHNlcGFyYXRvciB3aGljaCBzaG91bGQgYmUgdXNlZFxuICAgICAgICAgICd6ZXJvX3BhZF9tb250aF9hbmRfd2Vla19udW1iZXJzJzogdHJ1ZSwgLy8gRm9ybWF0IHdlZWsgKGUuZy4gYHdlZWsgMDFgKSBhbmQgbW9udGggZGF5IG51bWJlcnMgKGUuZy4gYEphbiAwMWApIHdpdGggXCIlMDJkXCIuXG4gICAgICAgICAgJ2xvY2FsZSc6ICdlbicsICAgICAgICAgICAgICAgICAgLy8gdXNlIGxvY2FsIGxhbmd1YWdlIChuZWVkcyBpMThuZXh0KVxuICAgICAgfTtcblxuICAgICAgdmFyIG9zbV90YWdfZGVmYXVsdHMgPSB7XG4gICAgICAgICAgJ29wZW5pbmdfaG91cnMnICAgICAgIDogIHsgJ21vZGUnIDogIDAsICd3YXJuX2Zvcl9QSF9taXNzaW5nJyA6ICB0cnVlLCB9LFxuICAgICAgICAgICdjb2xsZWN0aW9uX3RpbWVzJyAgICA6ICB7ICdtb2RlJyA6ICAyLCB9LFxuICAgICAgICAgIC8qIG9oX21vZGUgMjogXCJpbmNsdWRpbmcgdGhlIGh5cGhlbiBiZWNhdXNlIHRoZXJlIGFyZSBwb3N0IGJveGVzIHdoaWNoIGFyZVxuICAgICAgICAgICAqIGVtcHRpZWQgc2V2ZXJhbCAodW5kZWZpbmVkKSB0aW1lcyBvciBvbmUgKHVuZGVmaW5lZCkgdGltZSBpbiBhIGNlcnRhaW4gdGltZVxuICAgICAgICAgICAqIGZyYW1lLiBUaGlzIHNoYWxsIGJlIGNvdmVyZWQgYWxzby5cIi5cbiAgICAgICAgICAgKiBSZWY6IGh0dHBzOi8vd2lraS5vcGVuc3RyZWV0bWFwLm9yZy93aWtpL0tleTpjb2xsZWN0aW9uX3RpbWVzICovXG4gICAgICAgICAgJ29wZW5pbmdfaG91cnM6LisnICAgIDogIHsgJ21vZGUnIDogIDAsIH0sXG4gICAgICAgICAgJy4rOm9wZW5pbmdfaG91cnMnICAgIDogIHsgJ21vZGUnIDogIDAsIH0sXG4gICAgICAgICAgJy4rOm9wZW5pbmdfaG91cnM6LisnIDogIHsgJ21vZGUnIDogIDAsIH0sXG4gICAgICAgICAgJ3Ntb2tpbmdfaG91cnMnICAgICAgIDogIHsgJ21vZGUnIDogIDAsIH0sXG4gICAgICAgICAgJ3NlcnZpY2VfdGltZXMnICAgICAgIDogIHsgJ21vZGUnIDogIDIsIH0sXG4gICAgICAgICAgJ2hhcHB5X2hvdXJzJyAgICAgICAgIDogIHsgJ21vZGUnIDogIDAsIH0sXG4gICAgICAgICAgJ2xpdCcgICAgICAgICAgICAgICAgIDogIHsgJ21vZGUnIDogIDAsXG4gICAgICAgICAgICAgIG1hcDoge1xuICAgICAgICAgICAgICAgICAgJ3llcycgICAgICA6ICdzdW5zZXQtc3VucmlzZSBvcGVuIFwic3BlY2lmaWVkIGFzIHllczogQXQgbmlnaHQgKHVua25vd24gdGltZSBzY2hlZHVsZSBvciBkYXlsaWdodCBkZXRlY3Rpb24pXCInLFxuICAgICAgICAgICAgICAgICAgJ2F1dG9tYXRpYyc6ICd1bmtub3duIFwic3BlY2lmaWVkIGFzIGF1dG9tYXRpYzogV2hlbiBzb21lb25lIGVudGVycyB0aGUgd2F5IHRoZSBsaWdodHMgYXJlIHR1cm5lZCBvbi5cIicsXG4gICAgICAgICAgICAgICAgICAnbm8nICAgICAgIDogJ29mZiBcInNwZWNpZmllZCBhcyBubzogVGhlcmUgYXJlIG5vIGxpZ2h0cyBpbnN0YWxsZWQuXCInLFxuICAgICAgICAgICAgICAgICAgJ2ludGVydmFsJyA6ICd1bmtub3duIFwic3BlY2lmaWVkIGFzIGludGVydmFsXCInLFxuICAgICAgICAgICAgICAgICAgJ2xpbWl0ZWQnICA6ICd1bmtub3duIFwic3BlY2lmaWVkIGFzIGxpbWl0ZWRcIicsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgdmFyIG1pbnV0ZXNfaW5fZGF5ID0gNjAgKiAyNDtcbiAgICAgIHZhciBtc2VjX2luX2RheSAgICA9IDEwMDAgKiA2MCAqIG1pbnV0ZXNfaW5fZGF5O1xuICAgICAgLy8gdmFyIG1zZWNfaW5fd2VlayAgID0gbXNlY19pbl9kYXkgKiA3O1xuXG4gICAgICB2YXIgbGlicmFyeV9uYW1lICAgPSAnb3BlbmluZ19ob3Vycy5qcyc7XG4gICAgICB2YXIgcmVwb3NpdG9yeV91cmwgPSAnaHR0cHM6Ly9naXRodWIuY29tL29wZW5pbmctaG91cnMvJyArIGxpYnJhcnlfbmFtZTtcbiAgICAgIC8vIHZhciBpc3N1ZXNfdXJsICAgICA9IHJlcG9zaXRvcnlfdXJsICsgJy9pc3N1ZXM/c3RhdGU9b3Blbic7XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogVHJhbnNsYXRpb24gZnVuY3Rpb24ge3t7ICovXG4gICAgICAvKiBSb3VnaGx5IGNvbXBhdGlibHkgdG8gaTE4bmV4dCBzbyB3ZSBjYW4gcmVwbGFjZSBldmVyeXRoaW5nIGJ5IGkxOG5leHQgd2l0aFxuICAgICAgICogc3ByaW50ZiBzdXBwb3J0LlxuICAgICAgICovXG4gICAgICB2YXIgbG9jYWxlID0gJ2VuJzsgLy8gRGVmYXVsdCBsb2NhbGVcbiAgICAgIGlmICh0eXBlb2YgaTE4bmV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBsb2NhbGUgPSBpMThuZXh0Lmxhbmd1YWdlO1xuICAgICAgfVxuXG4gICAgICB2YXIgdCA9IGZ1bmN0aW9uKHN0ciwgdmFyaWFibGVzKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgdHlwZW9mIGkxOG5leHQgPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgaTE4bmV4dC50ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgbG9jYWxlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgJiYgWydkZSddLmluZGV4T2YobG9jYWxlKSAhPT0gLTFcbiAgICAgICAgICAgICAgKSB7XG5cbiAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0b3JGdW5jdGlvbjtcbiAgICAgICAgICAgICAgaWYgKGkxOG5leHQubGFuZ3VhZ2UgIT09IGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgdHJhbnNsYXRvckZ1bmN0aW9uID0gaTE4bmV4dC5nZXRGaXhlZFQobG9jYWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0b3JGdW5jdGlvbiA9IGkxOG5leHQudDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgdGV4dCA9IHRyYW5zbGF0b3JGdW5jdGlvbignb3BlbmluZ19ob3Vyczp0ZXh0cy4nICsgc3RyLCB2YXJpYWJsZXMpO1xuICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHRleHQgPSBkYXRhJDFbc3RyXTtcbiAgICAgICAgICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRleHQgPSBzdHI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL3t7KFtee31dKil9fS9nLCBmdW5jdGlvbiAobWF0Y2gsIGMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZXNbY10gIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICA/IHZhcmlhYmxlc1tjXVxuICAgICAgICAgICAgICAgICAgOiBtYXRjaFxuICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgIH07XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogT3B0aW9uYWwgY29uc3RydWN0b3IgcGFyYW1ldGVycyB7e3sgKi9cblxuICAgICAgLyogbm9taW5hdGltX29iamVjdCB7e3tcbiAgICAgICAqXG4gICAgICAgKiBSZXF1aXJlZCB0byByZWFzb25hYmx5IGNhbGN1bGF0ZSAnc3VucmlzZScgYW5kIGhvbGlkYXlzLlxuICAgICAgICovXG4gICAgICB2YXIgbG9jYXRpb25fY2MsIGxvY2F0aW9uX3N0YXRlLCBsYXQsIGxvbjtcbiAgICAgIGlmICh0eXBlb2Ygbm9taW5hdGltX29iamVjdCA9PT0gJ29iamVjdCcgJiYgbm9taW5hdGltX29iamVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygbm9taW5hdGltX29iamVjdC5hZGRyZXNzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG5vbWluYXRpbV9vYmplY3QuYWRkcmVzcy5jb3VudHJ5X2NvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICBsb2NhdGlvbl9jYyA9IG5vbWluYXRpbV9vYmplY3QuYWRkcmVzcy5jb3VudHJ5X2NvZGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBub21pbmF0aW1fb2JqZWN0LmFkZHJlc3Muc3RhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICBsb2NhdGlvbl9zdGF0ZSA9IG5vbWluYXRpbV9vYmplY3QuYWRkcmVzcy5zdGF0ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9taW5hdGltX29iamVjdC5hZGRyZXNzLmNvdW50eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgIGxvY2F0aW9uX3N0YXRlID0gbm9taW5hdGltX29iamVjdC5hZGRyZXNzLmNvdW50eTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2Ygbm9taW5hdGltX29iamVjdC5sb24gPT09ICdzdHJpbmcnICYmIHR5cGVvZiBub21pbmF0aW1fb2JqZWN0LmxhdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgbGF0ID0gbm9taW5hdGltX29iamVjdC5sYXQ7XG4gICAgICAgICAgICAgIGxvbiA9IG5vbWluYXRpbV9vYmplY3QubG9uO1xuICAgICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9taW5hdGltX29iamVjdCA9PT0gbnVsbCkge1xuICAgICAgICAgIC8qIFNldCB0aGUgbG9jYXRpb24gdG8gc29tZSByYW5kb20gdmFsdWUuIFRoaXMgY2FuIGJlIHVzZWQgaWYgeW91IGRvbuKAmXRcbiAgICAgICAgICAgKiBjYXJlIGFib3V0IGNvcnJlY3Qgb3BlbmluZyBob3VycyBmb3IgbW9yZSBjb21wbGV4IG9wZW5pbmdfaG91cnNcbiAgICAgICAgICAgKiB2YWx1ZXMuXG4gICAgICAgICAgICovXG4gICAgICAgICAgbG9jYXRpb25fY2MgPSAnZGUnO1xuICAgICAgICAgIGxvY2F0aW9uX3N0YXRlID0gJ0JhZGVuLVdcXHUwMGZjcnR0ZW1iZXJnJztcbiAgICAgICAgICBsYXQgPSAnNDkuNTQwMDAzOSc7XG4gICAgICAgICAgbG9uID0gJzkuNzkzNzEzMyc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub21pbmF0aW1fb2JqZWN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93ICdUaGUgbm9taW5hdGltX29iamVjdCBwYXJhbWV0ZXIgaXMgb2YgdW5rbm93biB0eXBlLidcbiAgICAgICAgICAgICAgKyAnIEdpdmVuICcgKyB0eXBlb2Yobm9taW5hdGltX29iamVjdClcbiAgICAgICAgICAgICAgKyAnLCBleHBlY3RlZCBvYmplY3QuJztcbiAgICAgIH1cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBtb2RlLCBsb2NhbGUsIHdhcm5pbmdzX3NldmVyaXR5LCB0YWdfa2V5LCBtYXBfdmFsdWUge3t7XG4gICAgICAgKlxuICAgICAgICogMDogdGltZSByYW5nZXMgKGRlZmF1bHQpLCB0YWdzOiBvcGVuaW5nX2hvdXJzLCBsaXQsIOKAplxuICAgICAgICogMTogcG9pbnRzIGluIHRpbWVcbiAgICAgICAqIDI6IGJvdGggKHRpbWUgcmFuZ2VzIGFuZCBwb2ludHMgaW4gdGltZSksIHRhZ3M6IGNvbGxlY3Rpb25fdGltZXMsIHNlcnZpY2VfdGltZXNcbiAgICAgICAqL1xuXG4gICAgICB2YXIgd2FybmluZ3Nfc2V2ZXJpdHkgPSA0O1xuICAgICAgLyogRGVmYXVsdCwgY3VycmVudGx5IHRoZSBoaWdoZXN0IHNldmVyaXR5IHN1cHBvcnRlZC5cbiAgICAgICAqIFRoaXMgbnVtYmVyIGlzIGV4cGVjdGVkIHRvIGJlID49IDQuIFRoaXMgaXMgbm90IGV4cGxpY2l0bHkgY2hlY2tlZC5cbiAgICAgICAqL1xuXG4gICAgICB2YXIgb2hfbW9kZTtcbiAgICAgIHZhciBvaF9tYXBfdmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBvaF9rZXksIG9oX3JlZ2V4X2tleTtcblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25hbF9jb25mX3Bhcm0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgb2hfbW9kZSA9IG9wdGlvbmFsX2NvbmZfcGFybTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbmFsX2NvbmZfcGFybSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbmFsX2NvbmZfcGFybVsnbG9jYWxlJ10gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIC8qIFRPRE86IFRoZSBzcGxpdCB0aGluZyBpcyBvYnZpb3VzbHkgYSB3b3JrYXJvdW5kLiAqL1xuICAgICAgICAgICAgICBsb2NhbGUgPSBvcHRpb25hbF9jb25mX3Bhcm1bJ2xvY2FsZSddLnNwbGl0KCctJylbMF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGVja09wdGlvbmFsQ29uZlBhcm0oJ21vZGUnLCAnbnVtYmVyJykpIHtcbiAgICAgICAgICAgICAgb2hfbW9kZSA9IG9wdGlvbmFsX2NvbmZfcGFybVsnbW9kZSddO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hlY2tPcHRpb25hbENvbmZQYXJtKCd3YXJuaW5nc19zZXZlcml0eScsICdudW1iZXInKSkge1xuICAgICAgICAgICAgICB3YXJuaW5nc19zZXZlcml0eSA9IG9wdGlvbmFsX2NvbmZfcGFybVsnd2FybmluZ3Nfc2V2ZXJpdHknXTtcbiAgICAgICAgICAgICAgaWYgKFsgMCwgMSwgMiwgMywgNCwgNSwgNiwgNyBdLmluZGV4T2Yod2FybmluZ3Nfc2V2ZXJpdHkpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgdCgnd2FybmluZ3Mgc2V2ZXJpdHknLCB7ICdzZXZlcml0eSc6IHdhcm5pbmdzX3NldmVyaXR5LCAnYWxsb3dlZCc6ICdbIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcgXScgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoZWNrT3B0aW9uYWxDb25mUGFybSgndGFnX2tleScsICdzdHJpbmcnKSkge1xuICAgICAgICAgICAgICBvaF9rZXkgPSBvcHRpb25hbF9jb25mX3Bhcm1bJ3RhZ19rZXknXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoZWNrT3B0aW9uYWxDb25mUGFybSgnbWFwX3ZhbHVlJywgJ2Jvb2xlYW4nKSkge1xuICAgICAgICAgICAgICBvaF9tYXBfdmFsdWUgPSBvcHRpb25hbF9jb25mX3Bhcm0ubWFwX3ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbmFsX2NvbmZfcGFybSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyB0KCdvcHRpb25hbCBjb25mIHBhcm0gdHlwZScsIHsgJ2dpdmVuJzogdHlwZW9mKG9wdGlvbmFsX2NvbmZfcGFybSkgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb2hfa2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG9oX3JlZ2V4X2tleSA9IGdldFJlZ2V4S2V5Rm9yS2V5RnJvbU9zbURlZmF1bHRzKG9oX2tleSk7XG5cbiAgICAgICAgICBpZiAob2hfbWFwX3ZhbHVlXG4gICAgICAgICAgICAgICYmIHR5cGVvZiBvc21fdGFnX2RlZmF1bHRzW29oX3JlZ2V4X2tleV0gPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICYmIHR5cGVvZiBvc21fdGFnX2RlZmF1bHRzW29oX3JlZ2V4X2tleV1bJ21hcCddID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAmJiB0eXBlb2Ygb3NtX3RhZ19kZWZhdWx0c1tvaF9yZWdleF9rZXldWydtYXAnXVt2YWx1ZV0gPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICkge1xuXG4gICAgICAgICAgICAgIHZhbHVlID0gb3NtX3RhZ19kZWZhdWx0c1tvaF9yZWdleF9rZXldWydtYXAnXVt2YWx1ZV07XG4gICAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvaF9tYXBfdmFsdWUpIHtcbiAgICAgICAgICB0aHJvdyB0KCdjb25mIHBhcmFtIHRhZyBrZXkgbWlzc2luZycpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9oX21vZGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvaF9rZXkgPT09ICdzdHJpbmcnICYmIG9zbV90YWdfZGVmYXVsdHNbb2hfcmVnZXhfa2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3NtX3RhZ19kZWZhdWx0c1tvaF9yZWdleF9rZXldWydtb2RlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICBvaF9tb2RlID0gb3NtX3RhZ19kZWZhdWx0c1tvaF9yZWdleF9rZXldWydtb2RlJ107XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvaF9tb2RlID0gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9oX21vZGUgPSAwO1xuICAgICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoWyAwLCAxLCAyIF0uaW5kZXhPZihvaF9tb2RlKSA9PT0gLTEpIHtcbiAgICAgICAgICB0aHJvdyB0KCdjb25mIHBhcmFtIG1vZGUgaW52YWxpZCcsIHsgJ2dpdmVuJzogb2hfbW9kZSwgJ2FsbG93ZWQnOiAnWyAwLCAxLCAyIF0nIH0pO1xuICAgICAgfVxuXG4gICAgICAvKiB9fX0gKi9cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvLyBUb2tlbml6ZSB2YWx1ZSBhbmQgZ2VuZXJhdGUgc2VsZWN0b3IgZnVuY3Rpb25zLiB7e3tcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgdCgnbm8gc3RyaW5nJyk7XG4gICAgICB9XG4gICAgICBpZiAoL14oPzpcXHMqOz8pKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgdGhyb3cgdCgnbm90aGluZycpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyc2luZ193YXJuaW5ncyA9IFtdOyAvLyBFbGVtZW50cyBhcmUgZmVkIGludG8gZnVuY3Rpb24gZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsIG1lc3NhZ2UpXG4gICAgICB2YXIgZG9uZV93aXRoX3dhcm5pbmdzID0gZmFsc2U7IC8vIFRoZSBmdW5jdGlvbnMgd2hpY2ggcmV0dXJucyB3YXJuaW5ncyBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlxuICAgICAgdmFyIGRvbmVfd2l0aF9zZWxlY3Rvcl9yZW9yZGVyaW5nID0gZmFsc2U7XG4gICAgICB2YXIgZG9uZV93aXRoX3NlbGVjdG9yX3Jlb3JkZXJpbmdfd2FybmluZ3MgPSBmYWxzZTtcbiAgICAgIHZhciB0b2tlbnMgPSB0b2tlbml6ZSh2YWx1ZSk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh0b2tlbnMsIG51bGwsICcgICAgJykpO1xuICAgICAgdmFyIHByZXR0aWZpZWRfdmFsdWUgPSAnJztcbiAgICAgIHZhciB3ZWVrX3N0YWJsZSA9IHRydWU7XG5cbiAgICAgIHZhciBydWxlcyA9IFtdO1xuICAgICAgdmFyIHJ1bGVfaW5mb3MgPSB7fTtcbiAgICAgIC8qIE5vdCByZWxpYWJsZSBiZWNhdXNlIHRva2VucyAhPT0gbmV3X3Rva2VucyAqL1xuICAgICAgLy8gZm9yICh2YXIgbnJ1bGUgPSAwOyBucnVsZSA8IHRva2Vucy5sZW5ndGg7IG5ydWxlKyspIHtcbiAgICAgIC8vICAgICBydWxlX2luZm9zW25ydWxlXSA9IHt9O1xuICAgICAgLy8gfVxuICAgICAgdmFyIG5ld190b2tlbnMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgbnJ1bGUgPSAwOyBucnVsZSA8IHRva2Vucy5sZW5ndGg7IG5ydWxlKyspIHtcbiAgICAgICAgICBpZiAodG9rZW5zW25ydWxlXVswXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgLy8gUnVsZSBkb2VzIGNvbnRhaW4gbm90aGluZyB1c2VmdWwgZS5nLiBzZWNvbmQgcnVsZSBvZiAnMTA6MDAtMTI6MDA7JyAoZW1wdHkpIHdoaWNoIG5lZWRzIHRvIGJlIGhhbmRsZWQuXG4gICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbbnJ1bGUsIC0xLFxuICAgICAgICAgICAgICAgICAgdCgnbm90aGluZyB1c2VmdWwnKVxuICAgICAgICAgICAgICAgICAgKyAobnJ1bGUgPT09IHRva2Vucy5sZW5ndGggLSAxICYmIG5ydWxlID4gMCAmJiAhdG9rZW5zW25ydWxlXVsxXSA/XG4gICAgICAgICAgICAgICAgICAgICAgJyAnICsgdCgncHJvZ3JhbW1lcnMgam9rZScpIDogJycpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNvbnRpbnVlX2F0ID0gMDtcbiAgICAgICAgICB2YXIgbmV4dF9ydWxlX2lzX2FkZGl0aW9uYWwgPSBmYWxzZTtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIGlmIChjb250aW51ZV9hdCA9PT0gdG9rZW5zW25ydWxlXVswXS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIC8qIEFkZGl0aW9uYWwgcnVsZSBkb2VzIGNvbnRhaW4gbm90aGluZyB1c2VmdWwgZS5nLiBzZWNvbmQgcnVsZVxuICAgICAgICAgICAgICAgICAgICogb2YgJzEwOjAwLTEyOjAwLCcgKGVtcHR5KSB3aGljaCBuZWVkcyB0byBiZSBoYW5kbGVkLlxuICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgcnVsZSA9IHtcbiAgICAgICAgICAgICAgICAgIC8vIFRpbWUgc2VsZWN0b3JzXG4gICAgICAgICAgICAgICAgICB0aW1lOiBbXSxcblxuICAgICAgICAgICAgICAgICAgLy8gVGVtcG9yYXJ5IGFycmF5IG9mIHNlbGVjdG9ycyBmcm9tIHRpbWUgd3JhcHBlZCB0byB0aGUgbmV4dCBkYXlcbiAgICAgICAgICAgICAgICAgIHdyYXB0aW1lOiBbXSxcblxuICAgICAgICAgICAgICAgICAgLy8gRGF0ZSBzZWxlY3RvcnNcbiAgICAgICAgICAgICAgICAgIHdlZWtkYXk6IFtdLFxuICAgICAgICAgICAgICAgICAgaG9saWRheTogW10sXG4gICAgICAgICAgICAgICAgICB3ZWVrOiBbXSxcbiAgICAgICAgICAgICAgICAgIG1vbnRoOiBbXSxcbiAgICAgICAgICAgICAgICAgIG1vbnRoZGF5OiBbXSxcbiAgICAgICAgICAgICAgICAgIHllYXI6IFtdLFxuXG4gICAgICAgICAgICAgICAgICAvLyBBcnJheSB3aXRoIG5vbi1lbXB0eSBkYXRlIHNlbGVjdG9yIHR5cGVzLCB3aXRoIG1vc3Qgb3B0aW1hbCBvcmRlcmluZ1xuICAgICAgICAgICAgICAgICAgZGF0ZTogW10sXG5cbiAgICAgICAgICAgICAgICAgIGZhbGxiYWNrOiB0b2tlbnNbbnJ1bGVdWzFdLFxuICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbDogY29udGludWVfYXQgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBtZWFuaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgdW5rbm93bjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBjb21tZW50OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBidWlsZF9mcm9tX3Rva2VuX3J1bGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBydWxlLmJ1aWxkX2Zyb21fdG9rZW5fcnVsZSA9IFsgbnJ1bGUsIGNvbnRpbnVlX2F0LCBuZXdfdG9rZW5zLmxlbmd0aCBdO1xuICAgICAgICAgICAgICBjb250aW51ZV9hdCA9IHBhcnNlR3JvdXAodG9rZW5zW25ydWxlXVswXSwgY29udGludWVfYXQsIHJ1bGUsIG5ydWxlKTtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250aW51ZV9hdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlX2F0ID0gY29udGludWVfYXRbMF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZV9hdCA9IDA7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQ3VycmVudCB0b2tlbnM6ICcgKyBKU09OLnN0cmluZ2lmeSh0b2tlbnNbbnJ1bGVdLCBudWxsLCAnICAgICcpKTtcblxuICAgICAgICAgICAgICBuZXdfdG9rZW5zLnB1c2goXG4gICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgdG9rZW5zW25ydWxlXVswXS5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5idWlsZF9mcm9tX3Rva2VuX3J1bGVbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlX2F0ID09PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRva2Vuc1tucnVsZV1bMF0ubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNvbnRpbnVlX2F0XG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICB0b2tlbnNbbnJ1bGVdWzFdLFxuICAgICAgICAgICAgICAgICAgICAgIHRva2Vuc1tucnVsZV1bMl0sXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgaWYgKG5leHRfcnVsZV9pc19hZGRpdGlvbmFsICYmIG5ld190b2tlbnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgLy8gTW92ZSAncnVsZSBzZXBhcmF0b3InIGZyb20gbGFzdCB0b2tlbiBvZiBsYXN0IHJ1bGUgdG8gZmlyc3QgdG9rZW4gb2YgdGhpcyBydWxlLlxuICAgICAgICAgICAgICAgICAgbmV3X3Rva2Vuc1tuZXdfdG9rZW5zLmxlbmd0aCAtIDFdWzBdLnVuc2hpZnQobmV3X3Rva2Vuc1tuZXdfdG9rZW5zLmxlbmd0aCAtIDJdWzBdLnBvcCgpKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG5leHRfcnVsZV9pc19hZGRpdGlvbmFsID0gY29udGludWVfYXQgPT09IDAgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgICAgICAgdmFyIG9wdGltYWxfc2VsZWN0b3Jfb3JkZXIgPSBbJ3llYXInLCAnaG9saWRheScsICdtb250aCcsICdtb250aGRheScsICd3ZWVrJywgJ3dlZWtkYXknXTtcbiAgICAgICAgICAgICAgb3B0aW1hbF9zZWxlY3Rvcl9vcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAocnVsZVtlbGVtZW50XS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcnVsZS5kYXRlLnB1c2gocnVsZVtlbGVtZW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgcnVsZVtlbGVtZW50XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnUnVsZTogJyArIEpTT04uc3RyaW5naWZ5KHJ1bGUsIG51bGwsICcgICAgJykpO1xuICAgICAgICAgICAgICBydWxlcy5wdXNoKHJ1bGUpO1xuXG4gICAgICAgICAgICAgIC8qIFRoaXMgaGFuZGxlcyBzZWxlY3RvcnMgd2l0aCB0aW1lIHJhbmdlcyB3cmFwcGluZyBvdmVyIG1pZG5pZ2h0IChlLmcuIDEwOjAwLTAyOjAwKS5cbiAgICAgICAgICAgICAgICogSXQgZ2VuZXJhdGVzIHdyYXBwZXJzIGZvciBhbGwgc2VsZWN0b3JzIGFuZCBjcmVhdGVzIGEgbmV3IHJ1bGUuXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBpZiAocnVsZS53cmFwdGltZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgd3JhcHNlbGVjdG9ycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBydWxlLndyYXB0aW1lLFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IFtdLFxuXG4gICAgICAgICAgICAgICAgICAgICAgbWVhbmluZzogcnVsZS5tZWFuaW5nLFxuICAgICAgICAgICAgICAgICAgICAgIHVua25vd246IHJ1bGUudW5rbm93bixcbiAgICAgICAgICAgICAgICAgICAgICBjb21tZW50OiBydWxlLmNvbW1lbnQsXG5cbiAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkX2Zyb21fdG9rZW5fcnVsZTogcnVsZS5idWlsZF9mcm9tX3Rva2VuX3J1bGUsXG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBkc2VsZyA9IDA7IGRzZWxnIDwgcnVsZS5kYXRlLmxlbmd0aDsgZHNlbGcrKykge1xuICAgICAgICAgICAgICAgICAgICAgIHdyYXBzZWxlY3RvcnMuZGF0ZS5wdXNoKFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkc2VsID0gMDsgZHNlbCA8IHJ1bGUuZGF0ZVtkc2VsZ10ubGVuZ3RoOyBkc2VsKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHNlbGVjdG9ycy5kYXRlW3dyYXBzZWxlY3RvcnMuZGF0ZS5sZW5ndGgtMV0ucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZURhdGVTaGlmdGVyKHJ1bGUuZGF0ZVtkc2VsZ11bZHNlbF0sIC04NjRlNSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBydWxlcy5wdXNoKHdyYXBzZWxlY3RvcnMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAoY29udGludWVfYXQpO1xuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkodG9rZW5zLCBudWxsLCAnICAgICcpKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KG5ld190b2tlbnMsIG51bGwsICcgICAgJykpO1xuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIEhlbHBlciBmdW5jdGlvbnMge3t7ICovXG4gICAgICAvKiBHZXQgcmVnZXggc3RyaW5nIGtleSBmcm9tIGtleSBvc21fdGFnX2RlZmF1bHRzLiB7e3tcbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0ga2V5OiBUYWcga2V5IGUuZy4gb3BlbmluZ19ob3VyczpraXRjaGVuLlxuICAgICAgICogOnJldHVybnM6IFJlZ2V4IGtleSBmcm9tIG9zbV90YWdfZGVmYXVsdHMgZS5nLiBvcGVuaW5nX2hvdXJzOi4qXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldFJlZ2V4S2V5Rm9yS2V5RnJvbU9zbURlZmF1bHRzKGtleSkge1xuICAgICAgICAgIHZhciByZWdleF9rZXk7XG4gICAgICAgICAgdmFyIGV4YWN0X21hdGNoID0gZmFsc2U7XG5cbiAgICAgICAgICBPYmplY3Qua2V5cyhvc21fdGFnX2RlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChvc21fa2V5KSB7XG4gICAgICAgICAgICAgIGlmIChleGFjdF9tYXRjaCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChrZXkgPT09IG9zbV9rZXkpIHsgLy8gRXhhY3QgbWF0Y2guXG4gICAgICAgICAgICAgICAgICByZWdleF9rZXkgPSBvc21fa2V5O1xuICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuJ3QganVzdCByZXR1cm4gaGVyZSBhcyBzb21lIG9sZCBicm93c2Vyc1xuICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgaW50ZXJwcmV0IGl0IGFzIGEgZmluYWwgcmV0dXJuIChsaWtlIGEgbG9vcCBicmVhaylcbiAgICAgICAgICAgICAgICAgIGV4YWN0X21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChuZXcgUmVnRXhwKG9zbV9rZXkpLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgcmVnZXhfa2V5ID0gb3NtX2tleTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiByZWdleF9rZXk7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogQ2hlY2sgZ2l2ZW4gZWxlbWVudCBpbiBvcHRpb25hbF9jb25mX3Bhcm0uIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSBrZXk6IEtleSBvZiBvcHRpb25hbF9jb25mX3Bhcm0uXG4gICAgICAgKiA6cGFyYW0gZXhwZWN0ZWRfdHlwZTogRXhwZWN0ZWQgYHR5cGVvZigpYCB0aGUgcGFyYW1ldGVyLlxuICAgICAgICogOnJldHVybnM6IFRydWUgaWYgdGhlIGV4cGVjdGVkIHR5cGUgbWF0Y2hlcyB0aGUgZ2l2ZW4gdHlwZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gY2hlY2tPcHRpb25hbENvbmZQYXJtKGtleSwgZXhwZWN0ZWRfdHlwZSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uYWxfY29uZl9wYXJtW2tleV0gPT09IGV4cGVjdGVkX3R5cGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9uYWxfY29uZl9wYXJtW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IHQoJ2NvbmYgcGFyYW0gdW5rbm93biB0eXBlJywgeyAna2V5Jzoga2V5LCAnZ2l2ZW4nOiB0eXBlb2Yob3B0aW9uYWxfY29uZl9wYXJtW2tleV0pLCAnZXhwZWN0ZWQnOiBleHBlY3RlZF90eXBlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBGb3JtYXQgd2FybmluZyBvciBlcnJvciBtZXNzYWdlIGZvciB0aGUgdXNlci4ge3t7XG4gICAgICAgKlxuICAgICAgICogOnBhcmFtIG5ydWxlOiBSdWxlIG51bWJlciBzdGFydGluZyB3aXRoIDAuXG4gICAgICAgKiA6cGFyYW0gYXQ6IFRva2VuIHBvc2l0aW9uIGF0IHdoaWNoIHRoZSBpc3N1ZSBvY2N1cnJlZC5cbiAgICAgICAqIDpwYXJhbSBtZXNzYWdlOiBIdW1hbiByZWFkYWJsZSBzdHJpbmcgd2l0aCB0aGUgbWVzc2FnZS5cbiAgICAgICAqIDpwYXJhbSB0b2tlbnNfdG9fdXNlOiBMaXN0IG9mIHRva2VuIG9iamVjdHMuXG4gICAgICAgKiA6cmV0dXJuczogU3RyaW5nIHdpdGggcG9zaXRpb24gb2YgdGhlIHdhcm5pbmcgb3IgZXJyb3IgbWFya2VkIGZvciB0aGUgdXNlci5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsIG1lc3NhZ2UsIHRva2Vuc190b191c2UpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRva2Vuc190b191c2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRva2Vuc190b191c2UgPSB0b2tlbnM7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBDYWxsZWQgZm9ybWF0V2FybkVycm9yTWVzc2FnZTogJHtucnVsZX0sICR7YXR9LCAke21lc3NhZ2V9YCk7XG4gICAgICAgICAgLy8gRklYTUU6IENoYW5nZSB0byBuZXdfdG9rZW5zLlxuICAgICAgICAgIGlmICh0eXBlb2YgbnJ1bGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIHZhciBwb3MgPSAwO1xuICAgICAgICAgICAgICBpZiAobnJ1bGUgPT09IC0xKSB7IC8vIFVzYWdlIG9mIHJ1bGUgaW5kZXggbm90IHJlcXVpcmVkIGJlY2F1c2Ugd2UgZG8gaGF2ZSBhY2Nlc3MgdG8gdmFsdWUubGVuZ3RoLlxuICAgICAgICAgICAgICAgICAgcG9zID0gdmFsdWUubGVuZ3RoIC0gYXQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7IC8vIElzc3VlIG9jY3VycmVkIGF0IGEgbGF0ZXIgdGltZSwgcG9zaXRpb24gaW4gc3RyaW5nIG5lZWRzIHRvIGJlIHJlY29uc3RydWN0ZWQuXG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2Vuc190b191c2VbbnJ1bGVdWzBdW2F0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2Vuc190b191c2VbbnJ1bGVdWzBdICYmIGF0ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW5zX3RvX3VzZVtucnVsZSsxXSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRva2Vuc190b191c2VbbnJ1bGUrMV1bMl0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgLT0gdG9rZW5zX3RvX3VzZVtucnVsZSsxXVsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdG9rZW5zX3RvX3VzZVtucnVsZV1bMl0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgLT0gdG9rZW5zX3RvX3VzZVtucnVsZV1bMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHaXZlbiBwb3NpdGlvbiBpcyBpbnZhbGlkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRMaWJyYXJ5QnVnTWVzc2FnZSgnQnVnIGluIHdhcm5pbmcgZ2VuZXJhdGlvbiBjb2RlIHdoaWNoIGNvdWxkIG5vdCBkZXRlcm1pbmUgdGhlIGV4YWN0IHBvc2l0aW9uIG9mIHRoZSB3YXJuaW5nIG9yIGVycm9yIGluIHZhbHVlLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW5zX3RvX3VzZVtucnVsZV1bMl0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGYWxsYmFjazogUG9pbnQgdG8gbGFzdCB0b2tlbiBpbiB0aGUgcnVsZSB3aGljaCBjYXVzZWQgdGhlIHByb2JsZW0uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSdW4gcmVhbF90ZXN0IHJlZ3VsYXJseSB0byBmaXggdGhlIHByb2JsZW0gYmVmb3JlIGEgdXNlciBpcyBjb25mcm9udGVkIHdpdGggaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgLT0gdG9rZW5zX3RvX3VzZVtucnVsZV1bMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0xhc3QgdG9rZW4gZm9yIHJ1bGU6ICcgKyBKU09OLnN0cmluZ2lmeSh0b2tlbnNfdG9fdXNlW25ydWxlXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codmFsdWUuc3Vic3RyaW5nKDAsIHBvcykgKyAnIDwtLS0gKCcgKyBtZXNzYWdlICsgJyknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3Rva2Vuc190b191c2VbbnJ1bGVdWzJdIGlzIHVuZGVmaW5lZC4gVGhpcyBpcyBvayBpZiBucnVsZSBpcyB0aGUgbGFzdCBydWxlLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwb3MgPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b2tlbnNfdG9fdXNlW25ydWxlXVswXVthdCsxXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zIC09IHRva2Vuc190b191c2VbbnJ1bGVdWzBdW2F0KzFdWzJdO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRva2Vuc190b191c2VbbnJ1bGVdWzJdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgLT0gdG9rZW5zX3RvX3VzZVtucnVsZV1bMl07XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgcG9zKSArICcgPC0tLSAoJyArIG1lc3NhZ2UgKyAnKSc7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbnJ1bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBucnVsZS5zdWJzdHJpbmcoMCwgYXQpICsgJyA8LS0tICgnICsgbWVzc2FnZSArICcpJztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogRm9ybWF0IGludGVybmFsIGxpYnJhcnkgZXJyb3IgbWVzc2FnZS4ge3t7XG4gICAgICAgKlxuICAgICAgICogOnBhcmFtIG1lc3NhZ2U6IEh1bWFuIHJlYWRhYmxlIHN0cmluZyB3aXRoIHRoZSBlcnJvciBtZXNzYWdlLlxuICAgICAgICogOnBhcmFtIHRleHRfdGVtcGxhdGU6IE1lc3NhZ2UgdGVtcGxhdGUgZGVmaW5lZCBpbiB0aGUgYGxhbmdgIHZhcmlhYmxlIHRvIHVzZSBmb3IgdGhlIGVycm9yIG1lc3NhZ2UuIERlZmF1bHRzIHRvICdsaWJyYXJ5IGJ1ZycuXG4gICAgICAgKiA6cmV0dXJuczogRXJyb3IgbWVzc2FnZSBmb3IgdGhlIHVzZXIuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGZvcm1hdExpYnJhcnlCdWdNZXNzYWdlKG1lc3NhZ2UsIHRleHRfdGVtcGxhdGUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtZXNzYWdlID0gJyAnICsgbWVzc2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB0ZXh0X3RlbXBsYXRlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICB0ZXh0X3RlbXBsYXRlID0gJ2xpYnJhcnkgYnVnJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlID0gdCh0ZXh0X3RlbXBsYXRlLCB7ICd2YWx1ZSc6IHZhbHVlLCAndXJsJzogcmVwb3NpdG9yeV91cmwsICdtZXNzYWdlJzogbWVzc2FnZSB9KTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgfSAvKiB9fX0gKi9cblxuICAgICAgLyogVG9rZW5pemUgaW5wdXQgc3RyZWFtIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB2YWx1ZTogUmF3IG9wZW5pbmdfaG91cnMgdmFsdWUuXG4gICAgICAgKiA6cmV0dXJuczogVG9rZW5pemVkIGxpc3Qgb2JqZWN0LiBDb21wbGV4IHN0cnVjdHVyZS4gQ2hlY2sgdGhlXG4gICAgICAgKiAgICAgICAgaW50ZXJuYWwgZG9jdW1lbnRhdGlvbiBpbiB0aGUgZG9jcy8gZGlyZWN0b3J5IGZvciBkZXRhaWxzLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB0b2tlbml6ZSh2YWx1ZSkge1xuICAgICAgICAgIHZhciBhbGxfdG9rZW5zICAgICAgID0gW107XG4gICAgICAgICAgdmFyIGN1cnJfcnVsZV90b2tlbnMgPSBbXTtcblxuICAgICAgICAgIHZhciBsYXN0X3J1bGVfZmFsbGJhY2tfdGVybWluYXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgd2hpbGUgKHZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAvKiBPcmRlcmVkIGFmdGVyIGxpa2VsaWhvb2Qgb2YgaW5wdXQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gICAgICAgICAgICAgICAqIEFsc28sIGVycm9yIHRvbGVyYW5jZSBpcyBzdXBwb3NlZCB0byBoYXBwZW4gYXQgdGhlIGVuZC5cbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiUGFyc2luZyB2YWx1ZTogXCIgKyB2YWx1ZSk7XG4gICAgICAgICAgICAgIHZhciB0bXAgPSB2YWx1ZS5tYXRjaCgvXihbYS16XXsyLH0pXFxiKCg/OlsuXXwgYmVmb3JlfCBhZnRlcik/KS9pKTtcbiAgICAgICAgICAgICAgdmFyIHRva2VuX2Zyb21fbWFwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBpZiAodG1wICYmIHRtcFsyXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgIHRva2VuX2Zyb21fbWFwID0gc3RyaW5nX3RvX3Rva2VuX21hcFt0bXBbMV0udG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b2tlbl9mcm9tX21hcCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJfcnVsZV90b2tlbnMucHVzaCh0b2tlbl9mcm9tX21hcC5jb25jYXQoW3ZhbHVlLmxlbmd0aF0pKTtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKHRtcFsxXS5sZW5ndGgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRtcCA9IHZhbHVlLm1hdGNoKC9eXFxzKy8pKSB7XG4gICAgICAgICAgICAgICAgICAvLyB3aGl0ZXNwYWNlIGlzIGlnbm9yZWRcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKHRtcFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRtcCA9IHZhbHVlLm1hdGNoKC9eMjRcXC83LykpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFJlc2VydmVkIGtleXdvcmQuXG4gICAgICAgICAgICAgICAgICBjdXJyX3J1bGVfdG9rZW5zLnB1c2goW3RtcFswXSwgdG1wWzBdLCB2YWx1ZS5sZW5ndGggXSk7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cih0bXBbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXjsvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBzZW1pY29sb24gdGVybWluYXRlcyBydWxlLlxuICAgICAgICAgICAgICAgICAgLy8gTmV4dCB0b2tlbiBiZWxvbmcgdG8gYSBuZXcgcnVsZS5cbiAgICAgICAgICAgICAgICAgIGFsbF90b2tlbnMucHVzaChbIGN1cnJfcnVsZV90b2tlbnMsIGxhc3RfcnVsZV9mYWxsYmFja190ZXJtaW5hdGVkLCB2YWx1ZS5sZW5ndGggXSk7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigxKTtcblxuICAgICAgICAgICAgICAgICAgY3Vycl9ydWxlX3Rva2VucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgbGFzdF9ydWxlX2ZhbGxiYWNrX3Rlcm1pbmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXls6Ll0vLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaW1lIHNlcGFyYXRvciAodGltZXNlcCkuXG4gICAgICAgICAgICAgICAgICBpZiAodmFsdWVbMF0gPT09ICcuJyAmJiAhZG9uZV93aXRoX3dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFsgLTEsIHZhbHVlLmxlbmd0aCAtIDEsIHQoJ2hvdXIgbWluIHNlcGFyYXRvcicpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjdXJyX3J1bGVfdG9rZW5zLnB1c2goWyAnOicsICd0aW1lc2VwJywgdmFsdWUubGVuZ3RoIF0pO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodG1wID0gdmFsdWUubWF0Y2goL14oPzpQSHxTSCkvaSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgZGF5IG5hbWUgKGhvbGlkYXlzKVxuICAgICAgICAgICAgICAgICAgY3Vycl9ydWxlX3Rva2Vucy5wdXNoKFt0bXBbMF0udG9VcHBlckNhc2UoKSwgJ2hvbGlkYXknLCB2YWx1ZS5sZW5ndGggXSk7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0bXAgPSB2YWx1ZS5tYXRjaCgvXlvCsFxcdTIwNzAtXFx1MjA5RlxcdTAwQjJcXHUwMEIzXFx1MDBCOV17MSwyfS8pKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdW5pY29kZV9jb2RlX3BvaW50X3RvX2RpZ2l0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgIDE3NjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAweDIwNzA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgMTg1OiAxLFxuICAgICAgICAgICAgICAgICAgICAgIDE3ODogMixcbiAgICAgICAgICAgICAgICAgICAgICAxNzk6IDMsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgdmFyIHJlZ3VsYXJfbnVtYmVyID0gdG1wWzBdLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGNvZGVfcG9pbnQgPSBjaC5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdW5pY29kZV9jb2RlX3BvaW50X3RvX2RpZ2l0W2NvZGVfcG9pbnRdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5pY29kZV9jb2RlX3BvaW50X3RvX2RpZ2l0W2NvZGVfcG9pbnRdO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoMHgyMDc0IDw9IGNvZGVfcG9pbnQgJiYgY29kZV9wb2ludCA8PSAweDIwNzkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvZGVfcG9pbnQgLSAweDIwNzA7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgweDIwODAgPD0gY29kZV9wb2ludCAmJiBjb2RlX3BvaW50IDw9IDB4MjA4OSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29kZV9wb2ludCAtIDB4MjA4MDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KS5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICAgIHZhciBvayA9ICcnO1xuICAgICAgICAgICAgICAgICAgaWYgKGN1cnJfcnVsZV90b2tlbnMubGVuZ3RoID4gMCAmJiBtYXRjaFRva2VucyhjdXJyX3J1bGVfdG9rZW5zLCBjdXJyX3J1bGVfdG9rZW5zLmxlbmd0aC0xLCAnbnVtYmVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvayArPSAnOic7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBvayArPSByZWd1bGFyX251bWJlcjtcbiAgICAgICAgICAgICAgICAgIGlmICghZG9uZV93aXRoX3dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdG1wWzBdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQ29kZUF0KGkpID09PSAxNzYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbIC0xLCB2YWx1ZS5sZW5ndGggLSAoMSArIGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0KCdyYW50IGRlZ3JlZSBzaWduIHVzZWQgZm9yIHplcm8nKV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbIC0xLCB2YWx1ZS5sZW5ndGggLSB0bXBbMF0ubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCgncGxlYXNlIHVzZSBvayBmb3Iga28nLCB7J2tvJzogdG1wWzBdLCAnb2snOiBva30pXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9rICsgdmFsdWUuc3Vic3RyKHRtcFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRtcCA9IHZhbHVlLm1hdGNoKC9eKCZ8X3zihpJ84oCTfOKIknzigJR844O8fD18wrd8w7ZmZm51bmdzemVpdCg/OmVuKT86P3xvcGVuaW5nX2hvdXJzXFxzKj18XFw/fH58772efO+8mnxhbHdheXMgKD86b3BlbnxjbG9zZWQpfDI0eDd8MjQgaG91cnMgNyBkYXlzIGEgd2Vla3wyNCBob3Vyc3w3ID9kYXlzKD86KD86IGEgfFxcLyl3ZWVrKT98N2o/XFwvN3xhbGwgZGF5cz98ZXZlcnkgZGF5fCg/OmJpc3x0aWxsP3wtfOKAkyk/ID8oPzpvcGVuID9lbmR8bGF0ZSl8KD86KD86b25lICk/ZGF5ICg/OmJlZm9yZXxhZnRlcikgKT8oPzpzY2hvb2x8cHVibGljKSBob2xpZGF5cz98ZGF5cz9cXGJ80LTQvnzRgNC8fNCw0Lx8am91cnMgZsOpcmnDqXN8b24gd29yayBkYXlzP3xzb25udGFncz98KD86bnVyIHxhbiApP3Nvbm4tPyg/Oig/OiB1bmQgfFxcLylmZWllcnRhZyg/OnN8ZW4/KT8pP3woPzphbiApP2ZlaWVydGFnKD86c3xlbj8pP3woPzpuYWNofG9ufGJ5KSAoPzphcHBvaW50bWVudHM/fHZlcmVpbmJhcnVuZ3xhYnNwcmFjaGUpfHBcXC5tXFwufGFcXC5tXFwufFtfYS16w6TDtsOfw6DDocOpw7jEjcSbw63DusO9xZnQn9C90JLRgdC+XStcXGJ8w6B8w6F8bW98dHV8d2V8dGh8ZnJ8c2F8c3V8amFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpKFxcLj8pL2kpKSB7XG4gICAgICAgICAgICAgICAgICAvKiBIYW5kbGUgYWxsIHJlbWFpbmluZyB3b3JkcyBhbmQgc3BlY2lmaWMgb3RoZXIgY2hhcmFjdGVycyB3aXRoIGVycm9yIHRvbGVyYW5jZS5cbiAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgKiDDoHzDoTogV29yZCBib3VuZGFyeSBkb2VzIG5vdCB3b3JrIHdpdGggVW5pY29kZSBjaGFyczogJ3Rlc3Qgw6AgdGVzdCcubWF0Y2goL1xcYsOgXFxiL2kpXG4gICAgICAgICAgICAgICAgICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDU5MDA5OC9qYXZhc2NyaXB0LXJlZ2V4cC13b3JkLWJvdW5kYXJpZXMtdW5pY29kZS1jaGFyYWN0ZXJzXG4gICAgICAgICAgICAgICAgICAgKiBPcmRlciBpbiB0aGUgcmVndWxhciBleHByZXNzaW9uIGNhcHR1cmluZyBncm91cCBpcyBpbXBvcnRhbnQgaW4gc29tZSBjYXNlcy5cbiAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgKiBtb3x0dXx3ZXx0aHxmcnxzYXxzdXxqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYzogUHJlZmVyIGRlZmVuZGVkIGtleXdvcmRzXG4gICAgICAgICAgICAgICAgICAgKiBpZiB1c2VkIGluIGNhc2VzIGxpa2UgJ21vMTI6MDAtMTQ6MDAnICh3aGVuIGtleXdvcmQgaXMgZm9sbG93ZWQgYnkgbnVtYmVyKS5cbiAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgdmFyIGNvcnJlY3RfdmFsID0gcmV0dXJuQ29ycmVjdFdvcmRPclRva2VuKHRtcFsxXS50b0xvd2VyQ2FzZSgpLCB2YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0Vycm9yIHRvbGVyYW5jZSBmb3Igc3RyaW5nIFwiJyArIHRtcFsxXSArICdcIiByZXR1cm5lZCBcIicgKyBjb3JyZWN0X3ZhbCArICdcIi4nKTtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29ycmVjdF92YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY3Vycl9ydWxlX3Rva2Vucy5wdXNoKFsgY29ycmVjdF92YWxbMF0sIGNvcnJlY3RfdmFsWzFdLCB2YWx1ZS5sZW5ndGggXSk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIodG1wWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb3JyZWN0X3ZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY29ycmVjdF92YWwgPT09ICdhbScgfHwgY29ycmVjdF92YWwgPT09ICdwbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvdXJzX3Rva2VuX2F0ID0gY3Vycl9ydWxlX3Rva2Vucy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG91cnNfdG9rZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3Vyc190b2tlbl9hdCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG91cnNfdG9rZW5fYXQgLTIgPj0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFRva2VucyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJfcnVsZV90b2tlbnMsIGhvdXJzX3Rva2VuX2F0IC0gMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdudW1iZXInLCAndGltZXNlcCcsICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJzX3Rva2VuX2F0IC09IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91cnNfdG9rZW4gPSBjdXJyX3J1bGVfdG9rZW5zW2hvdXJzX3Rva2VuX2F0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hUb2tlbnMoY3Vycl9ydWxlX3Rva2VucywgaG91cnNfdG9rZW5fYXQsICdudW1iZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJzX3Rva2VuID0gY3Vycl9ydWxlX3Rva2Vuc1tob3Vyc190b2tlbl9hdF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaG91cnNfdG9rZW4gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcnJlY3RfdmFsID09PSAncG0nICYmIGhvdXJzX3Rva2VuWzBdIDwgMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91cnNfdG9rZW5bMF0gKz0gMTI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JyZWN0X3ZhbCA9PT0gJ2FtJyAmJiBob3Vyc190b2tlblswXSA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91cnNfdG9rZW5bMF0gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyX3J1bGVfdG9rZW5zW2hvdXJzX3Rva2VuX2F0XSA9IGhvdXJzX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3RfdmFsID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3JyZWN0X3Rva2VucyA9IHRva2VuaXplKGNvcnJlY3RfdmFsKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY29ycmVjdF90b2tlbnNbMV0gPT09IHRydWUpIHsgLy8gbGFzdF9ydWxlX2ZhbGxiYWNrX3Rlcm1pbmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0TGlicmFyeUJ1Z01lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3JyZWN0X3Rva2Vuc1swXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyX3J1bGVfdG9rZW5zLnB1c2goW2NvcnJlY3RfdG9rZW5zWzBdW2ldWzBdLCBjb3JyZWN0X3Rva2Vuc1swXVtpXVsxXSwgdmFsdWUubGVuZ3RoXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlLmxlbmd0aCAtIHRtcFswXS5sZW5ndGggZG9lcyBub3QgaGF2ZSB0aGUgZGVzaXJlZCBlZmZlY3QgZm9yIGFsbCB0ZXN0IGNhc2VzLlxuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKHRtcFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlID0gY29ycmVjdF92YWwgKyB2YWx1ZS5zdWJzdHIodG1wWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gRG9lcyBub3Qgd29yayBiZWNhdXNlIGl0IHdvdWxkIGdlbmVyYXRlIHRoZSB3cm9uZyBsZW5ndGggZm9yIGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGNvcnJlY3Rpb24gYXZhaWxhYmxlLiBJbnNlcnQgYXMgc2luZ2xlIGNoYXJhY3RlciB0b2tlbiBhbmQgbGV0IHRoZSBwYXJzZXIgaGFuZGxlIHRoZSBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgICBjdXJyX3J1bGVfdG9rZW5zLnB1c2goW3ZhbHVlWzBdLnRvTG93ZXJDYXNlKCksIHZhbHVlWzBdLnRvTG93ZXJDYXNlKCksIHZhbHVlLmxlbmd0aCAtIDEgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRtcFsyXSA9PT0gJ3N0cmluZycgJiYgdG1wWzJdICE9PSAnJyAmJiAhZG9uZV93aXRoX3dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFsgLTEsIHZhbHVlLmxlbmd0aCwgdCgnb21pdCBrbycsIHsna28nOiB0bXBbMl19KV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRtcCA9IHZhbHVlLm1hdGNoKC9eKFxcZCspKD86KFsuXSkoW15cXGRdKSk/LykpIHtcbiAgICAgICAgICAgICAgICAgIC8vIG51bWJlclxuICAgICAgICAgICAgICAgICAgaWYgKE51bWJlcih0bXBbMV0pID4gMTkwMCkgeyAvLyBBc3N1bWVkIHRvIGJlIGEgeWVhciBudW1iZXIuXG4gICAgICAgICAgICAgICAgICAgICAgY3Vycl9ydWxlX3Rva2Vucy5wdXNoKFtOdW1iZXIodG1wWzFdKSwgJ3llYXInLCB2YWx1ZS5sZW5ndGggXSk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlcih0bXBbMV0pID49IDIxMDApIC8vIFByb2JhYmx5IGFuIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbIC0xLCB2YWx1ZS5sZW5ndGggLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ2ludGVycHJldGVkIGFzIHllYXInLCB7bnVtYmVyOiAgTnVtYmVyKHRtcFsxXSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgY3Vycl9ydWxlX3Rva2Vucy5wdXNoKFtOdW1iZXIodG1wWzFdKSwgJ251bWJlcicsIHZhbHVlLmxlbmd0aCBdKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIodG1wWzFdLmxlbmd0aCArICh0eXBlb2YgdG1wWzJdID09PSAnc3RyaW5nJyA/IHRtcFsyXS5sZW5ndGggOiAwKSk7XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRtcFsyXSA9PT0gJ3N0cmluZycgJiYgdG1wWzJdICE9PSAnJyAmJiAhZG9uZV93aXRoX3dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFsgLTEsIHZhbHVlLmxlbmd0aCwgdCgnb21pdCBrbycsIHsna28nOiB0bXBbMl19KV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eXFx8XFx8Ly50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgLy8gfHwgdGVybWluYXRlcyBydWxlLlxuICAgICAgICAgICAgICAgICAgLy8gTmV4dCB0b2tlbiBiZWxvbmcgdG8gYSBmYWxsYmFjayBydWxlLlxuICAgICAgICAgICAgICAgICAgaWYgKGN1cnJfcnVsZV90b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZSgtMSwgdmFsdWUubGVuZ3RoIC0gMiwgdCgncnVsZSBiZWZvcmUgZmFsbGJhY2sgZW1wdHknKSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGFsbF90b2tlbnMucHVzaChbIGN1cnJfcnVsZV90b2tlbnMsIGxhc3RfcnVsZV9mYWxsYmFja190ZXJtaW5hdGVkLCB2YWx1ZS5sZW5ndGggXSk7XG4gICAgICAgICAgICAgICAgICBjdXJyX3J1bGVfdG9rZW5zID0gW107XG4gICAgICAgICAgICAgICAgICAvLyBjdXJyX3J1bGVfdG9rZW5zID0gWyBbICd8fCcsICdydWxlIHNlcGFyYXRvcicsIHZhbHVlLmxlbmd0aCAgXSBdO1xuICAgICAgICAgICAgICAgICAgLy8gRklYTUU6IFVzZSB0aGlzLiBVbmtub3duIGJ1ZyBuZWVkcyB0byBiZSBzb2x2ZWQgaW4gdGhlIHByb2Nlc3MuXG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigyKTtcblxuICAgICAgICAgICAgICAgICAgbGFzdF9ydWxlX2ZhbGxiYWNrX3Rlcm1pbmF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRtcCA9IHZhbHVlLm1hdGNoKC9eXCIoW15cIl0rKVwiLykpIHtcbiAgICAgICAgICAgICAgICAgIC8vIENvbW1lbnQgZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uLlxuICAgICAgICAgICAgICAgICAgLy8gQW55IGNoYXJhY3RlciBpcyBhbGxvd2VkIGluc2lkZSB0aGUgY29tbWVudCBleGNlcHQgXCIgaXRzZWxmLlxuICAgICAgICAgICAgICAgICAgY3Vycl9ydWxlX3Rva2Vucy5wdXNoKFt0bXBbMV0sICdjb21tZW50JywgdmFsdWUubGVuZ3RoIF0pO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIodG1wWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodG1wID0gdmFsdWUubWF0Y2goL14oW1wiJ+KAnuKAnOKAmuKAmOKAmcKr44CM44COXSkoW15cIifigJzigJ3igJjigJnCu+OAjeOAjzt8XSopKFtcIifigJ3igJzigJjigJnCu+OAjeOAj10pLykpIHtcbiAgICAgICAgICAgICAgICAgIC8vIENvbW1lbnRzIHdpdGggZXJyb3IgdG9sZXJhbmNlLlxuICAgICAgICAgICAgICAgICAgLy8gVGhlIGNvbW1lbnRzIHN0aWxsIGhhdmUgdG8gYmUgc29tZXdoYXQgY29ycmVjdCBtZWFuaW5nXG4gICAgICAgICAgICAgICAgICAvLyB0aGUgc3RhcnQgYW5kIGVuZCBxdW90ZSBzaWducyB1c2VkIGhhdmUgdG8gYmVcbiAgICAgICAgICAgICAgICAgIC8vIGFwcHJvcHJpYXRlLiBTbyDigJx0ZXN0aW5n4oCeIHdpbGwgbm90IG1hdGNoIGFzIGl0IGlzIG5vdCBhXG4gICAgICAgICAgICAgICAgICAvLyBxdW90ZSBidXQgcmF0aGVyIHNvbWV0aGluZyB1bmtub3duIHdoaWNoIHRoZSB1c2VyIHNob3VsZFxuICAgICAgICAgICAgICAgICAgLy8gZml4IGZpcnN0LlxuICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ01hdGNoZWQ6ICcgKyBKU09OLnN0cmluZ2lmeSh0bXApKTtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHBvcyA9IDE7IHBvcyA8PSAzOyBwb3MgKz0gMikge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdQb3M6ICcgKyBwb3MgKyAnLCBzdWJzdHJpbmc6ICcgKyB0bXBbcG9zXSk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGNvcnJlY3RfdmFsID0gcmV0dXJuQ29ycmVjdFdvcmRPclRva2VuKHRtcFtwb3NdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5sZW5ndGggLSAocG9zID09PSAzID8gdG1wWzFdLmxlbmd0aCArIHRtcFsyXS5sZW5ndGggOiAwKVxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb3JyZWN0X3ZhbCAhPT0gJ3N0cmluZycgJiYgdG1wW3Bvc10gIT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0TGlicmFyeUJ1Z01lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQSBjaGFyYWN0ZXIgZm9yIGVycm9yIHRvbGVyYW5jZSB3YXMgYWxsb3dlZCBpbiB0aGUgcmVndWxhciBleHByZXNzaW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnIGJ1dCBpcyBub3QgY292ZXJlZCBieSB3b3JkX2Vycm9yX2NvcnJlY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcgd2hpY2ggaXMgbmVlZGVkIHRvIGZvcm1hdCBhIHByb3BlciBtZXNzYWdlIGZvciB0aGUgdXNlci4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY3Vycl9ydWxlX3Rva2Vucy5wdXNoKFt0bXBbMl0sICdjb21tZW50JywgdmFsdWUubGVuZ3RoIF0pO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIodG1wWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoL14oPzrikKN8XFxzKS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFVzaW5nIFwi4pCjXCIgYXMgc3BhY2UgaXMgbm90IGV4cGVjdGVkIHRvIGJlIGEgbm9ybWFsXG4gICAgICAgICAgICAgICAgICAvLyBtaXN0YWtlLiBKdXN0IGlnbm9yZSBpdCB0byBtYWtlIHVzaW5nIHRhZ2luZm8gZWFzaWVyLlxuICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBvdGhlciBzaW5nbGUtY2hhcmFjdGVyIHRva2Vuc1xuICAgICAgICAgICAgICAgICAgY3Vycl9ydWxlX3Rva2Vucy5wdXNoKFt2YWx1ZVswXS50b0xvd2VyQ2FzZSgpLCB2YWx1ZVswXS50b0xvd2VyQ2FzZSgpLCB2YWx1ZS5sZW5ndGggXSk7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGFsbF90b2tlbnMucHVzaChbIGN1cnJfcnVsZV90b2tlbnMsIGxhc3RfcnVsZV9mYWxsYmFja190ZXJtaW5hdGVkIF0pO1xuXG4gICAgICAgICAgcmV0dXJuIGFsbF90b2tlbnM7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogZXJyb3IgY29ycmVjdGlvbi90b2xlcmFuY2UgZnVuY3Rpb24ge3t7XG4gICAgICAgKiBHbyB0aHJvdWdoIHdvcmRfZXJyb3JfY29ycmVjdGlvbiBoYXNoIGFuZCBnZXQgY29ycmVjdCB2YWx1ZSBiYWNrLlxuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB3b3JkOiBXcm9uZyB3b3JkIG9yIGNoYXJhY3Rlci5cbiAgICAgICAqIDpwYXJhbSB2YWx1ZV9sZW5ndGg6IEN1cnJlbnQgdmFsdWVfbGVuZ3RoICh1c2VkIGZvciB3YXJuaW5ncykuXG4gICAgICAgKiA6cmV0dXJuczpcbiAgICAgICAqICAgICAgICAqICh2YWxpZCkgb3BlbmluZ19ob3VycyBzdWIgc3RyaW5nLlxuICAgICAgICogICAgICAgICogb2JqZWN0IHdpdGggWyBpbnRlcm5hbF92YWx1ZSwgdG9rZW5fbmFtZSBdIGlmIHZhbHVlIGlzIGNvcnJlY3QuXG4gICAgICAgKiAgICAgICAgKiB1bmRlZmluZWQgaWYgd29yZCBjb3VsZCBub3QgYmUgZm91bmQgKGFuZCB0aHVzIGlzIG5vdCBjb3JyZWN0ZWQpLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZXR1cm5Db3JyZWN0V29yZE9yVG9rZW4od29yZCwgdmFsdWVfbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGNvcnJlY3RXb3JkT3JUb2tlbjtcbiAgICAgICAgICB2YXIgdG9rZW5fZnJvbV9tYXAgPSBzdHJpbmdfdG9fdG9rZW5fbWFwW3dvcmRdO1xuICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW5fZnJvbV9tYXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0b2tlbl9mcm9tX21hcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgT2JqZWN0LmtleXMoZGF0YSQyKS5mb3JFYWNoKGZ1bmN0aW9uIChjb21tZW50KSB7XG4gICAgICAgICAgICAgIGlmIChjb3JyZWN0V29yZE9yVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBPYmplY3Qua2V5cyhkYXRhJDJbY29tbWVudF0pLmZvckVhY2goZnVuY3Rpb24gKG9sZF92YWwpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjb3JyZWN0V29yZE9yVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAobmV3IFJlZ0V4cCgnXicgKyBvbGRfdmFsICsgJyQnKS50ZXN0KHdvcmQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IGRhdGEkMltjb21tZW50XVtvbGRfdmFsXTtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHdyb25nIHdvcmRzIG9yIGNoYXJhY3RlcnMgd2l0aCBjb3JyZWN0IG9uZXMuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHJldHVybiBhIHN0cmluZyB3aGljaCBpcyB0aGVuIGJlaW5nIHRva2VuaXplZC5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbmVfd2l0aF93YXJuaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzaW5nX3dhcm5pbmdzLnB1c2goW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZV9sZW5ndGggLSB3b3JkLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQoY29tbWVudCwgeydrbyc6IHdvcmQsICdvayc6IHZhbH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgY29ycmVjdFdvcmRPclRva2VuID0gdmFsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gY29ycmVjdFdvcmRPclRva2VuO1xuICAgICAgfVxuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIHJldHVybiB3YXJuaW5ncyBhcyBsaXN0IHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSBpdDogSXRlcmF0b3Igb2JqZWN0IGlmIGF2YWlsYWJsZSAob3B0aW9uYWwpLlxuICAgICAgICogOnJldHVybnM6IFdhcm5pbmdzIGFzIGxpc3Qgd2l0aCBvbmUgd2FybmluZyBwZXIgZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2V0V2FybmluZ3MoaXQpIHtcbiAgICAgICAgICBpZiAod2FybmluZ3Nfc2V2ZXJpdHkgPCA0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWRvbmVfd2l0aF93YXJuaW5ncyAmJiB0eXBlb2YgaXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIC8qIGdldFdhcm5pbmdzIHdhcyBjYWxsZWQgaW4gYSBzdGF0ZSB3aXRob3V0IGNyaXRpY2FsIGVycm9ycy5cbiAgICAgICAgICAgICAgICogV2UgY2FuIGRvIGV4dGVuZGVkIHRlc3RzLlxuICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAvKiBQbGFjZSBhbGwgdGVzdHMgaW4gdGhpcyBmdW5jdGlvbiBpZiBhbiBhZGRpdGlvbmFsIChoaWdoXG4gICAgICAgICAgICAgICAqIGxldmVsKSB0ZXN0IGlzIGFkZGVkIGFuZCB0aGlzIGRvZXMgbm90IHJlcXVpcmUgdG8gcmV3cml0ZVxuICAgICAgICAgICAgICAgKiBiaWcgcGFydHMgb2YgKHN1Yikgc2VsZWN0b3IgcGFyc2VycyBvbmx5IHRvIGdldCB0aGVcbiAgICAgICAgICAgICAgICogcG9zaXRpb24uIElmIHRoYXQgaXMgdGhlIGNhc2UsIHRoZW4gcmF0aGVyIHBsYWNlIHRoZSB0ZXN0XG4gICAgICAgICAgICAgICAqIGNvZGUgaW4gdGhlIChzdWIpIHNlbGVjdG9yIHBhcnNlciBmdW5jdGlvbiBkaXJlY3RseS5cbiAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgdmFyIHdpZGVfcmFuZ2Vfc2VsZWN0b3Jfb3JkZXIgPSBbICd5ZWFyJywgJ21vbnRoJywgJ3dlZWsnLCAnaG9saWRheScgXTtcbiAgICAgICAgICAgICAgdmFyIHNtYWxsX3JhbmdlX3NlbGVjdG9yX29yZGVyID0gWyAnd2Vla2RheScsICd0aW1lJywgJzI0LzcnLCAnc3RhdGUnLCAnY29tbWVudCddO1xuXG4gICAgICAgICAgICAgIC8vIEhvdyBtYW55IHRpbWVzIHdhcyBhIHNlbGVjdG9yX3R5cGUgdXNlZCBwZXIgcnVsZT8ge3t7XG4gICAgICAgICAgICAgIHZhciB1c2VkX3NlbGVjdG9ycyA9IFtdO1xuICAgICAgICAgICAgICB2YXIgdXNlZF9zZWxlY3RvcnNfdHlwZXNfYXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgdmFyIGhhc190b2tlbiA9IHt9O1xuXG4gICAgICAgICAgICAgIGZvciAodmFyIG5ydWxlID0gMDsgbnJ1bGUgPCBuZXdfdG9rZW5zLmxlbmd0aDsgbnJ1bGUrKykge1xuICAgICAgICAgICAgICAgICAgaWYgKG5ld190b2tlbnNbbnJ1bGVdWzBdLmxlbmd0aCA9PT0gMCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAvLyBSdWxlIGRvZXMgY29udGFpbiBub3RoaW5nIHVzZWZ1bCBlLmcuIHNlY29uZCBydWxlIG9mICcxMDowMC0xMjowMDsnIChlbXB0eSkgd2hpY2ggbmVlZHMgdG8gYmUgaGFuZGxlZC5cblxuICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yX3N0YXJ0X2VuZF90eXBlID0gWyAwLCAwLCB1bmRlZmluZWQgXTtcbiAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG5ld190b2tlbnNbbnJ1bGVdWzBdKTtcblxuICAgICAgICAgICAgICAgICAgdXNlZF9zZWxlY3RvcnNbbnJ1bGVdID0ge307XG4gICAgICAgICAgICAgICAgICB1c2VkX3NlbGVjdG9yc190eXBlc19hcnJheVtucnVsZV0gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yX3N0YXJ0X2VuZF90eXBlID0gZ2V0U2VsZWN0b3JSYW5nZShuZXdfdG9rZW5zW25ydWxlXVswXSwgc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGVbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNlbGVjdG9yX3N0YXJ0X2VuZF90eXBlLCBuZXdfdG9rZW5zW25ydWxlXVswXS5sZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdG9rZW5fcG9zID0gMDsgdG9rZW5fcG9zIDw9IHNlbGVjdG9yX3N0YXJ0X2VuZF90eXBlWzFdOyB0b2tlbl9wb3MrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5ld190b2tlbnNbbnJ1bGVdWzBdW3Rva2VuX3Bvc10gPT09ICdvYmplY3QnICYmIG5ld190b2tlbnNbbnJ1bGVdWzBdW3Rva2VuX3Bvc11bMF0gPT09ICdQSCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc190b2tlblsnUEgnXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGVbMF0gPT09IHNlbGVjdG9yX3N0YXJ0X2VuZF90eXBlWzFdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld190b2tlbnNbbnJ1bGVdWzBdW3NlbGVjdG9yX3N0YXJ0X2VuZF90eXBlWzBdXVswXSA9PT0gJzI0LzcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzX3Rva2VuWycyNC83J10gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXNlZF9zZWxlY3RvcnNbbnJ1bGVdW3NlbGVjdG9yX3N0YXJ0X2VuZF90eXBlWzJdXSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZF9zZWxlY3RvcnNbbnJ1bGVdW3NlbGVjdG9yX3N0YXJ0X2VuZF90eXBlWzJdXSA9IFsgc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGVbMV0gXTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkX3NlbGVjdG9yc1tucnVsZV1bc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGVbMl1dLnB1c2goc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGVbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB1c2VkX3NlbGVjdG9yc190eXBlc19hcnJheVtucnVsZV0ucHVzaChzZWxlY3Rvcl9zdGFydF9lbmRfdHlwZVsyXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvcl9zdGFydF9lbmRfdHlwZVsxXSsrO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGVbMV0gPCBuZXdfdG9rZW5zW25ydWxlXVswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd1c2VkX3NlbGVjdG9yczogJyArIEpTT04uc3RyaW5naWZ5KHVzZWRfc2VsZWN0b3JzLCBudWxsLCAnICAgICcpKTtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3VzZWRfc2VsZWN0b3JzX3R5cGVzX2FycmF5OiAnICsgSlNPTi5zdHJpbmdpZnkodXNlZF9zZWxlY3RvcnNfdHlwZXNfYXJyYXksIG51bGwsICcgICAgJykpO1xuICAgICAgICAgICAgICAvKiB9fX0gKi9cblxuICAgICAgICAgICAgICBmb3IgKHZhciBucnVsZSA9IDA7IG5ydWxlIDwgdXNlZF9zZWxlY3RvcnMubGVuZ3RoOyBucnVsZSsrKSB7XG5cbiAgICAgICAgICAgICAgICAgIC8qIENoZWNrIGlmIG1vcmUgdGhhbiBvbmUgbm90IGNvbm5lY3RlZCBzZWxlY3RvciBvZiB0aGUgc2FtZSB0eXBlIGlzIHVzZWQgaW4gb25lIHJ1bGUge3t7ICovXG4gICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh1c2VkX3NlbGVjdG9yc1tucnVsZV0pLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdG9yX3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzZWxlY3Rvcl90eXBlICsgJyB1c2UgYXQ6ICcgKyB1c2VkX3NlbGVjdG9yc1tucnVsZV1bc2VsZWN0b3JfdHlwZV0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlZF9zZWxlY3RvcnNbbnJ1bGVdW3NlbGVjdG9yX3R5cGVdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFtucnVsZSwgdXNlZF9zZWxlY3RvcnNbbnJ1bGVdW3NlbGVjdG9yX3R5cGVdW3VzZWRfc2VsZWN0b3JzW25ydWxlXVtzZWxlY3Rvcl90eXBlXS5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ3VzZSBtdWx0aScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnQnOiB1c2VkX3NlbGVjdG9yc1tucnVsZV1bc2VsZWN0b3JfdHlwZV0ubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXJ0Mic6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL14oPzpjb21tZW50fHN0YXRlKS8udGVzdChzZWxlY3Rvcl90eXBlKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0KCdzZWxlY3RvciBtdWx0aSAyYScsIHsnd2hhdCc6IChzZWxlY3Rvcl90eXBlID09PSAnc3RhdGUnID8gdCgnc2VsZWN0b3Igc3RhdGUnKTogdCgnY29tbWVudHMnKSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCgnc2VsZWN0b3IgbXVsdGkgMmInLCB7J3doYXQnOiB0KHNlbGVjdG9yX3R5cGUgKyAoL14oPzptb250aHx3ZWVrZGF5KSQvLnRlc3Qoc2VsZWN0b3JfdHlwZSkgPyAncycgOiAnIHJhbmdlcycpKX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVfd2l0aF9zZWxlY3Rvcl9yZW9yZGVyaW5nID0gdHJ1ZTsgLy8gQ29ycmVjdGluZyB0aGUgc2VsZWN0b3Igb3JkZXIgbWFrZXMgbm8gc2Vuc2UgaWYgdGhpcyBraW5kIG9mIGlzc3VlIGV4aXN0cy5cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIC8qIH19fSAqL1xuICAgICAgICAgICAgICAgICAgLyogQ2hlY2sgaWYgY2hhbmdlIGRlZmF1bHQgc3RhdGUgcnVsZSBpcyBub3QgdGhlIGZpcnN0IHJ1bGUge3t7ICovXG4gICAgICAgICAgICAgICAgICBpZiAoICAgdHlwZW9mIHVzZWRfc2VsZWN0b3JzW25ydWxlXS5zdGF0ZSA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICAgICAgICAmJiBPYmplY3Qua2V5cyh1c2VkX3NlbGVjdG9yc1tucnVsZV0pLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKG5ydWxlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbbnJ1bGUsIG5ld190b2tlbnNbbnJ1bGVdWzBdLmxlbmd0aCAtIDEsIHQoJ2RlZmF1bHQgc3RhdGUnKV0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8qIH19fSAqL1xuICAgICAgICAgICAgICAgICAgLyogQ2hlY2sgaWYgYSBydWxlICh3aXRoIHN0YXRlIG9wZW4pIGhhcyBubyB0aW1lIHNlbGVjdG9yIHt7eyAqL1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdXNlZF9zZWxlY3RvcnNbbnJ1bGVdLnRpbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCAgICAoICAgICAgIHR5cGVvZiB1c2VkX3NlbGVjdG9yc1tucnVsZV0uc3RhdGUgPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgbmV3X3Rva2Vuc1tucnVsZV1bMF1bdXNlZF9zZWxlY3RvcnNbbnJ1bGVdLnN0YXRlWzBdXVswXSA9PT0gJ29wZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHVzZWRfc2VsZWN0b3JzW25ydWxlXS5jb21tZW50ID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB8fCAoIHR5cGVvZiB1c2VkX3NlbGVjdG9yc1tucnVsZV0uY29tbWVudCA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgdXNlZF9zZWxlY3RvcnNbbnJ1bGVdLnN0YXRlID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHVzZWRfc2VsZWN0b3JzW25ydWxlXVsnMjQvNyddID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbbnJ1bGUsIG5ld190b2tlbnNbbnJ1bGVdWzBdLmxlbmd0aCAtIDEsIHQoJ3ZhZ3VlJyldKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvKiB9fX0gKi9cbiAgICAgICAgICAgICAgICAgIC8qIENoZWNrIGlmIGVtcHR5IGNvbW1lbnQgd2FzIGdpdmVuIHt7eyAqL1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1c2VkX3NlbGVjdG9yc1tucnVsZV0uY29tbWVudCA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICAgICAgICAmJiBuZXdfdG9rZW5zW25ydWxlXVswXVt1c2VkX3NlbGVjdG9yc1tucnVsZV0uY29tbWVudFswXV1bMF0ubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbbnJ1bGUsIHVzZWRfc2VsZWN0b3JzW25ydWxlXS5jb21tZW50WzBdLCB0KCdlbXB0eSBjb21tZW50JyldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8qIH19fSAqL1xuICAgICAgICAgICAgICAgICAgLyogQ2hlY2sgZm9yIHZhbGlkIHVzZSBvZiA8c2VwYXJhdG9yX2Zvcl9yZWFkYWJpbGl0eT4ge3t7ICovXG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVzZWRfc2VsZWN0b3JzX3R5cGVzX2FycmF5W25ydWxlXS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JfdHlwZSA9IHVzZWRfc2VsZWN0b3JzX3R5cGVzX2FycmF5W25ydWxlXVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dF9zZWxlY3Rvcl90eXBlID0gdXNlZF9zZWxlY3RvcnNfdHlwZXNfYXJyYXlbbnJ1bGVdW2krMV07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCAgICggICB3aWRlX3JhbmdlX3NlbGVjdG9yX29yZGVyLmluZGV4T2Yoc2VsZWN0b3JfdHlwZSkgICAgICAgIT09IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB3aWRlX3JhbmdlX3NlbGVjdG9yX29yZGVyLmluZGV4T2YobmV4dF9zZWxlY3Rvcl90eXBlKSAgIT09IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkgfHwgKCBzbWFsbF9yYW5nZV9zZWxlY3Rvcl9vcmRlci5pbmRleE9mKHNlbGVjdG9yX3R5cGUpICAgICAgIT09IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBzbWFsbF9yYW5nZV9zZWxlY3Rvcl9vcmRlci5pbmRleE9mKG5leHRfc2VsZWN0b3JfdHlwZSkgIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3X3Rva2Vuc1tucnVsZV1bMF1bdXNlZF9zZWxlY3RvcnNbbnJ1bGVdW3NlbGVjdG9yX3R5cGVdWzBdXVswXSA9PT0gJzonKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzaW5nX3dhcm5pbmdzLnB1c2goW25ydWxlLCB1c2VkX3NlbGVjdG9yc1tucnVsZV1bc2VsZWN0b3JfdHlwZV1bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCgnc2VwYXJhdG9yX2Zvcl9yZWFkYWJpbGl0eScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8qIH19fSAqL1xuICAgICAgICAgICAgICAgICAgLyogQ2hlY2sgZm9yIG1pc3NpbmcgdXNlIG9mIDxhZGRpdGlvbmFsX3J1bGVfc2VwYXJhdG9yPiBmb3IgdGltZSB3cmFwcGluZyBtaWRuaWdodCB7e3sgKi9cbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcnVsZV9pbmZvc1tucnVsZV0gPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBydWxlX2luZm9zW25ydWxlXVsndGltZV93cmFwc19vdmVyX21pZG5pZ2h0J10gPT09ICdib29sZWFuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBydWxlX2luZm9zW25ydWxlXVsndGltZV93cmFwc19vdmVyX21pZG5pZ2h0J10gPT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHVzZWRfc2VsZWN0b3JzW25ydWxlKzFdID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgdXNlZF9zZWxlY3RvcnNbbnJ1bGUrMV1bJ3J1bGUgc2VwYXJhdG9yJ10gPT09ICd1bmRlZmluZWQnIC8vIE5vdCBhbiBhZGRpdGlvbmFsIHJ1bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgbmV3X3Rva2Vuc1tucnVsZSsxXVsxXSA9PT0gZmFsc2UgLy8gTm90IGEgZmFsbGJhY2sgcnVsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgIHZhciBydWxlc190b29fY29tcGxleCA9IFsgbnJ1bGUsIG5ydWxlKzEgXS5tYXAoZnVuY3Rpb24gKG5ydWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aWRlX3JhbmdlX3NlbGVjdG9yX29yZGVyLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1c2VkX3NlbGVjdG9yc1tucnVsZV1bd2lkZV9yYW5nZV9zZWxlY3Rvcl9vcmRlcltpXV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBydWxlc190b29fY29tcGxleF9jb3VudCA9IHJ1bGVzX3Rvb19jb21wbGV4LmZpbHRlcihmdW5jdGlvbiAoZWwpeyByZXR1cm4gZWw7IH0pLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dF9ydWxlX3NlbGVjdHNfbmV4dF9kYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcnVsZV9pbmZvc1tucnVsZV0gPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgcnVsZV9pbmZvc1tucnVsZV0gPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgcnVsZV9pbmZvc1tucnVsZV1bJ3dlZWtfZGF5cyddID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHJ1bGVfaW5mb3NbbnJ1bGUrMV0gPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgcnVsZV9pbmZvc1tucnVsZSsxXVsnd2Vla19kYXlzJ10gPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlX2luZm9zW25ydWxlXVsnd2Vla19kYXlzJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3ZWVrX2RheSA9IHJ1bGVfaW5mb3NbbnJ1bGVdWyd3ZWVrX2RheXMnXVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhydWxlX2luZm9zW25ydWxlKzFdWyd3ZWVrX2RheXMnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cod2Vla19kYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bGVfaW5mb3NbbnJ1bGUrMV1bJ3dlZWtfZGF5cyddLmluZGV4T2Yod2Vla19kYXkgPT09IDYgPyAwIDogd2Vla19kYXkrMSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9ydWxlX3NlbGVjdHNfbmV4dF9kYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9ydWxlX3NlbGVjdHNfbmV4dF9kYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhydWxlX2luZm9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhuZXh0X3J1bGVfc2VsZWN0c19uZXh0X2RheSk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZGl0aW9uYWxfcnVsZV9zZXBhcmF0b3JfZW5hYmxlZCA9IChvcHRpb25hbF9jb25mX3Bhcm18fHt9KS5hZGRpdGlvbmFsX3J1bGVfc2VwYXJhdG9yICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocnVsZXNfdG9vX2NvbXBsZXhfY291bnQgPCAyICYmIG5leHRfcnVsZV9zZWxlY3RzX25leHRfZGF5ICYmIGFkZGl0aW9uYWxfcnVsZV9zZXBhcmF0b3JfZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzaW5nX3dhcm5pbmdzLnB1c2goW25ydWxlKzEsIG5ld190b2tlbnNbbnJ1bGUrMV1bMF0ubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ2FkZGl0aW9uYWxfcnVsZV9zZXBhcmF0b3Igbm90IHVzZWQgYWZ0ZXIgdGltZSB3cmFwcGluZyBtaWRuaWdodCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3Rva2Vuc1xuICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvKiB9fX0gKi9cbiAgICAgICAgICAgICAgICAgIC8qIENoZWNrIGlmIHJ1bGUgd2l0aCBjbG9zZWR8b2ZmIG1vZGlmaWVyIGlzIGFkZGl0aW9uYWwge3t7ICovXG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5ld190b2tlbnNbbnJ1bGVdWzBdWzBdID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBuZXdfdG9rZW5zW25ydWxlXVswXVswXVswXSA9PT0gJywnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICYmIG5ld190b2tlbnNbbnJ1bGVdWzBdWzBdWzFdID09PSAncnVsZSBzZXBhcmF0b3InXG4gICAgICAgICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiB1c2VkX3NlbGVjdG9yc1tucnVsZV0uc3RhdGUgPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld190b2tlbnNbbnJ1bGVdWzBdW3VzZWRfc2VsZWN0b3JzW25ydWxlXS5zdGF0ZVswXV1bMF0gPT09ICdjbG9zZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBuZXdfdG9rZW5zW25ydWxlXVswXVt1c2VkX3NlbGVjdG9yc1tucnVsZV0uc3RhdGVbMF1dWzBdID09PSAnb2ZmJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbbnJ1bGUsIG5ld190b2tlbnNbbnJ1bGVdWzBdLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ2FkZGl0aW9uYWwgcnVsZSB3aGljaCBldmFsdWF0ZXMgdG8gY2xvc2VkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld190b2tlbnNcbiAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8qIH19fSAqL1xuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvKiBDaGVjayBpZiAyNC83IGlzIHVzZWQgYW5kIGl0IGRvZXMgbm90IG1lYW4gMjQvNyBiZWNhdXNlIHRoZXJlIGFyZSBvdGhlciBydWxlcyB7e3sgKi9cbiAgICAgICAgICAgICAgdmFyIGhhc19hZHZhbmNlZCA9IGl0LmFkdmFuY2UoKTtcblxuICAgICAgICAgICAgICBpZiAoaGFzX2FkdmFuY2VkID09PSB0cnVlICYmIGhhc190b2tlblsnMjQvNyddICYmICFkb25lX3dpdGhfd2FybmluZ3MpIHtcbiAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbIC0xLCAwLFxuICAgICAgICAgICAgICAgICAgICAgIC8vIFByb2JhYmx5IGJlY2F1c2Ugb2Y6IFwiMjQvNzsgMTI6MDAtMTQ6MDAgb3BlblwiLCBcIi4gTmVlZHMgZXh0cmEgdGVzdGluZy5cbiAgICAgICAgICAgICAgICAgICAgICB0KCdzdHJhbmdlIDI0LzcnKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLyogfX19ICovXG5cbiAgICAgICAgICAgICAgLyogQ2hlY2sgZm9yIG1pc3NpbmcgUEguIHt7eyAqL1xuICAgICAgICAgICAgICBpZiAoICAgIHdhcm5pbmdzX3NldmVyaXR5ID49IDVcbiAgICAgICAgICAgICAgICAgICYmICFoYXNfdG9rZW5bJ1BIJ11cbiAgICAgICAgICAgICAgICAgICYmICFoYXNfdG9rZW5bJzI0LzcnXVxuICAgICAgICAgICAgICAgICAgJiYgIWRvbmVfd2l0aF93YXJuaW5nc1xuICAgICAgICAgICAgICAgICAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb2hfa2V5ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgb3NtX3RhZ19kZWZhdWx0c1tvaF9yZWdleF9rZXldWyd3YXJuX2Zvcl9QSF9taXNzaW5nJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAodHlwZW9mIG9oX2tleSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgdmFyIGtleXNfd2l0aF93YXJuX2Zvcl9QSF9taXNzaW5nID0gW107XG4gICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhvc21fdGFnX2RlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAob3NtX3RhZ19kZWZhdWx0c1trZXldWyd3YXJuX2Zvcl9QSF9taXNzaW5nJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5c193aXRoX3dhcm5fZm9yX1BIX21pc3NpbmcucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFsgLTEsIDAsXG4gICAgICAgICAgICAgICAgICAgICAgdCgncHVibGljIGhvbGlkYXknLCB7ICdwYXJ0Mic6ICh0eXBlb2Ygb2hfa2V5ICE9PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHQoJ3B1YmxpYyBob2xpZGF5IHBhcnQyJywgeydrZXlzJzoga2V5c193aXRoX3dhcm5fZm9yX1BIX21pc3Npbmcuam9pbignLCAnKX0pIDogJycpfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKyAnKHNlZSBSRUFETUUgaG93IHRvIHByb3ZpZGUgaXQpJyAvLyBVSSBvZiB0aGUgZXZhbHVhdGlvbiB0b29sIGRvZXMgbm90IGFsbG93IHRvIHByb3ZpZGUgaXQgKGN1cnJlbnRseSkuXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvKiB9fX0gKi9cblxuICAgICAgICAgICAgICAvKiBDaGVjayBpZiB2YWx1ZSBjb25zaXN0cyBvZiBtdWx0aXBsZSBydWxlcyBlYWNoIG9ubHkgdXNpbmcgYSB0aW1lIHNlbGVjdG9yIHt7eyAqL1xuICAgICAgICAgICAgICBpZiAodXNlZF9zZWxlY3RvcnNfdHlwZXNfYXJyYXkubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgICAgICAgICYmICB1c2VkX3NlbGVjdG9yc190eXBlc19hcnJheS5maWx0ZXIoZnVuY3Rpb24gKGVsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbC5sZW5ndGggPT09IDEgJiYgZWxbMF0gPT09ICd0aW1lJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoID09PSB1c2VkX3NlbGVjdG9yc190eXBlc19hcnJheS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbIC0xLCAwLFxuICAgICAgICAgICAgICAgICAgICAgIHQoJ2NvbWJpbmUgcnVsZXMnLCB7ICdvayc6ICcsJyB9KSxcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8qIH19fSAqL1xuXG4gICAgICAgICAgICAgIHByZXR0aWZ5VmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZG9uZV93aXRoX3dhcm5pbmdzID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciB3YXJuaW5ncyA9IFtdO1xuICAgICAgICAgIC8vIEZJWE1FOiBTb3J0IGJhc2VkIG9uIHBhcnNpbmdfd2FybmluZ3NbMV0sIHRyaWNreSDigKZcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnNpbmdfd2FybmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgd2FybmluZ3MucHVzaCggZm9ybWF0V2FybkVycm9yTWVzc2FnZShwYXJzaW5nX3dhcm5pbmdzW2ldWzBdLCBwYXJzaW5nX3dhcm5pbmdzW2ldWzFdLCBwYXJzaW5nX3dhcm5pbmdzW2ldWzJdLCBwYXJzaW5nX3dhcm5pbmdzW2ldWzNdKSApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gd2FybmluZ3M7XG4gICAgICB9XG5cbiAgICAgIC8qIEhlbHBlcnMgZm9yIGdldFdhcm5pbmdzIHt7eyAqL1xuXG4gICAgICAvKiBDaGVjayBpZiB0b2tlbiBpcyB0aGUgYmVnaW4gb2YgYSBzZWxlY3RvciBhbmQgd2h5LiB7e3tcbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0gdG9rZW5zOiBMaXN0IG9mIHRva2VuIG9iamVjdHMuXG4gICAgICAgKiA6cGFyYW0gYXQ6IFBvc2l0aW9uIHdoZXJlIHRvIHN0YXJ0LlxuICAgICAgICogOnJldHVybnM6XG4gICAgICAgKiAgICAgICAgKiBmYWxzZSBpZiB0aGUgY3VycmVudCB0b2tlbiBpcyBub3QgdGhlIGJlZ2luIG9mIGEgc2VsZWN0b3IuXG4gICAgICAgKiAgICAgICAgKiBQb3NpdGlvbiBpbiB0b2tlbiBhcnJheSBmcm9tIHdoZXJlIHRoZSBkZWNpc2lvbiB3YXMgbWFkZSB0aGF0XG4gICAgICAgKiAgICAgICAgICB0aGUgdG9rZW4gaXMgdGhlIHN0YXJ0IG9mIGEgc2VsZWN0b3IuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHRva2VuSXNUaGVCZWdpbk9mU2VsZWN0b3IodG9rZW5zLCBhdCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW5zW2F0XVszXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgfSBlbHNlIGlmICh0b2tlbnNbYXRdWzFdID09PSAnY29tbWVudCdcbiAgICAgICAgICAgICAgICAgIHx8IHRva2Vuc1thdF1bMV0gPT09ICdzdGF0ZSdcbiAgICAgICAgICAgICAgICAgIHx8IHRva2Vuc1thdF1bMV0gPT09ICcyNC83J1xuICAgICAgICAgICAgICAgICAgfHwgdG9rZW5zW2F0XVsxXSA9PT0gJ3J1bGUgc2VwYXJhdG9yJ1xuICAgICAgICAgICAgICApe1xuXG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogR2V0IHN0YXJ0IGFuZCBlbmQgcG9zaXRpb24gb2YgYSBzZWxlY3Rvci4ge3t7XG4gICAgICAgKiBGb3IgZXhhbXBsZSB0aGlzIHZhbHVlICdNby1XZSxGcicgd2lsbCByZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZVxuICAgICAgICogdG9rZW4gbGV4ZW1lICdNbycgYW5kICdGcicgZS5nLiB0aGVyZSBpbmRleGVzIFsgMCwgNCBdIGluIHRoZVxuICAgICAgICogc2VsZWN0b3IgYXJyYXkgb2YgdG9rZW5zLlxuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB0b2tlbnM6IExpc3Qgb2YgdG9rZW4gb2JqZWN0cy5cbiAgICAgICAqIDpwYXJhbSBhdDogUG9zaXRpb24gd2hlcmUgdG8gc3RhcnQuXG4gICAgICAgKiA6cmV0dXJuczogQXJyYXk6XG4gICAgICAgKiAgICAgICAgICAgIDAuIEluZGV4IG9mIGZpcnN0IHRva2VuIGluIHNlbGVjdG9yIGFycmF5IG9mIHRva2Vucy5cbiAgICAgICAqICAgICAgICAgICAgMS4gSW5kZXggb2YgbGFzdCB0b2tlbiBpbiBzZWxlY3RvciBhcnJheSBvZiB0b2tlbnMuXG4gICAgICAgKiAgICAgICAgICAgIDIuIFNlbGVjdG9yIHR5cGUuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldFNlbGVjdG9yUmFuZ2UodG9rZW5zLCBhdCkge1xuICAgICAgICAgIHZhciBzZWxlY3Rvcl9zdGFydCA9IGF0LFxuICAgICAgICAgICAgICBzZWxlY3Rvcl9lbmQsXG4gICAgICAgICAgICAgIHBvc19pbl90b2tlbl9hcnJheTtcblxuICAgICAgICAgIGZvciAoOyBzZWxlY3Rvcl9zdGFydCA+PSAwOyBzZWxlY3Rvcl9zdGFydC0tKSB7XG4gICAgICAgICAgICAgIHBvc19pbl90b2tlbl9hcnJheSA9IHRva2VuSXNUaGVCZWdpbk9mU2VsZWN0b3IodG9rZW5zLCBzZWxlY3Rvcl9zdGFydCk7XG4gICAgICAgICAgICAgIGlmIChwb3NfaW5fdG9rZW5fYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGVjdG9yX2VuZCA9IHNlbGVjdG9yX3N0YXJ0O1xuXG4gICAgICAgICAgaWYgKHBvc19pbl90b2tlbl9hcnJheSA9PT0gMSkge1xuICAgICAgICAgICAgICAvLyBTZWxlY3RvciBjb25zaXN0cyBvZiBhIHNpbmdsZSB0b2tlbi5cblxuICAgICAgICAgICAgICAvLyBJbmNsdWRlIHRhaWxpbmcgY29sb24uXG4gICAgICAgICAgICAgIGlmIChzZWxlY3Rvcl9lbmQgKyAxIDwgdG9rZW5zLmxlbmd0aCAmJiB0b2tlbnNbc2VsZWN0b3JfZW5kICsgMV1bMF0gPT09ICc6JylcbiAgICAgICAgICAgICAgICAgIHNlbGVjdG9yX2VuZCsrO1xuXG4gICAgICAgICAgICAgIHJldHVybiBbIHNlbGVjdG9yX3N0YXJ0LCBzZWxlY3Rvcl9lbmQsIHRva2Vuc1tzZWxlY3Rvcl9zdGFydF1bcG9zX2luX3Rva2VuX2FycmF5XSBdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAoc2VsZWN0b3JfZW5kKys7IHNlbGVjdG9yX2VuZCA8IHRva2Vucy5sZW5ndGggOyBzZWxlY3Rvcl9lbmQrKykge1xuICAgICAgICAgICAgICBpZiAodG9rZW5Jc1RoZUJlZ2luT2ZTZWxlY3Rvcih0b2tlbnMsIHNlbGVjdG9yX2VuZCkpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gWyBzZWxlY3Rvcl9zdGFydCwgc2VsZWN0b3JfZW5kIC0gMSwgdG9rZW5zW3NlbGVjdG9yX3N0YXJ0XVtwb3NfaW5fdG9rZW5fYXJyYXldIF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFsgc2VsZWN0b3Jfc3RhcnQsIHNlbGVjdG9yX2VuZCAtIDEsIHRva2Vuc1tzZWxlY3Rvcl9zdGFydF1bcG9zX2luX3Rva2VuX2FycmF5XSBdO1xuICAgICAgfVxuICAgICAgLyogfX19ICovXG4gICAgICAvKiB9fX0gKi9cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBQcmV0dGlmeSByYXcgdmFsdWUgZnJvbSB1c2VyLiB7e3tcbiAgICAgICAqIFRoZSB2YWx1ZSBpcyBnZW5lcmF0ZWQgYnkgcHV0dGluZyB0aGUgdG9rZW5zIGJhY2sgdG9nZXRoZXIgdG8gYSBzdHJpbmcuXG4gICAgICAgKlxuICAgICAgICogOnBhcmFtIGFyZ3VtZW50X2hhc2g6IEhhc2ggd2hpY2ggY2FuIGNvbnRhaW46XG4gICAgICAgKiAgICAgICAgJ2NvbmYnOiBDb25maWd1cmF0aW9uIGhhc2guXG4gICAgICAgKiAgICAgICAgJ2dldF9pbnRlcm5hbHM6IElmIHRydWUgZXhwb3J0IGludGVybmFsIGRhdGEgc3RydWN0dXJlcy5cbiAgICAgICAqICAgICAgICAncnVsZV9pbmRleDogT25seSBwcmV0dGlmeSB0aGUgcnVsZSB3aXRoIHRoaXMgaW5kZXguXG4gICAgICAgKiA6cmV0dXJuczogUHJldHRpZmllZCB2YWx1ZSBzdHJpbmcgb3Igb2JqZWN0IGlmIGdldF9pbnRlcm5hbHMgaXMgdHJ1ZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcHJldHRpZnlWYWx1ZShhcmd1bWVudF9oYXNoKSB7XG4gICAgICAgICAgdmFyIHVzZXJfY29uZiA9IHt9O1xuICAgICAgICAgIHZhciBnZXRfaW50ZXJuYWxzID0gZmFsc2U7XG4gICAgICAgICAgdmFyIHJ1bGVfaW5kZXg7XG5cbiAgICAgICAgICBwcmV0dGlmaWVkX3ZhbHVlID0gJyc7XG4gICAgICAgICAgdmFyIHByZXR0aWZpZWRfdmFsdWVfYXJyYXkgPSBbXTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRfaGFzaCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudF9oYXNoLmNvbmYgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICB1c2VyX2NvbmYgPSBhcmd1bWVudF9oYXNoLmNvbmY7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50X2hhc2gucnVsZV9pbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgIHJ1bGVfaW5kZXggPSBhcmd1bWVudF9oYXNoLnJ1bGVfaW5kZXg7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYXJndW1lbnRfaGFzaC5nZXRfaW50ZXJuYWxzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICBnZXRfaW50ZXJuYWxzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgT2JqZWN0LmtleXMoZGVmYXVsdF9wcmV0dGlmeV9jb25mKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1c2VyX2NvbmZba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIHVzZXJfY29uZltrZXldID0gZGVmYXVsdF9wcmV0dGlmeV9jb25mW2tleV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIHVzZSBtb250aHMsIHdlZWtkYXlzIGZvciBsb2NhbGVzICdlbicgYW5kICdhbGwnXG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIHVzZSBEYXRlLnRvTG9jYWxlU3RyaW5nLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZS90b0xvY2FsZVN0cmluZ1xuICAgICAgICAgIHZhciBfaXNfZW5fb3JfYWxsID0gdXNlcl9jb25mWydsb2NhbGUnXSA9PT0gJ2VuJyB8fCB1c2VyX2NvbmZbJ2xvY2FsZSddID09PSAnYWxsJztcbiAgICAgICAgICB2YXIgbW9udGhzX2xvY2FsID0gX2lzX2VuX29yX2FsbCA/IG1vbnRocyA6IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXS5tYXAoZnVuY3Rpb24obW9udGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKDIwMTgsIG1vbnRoIC0gMSwgMSkudG9Mb2NhbGVTdHJpbmcodXNlcl9jb25mWydsb2NhbGUnXSwge21vbnRoOiAnc2hvcnQnfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIHdlZWtkYXlzX2xvY2FsID0gX2lzX2VuX29yX2FsbCA/IHdlZWtkYXlzIDogWzEsIDIsIDMsIDQsIDUsIDYsIDddLm1hcChmdW5jdGlvbih3ZWVrZGF5KSB7XG4gICAgICAgICAgICAgIC8vIDIwMTctMDEtMDEgaXMgU3VuZGF5XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgyMDE3LCAwLCB3ZWVrZGF5KS50b0xvY2FsZVN0cmluZyh1c2VyX2NvbmZbJ2xvY2FsZSddLCB7d2Vla2RheTogJ3Nob3J0J30pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yICh2YXIgbnJ1bGUgPSAwOyBucnVsZSA8IG5ld190b2tlbnMubGVuZ3RoOyBucnVsZSsrKSB7XG4gICAgICAgICAgICAgIGlmIChuZXdfdG9rZW5zW25ydWxlXVswXS5sZW5ndGggPT09IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAvLyBSdWxlIGRvZXMgY29udGFpbiBub3RoaW5nIHVzZWZ1bCBlLmcuIHNlY29uZCBydWxlIG9mICcxMDowMC0xMjowMDsnIChlbXB0eSkgd2hpY2ggbmVlZHMgdG8gYmUgaGFuZGxlZC5cblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHJ1bGVfaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICBpZiAocnVsZV9pbmRleCAhPT0gbnJ1bGUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKG5ydWxlICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICAgIHByZXR0aWZpZWRfdmFsdWUgKz0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfdG9rZW5zW25ydWxlXVsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB1c2VyX2NvbmYucnVsZV9zZXBfc3RyaW5nICsgJ3x8ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld190b2tlbnNbbnJ1bGVdWzBdWzBdWzFdID09PSAncnVsZSBzZXBhcmF0b3InXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnLCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9jb25mLnByaW50X3NlbWljb2xvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICc7J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfY29uZi5ydWxlX3NlcF9zdHJpbmcpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yX3N0YXJ0X2VuZF90eXBlID0gWyAwLCAwLCB1bmRlZmluZWQgXTtcbiAgICAgICAgICAgICAgdmFyIHByZXR0aWZpZWRfZ3JvdXBfdmFsdWUgPSBbXTtcbiAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobmV3X3Rva2Vuc1tucnVsZV1bMF0pO1xuXG4gICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgIHNlbGVjdG9yX3N0YXJ0X2VuZF90eXBlID0gZ2V0U2VsZWN0b3JSYW5nZShuZXdfdG9rZW5zW25ydWxlXVswXSwgc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGVbMV0pO1xuICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGUsIG5ld190b2tlbnNbbnJ1bGVdWzBdLmxlbmd0aCwgY291bnQpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoY291bnQgPiA1MCkge1xuICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdExpYnJhcnlCdWdNZXNzYWdlKCdJbmZpbml0ZSBsb29wLicpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGVbMl0gIT09ICdydWxlIHNlcGFyYXRvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX2dyb3VwX3ZhbHVlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yX3N0YXJ0X2VuZF90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldHRpZnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfdG9rZW5zW25ydWxlXVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvcl9zdGFydF9lbmRfdHlwZVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvcl9zdGFydF9lbmRfdHlwZVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvcl9zdGFydF9lbmRfdHlwZVsyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2NvbmZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBzZWxlY3Rvcl9zdGFydF9lbmRfdHlwZVsxXSsrO1xuICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNlbGVjdG9yX3N0YXJ0X2VuZF90eXBlLCBuZXdfdG9rZW5zW25ydWxlXVswXS5sZW5ndGgsIGNvdW50KTtcbiAgICAgICAgICAgICAgfSB3aGlsZSAoc2VsZWN0b3Jfc3RhcnRfZW5kX3R5cGVbMV0gPCBuZXdfdG9rZW5zW25ydWxlXVswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnUHJldHRpZmllZCB2YWx1ZTogJyArIEpTT04uc3RyaW5naWZ5KHByZXR0aWZpZWRfZ3JvdXBfdmFsdWUsIG51bGwsICcgICAgJykpO1xuICAgICAgICAgICAgICB2YXIgbm90X3NvcnRlZF9wcmV0dGlmaWVkX2dyb3VwX3ZhbHVlID0gcHJldHRpZmllZF9ncm91cF92YWx1ZS5zbGljZSgpO1xuXG4gICAgICAgICAgICAgIGlmICghZG9uZV93aXRoX3NlbGVjdG9yX3Jlb3JkZXJpbmcpIHtcbiAgICAgICAgICAgICAgICAgIHByZXR0aWZpZWRfZ3JvdXBfdmFsdWUuc29ydChcbiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3Jfb3JkZXIgPSBbICd5ZWFyJywgJ21vbnRoJywgJ3dlZWsnLCAnaG9saWRheScsICd3ZWVrZGF5JywgJ3RpbWUnLCAnMjQvNycsICdzdGF0ZScsICdjb21tZW50J107XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3Rvcl9vcmRlci5pbmRleE9mKGFbMF1bMl0pIC0gc2VsZWN0b3Jfb3JkZXIuaW5kZXhPZihiWzBdWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBvbGRfcHJldHRpZmllZF92YWx1ZV9sZW5ndGggPSBwcmV0dGlmaWVkX3ZhbHVlLmxlbmd0aDtcblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHVzZXJfY29uZlsnbG9jYWxlJ10gPT09ICdzdHJpbmcnICYmIHVzZXJfY29uZlsnbG9jYWxlJ10gIT09ICdlbicpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdG9yRnVuY3Rpb247XG4gICAgICAgICAgICAgICAgICBpZiAoaTE4bmV4dC5sYW5ndWFnZSAhPT0gdXNlcl9jb25mWydsb2NhbGUnXSkge1xuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0b3JGdW5jdGlvbiA9IGkxOG5leHQuZ2V0Rml4ZWRUKHVzZXJfY29uZlsnbG9jYWxlJ10pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdG9yRnVuY3Rpb24gPSBpMThuZXh0LnQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXR0aWZpZWRfZ3JvdXBfdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHByZXR0aWZpZWRfZ3JvdXBfdmFsdWVbaV1bMF1bMl07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICd3ZWVrZGF5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5cy5mb3JFYWNoKGZ1bmN0aW9uICh3ZWVrZGF5LCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXR0aWZpZWRfZ3JvdXBfdmFsdWVbaV1bMV0gPSBwcmV0dGlmaWVkX2dyb3VwX3ZhbHVlW2ldWzFdLnJlcGxhY2UobmV3IFJlZ0V4cCh3ZWVrZGF5LCAnZycpLCB3ZWVrZGF5c19sb2NhbFtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbW9udGgnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRocy5mb3JFYWNoKGZ1bmN0aW9uIChtb250aCwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX2dyb3VwX3ZhbHVlW2ldWzFdID0gcHJldHRpZmllZF9ncm91cF92YWx1ZVtpXVsxXS5yZXBsYWNlKG5ldyBSZWdFeHAobW9udGgsICdnJyksIG1vbnRoc19sb2NhbFtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXR0aWZpZWRWYWx1ZUlzUHJvYmFibHlUcmFuc2xhdGFibGUgPSBwcmV0dGlmaWVkX2dyb3VwX3ZhbHVlW2ldWzFdLmluZGV4T2YoJzonKSA9PT0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV0dGlmaWVkVmFsdWVJc1Byb2JhYmx5VHJhbnNsYXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX2dyb3VwX3ZhbHVlW2ldWzFdID0gdHJhbnNsYXRvckZ1bmN0aW9uKFsnb3BlbmluZ19ob3VyczpwcmV0dHkuJyArIHByZXR0aWZpZWRfZ3JvdXBfdmFsdWVbaV1bMV0sIHByZXR0aWZpZWRfZ3JvdXBfdmFsdWVbaV1bMV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHByZXR0aWZpZWRfdmFsdWUgKz0gcHJldHRpZmllZF9ncm91cF92YWx1ZS5tYXAoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlbMV07XG4gICAgICAgICAgICAgIH0pLmpvaW4oJyAnKTtcblxuICAgICAgICAgICAgICBwcmV0dGlmaWVkX3ZhbHVlX2FycmF5LnB1c2goIHByZXR0aWZpZWRfZ3JvdXBfdmFsdWUgKTtcblxuICAgICAgICAgICAgICBpZiAoIWRvbmVfd2l0aF9zZWxlY3Rvcl9yZW9yZGVyaW5nX3dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vdF9zb3J0ZWRfcHJldHRpZmllZF9ncm91cF92YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAobm90X3NvcnRlZF9wcmV0dGlmaWVkX2dyb3VwX3ZhbHVlW2ldICE9PSBwcmV0dGlmaWVkX2dyb3VwX3ZhbHVlW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGkgKyAnOiAnICsgcHJldHRpZmllZF9ncm91cF92YWx1ZVtpXVswXVsyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBpICsgb2xkX3ByZXR0aWZpZWRfdmFsdWVfbGVuZ3RoOyAvLyBpOiBOdW1iZXIgb2Ygc3BhY2VzIGluIHN0cmluZy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPD0gaTsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gcHJldHRpZmllZF9ncm91cF92YWx1ZVt4XVsxXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnTGVuZ3RoOiAnICsgbGVuZ3RoICsgJyAnICsgcHJldHRpZmllZF9ncm91cF92YWx1ZVt4XVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFsgcHJldHRpZmllZF92YWx1ZSwgbGVuZ3RoLCB0KCdzd2l0Y2hlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmaXJzdCc6IHByZXR0aWZpZWRfZ3JvdXBfdmFsdWVbaV1bMF1bMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2Vjb25kJzogbm90X3NvcnRlZF9wcmV0dGlmaWVkX2dyb3VwX3ZhbHVlW2ldWzBdWzJdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvbmVfd2l0aF9zZWxlY3Rvcl9yZW9yZGVyaW5nX3dhcm5pbmdzID0gdHJ1ZTtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShwcmV0dGlmaWVkX3ZhbHVlX2FycmF5LCBudWxsLCAnICAgICcpKTtcblxuICAgICAgICAgIGlmIChnZXRfaW50ZXJuYWxzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBbIHByZXR0aWZpZWRfdmFsdWVfYXJyYXksIG5ld190b2tlbnMgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcHJldHRpZmllZF92YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogQ2hlY2sgc2VsZWN0b3IgYXJyYXkgb2YgdG9rZW5zIGZvciBzcGVjaWZpYyB0b2tlbiBuYW1lIHBhdHRlcm4uIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB0b2tlbnM6IExpc3Qgb2YgdG9rZW4gb2JqZWN0cy5cbiAgICAgICAqIDpwYXJhbSBhdDogUG9zaXRpb24gYXQgd2hpY2ggdGhlIG1hdGNoaW5nIHNob3VsZCBiZWdpbi5cbiAgICAgICAqIDpwYXJhbSB0b2tlbl9uYW1lKHMpOiBPbmUgb3IgbWFueSB0b2tlbl9uYW1lIHN0cmluZ3Mgd2hpY2ggaGF2ZSB0byBtYXRjaCBpbiB0aGF0IG9yZGVyLlxuICAgICAgICogOnJldHVybnM6IHRydWUgaWYgdG9rZW5fbmFtZShzKSBtYXRjaCBpbiBvcmRlciBmYWxzZSBvdGhlcndpc2UuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIG1hdGNoVG9rZW5zKHRva2VucywgYXQgLyosIG1hdGNoZXMuLi4gKi8pIHtcbiAgICAgICAgICBpZiAoYXQgKyBhcmd1bWVudHMubGVuZ3RoIC0gMiA+IHRva2Vucy5sZW5ndGgpXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHRva2Vuc1thdCArIGldWzFdICE9PSBhcmd1bWVudHNbaSArIDJdKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBHZW5lcmF0ZSBzZWxlY3RvciB3cmFwcGVyIHdpdGggdGltZSBvZmZzZXQge3t7XG4gICAgICAgKlxuICAgICAgICogOnBhcmFtIGZ1bmM6IEdlbmVyYXRlZCBzZWxlY3RvciBjb2RlIGZ1bmN0aW9uLlxuICAgICAgICogOnBhcmFtIHNoaXJ0OiBUaW1lIHRvIHNoaWZ0IGluIG1pbGxpc2Vjb25kcy5cbiAgICAgICAqIDpwYXJhbSB0b2tlbl9uYW1lKHMpOiBPbmUgb3IgbWFueSB0b2tlbl9uYW1lIHN0cmluZ3Mgd2hpY2ggaGF2ZSB0byBtYXRjaCBpbiB0aGF0IG9yZGVyLlxuICAgICAgICogOnJldHVybnM6IFNlZSBzZWxlY3RvciBjb2RlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBnZW5lcmF0ZURhdGVTaGlmdGVyKGZ1bmMsIHNoaWZ0KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICAgICAgdmFyIHJlcyA9IGZ1bmMobmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgKyBzaGlmdCkpO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzWzFdID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgIHJldHVybiBbIHJlc1swXSwgbmV3IERhdGUocmVzWzFdLmdldFRpbWUoKSAtIHNoaWZ0KSBdO1xuICAgICAgICAgIH07XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogVG9wLWxldmVsIHBhcnNlciB7e3tcbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0gdG9rZW5zOiBMaXN0IG9mIHRva2VuIG9iamVjdHMuXG4gICAgICAgKiA6cGFyYW0gYXQ6IFBvc2l0aW9uIHdoZXJlIHRvIHN0YXJ0LlxuICAgICAgICogOnBhcmFtIHJ1bGU6IFJlZmVyZW5jZSB0byBydWxlIG9iamVjdC5cbiAgICAgICAqIDpwYXJhbSBucnVsZTogUnVsZSBudW1iZXIgc3RhcnRpbmcgd2l0aCAwLlxuICAgICAgICogOnJldHVybnM6IFNlZSBzZWxlY3RvciBjb2RlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBwYXJzZUdyb3VwKHRva2VucywgYXQsIHJ1bGUsIG5ydWxlKSB7XG4gICAgICAgICAgdmFyIHJ1bGVfbW9kaWZpZXJfc3BlY2lmaWVkID0gZmFsc2U7XG5cbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0b2tlbnMpOyAvLyB1c2VmdWwgZm9yIGRlYnVnZ2luZyBvZiB0b2tlbml6ZVxuICAgICAgICAgIHZhciBsYXN0X3NlbGVjdG9yID0gW107XG4gICAgICAgICAgd2hpbGUgKGF0IDwgdG9rZW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnUGFyc2luZyBhdCBwb3NpdGlvbicsIGF0ICsnOicsIHRva2Vuc1thdF0pO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ3dlZWtkYXknKSkge1xuICAgICAgICAgICAgICAgICAgYXQgPSBwYXJzZVdlZWtkYXlSYW5nZSh0b2tlbnMsIGF0LCBydWxlLCB1bmRlZmluZWQsIG5ydWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnMjQvNycpKSB7XG4gICAgICAgICAgICAgICAgICBydWxlLnRpbWUucHVzaChmdW5jdGlvbigpIHsgcmV0dXJuIFt0cnVlXTsgfSk7XG4gICAgICAgICAgICAgICAgICAvLyBOb3QgbmVlZGVkLiBJZiB0aGVyZSBpcyBubyBzZWxlY3RvciBpdCBhdXRvbWF0aWNhbGx5IG1hdGNoZXMgZXZlcnl0aGluZy5cbiAgICAgICAgICAgICAgICAgIC8vIFdST05HOiBUaGlzIG9ubHkgd29ya3MgaWYgdGhlcmUgaXMgbm8gb3RoZXIgc2VsZWN0b3IgaW4gdGhpcyBzZWxlY3RvciBncm91cCAuLi5cbiAgICAgICAgICAgICAgICAgIGF0Kys7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ2hvbGlkYXknKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQrMSwgJywnKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGF0ID0gcGFyc2VIb2xpZGF5KHRva2VucywgYXQsIHJ1bGUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdCA9IHBhcnNlSG9saWRheSh0b2tlbnMsIGF0LCBydWxlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB3ZWVrX3N0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdtb250aCcsICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICAgIHx8IG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdtb250aCcsICd3ZWVrZGF5JylcbiAgICAgICAgICAgICAgICAgICAgICB8fCBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAneWVhcicsICdtb250aCcsICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICAgIHx8IG1hdGNoVG9rZW5zKHRva2VucywgYXQsICd5ZWFyJywgJ2V2ZW50JylcbiAgICAgICAgICAgICAgICAgICAgICB8fCBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnZXZlbnQnKSkge1xuXG4gICAgICAgICAgICAgICAgICBhdCA9IHBhcnNlTW9udGhkYXlSYW5nZSh0b2tlbnMsIGF0LCBucnVsZSk7XG4gICAgICAgICAgICAgICAgICB3ZWVrX3N0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICd5ZWFyJykpIHtcbiAgICAgICAgICAgICAgICAgIGF0ID0gcGFyc2VZZWFyUmFuZ2UodG9rZW5zLCBhdCk7XG4gICAgICAgICAgICAgICAgICB3ZWVrX3N0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdtb250aCcpKSB7XG4gICAgICAgICAgICAgICAgICBhdCA9IHBhcnNlTW9udGhSYW5nZSh0b2tlbnMsIGF0KTtcbiAgICAgICAgICAgICAgICAgIC8vIHdlZWtfc3RhYmxlID0gZmFsc2U7IC8vIERlY2lkZWQgYmFzZWQgb24gdGhlIGFjdHVhbCB2YWx1ZS90b2tlbnMuXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ3dlZWsnKSkge1xuICAgICAgICAgICAgICAgICAgdG9rZW5zW2F0XVszXSA9ICd3ZWVrJztcbiAgICAgICAgICAgICAgICAgIGF0ID0gcGFyc2VXZWVrUmFuZ2UodG9rZW5zLCBhdCk7XG5cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdCAhPT0gMCAmJiBhdCAhPT0gdG9rZW5zLmxlbmd0aCAtIDEgJiYgdG9rZW5zW2F0XVswXSA9PT0gJzonXG4gICAgICAgICAgICAgICAgICAmJiAhKHR5cGVvZiBsYXN0X3NlbGVjdG9yWzFdID09PSAnc3RyaW5nJyAmJiBsYXN0X3NlbGVjdG9yWzFdID09PSAndGltZScpKSB7XG4gICAgICAgICAgICAgICAgICAvKiBJZ25vcmUgY29sb24gaWYgdGhleSBhcHBlYXIgc29tZXdoZXJlIGVsc2UgdGhhbiBhcyB0aW1lIHNlcGFyYXRvci5cbiAgICAgICAgICAgICAgICAgICAqIEV4Y2VwdCB0aGUgc3RhcnQgb3IgZW5kIG9mIHRoZSB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAqIFRoaXMgcHJvdmlkZXMgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBzeW50YXggcHJvcG9zZWQgYnkgTmV0endvbGY6XG4gICAgICAgICAgICAgICAgICAgKiBodHRwczovL3dpa2kub3BlbnN0cmVldG1hcC5vcmcvd2lraS9LZXk6b3BlbmluZ19ob3Vycy9zcGVjaWZpY2F0aW9uI3NlcGFyYXRvcl9mb3JfcmVhZGFiaWxpdHlcbiAgICAgICAgICAgICAgICAgICAqIENoZWNrIGZvciB2YWxpZCB1c2Ugb2YgPHNlcGFyYXRvcl9mb3JfcmVhZGFiaWxpdHk+IGlzIGltcGxlbWVudGVkIGluIGZ1bmN0aW9uIGdldFdhcm5pbmdzKCkuXG4gICAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgICAgaWYgKCFkb25lX3dpdGhfd2FybmluZ3MgJiYgbWF0Y2hUb2tlbnModG9rZW5zLCBhdC0xLCAnaG9saWRheScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFtucnVsZSwgYXQsIHQoJ25vIGNvbG9uIGFmdGVyJywgeyAndG9rZW4nOiB0b2tlbnNbYXQtMV1bMV0gfSldKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYXQrKztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnbnVtYmVyJywgJ3RpbWVzZXAnKVxuICAgICAgICAgICAgICAgICAgICAgIHx8IG1hdGNoVG9rZW5zKHRva2VucywgYXQsICd0aW1ldmFyJylcbiAgICAgICAgICAgICAgICAgICAgICB8fCBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnKCcsICd0aW1ldmFyJylcbiAgICAgICAgICAgICAgICAgICAgICB8fCBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnbnVtYmVyJywgJy0nKSkge1xuXG4gICAgICAgICAgICAgICAgICBhdCA9IHBhcnNlVGltZVJhbmdlKHRva2VucywgYXQsIHJ1bGUsIGZhbHNlLCBucnVsZSk7XG4gICAgICAgICAgICAgICAgICBsYXN0X3NlbGVjdG9yID0gWyBhdCwgJ3RpbWUnIF07XG5cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnc3RhdGUnKSkge1xuXG4gICAgICAgICAgICAgICAgICBpZiAodG9rZW5zW2F0XVswXSA9PT0gJ29wZW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcnVsZS5tZWFuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW5zW2F0XVswXSA9PT0gJ2Nsb3NlZCcgfHwgdG9rZW5zW2F0XVswXSA9PT0gJ29mZicpIHtcbiAgICAgICAgICAgICAgICAgICAgICBydWxlLm1lYW5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcnVsZS5tZWFuaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgcnVsZS51bmtub3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcnVsZV9tb2RpZmllcl9zcGVjaWZpZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgYXQrKztcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW5zW2F0XSA9PT0gJ29iamVjdCcgJiYgdG9rZW5zW2F0XVswXSA9PT0gJywnKSAvLyBhZGRpdGlvbmFsIHJ1bGVcbiAgICAgICAgICAgICAgICAgICAgICBhdCA9IFsgYXQgKyAxIF07XG5cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnY29tbWVudCcpKSB7XG4gICAgICAgICAgICAgICAgICBydWxlLmNvbW1lbnQgPSB0b2tlbnNbYXRdWzBdO1xuICAgICAgICAgICAgICAgICAgaWYgKCFydWxlX21vZGlmaWVyX3NwZWNpZmllZCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZW4gaXQgaXMgdW5rbm93bi4gRWl0aGVyIHdpdGggdW5rbm93biBleHBsaWNpdGx5XG4gICAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lmaWVkIG9yIGp1c3QgYSBjb21tZW50LlxuICAgICAgICAgICAgICAgICAgICAgIHJ1bGUubWVhbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIHJ1bGUudW5rbm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHJ1bGVfbW9kaWZpZXJfc3BlY2lmaWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGF0Kys7XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2Vuc1thdF0gPT09ICdvYmplY3QnICYmIHRva2Vuc1thdF1bMF0gPT09ICcsJykgeyAvLyBhZGRpdGlvbmFsIHJ1bGVcbiAgICAgICAgICAgICAgICAgICAgICBhdCA9IFsgYXQgKyAxIF07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGF0ID09PSAwIHx8IGF0ID09PSB0b2tlbnMubGVuZ3RoIC0gMSkgJiYgbWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ3J1bGUgc2VwYXJhdG9yJykpIHtcbiAgICAgICAgICAgICAgICAgIGF0Kys7XG4gICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInZhbHVlOiBcIiArIG5ydWxlKTtcbiAgICAgICAgICAgICAgICAgIC8vIHRocm93IGZvcm1hdExpYnJhcnlCdWdNZXNzYWdlKCdOb3QgaW1wbGVtZW50ZWQgeWV0LicpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIHdhcm5pbmdzID0gZ2V0V2FybmluZ3MoKTtcbiAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0LCB0KCd1bmV4cGVjdGVkIHRva2VuJywge3Rva2VuOiB0b2tlbnNbYXRdWzFdIH0pKSArICh3YXJuaW5ncyA/ICgnICcgKyB3YXJuaW5ncy5qb2luKCc7ICcpKSA6ICcnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgYXQgPT09ICdvYmplY3QnKSB7IC8vIGFkZGl0aW9uYWwgcnVsZVxuICAgICAgICAgICAgICAgICAgdG9rZW5zW2F0WzBdIC0gMV1bMV0gPSAncnVsZSBzZXBhcmF0b3InO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsYXN0X3NlbGVjdG9yWzBdID09PSAnbnVtYmVyJyAmJiBsYXN0X3NlbGVjdG9yWzBdICE9PSBhdCkge1xuICAgICAgICAgICAgICAgICAgbGFzdF9zZWxlY3RvciA9IFtdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGF0O1xuICAgICAgfVxuXG4gICAgICAvKiBOb3QgdXNlZFxuICAgICAgZnVuY3Rpb24gZ2V0X2xhc3RfdG9rZW5fcG9zX2luX3Rva2VuX2dyb3VwKHRva2VucywgYXQsIGxhc3RfYXQpIHtcbiAgICAgICAgICBmb3IgKGF0Kys7IGF0IDwgbGFzdF9hdDsgYXQrKykge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2Vuc1thdF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2Vuc1thdF1bM10gPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHRva2Vuc1thdF1bMV0gPT09ICdjb21tZW50J1xuICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB0b2tlbnNbYXRdWzFdID09PSAnc3RhdGUnKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXQgLSAxO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsYXN0X2F0O1xuICAgICAgfVxuICAgICAgKi9cblxuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8vIGhlbHBlciBmdW5jdGlvbnMgZm9yIHN1YiBwYXJzZXIge3t7XG5cbiAgICAgIC8qIEZvciBnaXZlbiBkYXRlLCByZXR1cm5zIGRhdGUgbW92ZWQgdG8gdGhlIHN0YXJ0IG9mIHRoZSBkYXkgd2l0aCBhbiBvZmZzZXQgc3BlY2lmaWVkIGluIG1pbnV0ZXMuIHt7e1xuICAgICAgICogRm9yIGV4YW1wbGUsIGlmIGRhdGUgaXMgMjAxNC0wNS0xOV8xODoxNzoxMiwgZGF0ZUF0RGF5TWludXRlcyB3b3VsZFxuICAgICAgICogcmV0dXJuIDIwMTQtMDUtMTlfMDI6MDA6MDAgZm9yIG1pbnV0ZXM9MTIwLlxuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSBkYXRlOiBEYXRlIG9iamVjdC5cbiAgICAgICAqIDpwYXJhbSBtaW51dGVzOiBNaW51dGVzIHVzZWQgYXMgb2Zmc2V0IHN0YXJ0aW5nIGZyb20gbWlkbmlnaHQgb2YgY3VycmVudCBkYXkuXG4gICAgICAgKiA6cmV0dXJuczogTW92ZWQgZGF0ZSBvYmplY3QuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGRhdGVBdERheU1pbnV0ZXMoZGF0ZSwgbWludXRlcykge1xuICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIDAsIG1pbnV0ZXMpO1xuICAgICAgfVxuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIEZvciBnaXZlbiBkYXRlLCByZXR1cm5zIGRhdGUgbW92ZWQgdG8gdGhlIHNwZWNpZmljIGRheSBvZiB3ZWVrIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSBkYXRlOiBEYXRlIG9iamVjdC5cbiAgICAgICAqIDpwYXJhbSB3ZWVrZGF5OiBJbnRlZ2VyIG51bWJlciBmb3IgZGF5IG9mIHdlZWsuIFN0YXJ0aW5nIHdpdGggemVybyAoU3VuZGF5KS5cbiAgICAgICAqIDpyZXR1cm5zOiBNb3ZlZCBkYXRlIG9iamVjdC5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZGF0ZUF0TmV4dFdlZWtkYXkoZGF0ZSwgd2Vla2RheSkge1xuICAgICAgICAgIHZhciBkZWx0YSA9IHdlZWtkYXkgLSBkYXRlLmdldERheSgpO1xuICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkgKyBkZWx0YSArIChkZWx0YSA8IDAgPyA3IDogMCkpO1xuICAgICAgfVxuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIE51bWVyaWMgbGlzdCBwYXJzZXIgKDEsMiwzLTQsLTEpIHt7e1xuICAgICAgICogVXNlZCBpbiB3ZWVrZGF5IHBhcnNlciBhYm92ZS5cbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0gdG9rZW5zOiBMaXN0IG9mIHRva2VuIG9iamVjdHMuXG4gICAgICAgKiA6cGFyYW0gYXQ6IFBvc2l0aW9uIHdoZXJlIHRvIHN0YXJ0LlxuICAgICAgICogOnBhcmFtIGZ1bmM6IEZ1bmN0aW9uIGZ1bmMoZnJvbSwgdG8sIGF0KS5cbiAgICAgICAqIDpyZXR1cm5zOiBQb3NpdGlvbiBhdCB3aGljaCB0aGUgdG9rZW4gZG9lcyBub3QgYmVsb25nIHRvIHRoZSBsaXN0IGFueSBtb3JlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBwYXJzZU51bVJhbmdlKHRva2VucywgYXQsIGZ1bmMpIHtcbiAgICAgICAgICBmb3IgKDsgYXQgPCB0b2tlbnMubGVuZ3RoOyBhdCsrKSB7XG4gICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnbnVtYmVyJywgJy0nLCAnbnVtYmVyJykpIHtcbiAgICAgICAgICAgICAgICAgIC8vIE51bWJlciByYW5nZVxuICAgICAgICAgICAgICAgICAgZnVuYyh0b2tlbnNbYXRdWzBdLCB0b2tlbnNbYXQrMl1bMF0sIGF0KTtcbiAgICAgICAgICAgICAgICAgIGF0ICs9IDM7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJy0nLCAnbnVtYmVyJykpIHtcbiAgICAgICAgICAgICAgICAgIC8vIE5lZ2F0aXZlIG51bWJlclxuICAgICAgICAgICAgICAgICAgZnVuYygtdG9rZW5zW2F0KzFdWzBdLCAtdG9rZW5zW2F0KzFdWzBdLCBhdCk7XG4gICAgICAgICAgICAgICAgICBhdCArPSAyO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdudW1iZXInKSkge1xuICAgICAgICAgICAgICAgICAgLy8gU2luZ2xlIG51bWJlclxuICAgICAgICAgICAgICAgICAgZnVuYyh0b2tlbnNbYXRdWzBdLCB0b2tlbnNbYXRdWzBdLCBhdCk7XG4gICAgICAgICAgICAgICAgICBhdCsrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQgKyBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnLScpLFxuICAgICAgICAgICAgICAgICAgICAgICdVbmV4cGVjdGVkIHRva2VuIGluIG51bWJlciByYW5nZTogJyArIHRva2Vuc1thdF1bMV0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnLCcpKVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGF0O1xuICAgICAgfVxuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIExpc3QgcGFyc2VyIGZvciBjb25zdHJhaW5lZCB3ZWVrZGF5cyBpbiBtb250aCByYW5nZSB7e3tcbiAgICAgICAqIGUuZy4gU3VbLTFdIHdoaWNoIHNlbGVjdHMgdGhlIGxhc3QgU3VuZGF5IG9mIHRoZSBtb250aC5cbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0gdG9rZW5zOiBMaXN0IG9mIHRva2VuIG9iamVjdHMuXG4gICAgICAgKiA6cGFyYW0gYXQ6IFBvc2l0aW9uIHdoZXJlIHRvIHN0YXJ0LlxuICAgICAgICogOnJldHVybnM6IEFycmF5OlxuICAgICAgICogICAgICAgICAgICAwLiBDb25zdHJhaW5lZCB3ZWVrZGF5IG51bWJlci5cbiAgICAgICAqICAgICAgICAgICAgMS4gUG9zaXRpb24gYXQgd2hpY2ggdGhlIHRva2VuIGRvZXMgbm90IGJlbG9uZyB0byB0aGUgbGlzdCBhbnkgbW9yZSAoYWZ0ZXIgJ10nIHRva2VuKS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2V0Q29uc3RyYWluZWRXZWVrZGF5KHRva2VucywgYXQpIHtcbiAgICAgICAgICB2YXIgbnVtYmVyID0gMDtcbiAgICAgICAgICB2YXIgZW5kYXQgPSBwYXJzZU51bVJhbmdlKHRva2VucywgYXQsIGZ1bmN0aW9uKGZyb20sIHRvLCBhdCkge1xuXG4gICAgICAgICAgICAgIC8vIGJhZCBudW1iZXJcbiAgICAgICAgICAgICAgaWYgKGZyb20gPT09IDAgfHwgZnJvbSA8IC01IHx8IGZyb20gPiA1KVxuICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsXG4gICAgICAgICAgICAgICAgICAgICAgdCgnbnVtYmVyIC01IHRvIDUnKSk7XG5cbiAgICAgICAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobnVtYmVyICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0KCdvbmUgd2Vla2RheSBjb25zdHJhaW50JykpO1xuICAgICAgICAgICAgICAgICAgbnVtYmVyID0gZnJvbTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0KzIsXG4gICAgICAgICAgICAgICAgICAgICAgdCgncmFuZ2UgY29uc3RyYWluZWQgd2Vla2RheXMnKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gYXQ7IGkgPCBlbmRhdDsgaSsrKSB7XG4gICAgICAgICAgICAgIHRva2Vuc1tpXVs0XSA9ICdwb3NpdGl2ZV9udW1iZXInO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghbWF0Y2hUb2tlbnModG9rZW5zLCBlbmRhdCwgJ10nKSlcbiAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgZW5kYXQsIHQoJ2V4cGVjdGVkJywge3N5bWJvbDogJ10nfSkpO1xuXG4gICAgICAgICAgcmV0dXJuIFsgbnVtYmVyLCBlbmRhdCArIDEgXTtcbiAgICAgIH1cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvLyBDaGVjayBpZiBwZXJpb2QgaXMgb2suIFBlcmlvZCAwIG9yIDEgZG9u4oCZdCBtYWtlIG11Y2ggc2Vuc2UuXG4gICAgICBmdW5jdGlvbiBjaGVja1BlcmlvZChhdCwgcGVyaW9kLCBwZXJpb2RfdHlwZSwgcGFybV9zdHJpbmcpIHtcbiAgICAgICAgICBpZiAoZG9uZV93aXRoX3dhcm5pbmdzKVxuICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICBpZiAocGVyaW9kID09PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0LFxuICAgICAgICAgICAgICAgICAgdCgncmFuZ2UgemVybycsIHsgJ3R5cGUnOiBwZXJpb2RfdHlwZSB9KSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwZXJpb2QgPT09IDEpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJtX3N0cmluZyA9PT0gJ3N0cmluZycgJiYgcGFybV9zdHJpbmcgPT09ICdub19lbmRfeWVhcicpXG4gICAgICAgICAgICAgICAgICBwYXJzaW5nX3dhcm5pbmdzLnB1c2goW25ydWxlLCBhdCwgdCgncGVyaW9kIG9uZSB5ZWFyKycsIHsndHlwZSc6IHBlcmlvZF90eXBlfSldKTtcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFtucnVsZSwgYXQsIHQoJ3BlcmlvZCBvbmUnLCB7J3R5cGUnOiBwZXJpb2RfdHlwZX0pXSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBHZXQgZGF0ZSBtb3ZlZCB0byBjb25zdHJhaW5lZCB3ZWVrZGF5IChhbmQgbW92ZWQgZm9yIGFkZF9kYXlzLiB7e3tcbiAgICAgICAqIEUuZy4gdXNlZCBmb3IgJ0F1ZyBTdVstMV0gLTEgZGF5Jy5cbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0geWVhcjogWWVhciBhcyBpbnRlZ2VyLlxuICAgICAgICogOnBhcmFtIG1vbnRoOiBNb250aCBhcyBpbnRlZ2VyIHN0YXJ0aW5nIHdpdGggemVyby5cbiAgICAgICAqIDpwYXJhbSB3ZWVrZGF5OiBJbnRlZ2VyIG51bWJlciBmb3IgZGF5IG9mIHdlZWsuIFN0YXJ0aW5nIHdpdGggemVybyAoU3VuZGF5KS5cbiAgICAgICAqIDpwYXJhbSBjb25zdHJhaW5lZF93ZWVrZGF5OiBQb3NpdGlvbiB3aGVyZSB0byBzdGFydC5cbiAgICAgICAqIDpyZXR1cm5zOiBEYXRlIG9iamVjdC5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2V0RGF0ZUZvckNvbnN0cmFpbmVkV2Vla2RheSh5ZWFyLCBtb250aCwgd2Vla2RheSwgY29uc3RyYWluZWRfd2Vla2RheSwgYWRkX2RheXMpIHtcbiAgICAgICAgICB2YXIgdG1wX2RhdGUgPSBkYXRlQXROZXh0V2Vla2RheShcbiAgICAgICAgICAgICAgbmV3IERhdGUoeWVhciwgbW9udGggKyAoY29uc3RyYWluZWRfd2Vla2RheVswXSA+IDAgPyAwIDogMSksIDEpLCB3ZWVrZGF5KTtcblxuICAgICAgICAgIHRtcF9kYXRlLnNldERhdGUodG1wX2RhdGUuZ2V0RGF0ZSgpICsgKGNvbnN0cmFpbmVkX3dlZWtkYXlbMF0gKyAoY29uc3RyYWluZWRfd2Vla2RheVswXSA+IDAgPyAtMSA6IDApKSAqIDcpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBhZGRfZGF5cyA9PT0gJ29iamVjdCcgJiYgYWRkX2RheXNbMV0pXG4gICAgICAgICAgICAgIHRtcF9kYXRlLnNldERhdGUodG1wX2RhdGUuZ2V0RGF0ZSgpICsgYWRkX2RheXNbMF0pO1xuXG4gICAgICAgICAgcmV0dXJuIHRtcF9kYXRlO1xuICAgICAgfVxuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIENoZWNrIGlmIGRhdGUgaXMgdmFsaWQuIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSBtb250aDogTW9udGggYXMgaW50ZWdlciBzdGFydGluZyB3aXRoIHplcm8uXG4gICAgICAgKiA6cGFyYW0gZGF0ZTogRGF5IG9mIG1vbnRoIGFzIGludGVnZXIuXG4gICAgICAgKiA6cGFyYW0gbnJ1bGU6IFJ1bGUgbnVtYmVyIHN0YXJ0aW5nIHdpdGggMC5cbiAgICAgICAqIDpwYXJhbSBhdDogUG9zaXRpb24gYXQgd2hpY2ggdGhlIG1hdGNoaW5nIHNob3VsZCBiZWdpbi5cbiAgICAgICAqIDpyZXR1cm5zOiB1bmRlZmluZWQuIFRoZXJlIGlzIG5vIHJlYWwgcmV0dXJuIHZhbHVlLiBUaGlzIGZ1bmN0aW9uIGp1c3QgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiBzb21ldGhpbmcgaXMgd3JvbmcuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGNoZWNrSWZEYXRlSXNWYWxpZChtb250aCwgZGF5LCBucnVsZSwgYXQpIHtcbiAgICAgICAgICAvLyBNYXkgdXNlIHRoaXMgaW5zdGVhZC4gVGhlIHByb2JsZW0gaXMgdGhhdCB0aGlzIGRvZXMgbm90IGdpdmUgZmVlZGJhY2sgYXMgcHJlY2lzZSBhcyB0aGUgY29kZSB3aGljaCBpcyB1c2VkIGluIHRoaXMgZnVuY3Rpb24uXG4gICAgICAgICAgLy8gdmFyIHRlc3REYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIGRheSk7XG4gICAgICAgICAgLy8gaWYgKHRlc3REYXRlLmdldERhdGUoKSAhPT0gZGF5IHx8IHRlc3REYXRlLmdldE1vbnRoKCkgIT09IG1vbnRoIHx8IHRlc3REYXRlLmdldEZ1bGxZZWFyKCkgIT09IHllYXIpIHtcbiAgICAgICAgICAvLyAgICAgY29uc29sZS5lcnJvcignZGF0ZSBub3QgdmFsaWQnKTtcbiAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb250aCNKdWxpYW5fYW5kX0dyZWdvcmlhbl9jYWxlbmRhcnNcbiAgICAgICAgICBpZiAoZGF5IDwgMSB8fCBkYXkgPiAzMSkge1xuICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCwgdCgnbW9udGggMzEnLCB7J21vbnRoJzogbW9udGhzW21vbnRoXX0pKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKChtb250aCA9PT0gMyB8fCBtb250aCA9PT0gNSB8fCBtb250aCA9PT0gOCB8fCBtb250aCA9PT0gMTApICYmIGRheSA9PT0gMzEpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsIHQoJ21vbnRoIDMwJywgeydtb250aCc6IG1vbnRoc1ttb250aF19KSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChtb250aCA9PT0gMSAmJiBkYXkgPT09IDMwKSB7XG4gICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0LCB0KCdtb250aCBmZWInLCB7J21vbnRoJzogbW9udGhzW21vbnRoXX0pKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBUaW1lIHJhbmdlIHBhcnNlciAoMTA6MDAtMTI6MDAsMTQ6MDAtMTY6MDApIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB0b2tlbnM6IExpc3Qgb2YgdG9rZW4gb2JqZWN0cy5cbiAgICAgICAqIDpwYXJhbSBhdDogUG9zaXRpb24gd2hlcmUgdG8gc3RhcnQuXG4gICAgICAgKiA6cGFyYW0gcnVsZTogUmVmZXJlbmNlIHRvIHJ1bGUgb2JqZWN0LlxuICAgICAgICogOnBhcmFtIGV4dGVuZGVkX29wZW5fZW5kOiBVc2VkIGZvciBjb21iaW5lZCB0aW1lIHJhbmdlIHdpdGggb3BlbiBlbmQuXG4gICAgICAgKiA6cGFyYW0gbnJ1bGU6IFJ1bGUgbnVtYmVyIHN0YXJ0aW5nIHdpdGggMC5cbiAgICAgICAqIGV4dGVuZGVkX29wZW5fZW5kOiA8dGltZT4gLSA8dGltZT4gK1xuICAgICAgICogICAgICAgIHBhcmFtZXRlciBhdCBpcyBoZXJlIEEgKGlmIGV4dGVuZGVkX29wZW5fZW5kIGlzIHRydWUpXG4gICAgICAgKiA6cmV0dXJuczogUG9zaXRpb24gYXQgd2hpY2ggdGhlIHRva2VuIGRvZXMgbm90IGJlbG9uZyB0byB0aGUgc2VsZWN0b3IgYW55bW9yZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcGFyc2VUaW1lUmFuZ2UodG9rZW5zLCBhdCwgcnVsZSwgZXh0ZW5kZWRfb3Blbl9lbmQsIG5ydWxlKSB7XG4gICAgICAgICAgaWYgKCFleHRlbmRlZF9vcGVuX2VuZClcbiAgICAgICAgICAgICAgdG9rZW5zW2F0XVszXSA9ICd0aW1lJztcblxuICAgICAgICAgIGZvciAoOyBhdCA8IHRva2Vucy5sZW5ndGg7IGF0KyspIHtcbiAgICAgICAgICAgICAgdmFyIGhhc190aW1lX3Zhcl9jYWxjID0gW10sIGhhc19ub3JtYWxfdGltZSA9IFtdOyAvLyBlbGVtZW50IDA6IHN0YXJ0IHRpbWUsIDE6IGVuZCB0aW1lXG4gICAgICAgICAgICAgICAgICBoYXNfbm9ybWFsX3RpbWVbMF0gICA9IG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdudW1iZXInLCAndGltZXNlcCcsICdudW1iZXInKTtcbiAgICAgICAgICAgICAgICAgIGhhc190aW1lX3Zhcl9jYWxjWzBdID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJygnLCAndGltZXZhcicpO1xuICAgICAgICAgICAgICB2YXIgbWludXRlc19mcm9tLFxuICAgICAgICAgICAgICAgICAgbWludXRlc190bztcbiAgICAgICAgICAgICAgaWYgKGhhc19ub3JtYWxfdGltZVswXSB8fCBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAndGltZXZhcicpIHx8IGhhc190aW1lX3Zhcl9jYWxjWzBdKSB7XG4gICAgICAgICAgICAgICAgICAvLyByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgYWx3YXlzICpvbmUqIG9mIHRoZW0gaXMgdHJ1ZVxuXG4gICAgICAgICAgICAgICAgICB2YXIgaXNfcG9pbnRfaW5fdGltZSA9IGZhbHNlOyAvLyBkZWZhdWx0IG5vIHRpbWUgcmFuZ2VcbiAgICAgICAgICAgICAgICAgIHZhciBoYXNfb3Blbl9lbmQgICAgID0gZmFsc2U7IC8vIGRlZmF1bHQgbm8gb3BlbiBlbmRcbiAgICAgICAgICAgICAgICAgIHZhciB0aW1ldmFyX2FkZCAgICAgID0gWyAwLCAwIF07XG4gICAgICAgICAgICAgICAgICB2YXIgdGltZXZhcl9zdHJpbmcgICA9IFtdOyAgICAvLyBjYXB0dXJlIHRpbWV2YXIgc3RyaW5nIGxpa2UgJ3N1bnJpc2UnIHRvIGNhbGN1bGF0ZSBpdCBmb3IgdGhlIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgICAgICAgICAgIHZhciBwb2ludF9pbl90aW1lX3BlcmlvZDtcblxuICAgICAgICAgICAgICAgICAgLy8gbWludXRlc19mcm9tXG4gICAgICAgICAgICAgICAgICBpZiAoaGFzX25vcm1hbF90aW1lWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbWludXRlc19mcm9tID0gZ2V0TWludXRlc0J5SG91cnNNaW51dGVzKHRva2VucywgbnJ1bGUsIGF0K2hhc190aW1lX3Zhcl9jYWxjWzBdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGltZXZhcl9zdHJpbmdbMF0gPSB0b2tlbnNbYXQraGFzX3RpbWVfdmFyX2NhbGNbMF1dWzBdO1xuICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfZnJvbSA9IHdvcmRfdmFsdWVfcmVwbGFjZW1lbnRbdGltZXZhcl9zdHJpbmdbMF1dO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc190aW1lX3Zhcl9jYWxjWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWV2YXJfYWRkWzBdID0gcGFyc2VUaW1ldmFyQ2FsYyh0b2tlbnMsIGF0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlc19mcm9tICs9IHRpbWV2YXJfYWRkWzBdO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgdmFyIGF0X2VuZF90aW1lID0gYXQrKGhhc19ub3JtYWxfdGltZVswXSA/IDMgOiAoaGFzX3RpbWVfdmFyX2NhbGNbMF0gPyA3IDogMSkpKzE7IC8vIGFmdGVyICctJ1xuICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaFRva2Vucyh0b2tlbnMsIGF0X2VuZF90aW1lIC0gMSwgJy0nKSkgeyAvLyBub3QgdGltZSByYW5nZVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0X2VuZF90aW1lIC0gMSwgJysnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNfb3Blbl9lbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvaF9tb2RlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0KyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzX25vcm1hbF90aW1lWzBdID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRva2Vuc1thdCszXSA9PT0gJ29iamVjdCcgPyAzIDogMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzX3RpbWVfdmFyX2NhbGNbMF0gPyAyIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdG9rZW5zW2F0KzFdID09PSAnb2JqZWN0JyA/IDEgOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0KCdwb2ludCBpbiB0aW1lJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2FsYyc6IChoYXNfdGltZV92YXJfY2FsY1swXSA/IHQoJ2NhbGN1bGF0aW9uJykgKyAnICcgOiAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsaWJyYXJ5bmFtZSc6IGxpYnJhcnlfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfdG8gPSBtaW51dGVzX2Zyb20gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfcG9pbnRfaW5fdGltZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIC8vIG1pbnV0ZXNfdG9cbiAgICAgICAgICAgICAgICAgIGlmIChoYXNfb3Blbl9lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kZWRfb3Blbl9lbmQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlc19mcm9tICs9IG1pbnV0ZXNfaW5fZGF5O1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAobWludXRlc19mcm9tID49IDIyICogNjApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBtaW51dGVzX3RvID0gbWludXRlc19mcm9tICsgIDggKiA2MDtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1pbnV0ZXNfZnJvbSA+PSAxNyAqIDYwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfdG8gPSBtaW51dGVzX2Zyb20gKyAxMCAqIDYwO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfdG8gPSBtaW51dGVzX2luX2RheTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc19wb2ludF9pbl90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaGFzX25vcm1hbF90aW1lWzFdID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdF9lbmRfdGltZSwgJ251bWJlcicsICd0aW1lc2VwJywgJ251bWJlcicpO1xuICAgICAgICAgICAgICAgICAgICAgIGhhc190aW1lX3Zhcl9jYWxjWzFdICAgICAgPSBtYXRjaFRva2Vucyh0b2tlbnMsIGF0X2VuZF90aW1lLCAnKCcsICd0aW1ldmFyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNfbm9ybWFsX3RpbWVbMV0gJiYgIW1hdGNoVG9rZW5zKHRva2VucywgYXRfZW5kX3RpbWUsICd0aW1ldmFyJykgJiYgIWhhc190aW1lX3Zhcl9jYWxjWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0X2VuZF90aW1lIC0gKHR5cGVvZiB0b2tlbnNbYXRfZW5kX3RpbWVdID09PSAnb2JqZWN0JyA/IDAgOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0KCd0aW1lIHJhbmdlIGNvbnRpbnVlJykpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNfbm9ybWFsX3RpbWVbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfdG8gPSBnZXRNaW51dGVzQnlIb3Vyc01pbnV0ZXModG9rZW5zLCBucnVsZSwgYXRfZW5kX3RpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXZhcl9zdHJpbmdbMV0gPSB0b2tlbnNbYXRfZW5kX3RpbWUraGFzX3RpbWVfdmFyX2NhbGNbMV1dWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlc190byA9IHdvcmRfdmFsdWVfcmVwbGFjZW1lbnRbdGltZXZhcl9zdHJpbmdbMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc190aW1lX3Zhcl9jYWxjWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1ldmFyX2FkZFsxXSA9IHBhcnNlVGltZXZhckNhbGModG9rZW5zLCBhdF9lbmRfdGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW51dGVzX3RvICs9IHRpbWV2YXJfYWRkWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBhdCA9IGF0X2VuZF90aW1lICsgKGlzX3BvaW50X2luX3RpbWUgPyAtMSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChoYXNfbm9ybWFsX3RpbWVbMV0gPyAzIDogKGhhc190aW1lX3Zhcl9jYWxjWzFdID8gNyA6ICFoYXNfb3Blbl9lbmQpKVxuICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnLycsICdudW1iZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0ICsgMiwgJ3RpbWVzZXAnLCAnbnVtYmVyJykpIHsgLy8gL2hvdXJzOm1pbnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRfaW5fdGltZV9wZXJpb2QgPSBnZXRNaW51dGVzQnlIb3Vyc01pbnV0ZXModG9rZW5zLCBucnVsZSwgYXQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXQgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyAvbWludXRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludF9pbl90aW1lX3BlcmlvZCA9IHRva2Vuc1thdCArIDFdWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhdCArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ3RpbWVzZXAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ3BlcmlvZCBjb250aW51ZScpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBhdCB0aGlzIGxhdGVyIHN0YXRlIGluIHRoZSBpZiBjb25kaXRpb24gdG8gZ2V0IHRoZSBjb3JyZWN0IHBvc2l0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgIGlmIChvaF9tb2RlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0IC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ3RpbWUgcmFuZ2UgbW9kZScsIHsnbGlicmFyeW5hbWUnOiBsaWJyYXJ5X25hbWV9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaXNfcG9pbnRfaW5fdGltZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICcrJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwYXJzZVRpbWVSYW5nZSh0b2tlbnMsIGF0X2VuZF90aW1lLCBydWxlLCBtaW51dGVzX3RvIDwgbWludXRlc19mcm9tID8gMSA6IHRydWUsIG5ydWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICBhdCsrO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvaF9tb2RlID09PSAxICYmICFpc19wb2ludF9pbl90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXRfZW5kX3RpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ3BvaW50IGluIHRpbWUgbW9kZScsIHsnbGlicmFyeW5hbWUnOiBsaWJyYXJ5X25hbWV9KSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGF0ID09PSAnc3RyaW5nJykgeyAvLyBsb24gd2lsbCBhbHNvIGJlIGRlZmluZWQgKHNlZSBhYm92ZSlcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc19ub3JtYWxfdGltZVswXSB8fCAhKGhhc19ub3JtYWxfdGltZVsxXSB8fCBoYXNfb3Blbl9lbmQgfHwgaXNfcG9pbnRfaW5fdGltZSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdlZWtfc3RhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gd2UgY2FuIG5vdCBjYWxjdWxhdGUgZXhhY3QgdGltZXMgc28gd2UgdXNlIHRoZSBhbHJlYWR5IGFwcGxpZWQgY29uc3RhbnRzICh3b3JkX3ZhbHVlX3JlcGxhY2VtZW50KS5cbiAgICAgICAgICAgICAgICAgICAgICB0aW1ldmFyX3N0cmluZyA9IFtdO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAvLyBOb3JtYWxpemUgbWludXRlcyBpbnRvIHJhbmdlLlxuICAgICAgICAgICAgICAgICAgaWYgKCFleHRlbmRlZF9vcGVuX2VuZCAmJiBtaW51dGVzX2Zyb20gPj0gbWludXRlc19pbl9kYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdF9lbmRfdGltZSAtIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ291dHNpZGUgY3VycmVudCBkYXknKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAobWludXRlc190byA8IG1pbnV0ZXNfZnJvbSB8fCAoKGhhc19ub3JtYWxfdGltZVswXSAmJiBoYXNfbm9ybWFsX3RpbWVbMV0pICYmIG1pbnV0ZXNfZnJvbSA9PT0gbWludXRlc190bykpIHtcbiAgICAgICAgICAgICAgICAgICAgICBtaW51dGVzX3RvICs9IG1pbnV0ZXNfaW5fZGF5O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKG1pbnV0ZXNfdG8gPiBtaW51dGVzX2luX2RheSAqIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdF9lbmRfdGltZSArIChoYXNfbm9ybWFsX3RpbWVbMV0gPyA0IDogKGhhc190aW1lX3Zhcl9jYWxjWzFdID8gNyA6IDEpKSAtIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ3R3byBtaWRuaWdodHMnKSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc2hvcnRjdXQgbWFrZXMgYWx3YXlzLW9wZW4gcmFuZ2UgY2hlY2sgZmFzdGVyLlxuICAgICAgICAgICAgICAgICAgaWYgKG1pbnV0ZXNfZnJvbSA9PT0gMCAmJiBtaW51dGVzX3RvID09PSBtaW51dGVzX2luX2RheSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJ1bGUudGltZS5wdXNoKGZ1bmN0aW9uKCkgeyByZXR1cm4gW3RydWVdOyB9KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbnV0ZXNfdG8gPiBtaW51dGVzX2luX2RheSkgeyAvLyBoYXNfbm9ybWFsX3RpbWVbMV0gbXVzdCBiZSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUudGltZS5wdXNoKGZ1bmN0aW9uKG1pbnV0ZXNfZnJvbSwgbWludXRlc190bywgdGltZXZhcl9zdHJpbmcsIHRpbWV2YXJfYWRkLCBoYXNfb3Blbl9lbmQsIGlzX3BvaW50X2luX3RpbWUsIHBvaW50X2luX3RpbWVfcGVyaW9kLCBleHRlbmRlZF9vcGVuX2VuZCkgeyByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91cm1pbnV0ZXMgPSBkYXRlLmdldEhvdXJzKCkgKiA2MCArIGRhdGUuZ2V0TWludXRlcygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZXZhcl9zdHJpbmdbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZV9mcm9tID0gU3VuQ2FsYy5nZXRUaW1lcyhkYXRlLCBsYXQsIGxvbilbdGltZXZhcl9zdHJpbmdbMF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfZnJvbSAgPSBkYXRlX2Zyb20uZ2V0SG91cnMoKSAqIDYwICsgZGF0ZV9mcm9tLmdldE1pbnV0ZXMoKSArIHRpbWV2YXJfYWRkWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWV2YXJfc3RyaW5nWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGVfdG8gPSBTdW5DYWxjLmdldFRpbWVzKGRhdGUsIGxhdCwgbG9uKVt0aW1ldmFyX3N0cmluZ1sxXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlc190byAgPSBkYXRlX3RvLmdldEhvdXJzKCkgKiA2MCArIGRhdGVfdG8uZ2V0TWludXRlcygpICsgdGltZXZhcl9hZGRbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlc190byArPSBtaW51dGVzX2luX2RheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkcyB0byBiZSBhZGRlZCBiZWNhdXNlIGl0IHdhcyBhZGRlZCBieVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vcm1hbCB0aW1lczogaWYgKG1pbnV0ZXNfdG8gPCBtaW51dGVzX2Zyb20pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWJvdmUgdGhlIHNlbGVjdG9yIGNvbnN0cnVjdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNfcG9pbnRfaW5fdGltZSAmJiB0eXBlb2YgcG9pbnRfaW5fdGltZV9wZXJpb2QgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlc190byA9IG1pbnV0ZXNfZnJvbSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9pbnRfaW5fdGltZV9wZXJpb2QgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG91cm1pbnV0ZXMgPCBtaW51dGVzX2Zyb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgZGF0ZUF0RGF5TWludXRlcyhkYXRlLCBtaW51dGVzX2Zyb20pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG91cm1pbnV0ZXMgPD0gbWludXRlc190bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjdXJfbWluID0gbWludXRlc19mcm9tOyBvdXJtaW51dGVzICsgcG9pbnRfaW5fdGltZV9wZXJpb2QgPj0gY3VyX21pbjsgY3VyX21pbiArPSBwb2ludF9pbl90aW1lX3BlcmlvZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cl9taW4gPT09IG91cm1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RydWUsIGRhdGVBdERheU1pbnV0ZXMoZGF0ZSwgb3VybWludXRlcyArIDEpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3VybWludXRlcyA8IGN1cl9taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIGN1cl9taW4pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG1pbnV0ZXNfaW5fZGF5KV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXJtaW51dGVzIDwgbWludXRlc19mcm9tKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG1pbnV0ZXNfZnJvbSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG1pbnV0ZXNfdG8pLCBoYXNfb3Blbl9lbmQsIGV4dGVuZGVkX29wZW5fZW5kXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfX0obWludXRlc19mcm9tLCBtaW51dGVzX3RvLCB0aW1ldmFyX3N0cmluZywgdGltZXZhcl9hZGQsIGhhc19vcGVuX2VuZCwgaXNfcG9pbnRfaW5fdGltZSwgcG9pbnRfaW5fdGltZV9wZXJpb2QsIGV4dGVuZGVkX29wZW5fZW5kKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbnV0ZXNfdG8gLSBtaW51dGVzX2luX2RheSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcnVsZV9pbmZvc1tucnVsZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZV9pbmZvc1tucnVsZV0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVfaW5mb3NbbnJ1bGVdWyd0aW1lX3dyYXBzX292ZXJfbWlkbmlnaHQnXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLndyYXB0aW1lLnB1c2goZnVuY3Rpb24obWludXRlc190bywgdGltZXZhcl9zdHJpbmcsIHRpbWV2YXJfYWRkLCBoYXNfb3Blbl9lbmQsIHBvaW50X2luX3RpbWVfcGVyaW9kLCBleHRlbmRlZF9vcGVuX2VuZCkgeyByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXJtaW51dGVzID0gZGF0ZS5nZXRIb3VycygpICogNjAgKyBkYXRlLmdldE1pbnV0ZXMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1ldmFyX3N0cmluZ1sxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZV90byA9IFN1bkNhbGMuZ2V0VGltZXMoZGF0ZSwgbGF0LCBsb24pW3RpbWV2YXJfc3RyaW5nWzFdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlc190byAgPSBkYXRlX3RvLmdldEhvdXJzKCkgKiA2MCArIGRhdGVfdG8uZ2V0TWludXRlcygpICsgdGltZXZhcl9hZGRbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1pbnV0ZXNfaW5fZGF5IGRvZXMgbm90IG5lZWQgdG8gYmUgYWRkZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBub3JtYWwgdGltZXMgaW4gaXQgd2FzIGFkZGVkIGluOiBpZiAobWludXRlc190byA8IC8vIG1pbnV0ZXNfZnJvbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWJvdmUgdGhlIHNlbGVjdG9yIGNvbnN0cnVjdGlvbiBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VidHJhY3RlZCBpbiB0aGUgc2VsZWN0b3IgY29uc3RydWN0aW9uIGNhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggcmV0dXJucyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwb2ludF9pbl90aW1lX3BlcmlvZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG91cm1pbnV0ZXMgPD0gbWludXRlc190bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY3VyX21pbiA9IDA7IG91cm1pbnV0ZXMgKyBwb2ludF9pbl90aW1lX3BlcmlvZCA+PSBjdXJfbWluOyBjdXJfbWluICs9IHBvaW50X2luX3RpbWVfcGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cl9taW4gPT09IG91cm1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG91cm1pbnV0ZXMgKyAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvdXJtaW51dGVzIDwgY3VyX21pbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIGN1cl9taW4pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3VybWludXRlcyA8IG1pbnV0ZXNfdG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RydWUsIGRhdGVBdERheU1pbnV0ZXMoZGF0ZSwgbWludXRlc190byksIGhhc19vcGVuX2VuZCwgZXh0ZW5kZWRfb3Blbl9lbmRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB1bmRlZmluZWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0obWludXRlc190byAtIG1pbnV0ZXNfaW5fZGF5LCB0aW1ldmFyX3N0cmluZywgdGltZXZhcl9hZGQsIGhhc19vcGVuX2VuZCwgcG9pbnRfaW5fdGltZV9wZXJpb2QsIGV4dGVuZGVkX29wZW5fZW5kKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLnRpbWUucHVzaChmdW5jdGlvbihtaW51dGVzX2Zyb20sIG1pbnV0ZXNfdG8sIHRpbWV2YXJfc3RyaW5nLCB0aW1ldmFyX2FkZCwgaGFzX29wZW5fZW5kLCBpc19wb2ludF9pbl90aW1lLCBwb2ludF9pbl90aW1lX3BlcmlvZCkgeyByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91cm1pbnV0ZXMgPSBkYXRlLmdldEhvdXJzKCkgKiA2MCArIGRhdGUuZ2V0TWludXRlcygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZXZhcl9zdHJpbmdbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZV9mcm9tID0gU3VuQ2FsYy5nZXRUaW1lcyhkYXRlLCBsYXQsIGxvbilbdGltZXZhcl9zdHJpbmdbMF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfZnJvbSAgPSBkYXRlX2Zyb20uZ2V0SG91cnMoKSAqIDYwICsgZGF0ZV9mcm9tLmdldE1pbnV0ZXMoKSArIHRpbWV2YXJfYWRkWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWV2YXJfc3RyaW5nWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGVfdG8gPSBTdW5DYWxjLmdldFRpbWVzKGRhdGUsIGxhdCwgbG9uKVt0aW1ldmFyX3N0cmluZ1sxXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlc190byAgPSBkYXRlX3RvLmdldEhvdXJzKCkgKiA2MCArIGRhdGVfdG8uZ2V0TWludXRlcygpICsgdGltZXZhcl9hZGRbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzX3BvaW50X2luX3RpbWUgJiYgdHlwZW9mIHBvaW50X2luX3RpbWVfcGVyaW9kICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfdG8gPSBtaW51dGVzX2Zyb20gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBvaW50X2luX3RpbWVfcGVyaW9kID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXJtaW51dGVzIDwgbWludXRlc19mcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIGRhdGVBdERheU1pbnV0ZXMoZGF0ZSwgbWludXRlc19mcm9tKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvdXJtaW51dGVzIDw9IG1pbnV0ZXNfdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY3VyX21pbiA9IG1pbnV0ZXNfZnJvbTsgb3VybWludXRlcyArIHBvaW50X2luX3RpbWVfcGVyaW9kID49IGN1cl9taW47IGN1cl9taW4gKz0gcG9pbnRfaW5fdGltZV9wZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJfbWluID09PSBvdXJtaW51dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG91cm1pbnV0ZXMgKyAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG91cm1pbnV0ZXMgPCBjdXJfbWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgZGF0ZUF0RGF5TWludXRlcyhkYXRlLCBjdXJfbWluKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgZGF0ZUF0RGF5TWludXRlcyhkYXRlLCBtaW51dGVzX2luX2RheSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3VybWludXRlcyA8IG1pbnV0ZXNfZnJvbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgZGF0ZUF0RGF5TWludXRlcyhkYXRlLCBtaW51dGVzX2Zyb20pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvdXJtaW51dGVzIDwgbWludXRlc190bylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG1pbnV0ZXNfdG8pLCBoYXNfb3Blbl9lbmRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgZGF0ZUF0RGF5TWludXRlcyhkYXRlLCBtaW51dGVzX2Zyb20gKyBtaW51dGVzX2luX2RheSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9fShtaW51dGVzX2Zyb20sIG1pbnV0ZXNfdG8sIHRpbWV2YXJfc3RyaW5nLCB0aW1ldmFyX2FkZCwgaGFzX29wZW5fZW5kLCBpc19wb2ludF9pbl90aW1lLCBwb2ludF9pbl90aW1lX3BlcmlvZCkpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdudW1iZXInLCAnLScsICdudW1iZXInKSkgeyAvLyBcIk1vIDA5LTE4XCIgKFBsZWFzZSBkb27igJl0IHVzZSB0aGlzKSAtPiBcIk1vIDA5OjAwLTE4OjAwXCIuXG4gICAgICAgICAgICAgICAgICBtaW51dGVzX2Zyb20gPSB0b2tlbnNbYXRdWzBdICAgKiA2MDtcbiAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfdG8gICA9IHRva2Vuc1thdCsyXVswXSAqIDYwO1xuICAgICAgICAgICAgICAgICAgaWYgKCFkb25lX3dpdGhfd2FybmluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwYXJzaW5nX3dhcm5pbmdzLnB1c2goW25ydWxlLCBhdCArIDIsIHQoJ3dpdGhvdXQgbWludXRlcycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N5bnRheCc6ICh0b2tlbnNbYXRdWzBdICAgPCAxMCA/ICcwJyA6ICcnKSArIHRva2Vuc1thdF1bMF0gICArICc6MDAtJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKHRva2Vuc1thdCsyXVswXSA8IDEwID8gJzAnIDogJycpICsgdG9rZW5zW2F0KzJdWzBdICsgJzowMCdcbiAgICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAobWludXRlc19mcm9tID49IG1pbnV0ZXNfaW5fZGF5KVxuICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0LCB0KCdvdXRzaWRlIGRheScpKTtcbiAgICAgICAgICAgICAgICAgIGlmIChtaW51dGVzX3RvIDwgbWludXRlc19mcm9tKVxuICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXNfdG8gKz0gbWludXRlc19pbl9kYXk7XG4gICAgICAgICAgICAgICAgICBpZiAobWludXRlc190byA+IG1pbnV0ZXNfaW5fZGF5ICogMilcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCArIDIsIHQoJ3R3byBtaWRuaWdodHMnKSk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChtaW51dGVzX3RvID4gbWludXRlc19pbl9kYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBydWxlLnRpbWUucHVzaChmdW5jdGlvbihtaW51dGVzX2Zyb20sIG1pbnV0ZXNfdG8pIHsgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91cm1pbnV0ZXMgPSBkYXRlLmdldEhvdXJzKCkgKiA2MCArIGRhdGUuZ2V0TWludXRlcygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXJtaW51dGVzIDwgbWludXRlc19mcm9tKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgZGF0ZUF0RGF5TWludXRlcyhkYXRlLCBtaW51dGVzX2Zyb20pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG1pbnV0ZXNfdG8pXTtcbiAgICAgICAgICAgICAgICAgICAgICB9fShtaW51dGVzX2Zyb20sIG1pbnV0ZXNfdG8pKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW51dGVzX3RvIC0gbWludXRlc19pbl9kYXkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcnVsZV9pbmZvc1tucnVsZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlX2luZm9zW25ydWxlXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVfaW5mb3NbbnJ1bGVdWyd0aW1lX3dyYXBzX292ZXJfbWlkbmlnaHQnXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUud3JhcHRpbWUucHVzaChmdW5jdGlvbihtaW51dGVzX3RvKSB7IHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3VybWludXRlcyA9IGRhdGUuZ2V0SG91cnMoKSAqIDYwICsgZGF0ZS5nZXRNaW51dGVzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXJtaW51dGVzIDwgbWludXRlc190bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgZGF0ZUF0RGF5TWludXRlcyhkYXRlLCBtaW51dGVzX3RvKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHVuZGVmaW5lZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH19KG1pbnV0ZXNfdG8gLSBtaW51dGVzX2luX2RheSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcnVsZS50aW1lLnB1c2goZnVuY3Rpb24obWludXRlc19mcm9tLCBtaW51dGVzX3RvKSB7IHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXJtaW51dGVzID0gZGF0ZS5nZXRIb3VycygpICogNjAgKyBkYXRlLmdldE1pbnV0ZXMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3VybWludXRlcyA8IG1pbnV0ZXNfZnJvbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIGRhdGVBdERheU1pbnV0ZXMoZGF0ZSwgbWludXRlc19mcm9tKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG91cm1pbnV0ZXMgPCBtaW51dGVzX3RvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG1pbnV0ZXNfdG8pLCBoYXNfb3Blbl9lbmRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG1pbnV0ZXNfZnJvbSArIG1pbnV0ZXNfaW5fZGF5KV07XG4gICAgICAgICAgICAgICAgICAgICAgfX0obWludXRlc19mcm9tLCBtaW51dGVzX3RvKSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGF0ICs9IDM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGFkZGl0aW9uYWwgcnVsZVxuICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICcoJykpXG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsICdNaXNzaW5nIHZhcmlhYmxlIHRpbWUgKGUuZy4gc3VucmlzZSkgYWZ0ZXI6IFwiJyArIHRva2Vuc1thdF1bMV0gKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnbnVtYmVyJywgJ3RpbWVzZXAnKSlcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCsxLCAnTWlzc2luZyBtaW51dGVzIGluIHRpbWUgcmFuZ2UgYWZ0ZXI6IFwiJyArIHRva2Vuc1thdCsxXVsxXSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdudW1iZXInKSlcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCArICh0eXBlb2YgdG9rZW5zW2F0KzFdID09PSAnb2JqZWN0JyA/IDEgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNaXNzaW5nIHRpbWUgc2VwYXJhdG9yIGluIHRpbWUgcmFuZ2UgYWZ0ZXI6IFwiJyArIHRva2Vuc1thdF1bMV0gKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBbIGF0IF07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIW1hdGNoVG9rZW5zKHRva2VucywgYXQsICcsJykpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b2tlbnNbYXQrMV0gPT09ICd1bmRlZmluZWQnICYmICFkb25lX3dpdGhfd2FybmluZ3MpIHtcbiAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbbnJ1bGUsIGF0LCB0KCd2YWx1ZSBlbmRzIHdpdGggdG9rZW4nLCB7ICd0b2tlbic6IHRva2Vuc1thdF1bMV0gfSkgXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXQ7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogSGVscGVycyBmb3IgdGltZSByYW5nZSBwYXJzZXIge3t7ICovXG5cbiAgICAgIC8qIEdldCB0aW1lIGluIG1pbnV0ZXMgZnJvbSA8aG91cj46PG1pbnV0ZT4gKHRva2VucykuIHt7e1xuICAgICAgICogT25seSB1c2VkIGlmIHRocm93aW5nIGFuIGVycm9yIGlzIHdhbnRlZC5cbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0gdG9rZW5zOiBMaXN0IG9mIHRva2VuIG9iamVjdHMuXG4gICAgICAgKiA6cGFyYW0gbnJ1bGU6IFJ1bGUgbnVtYmVyIHN0YXJ0aW5nIHdpdGggMC5cbiAgICAgICAqIDpwYXJhbSBhdDogUG9zaXRpb24gYXQgd2hpY2ggdGhlIHRpbWUgYmVnaW5zLlxuICAgICAgICogOnJldHVybnM6IFRpbWUgaW4gbWludXRlcy5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2V0TWludXRlc0J5SG91cnNNaW51dGVzKHRva2VucywgbnJ1bGUsIGF0KSB7XG4gICAgICAgICAgaWYgKHRva2Vuc1thdCsyXVswXSA+IDU5KVxuICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCsyLFxuICAgICAgICAgICAgICAgICAgICAgICdNaW51dGVzIGFyZSBncmVhdGVyIHRoYW4gNTkuJyk7XG4gICAgICAgICAgcmV0dXJuIHRva2Vuc1thdF1bMF0gKiA2MCArIHRva2Vuc1thdCsyXVswXTtcbiAgICAgIH1cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBHZXQgdGltZSBpbiBtaW51dGVzIGZyb20gXCIoc3VucmlzZS0wMTozMClcIiB7e3tcbiAgICAgICAqIEV4dHJhY3QgdGhlIGFkZGVkIG9yIHN1YnRyYWN0ZWQgdGltZSBmcm9tIFwiKHN1bnJpc2UtMDE6MzApXCJcbiAgICAgICAqIHJldHVybnMgdGltZSBpbiBtaW51dGVzIGUuZy4gLTkwLlxuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB0b2tlbnM6IExpc3Qgb2YgdG9rZW4gb2JqZWN0cy5cbiAgICAgICAqIDpwYXJhbSBhdDogUG9zaXRpb24gd2hlcmUgdGhlIHNwZWNpZmljYXRpb24gZm9yIHRoZSBwb2ludCBpbiB0aW1lIGNvdWxkIGJlLlxuICAgICAgICogOnJldHVybnM6IFRpbWUgaW4gbWludXRlcyBvbiBzdWdnZXN0LCB0aHJvd3MgYW4gZXhjZXB0aW9uIG90aGVyd2lzZS5cbiAgICAgICovXG4gICAgICBmdW5jdGlvbiBwYXJzZVRpbWV2YXJDYWxjKHRva2VucywgYXQpIHtcbiAgICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgICAgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQrMiwgJysnKSB8fCBtYXRjaFRva2Vucyh0b2tlbnMsIGF0KzIsICctJykpIHtcbiAgICAgICAgICAgICAgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQrMywgJ251bWJlcicsICd0aW1lc2VwJywgJ251bWJlcicpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCs2LCAnKScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZF9vcl9zdWJ0cmFjdCA9IHRva2Vuc1thdCsyXVswXSA9PT0gJysnID8gJzEnIDogJy0xJztcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbWludXRlcyA9IGdldE1pbnV0ZXNCeUhvdXJzTWludXRlcyh0b2tlbnMsIG5ydWxlLCBhdCszKSAqIGFkZF9vcl9zdWJ0cmFjdDtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAobWludXRlcyA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFsgbnJ1bGUsIGF0KzUsIHQoJ3plcm8gY2FsY3VsYXRpb24nKSBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtaW51dGVzO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IFsgYXQrNiwgJy4gJyArIHQoJ21pc3NpbmcnLCB7J3N5bWJvbCc6IFwiKVwifSkgKyAnLiddO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZXJyb3IgPSBbIGF0KzUsICcgJyArIHQoJyh0aW1lKScpICsgJy4nXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVycm9yID0gWyBhdCsyLCAnLiAnICsgdCgnZXhwZWN0ZWQnLCB7J3N5bWJvbCc6ICcrXCIgb3IgXCItJ30pXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGVycm9yWzBdLFxuICAgICAgICAgICAgICAgICAgIHQoJ2NhbGN1bGF0aW9uIHN5bnRheCcpKyBlcnJvclsxXSk7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBXZWVrZGF5IHJhbmdlIHBhcnNlciAoTW8sV2UtRnIsU2FbMS0yLC0xXSxQSCkuIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB0b2tlbnM6IExpc3Qgb2YgdG9rZW4gb2JqZWN0cy5cbiAgICAgICAqIDpwYXJhbSBhdDogUG9zaXRpb24gd2hlcmUgdGhlIHdlZWtkYXkgdG9rZW5zIGNvdWxkIGJlLlxuICAgICAgICogOnBhcmFtIHJ1bGU6IFJlZmVyZW5jZSB0byBydWxlIG9iamVjdC5cbiAgICAgICAqIDpwYXJhbSBucnVsZTogUnVsZSBudW1iZXIgc3RhcnRpbmcgd2l0aCAwLlxuICAgICAgICogOnJldHVybnM6IFBvc2l0aW9uIGF0IHdoaWNoIHRoZSB0b2tlbiBkb2VzIG5vdCBiZWxvbmcgdG8gdGhlIHNlbGVjdG9yIGFueW1vcmUuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheVJhbmdlKHRva2VucywgYXQsIHJ1bGUsIGluX2hvbGlkYXlfc2VsZWN0b3IsIG5ydWxlKSB7XG4gICAgICAgICAgaWYgKCFpbl9ob2xpZGF5X3NlbGVjdG9yKSB7XG4gICAgICAgICAgICAgIGluX2hvbGlkYXlfc2VsZWN0b3IgPSB0cnVlO1xuICAgICAgICAgICAgICB0b2tlbnNbYXRdWzNdID0gJ3dlZWtkYXknO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAoOyBhdCA8IHRva2Vucy5sZW5ndGg7IGF0KyspIHtcbiAgICAgICAgICAgICAgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICd3ZWVrZGF5JywgJ1snKSkge1xuICAgICAgICAgICAgICAgICAgLy8gQ29uZGl0aW9uYWwgd2Vla2RheSAoTW9bM10pXG4gICAgICAgICAgICAgICAgICB2YXIgbnVtYmVycyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAvLyBHZXQgbGlzdCBvZiBjb25zdHJhaW50c1xuICAgICAgICAgICAgICAgICAgdmFyIGVuZGF0ID0gcGFyc2VOdW1SYW5nZSh0b2tlbnMsIGF0KzIsIGZ1bmN0aW9uKGZyb20sIHRvLCBhdCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gYmFkIG51bWJlclxuICAgICAgICAgICAgICAgICAgICAgIGlmIChmcm9tID09PSAwIHx8IGZyb20gPCAtNSB8fCBmcm9tID4gNSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0KCdudW1iZXIgLTUgdG8gNScpKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJzLnB1c2goZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmcm9tIDwgdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZyb207IGkgPD0gdG87IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFkIG51bWJlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDAgfHwgaSA8IC01IHx8IGkgPiA1KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0KzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ251bWJlciAtNSB0byA1JykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCsyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCgnYmFkIHJhbmdlJyx7J2Zyb20nOiBmcm9tLCAndG8nOiB0b30pKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaFRva2Vucyh0b2tlbnMsIGVuZGF0LCAnXScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbnJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVuZGF0ICsgKHR5cGVvZiB0b2tlbnNbZW5kYXRdID09PSAnb2JqZWN0JyA/IDAgOiAtMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQoJ10gb3IgbW9yZSBudW1iZXJzJylcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB2YXIgYWRkX2RheXMgPSBnZXRNb3ZlRGF5cyh0b2tlbnMsIGVuZGF0KzEsIDYsICdjb25zdHJhaW5lZCB3ZWVrZGF5cycpO1xuICAgICAgICAgICAgICAgICAgd2Vla19zdGFibGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHNlbGVjdG9yIGZvciBlYWNoIGxpc3QgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5udW1iZXIgPSAwOyBubnVtYmVyIDwgbnVtYmVycy5sZW5ndGg7IG5udW1iZXIrKykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgcnVsZS53ZWVrZGF5LnB1c2goZnVuY3Rpb24od2Vla2RheSwgbnVtYmVyLCBhZGRfZGF5cykgeyByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZV9udW0gPSBnZXRWYWx1ZUZvckRhdGUoZGF0ZSwgZmFsc2UpOyAvLyBZZWFyIG5vdCBuZWVkZWQgdG8gZGlzdGluZ3Vpc2guXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydF9vZl90aGlzX21vbnRoID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRfb2ZfbmV4dF9tb250aCA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldF9kYXlfdGhpc19tb250aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfZGF5X3RoaXNfbW9udGggPSBnZXREYXRlRm9yQ29uc3RyYWluZWRXZWVrZGF5KGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCB3ZWVrZGF5LCBbIG51bWJlciBdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0X2RheV93aXRoX2FkZGVkX2RheXNfdGhpc19tb250aCA9IG5ldyBEYXRlKHRhcmdldF9kYXlfdGhpc19tb250aC5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2RheV90aGlzX21vbnRoLmdldE1vbnRoKCksIHRhcmdldF9kYXlfdGhpc19tb250aC5nZXREYXRlKCkgKyBhZGRfZGF5cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHRhcmdldCBkYXkgd2l0aCBhZGRlZCBkYXlzIGNhbiBiZSBiZWZvcmUgdGhpcyBtb250aFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0X2RheV93aXRoX2FkZGVkX2RheXNfdGhpc19tb250aC5nZXRUaW1lKCkgPCBzdGFydF9vZl90aGlzX21vbnRoLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGluIHRoaXMgY2FzZSwgdGhlIHRhcmdldCBkYXkgd2l0aG91dCB0aGUgZGF5cyBhZGRlZCBuZWVkcyB0byBiZSBpbiB0aGlzIG1vbnRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0X2RheV90aGlzX21vbnRoLmdldFRpbWUoKSA+PSBzdGFydF9vZl90aGlzX21vbnRoLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIGNhbGN1bGF0ZSBpdCBmb3IgdGhlIG1vbnRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9sbG93aW5nIHRoaXMgbW9udGggYW5kIGhvcGUgdGhhdCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0YXJnZXQgZGF5IHdpbGwgYWN0dWFsbHkgYmUgdGhpcyBtb250aC5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9kYXlfd2l0aF9hZGRlZF9kYXlzX3RoaXNfbW9udGggPSBkYXRlQXROZXh0V2Vla2RheShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAobnVtYmVyID4gMCA/IDAgOiAxKSArIDEsIDEpLCB3ZWVrZGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfZGF5X3RoaXNfbW9udGguc2V0RGF0ZSh0YXJnZXRfZGF5X3dpdGhfYWRkZWRfZGF5c190aGlzX21vbnRoLmdldERhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIChudW1iZXIgKyAobnVtYmVyID4gMCA/IC0xIDogMCkpICogNyArIGFkZF9kYXlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlZCB0YXJnZXQgZGF5IGlzIG5vdCBpbnNpZGUgdGhpcyBtb250aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlZm9yZSB0aGUgc3BlY2lmaWVkIHdlZWtkYXkgKGUuZy4gZmlmdGggU3VuZGF5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IGV4aXN0IHRoaXMgbW9udGguIFRyeSBpdCBuZXh0IG1vbnRoLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHN0YXJ0X29mX25leHRfbW9udGhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldF9kYXlfd2l0aF9hZGRlZF9kYXlzX3RoaXNfbW9udGguZ2V0VGltZSgpID49IHN0YXJ0X29mX25leHRfbW9udGguZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgdGFyZ2V0IGRheSBpcyBpbiB0aGUgbmV4dCBtb250aC4gSWYgdGhlIHRhcmdldCBkYXkgd2l0aG91dCB0aGUgYWRkZWQgZGF5cyBpcyBub3QgaW4gdGhpcyBtb250aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldF9kYXlfdGhpc19tb250aC5nZXRUaW1lKCkgPj0gc3RhcnRfb2ZfbmV4dF9tb250aC5nZXRUaW1lKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgc3RhcnRfb2ZfbmV4dF9tb250aF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0X2RheV93aXRoX2FkZGVkX21vdmVkX2RheXNfdGhpc19tb250aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZF9kYXlzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2RheV93aXRoX2FkZGVkX21vdmVkX2RheXNfdGhpc19tb250aCA9IGRhdGVBdE5leHRXZWVrZGF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgKG51bWJlciA+IDAgPyAwIDogMSkgLTEsIDEpLCB3ZWVrZGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9kYXlfd2l0aF9hZGRlZF9tb3ZlZF9kYXlzX3RoaXNfbW9udGguc2V0RGF0ZSh0YXJnZXRfZGF5X3dpdGhfYWRkZWRfbW92ZWRfZGF5c190aGlzX21vbnRoLmdldERhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKG51bWJlciArIChudW1iZXIgPiAwID8gLTEgOiAwKSkgKiA3ICsgYWRkX2RheXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZV9udW0gPT09IGdldFZhbHVlRm9yRGF0ZSh0YXJnZXRfZGF5X3dpdGhfYWRkZWRfbW92ZWRfZGF5c190aGlzX21vbnRoLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG1pbnV0ZXNfaW5fZGF5KV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkX2RheXMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfZGF5X3dpdGhfYWRkZWRfbW92ZWRfZGF5c190aGlzX21vbnRoID0gZGF0ZUF0TmV4dFdlZWtkYXkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAobnVtYmVyID4gMCA/IDAgOiAxKSArIDEsIDEpLCB3ZWVrZGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9kYXlfd2l0aF9hZGRlZF9tb3ZlZF9kYXlzX3RoaXNfbW9udGguc2V0RGF0ZSh0YXJnZXRfZGF5X3dpdGhfYWRkZWRfbW92ZWRfZGF5c190aGlzX21vbnRoLmdldERhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKG51bWJlciArIChudW1iZXIgPiAwID8gLTEgOiAwKSkgKiA3ICsgYWRkX2RheXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0X2RheV93aXRoX2FkZGVkX21vdmVkX2RheXNfdGhpc19tb250aC5nZXRUaW1lKCkgPj0gc3RhcnRfb2ZfbmV4dF9tb250aC5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0X2RheV93aXRoX2FkZGVkX2RheXNfdGhpc19tb250aC5nZXRUaW1lKCkgPj0gc3RhcnRfb2ZfbmV4dF9tb250aC5nZXRUaW1lKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHRhcmdldF9kYXlfd2l0aF9hZGRlZF9tb3ZlZF9kYXlzX3RoaXNfbW9udGhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0X2RheV93aXRoX2FkZGVkX2RheXNfdGhpc19tb250aC5nZXRUaW1lKCkgPCBzdGFydF9vZl9uZXh0X21vbnRoLmdldFRpbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBnZXRWYWx1ZUZvckRhdGUodGFyZ2V0X2RheV93aXRoX2FkZGVkX2RheXNfdGhpc19tb250aCwgZmFsc2UpID09PSBkYXRlX251bSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGRhdGUsIG1pbnV0ZXNfaW5fZGF5KV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfZGF5X3dpdGhfYWRkZWRfZGF5c190aGlzX21vbnRoID0gdGFyZ2V0X2RheV93aXRoX2FkZGVkX21vdmVkX2RheXNfdGhpc19tb250aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGhpdCB0aGUgdGFyZ2V0IGRheVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZS5nZXREYXRlKCkgPT09IHRhcmdldF9kYXlfd2l0aF9hZGRlZF9kYXlzX3RoaXNfbW9udGguZ2V0RGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RydWUsIGRhdGVBdERheU1pbnV0ZXMoZGF0ZSwgbWludXRlc19pbl9kYXkpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIGJlZm9yZSB0YXJnZXQgZGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRlLmdldERhdGUoKSA8IHRhcmdldF9kYXlfd2l0aF9hZGRlZF9kYXlzX3RoaXNfbW9udGguZ2V0RGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB0YXJnZXRfZGF5X3dpdGhfYWRkZWRfZGF5c190aGlzX21vbnRoXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIGFmdGVyIHRhcmdldCBkYXksIHNldCBjaGVjayBkYXRlIHRvIG5leHQgbW9udGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgc3RhcnRfb2ZfbmV4dF9tb250aF07XG4gICAgICAgICAgICAgICAgICAgICAgfX0odG9rZW5zW2F0XVswXSwgbnVtYmVyc1tubnVtYmVyXSwgYWRkX2RheXNbMF0pKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYXQgPSBlbmRhdCArIDEgKyBhZGRfZGF5c1sxXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnd2Vla2RheScpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBTaW5nbGUgd2Vla2RheSAoTW8pIG9yIHdlZWtkYXkgcmFuZ2UgKE1vLUZyKVxuICAgICAgICAgICAgICAgICAgdmFyIGlzX3JhbmdlID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdCsxLCAnLScsICd3ZWVrZGF5Jyk7XG5cbiAgICAgICAgICAgICAgICAgIHZhciB3ZWVrZGF5X2Zyb20gPSB0b2tlbnNbYXRdWzBdO1xuICAgICAgICAgICAgICAgICAgdmFyIHdlZWtkYXlfdG8gPSBpc19yYW5nZSA/IHRva2Vuc1thdCsyXVswXSA6IHdlZWtkYXlfZnJvbTtcblxuICAgICAgICAgICAgICAgICAgdmFyIGluc2lkZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSByZXZlcnNlZCByYW5nZVxuICAgICAgICAgICAgICAgICAgaWYgKHdlZWtkYXlfdG8gPCB3ZWVrZGF5X2Zyb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gd2Vla2RheV90bztcbiAgICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5X3RvID0gd2Vla2RheV9mcm9tIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5X2Zyb20gPSB0bXAgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgIGluc2lkZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIHdlZWtkYXlfbGlzdCA9IEFycmF5LmFwcGx5KDAsIEFycmF5KHdlZWtkYXlfdG8gLSB3ZWVrZGF5X2Zyb20gKyAxKSkubWFwKGZ1bmN0aW9uIChfLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCArIHdlZWtkYXlfdG87XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcnVsZV9pbmZvc1tucnVsZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcnVsZV9pbmZvc1tucnVsZV0gPSB7fTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcnVsZV9pbmZvc1tucnVsZV1bJ3dlZWtfZGF5cyddID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHJ1bGVfaW5mb3NbbnJ1bGVdWyd3ZWVrX2RheXMnXSwgd2Vla2RheV9saXN0KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcnVsZV9pbmZvc1tucnVsZV1bJ3dlZWtfZGF5cyddID0gd2Vla2RheV9saXN0O1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAod2Vla2RheV90byA8IHdlZWtkYXlfZnJvbSkgeyAvLyBoYW5kbGUgZnVsbCByYW5nZVxuICAgICAgICAgICAgICAgICAgICAgIHJ1bGUud2Vla2RheS5wdXNoKGZ1bmN0aW9uKCkgeyByZXR1cm4gW3RydWVdOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgbmVlZGVkLiBJZiB0aGVyZSBpcyBubyBzZWxlY3RvciBpdCBhdXRvbWF0aWNhbGx5IG1hdGNoZXMgZXZlcnl0aGluZy5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBXUk9ORzogVGhpcyBvbmx5IHdvcmtzIGlmIHRoZXJlIGlzIG5vIG90aGVyIHNlbGVjdG9yIGluIHRoaXMgc2VsZWN0b3IgZ3JvdXAgLi4uXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHJ1bGUud2Vla2RheS5wdXNoKGZ1bmN0aW9uKHdlZWtkYXlfZnJvbSwgd2Vla2RheV90bywgaW5zaWRlKSB7IHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXJ3ZWVrZGF5ID0gZGF0ZS5nZXREYXkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3Vyd2Vla2RheSA8IHdlZWtkYXlfZnJvbSB8fCBvdXJ3ZWVrZGF5ID4gd2Vla2RheV90bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFshaW5zaWRlLCBkYXRlQXROZXh0V2Vla2RheShkYXRlLCB3ZWVrZGF5X2Zyb20pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbaW5zaWRlLCBkYXRlQXROZXh0V2Vla2RheShkYXRlLCB3ZWVrZGF5X3RvICsgMSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfX0od2Vla2RheV9mcm9tLCB3ZWVrZGF5X3RvLCBpbnNpZGUpKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYXQgKz0gaXNfcmFuZ2UgPyAzIDogMTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnaG9saWRheScpKSB7XG4gICAgICAgICAgICAgICAgICB3ZWVrX3N0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSG9saWRheSh0b2tlbnMsIGF0LCBydWxlLCB0cnVlLCBpbl9ob2xpZGF5X3NlbGVjdG9yKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0IC0gMSwgJywnKSkgeyAvLyBhZGRpdGlvbmFsIHJ1bGVcbiAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgbnJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgYXQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgIHQoJ2FkZGl0aW9uYWwgcnVsZSBubyBzZW5zZScpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0LCB0KCd1bmV4cGVjdGVkIHRva2VuIHdlZWtkYXkgcmFuZ2UnLCB7J3Rva2VuJzogdG9rZW5zW2F0XVsxXX0pKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghbWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJywnKSkge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXQ7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogR2V0IHRoZSBudW1iZXIgb2YgZGF5cyBhIGRhdGUgc2hvdWxkIGJlIG1vdmVkIChpZiBhbnkpLiB7e3tcbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0gdG9rZW5zOiBMaXN0IG9mIHRva2VuIG9iamVjdHMuXG4gICAgICAgKiA6cGFyYW0gYXQ6IFBvc2l0aW9uIHdoZXJlIHRoZSBkYXRlIG1vdmluZyB0b2tlbnMgY291bGQgYmUuXG4gICAgICAgKiA6cGFyYW0gbWF4X2RpZmZlcjogTWF4aW1hbCBudW1iZXIgb2YgZGF5cyB0byBtb3ZlIChjb3VsZCBhbHNvIGJlIHplcm8gaWYgdGhlcmUgYXJlIG5vIGRheSBtb3ZlIHRva2VucykuXG4gICAgICAgKiA6cmV0dXJuczogQXJyYXk6XG4gICAgICAgKiAgICAgICAgICAgIDAuIERheXMgdG8gYWRkLlxuICAgICAgICogICAgICAgICAgICAxLiBIb3cgbWFueSB0b2tlbnMuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldE1vdmVEYXlzKHRva2VucywgYXQsIG1heF9kaWZmZXIsIG5hbWUpIHtcbiAgICAgICAgICB2YXIgYWRkX2RheXMgPSBbIDAsIDAgXTsgLy8gWyAnZGF5cyB0byBhZGQnLCAnaG93IG1hbnkgdG9rZW5zJyBdXG4gICAgICAgICAgYWRkX2RheXNbMF0gPSBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnKycpIHx8IChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnLScpID8gLTEgOiAwKTtcbiAgICAgICAgICBpZiAoYWRkX2RheXNbMF0gIT09IDAgJiYgbWF0Y2hUb2tlbnModG9rZW5zLCBhdCsxLCAnbnVtYmVyJywgJ2NhbGNkYXknKSkge1xuICAgICAgICAgICAgICAvLyBjb250aW51ZXMgd2l0aCAnKyA1IGRheXMnIG9yIHNvbWV0aGluZyBsaWtlIHRoYXRcbiAgICAgICAgICAgICAgaWYgKHRva2Vuc1thdCsxXVswXSA+IG1heF9kaWZmZXIpXG4gICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCsyLFxuICAgICAgICAgICAgICAgICAgICAgIHQoJ21heCBkaWZmZXInLHsnbWF4ZGlmZmVyJzogbWF4X2RpZmZlciwgJ25hbWUnOiBuYW1lfSkpO1xuICAgICAgICAgICAgICBhZGRfZGF5c1swXSAqPSB0b2tlbnNbYXQrMV1bMF07XG4gICAgICAgICAgICAgIGlmIChhZGRfZGF5c1swXSA9PT0gMCAmJiAhZG9uZV93aXRoX3dhcm5pbmdzKVxuICAgICAgICAgICAgICAgICAgcGFyc2luZ193YXJuaW5ncy5wdXNoKFsgbnJ1bGUsIGF0KzIsIHQoJ2FkZGluZyAwJykgXSk7XG4gICAgICAgICAgICAgIGFkZF9kYXlzWzFdID0gMztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhZGRfZGF5c1swXSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhZGRfZGF5cztcbiAgICAgIH1cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBIb2xpZGF5IHBhcnNlciBmb3IgcHVibGljIGFuZCBzY2hvb2wgaG9saWRheXMgKFBILFNIKSB7e3tcbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0gdG9rZW5zOiBMaXN0IG9mIHRva2VuIG9iamVjdHMuXG4gICAgICAgKiA6cGFyYW0gYXQ6IFBvc2l0aW9uIHdoZXJlIHRvIHN0YXJ0LlxuICAgICAgICogOnBhcmFtIHJ1bGU6IFJlZmVyZW5jZSB0byBydWxlIG9iamVjdC5cbiAgICAgICAqIDpwYXJhbSBwdXNoX3RvX3dlZWtkYXk6IFdpbGwgcHVzaCB0aGUgc2VsZWN0b3IgaW50byB0aGUgd2Vla2RheSBzZWxlY3RvciBhcnJheSB3aGljaCBoYXMgdGhlIGRlc2lyZWQgc2lkZSBlZmZlY3Qgb2Ygd29ya2luZyBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSB3ZWVrZGF5IHNlbGVjdG9ycyAoZWl0aGVyIHRoZSBob2xpZGF5IG1hdGNoIG9yIHRoZSB3ZWVrZGF5KSwgd2hpY2ggaXMgdGhlIG5vcm1hbCBhbmQgZXhwZWN0ZWQgYmVoYXZpb3IuXG4gICAgICAgKiA6cmV0dXJuczogUG9zaXRpb24gYXQgd2hpY2ggdGhlIHRva2VuIGRvZXMgbm90IGJlbG9uZyB0byB0aGUgc2VsZWN0b3IgYW55bW9yZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcGFyc2VIb2xpZGF5KHRva2VucywgYXQsIHJ1bGUsIHB1c2hfdG9fd2Vla2RheSwgaW5faG9saWRheV9zZWxlY3Rvcikge1xuICAgICAgICAgIGlmICghaW5faG9saWRheV9zZWxlY3Rvcikge1xuXG4gICAgICAgICAgICAgIGlmIChwdXNoX3RvX3dlZWtkYXkpXG4gICAgICAgICAgICAgICAgICB0b2tlbnNbYXRdWzNdID0gJ3dlZWtkYXknO1xuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICB0b2tlbnNbYXRdWzNdID0gJ2hvbGlkYXknOyAvLyBDb3VsZCBhbHNvIGJlIGhvbGlkYXkgYnV0IHRoaXMgaXMgbm90IGltcG9ydGFudCBoZXJlLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAoOyBhdCA8IHRva2Vucy5sZW5ndGg7IGF0KyspIHtcbiAgICAgICAgICAgICAgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdob2xpZGF5JykpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0b2tlbnNbYXRdWzBdID09PSAnUEgnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGFwcGx5aW5nX2hvbGlkYXlzID0gZ2V0TWF0Y2hpbmdIb2xpZGF5KHRva2Vuc1thdF1bMF0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBhbGxvdyBtb3Zpbmcgb25lIGRheSBpbiB0aGUgcGFzdCBvciBpbiB0aGUgZnV0dXJlLlxuICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgbWFrZXMgaW1wbGVtZW50YXRpb24gZWFzaWVyIGJlY2F1c2Ugb25seSBvbmUgaG9saWRheSBpcyBhc3N1bWVkIHRvIGJlIG1vdmVkIHRvIHRoZSBuZXh0IHllYXIuXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZF9kYXlzID0gZ2V0TW92ZURheXModG9rZW5zLCBhdCsxLCAxLCAncHVibGljIGhvbGlkYXknKTtcblxuICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uKGFwcGx5aW5nX2hvbGlkYXlzLCBhZGRfZGF5cykgeyByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob2xpZGF5cyA9IGdldEFwcGx5aW5nSG9saWRheXNGb3JZZWFyKGFwcGx5aW5nX2hvbGlkYXlzLCBkYXRlLmdldEZ1bGxZZWFyKCksIGFkZF9kYXlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmVlZHMgdG8gYmUgY2FsY3VsYXRlZCBlYWNoIHRpbWUgYmVjYXVzZSBvZiBtb3ZhYmxlIGRheXMuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGVfbnVtID0gZ2V0VmFsdWVGb3JEYXRlKGRhdGUsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9saWRheXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0X2hvbGlkYXlfZGF0ZV9udW0gPSBnZXRWYWx1ZUZvckRhdGUoaG9saWRheXNbaV1bMF0sIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZV9udW0gPCBuZXh0X2hvbGlkYXlfZGF0ZV9udW0pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZGRfZGF5c1swXSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBsYXN0IGhvbGlkYXkgZnJvbSBwcmV2aW91cyB5ZWFyIHRvIHRlc3RlZCBhZ2FpbnN0IGl0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG9saWRheXNfbGFzdF95ZWFyID0gZ2V0QXBwbHlpbmdIb2xpZGF5c0ZvclllYXIoYXBwbHlpbmdfaG9saWRheXMsIGRhdGUuZ2V0RnVsbFllYXIoKSAtIDEsIGFkZF9kYXlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RfaG9saWRheV9sYXN0X3llYXIgPSBob2xpZGF5c19sYXN0X3llYXJbaG9saWRheXNfbGFzdF95ZWFyLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdF9ob2xpZGF5X2xhc3RfeWVhcl9udW0gPSBnZXRWYWx1ZUZvckRhdGUobGFzdF9ob2xpZGF5X2xhc3RfeWVhclswXSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVfbnVtIDwgbGFzdF9ob2xpZGF5X2xhc3RfeWVhcl9udW0gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyBmYWxzZSwgbGFzdF9ob2xpZGF5X2xhc3RfeWVhclswXSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGVfbnVtID09PSBsYXN0X2hvbGlkYXlfbGFzdF95ZWFyX251bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGxhc3RfaG9saWRheV9sYXN0X3llYXJbMF0sIG1pbnV0ZXNfaW5fZGF5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRGF5IGFmdGVyICcgK2xhc3RfaG9saWRheV9sYXN0X3llYXJbMV0gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIGZhbHNlLCBob2xpZGF5c1tpXVswXSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRlX251bSA9PT0gbmV4dF9ob2xpZGF5X2RhdGVfbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFkZF9kYXlzWzBdID4gMCA/ICdEYXkgYWZ0ZXIgJyA6IChhZGRfZGF5c1swXSA8IDAgPyAnRGF5IGJlZm9yZSAnIDogJycpKSArIGhvbGlkYXlzW2ldWzFdIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkX2RheXNbMF0gPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGZpcnN0IGhvbGlkYXkgZnJvbSBuZXh0IHllYXIgdG8gdGVzdGVkIGFnYWluc3QgaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG9saWRheXNfbmV4dF95ZWFyID0gZ2V0QXBwbHlpbmdIb2xpZGF5c0ZvclllYXIoYXBwbHlpbmdfaG9saWRheXMsIGRhdGUuZ2V0RnVsbFllYXIoKSArIDEsIGFkZF9kYXlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdF9ob2xpZGF5c19uZXh0X3llYXIgPSBob2xpZGF5c19uZXh0X3llYXJbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RfaG9saWRheXNfbmV4dF95ZWFyX251bSA9IGdldFZhbHVlRm9yRGF0ZShmaXJzdF9ob2xpZGF5c19uZXh0X3llYXJbMF0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVfbnVtID09PSBmaXJzdF9ob2xpZGF5c19uZXh0X3llYXJfbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBkYXRlQXREYXlNaW51dGVzKGZpcnN0X2hvbGlkYXlzX25leHRfeWVhclswXSwgbWludXRlc19pbl9kYXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRGF5IGJlZm9yZSAnICsgZmlyc3RfaG9saWRheXNfbmV4dF95ZWFyWzFdIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250aW51ZSBuZXh0IHllYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgZmFsc2UsIG5ldyBEYXRlKGhvbGlkYXlzWzBdWzBdLmdldEZ1bGxZZWFyKCkgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGlkYXlzWzBdWzBdLmdldE1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9saWRheXNbMF1bMF0uZ2V0RGF0ZSgpKSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgfX0oYXBwbHlpbmdfaG9saWRheXMsIGFkZF9kYXlzKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChwdXNoX3RvX3dlZWtkYXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUud2Vla2RheS5wdXNoKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuaG9saWRheS5wdXNoKHNlbGVjdG9yKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGF0ICs9IDEgKyBhZGRfZGF5c1sxXTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW5zW2F0XVswXSA9PT0gJ1NIJykge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBhcHBseWluZ19ob2xpZGF5cyA9IGdldE1hdGNoaW5nSG9saWRheSh0b2tlbnNbYXRdWzBdKTtcblxuICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uKGFwcGx5aW5nX2hvbGlkYXlzKSB7IHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRlX251bSA9IGdldFZhbHVlRm9yRGF0ZShkYXRlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgaG9saWRheSBhcnJheSBjb250YWluaW5nIHRoZSBkaWZmZXJlbnQgaG9saWRheSByYW5nZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXBwbHlpbmdfaG9saWRheXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvbGlkYXkgPSBnZXRTSEZvclllYXIoYXBwbHlpbmdfaG9saWRheXNbaV0sIGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhvbGlkYXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgaG9saWRheS5sZW5ndGg7IGgrPTQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG9saWRheV90b19wbHVzID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBob2xpZGF5WzIraF0gLSAxLCBob2xpZGF5WzMraF0gKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG9saWRheV9mcm9tID0gKGhvbGlkYXlbMCtoXSAtIDEpICogMTAwICsgaG9saWRheVsxK2hdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob2xpZGF5X3RvICAgPSAoaG9saWRheVsyK2hdIC0gMSkgKiAxMDAgKyBob2xpZGF5WzMraF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9saWRheV90b19wbHVzICA9IGdldFZhbHVlRm9yRGF0ZShob2xpZGF5X3RvX3BsdXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYGhvbGlkYXlfZnJvbTogJHtob2xpZGF5X2Zyb219LCBob2xpZGF5X3RvOiAke2hvbGlkYXlfdG99LCBob2xpZGF5X3RvX3BsdXM6ICR7aG9saWRheV90b19wbHVzfWApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvbGlkYXlfZW5kc19uZXh0X3llYXIgPSBob2xpZGF5X3RvIDwgaG9saWRheV9mcm9tO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVfbnVtIDwgaG9saWRheV9mcm9tKSB7IC8vIGRhdGUgaXMgYmVmb3JlIHNlbGVjdGVkIGhvbGlkYXlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB3ZSBhcmUgaW4gdGhlIGhvbGlkYXlzIGZyb20gdGhlIGxhc3QgeWVhciBzcGFubmluZyBpbnRvIHRoaXMgeWVhclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdF95ZWFyX2hvbGlkYXkgPSBnZXRTSEZvclllYXIoYXBwbHlpbmdfaG9saWRheXNbYXBwbHlpbmdfaG9saWRheXMubGVuZ3RoIC0gMV0sIGRhdGUuZ2V0RnVsbFllYXIoKSAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxhc3RfeWVhcl9ob2xpZGF5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RfeWVhcl9ob2xpZGF5X2Zyb20gPSAobGFzdF95ZWFyX2hvbGlkYXlbbGFzdF95ZWFyX2hvbGlkYXkubGVuZ3RoIC0gNF0gLSAxKSAqIDEwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGFzdF95ZWFyX2hvbGlkYXlbbGFzdF95ZWFyX2hvbGlkYXkubGVuZ3RoIC0gM107IC8vIGUuZy4gMTEyNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RfeWVhcl9ob2xpZGF5X3RvICAgPSAobGFzdF95ZWFyX2hvbGlkYXlbbGFzdF95ZWFyX2hvbGlkYXkubGVuZ3RoIC0gMl0gLSAxKSAqIDEwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGFzdF95ZWFyX2hvbGlkYXlbbGFzdF95ZWFyX2hvbGlkYXkubGVuZ3RoIC0gMV07IC8vIGUuZy4gMDAwNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobGFzdF95ZWFyX2hvbGlkYXlfZnJvbSwgbGFzdF95ZWFyX2hvbGlkYXlfdG8pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdF95ZWFyX2hvbGlkYXlfZnJvbSA+IGxhc3RfeWVhcl9ob2xpZGF5X3RvICYmIGRhdGVfbnVtIDw9IGxhc3RfeWVhcl9ob2xpZGF5X3RvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgdHJ1ZSwgbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X3llYXJfaG9saWRheVtsYXN0X3llYXJfaG9saWRheS5sZW5ndGggLSAyXSAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfeWVhcl9ob2xpZGF5W2xhc3RfeWVhcl9ob2xpZGF5Lmxlbmd0aCAtIDFdICsgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5aW5nX2hvbGlkYXlzW2FwcGx5aW5nX2hvbGlkYXlzLmxlbmd0aCAtIDFdLm5hbWUgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgZmFsc2UsIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgaG9saWRheVswK2hdIC0gMSwgaG9saWRheVsxK2hdKSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvKiBTY2hvb2wgaG9saWRheXMgZm9yIGxhc3QgeWVhciBhcmUgbm90IGRlZmluZWQuICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyBmYWxzZSwgbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBob2xpZGF5WzAraF0gLSAxLCBob2xpZGF5WzEraF0pIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhvbGlkYXlfZnJvbSA8PSBkYXRlX251bSAmJiAoZGF0ZV9udW0gPD0gaG9saWRheV90byB8fCBob2xpZGF5X2VuZHNfbmV4dF95ZWFyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyB0cnVlLCBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCkgKyBob2xpZGF5X2VuZHNfbmV4dF95ZWFyLCBob2xpZGF5WzIraF0gLSAxLCBob2xpZGF5WzMraF0gKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5aW5nX2hvbGlkYXlzW2ldLm5hbWUgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhvbGlkYXlfdG9fcGx1cyA9PT0gZGF0ZV9udW0pIHsgLy8gc2VsZWN0ZWQgaG9saWRheSBlbmQgaXMgZXF1YWwgdG8gbW9udGggYW5kIGRheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaCArIDQgPCBob2xpZGF5Lmxlbmd0aCkgeyAvLyBuZXh0IGhvbGlkYXkgaXMgbmV4dCBkYXRlIHJhbmdlIG9mIHRoZSBzYW1lIGhvbGlkYXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyBmYWxzZSwgbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBob2xpZGF5WzAraF0gLSAxLCBob2xpZGF5WzEraF0pIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBCZWNhdXNlIG5vdCBhbGwgc2Nob29sIGhvbGlkYXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBoYXZlIHRvIGFwcGx5IGVhY2ggeWVhciB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBwYXJ0IGhhcyBiZWVuIHNpbXBsaWZpZWQgd2hpY2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIG1ha2VzIHRoZSBpbXBsZW1lbnRhdGlvbiBhIGJpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbGVzcyBlZmZpY2llbnQgYnV0IHJlZHVjZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGNvbXBsZXhpdHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIGZhbHNlLCBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGhvbGlkYXlbMitoXSAtIDEsIGhvbGlkYXlbMytoXSArIDIpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0TGlicmFyeUJ1Z01lc3NhZ2UodCgnbm8gU0ggZGVmaW5pdGlvbicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneWVhcic6IGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksICdsaWJyYXJ5IGJ1ZyBQUiBvbmx5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgfX0oYXBwbHlpbmdfaG9saWRheXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHB1c2hfdG9fd2Vla2RheSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS53ZWVrZGF5LnB1c2goc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5ob2xpZGF5LnB1c2goc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgIGF0ICs9IDE7IC8vIEZJWE1FOiB0ZXN0XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ3dlZWtkYXknKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlV2Vla2RheVJhbmdlKHRva2VucywgYXQsIHJ1bGUsIHRydWUsIG5ydWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0IC0gMSwgJywnKSkgeyAvLyBhZGRpdGlvbmFsIHJ1bGVcbiAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgbnJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgYXQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgIHQoJ2FkZGl0aW9uYWwgcnVsZSBubyBzZW5zZScpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0LCB0KCd1bmV4cGVjdGVkIHRva2VuIGhvbGlkYXknLCB7J3Rva2VuJzogdG9rZW5zW2F0XVsxXX0pKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghbWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJywnKSlcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhdDtcbiAgICAgIH1cblxuICAgICAgLy8gSGVscGVycyBmb3IgaG9saWRheSBwYXJzZXJzIHt7e1xuXG4gICAgICAvKiBSZXR1cm5zIGEgbnVtYmVyIGZvciBhIGRhdGUgd2hpY2ggY2FuIHRoZW4gYmUgdXNlZCB0byBjb21wYXJlIGp1c3QgdGhlIGRhdGVzICh3aXRob3V0IHRoZSB0aW1lKS4ge3t7XG4gICAgICAgKlxuICAgICAgICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBhIHNlbGVjdG9yIGNvdWxkIGJlIGNhbGxlZCBmb3IgdGhlIG1pZGRsZSBvZiB0aGUgZGF5IGFuZCB3ZSBuZWVkIHRvIHRlbGwgaWYgaXQgbWF0Y2hlcyB0aGF0IGRheS5cbiAgICAgICAqIEV4YW1wbGU6IFJldHVybnMgMjAxNTAwMTUgZm9yIEphbiAxNSAyMDE1LlxuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSBkYXRlOiBEYXRlIG9iamVjdC5cbiAgICAgICAqIDpwYXJhbSBpbmNsdWRlX3llYXI6IEJvb2xlYW4uIElmIHRydWUgaW5jbHVkZSB0aGUgeWVhci5cbiAgICAgICAqIDpyZXR1cm5zOiBOdW1iZXIgZm9yIHRoZSBkYXRlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBnZXRWYWx1ZUZvckRhdGUoZGF0ZSwgaW5jbHVkZV95ZWFyKSB7XG4gICAgICAgICAgLy8gSW1wbGljaXQgYmVjYXVzZSB1bmRlZmluZWQgZXZhbHVhdGVzIHRvIGZhbHNlLlxuICAgICAgICAgIC8vIGluY2x1ZGVfeWVhciA9IHR5cGVvZiBpbmNsdWRlX3llYXIgIT09ICd1bmRlZmluZWQnID8gaW5jbHVkZV95ZWFyIDogZmFsc2U7XG5cbiAgICAgICAgICByZXR1cm4gKGluY2x1ZGVfeWVhciA/IChkYXRlLmdldEZ1bGxZZWFyKCkgKiAxMDAwMCkgOiAwKSArIChkYXRlLmdldE1vbnRoKCkgKiAxMDApICsgZGF0ZS5nZXREYXRlKCk7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogUmV0dXJuIHRoZSBzY2hvb2wgaG9saWRheSBkZWZpbml0aW9uIGUuZy4gWyA1LCAyNSwgdG8gNiwgNSBdLCBmb3IgdGhlIHNwZWNpZmllZCB5ZWFyIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSBTSF9oYXNoOlxuICAgICAgICogOnBhcmFtIHllYXI6IFllYXIgYXMgaW50ZWdlci5cbiAgICAgICAqIDpwYXJhbSBmYXRhbDogRGVmaW5lcyB0aGUgYmVoYXZpb3IgaW4gY2FzZSBubyBkZWZpbml0aW9uIGlzIGZpbmQuIFRocm93IGFuIGVycm9yIGlmIHNldCB0byB0cnVlLiBSZXR1cm4gcmV0dXJuIHVuZGVmaW5lZCBvdGhlcndpc2UuXG4gICAgICAgKiA6cmV0dXJuczogc2Nob29sIGhvbGlkYXlzIGZvciB0aGUgZ2l2ZW4geWVhci5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2V0U0hGb3JZZWFyKFNIX2hhc2gsIHllYXIsIGZhdGFsKSB7XG5cbiAgICAgICAgICB2YXIgaG9saWRheSA9IFNIX2hhc2hbeWVhcl07XG4gICAgICAgICAgaWYgKHR5cGVvZiBob2xpZGF5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBob2xpZGF5ID0gU0hfaGFzaFsnZGVmYXVsdCddOyAvLyBhcHBsaWVzIGZvciBhbnkgeWVhciB3aXRob3V0IGV4cGxpY2l0IGRlZmluaXRpb25cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBob2xpZGF5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGhvbGlkYXk7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogUmV0dXJuIGNsb3Nlc3QgaG9saWRheSBkZWZpbml0aW9uIGF2YWlsYWJsZS4ge3t7XG4gICAgICAgKlxuICAgICAgICogRmlyc3QgdHJ5IHRvIGdldCB0aGUgc3RhdGUsIGlmIG1pc3NpbmcgZ2V0IHRoZSBjb3VudHJ5IHdpZGUgaG9saWRheXNcbiAgICAgICAqICh3aGljaCBjYW4gb24gaXTigJlzIG93biBiZSBsaW1pdGVkIHRvIHNvbWUgc3RhdGVzKS5cbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0gdHlwZV9vZl9ob2xpZGF5czogQ2hvaWNlczogUEgsIFNILlxuICAgICAgICogOnJldHVybnM6IFB1YmxpYyBvciBzY2hvb2wgaG9saWRheSBsaXN0LlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBnZXRNYXRjaGluZ0hvbGlkYXkodHlwZV9vZl9ob2xpZGF5cykge1xuICAgICAgICAgIGlmICh0eXBlb2YgbG9jYXRpb25fY2MgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIC8qIFdlIGhhdmUgbm8gaWRlYSB3aGljaCBob2xpZGF5cyBkbyBhcHBseSBiZWNhdXNlIHRoZSBjb3VudHJ5IGNvZGUgd2FzIG5vdCBwcm92aWRlZC4gKi9cbiAgICAgICAgICAgICAgdGhyb3cgdCgnbm8gY291bnRyeSBjb2RlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFob2xpZGF5X2RlZmluaXRpb25zW2xvY2F0aW9uX2NjXSkge1xuICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRMaWJyYXJ5QnVnTWVzc2FnZSh0KCdubyBob2xpZGF5IGRlZmluaXRpb24nLCB7XG4gICAgICAgICAgICAgICAgICAnbmFtZSc6IHR5cGVfb2ZfaG9saWRheXMsXG4gICAgICAgICAgICAgICAgICAnY2MnOiBsb2NhdGlvbl9jYyxcbiAgICAgICAgICAgICAgfSksICdsaWJyYXJ5IGJ1ZyBQUiBvbmx5Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG1hdGNoaW5nX2hvbGlkYXkgPSBbXTtcbiAgICAgICAgICBpZiAodHlwZW9mIGxvY2F0aW9uX3N0YXRlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAmJiB0eXBlb2YgaG9saWRheV9kZWZpbml0aW9uc1tsb2NhdGlvbl9jY11bbG9jYXRpb25fc3RhdGVdID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAmJiB0eXBlb2YgaG9saWRheV9kZWZpbml0aW9uc1tsb2NhdGlvbl9jY11bbG9jYXRpb25fc3RhdGVdW3R5cGVfb2ZfaG9saWRheXNdID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgICAgICAgIC8qIElmIGhvbGlkYXlfZGVmaW5pdGlvbnMgZm9yIHRoZSBzdGF0ZSBhcmUgc3BlY2lmaWVkLFxuICAgICAgICAgICAgICAgKiB1c2UgaXQgYW5kIGlnbm9yZSBsZXNzZXIgc3BlY2lmaWMgb25lcyAoZm9yIHRoZVxuICAgICAgICAgICAgICAgKiBjb3VudHJ5KS5cbiAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgdmFyIGNvdW50cnlfaG9saWRheXMgPSBob2xpZGF5X2RlZmluaXRpb25zW2xvY2F0aW9uX2NjXVt0eXBlX29mX2hvbGlkYXlzXSB8fCBbXTtcbiAgICAgICAgICAgICAgdmFyIHN0YXRlX2hvbGlkYXlzID0gaG9saWRheV9kZWZpbml0aW9uc1tsb2NhdGlvbl9jY11bbG9jYXRpb25fc3RhdGVdW3R5cGVfb2ZfaG9saWRheXNdO1xuICAgICAgICAgICAgICBpZiAodHlwZV9vZl9ob2xpZGF5cyA9PT0gJ1BIJykge1xuICAgICAgICAgICAgICAgICAgbWF0Y2hpbmdfaG9saWRheSA9IHN0YXRlX2hvbGlkYXlzO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFjb3VudHJ5X2hvbGlkYXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgbWF0Y2hpbmdfaG9saWRheSA9IHN0YXRlX2hvbGlkYXlzO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gTWVyZ2UgY291bnRyeSBhbmQgc3RhdGUgaG9saWRheXMgY2hyb25vbG9naWNhbGx5XG4gICAgICAgICAgICAgICAgICB2YXIgY291bnRyeV9ob2xpZGF5X25hbWVzID0gY291bnRyeV9ob2xpZGF5cy5tYXAoZnVuY3Rpb24oY291bnRyeV9ob2xpZGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50cnlfaG9saWRheS5uYW1lO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hpbmdfaG9saWRheSA9IFtdO1xuICAgICAgICAgICAgICAgICAgbWF0Y2hpbmdfaG9saWRheS5wdXNoLmFwcGx5KG1hdGNoaW5nX2hvbGlkYXksIGNvdW50cnlfaG9saWRheXMpO1xuICAgICAgICAgICAgICAgICAgbWF0Y2hpbmdfaG9saWRheS5wdXNoLmFwcGx5KG1hdGNoaW5nX2hvbGlkYXksIHN0YXRlX2hvbGlkYXlzLmZpbHRlcihmdW5jdGlvbiBpc19ub3RfYV9jb3VudHJ5X2hvbGlkYXkoc3RhdGVfaG9saWRheSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb3VudHJ5X2hvbGlkYXlfbmFtZXMuaW5kZXhPZihzdGF0ZV9ob2xpZGF5Lm5hbWUpID09PSAtMTtcbiAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgIG1hdGNoaW5nX2hvbGlkYXkuc29ydChmdW5jdGlvbihoMSwgaDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgaDFfeWVhciA9IE9iamVjdC5rZXlzKGgxKS5maW5kKGZ1bmN0aW9uKGspIHtyZXR1cm4gayAhPT0gJ25hbWUnO30pO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBoMl95ZWFyID0gT2JqZWN0LmtleXMoaDIpLmZpbmQoZnVuY3Rpb24oaykge3JldHVybiBrICE9PSAnbmFtZSc7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGgxX2RhdGUgPSBoMVtoMV95ZWFyXTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgaDJfZGF0ZSA9IGgyW2gyX3llYXJdO1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBhcmUgYm90aCBtb250aHMsIG9yIHRvIGJyZWFrIGEgdGllIGJvdGggZGF5c1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoaDFfZGF0ZVswXSAtIGgyX2RhdGVbMF0pIHx8IChoMV9kYXRlWzFdIC0gaDJfZGF0ZVsxXSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaG9saWRheV9kZWZpbml0aW9uc1tsb2NhdGlvbl9jY11bdHlwZV9vZl9ob2xpZGF5c10pIHtcbiAgICAgICAgICAgICAgLyogSG9saWRheXMgYXJlIGRlZmluZWQgY291bnRyeSB3aWRlLiBTb21lXG4gICAgICAgICAgICAgICAqIGNvdW50cmllcyBvbmx5IGhhdmUgY291bnRyeS13aWRlIGhvbGlkYXkgZGVmaW5pdGlvbnNcbiAgICAgICAgICAgICAgICogc28gdGhhdCBpcyBvayB0b28uXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICB2YXIgYXBwbHlpbmdfaG9saWRheXNfZm9yX2NvdW50cnkgPSBob2xpZGF5X2RlZmluaXRpb25zW2xvY2F0aW9uX2NjXVt0eXBlX29mX2hvbGlkYXlzXTtcblxuICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVfb2ZfaG9saWRheXMpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgJ1BIJzpcbiAgICAgICAgICAgICAgICAgICAgICBhcHBseWluZ19ob2xpZGF5c19mb3JfY291bnRyeS5mb3JFYWNoKGZ1bmN0aW9uIChob2xpZGF5X2l0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSG9saWRheXMgaW4gdGhlIGNvdW50cnktd2lkZSBzY29wZSBjYW4gYmUgbGltaXRlZCB0byBjZXJ0YWluIHN0YXRlcy4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCdvbmx5X3N0YXRlcycgaW4gaG9saWRheV9pdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgPT09IGhvbGlkYXlfaXRlbS5vbmx5X3N0YXRlcy5pbmRleE9mKGxvY2F0aW9uX3N0YXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nX2hvbGlkYXkucHVzaChob2xpZGF5X2l0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSAnU0gnOlxuICAgICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nX2hvbGlkYXkgPSBhcHBseWluZ19ob2xpZGF5c19mb3JfY291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IGZvcm1hdExpYnJhcnlCdWdNZXNzYWdlKHQoJ25vIGhvbGlkYXkgZGVmaW5pdGlvbiBzdGF0ZScsIHtcbiAgICAgICAgICAgICAgICAgICduYW1lJzogdHlwZV9vZl9ob2xpZGF5cyxcbiAgICAgICAgICAgICAgICAgICdjYyc6IGxvY2F0aW9uX2NjLFxuICAgICAgICAgICAgICAgICAgJ3N0YXRlJzogbG9jYXRpb25fc3RhdGUsXG4gICAgICAgICAgICAgIH0pLCAnbGlicmFyeSBidWcgUFIgb25seScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtYXRjaGluZ19ob2xpZGF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRMaWJyYXJ5QnVnTWVzc2FnZSh0KCdubyBob2xpZGF5IGRlZmluaXRpb24nLCB7XG4gICAgICAgICAgICAgICAgICAnbmFtZSc6IHR5cGVfb2ZfaG9saWRheXMsXG4gICAgICAgICAgICAgICAgICAnY2MnOiBsb2NhdGlvbl9jYyxcbiAgICAgICAgICAgICAgfSksICdsaWJyYXJ5IGJ1ZyBQUiBvbmx5Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG1hdGNoaW5nX2hvbGlkYXk7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogUmV0dXJuIHZhcmlhYmxlIGRhdGVzIHVzZWQgZm9yIGhvbGlkYXkgY2FsY3VsYXRpb24uIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB5ZWFyOiBZZWFyIGFzIGludGVnZXIuXG4gICAgICAgKiA6cmV0dXJuczogSGFzaCBvZiB2YXJpYWJsZXMgZGF0ZXMuIEtleSBpcyB0aGUgbmFtZSBvZiB0aGUgdmFyaWFibGUgZGF0ZS4gVmFsdWUgaXMgdGhlIHZhcmlhYmxlIGRhdGUgZGF0ZSBvYmplY3QuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldE1vdmFibGVFdmVudHNGb3JZZWFyKHllYXIpIHtcbiAgICAgICAgICAvKiBDYWxjdWxhdGUgZWFzdGVyIHt7eyAqL1xuICAgICAgICAgIHZhciBDID0gTWF0aC5mbG9vcih5ZWFyLzEwMCk7XG4gICAgICAgICAgdmFyIE4gPSB5ZWFyIC0gMTkqTWF0aC5mbG9vcih5ZWFyLzE5KTtcbiAgICAgICAgICB2YXIgSyA9IE1hdGguZmxvb3IoKEMgLSAxNykvMjUpO1xuICAgICAgICAgIHZhciBJID0gQyAtIE1hdGguZmxvb3IoQy80KSAtIE1hdGguZmxvb3IoKEMgLSBLKS8zKSArIDE5Kk4gKyAxNTtcbiAgICAgICAgICBJID0gSSAtIDMwKk1hdGguZmxvb3IoKEkvMzApKTtcbiAgICAgICAgICBJID0gSSAtIE1hdGguZmxvb3IoSS8yOCkqKDEgLSBNYXRoLmZsb29yKEkvMjgpKk1hdGguZmxvb3IoMjkvKEkgKyAxKSkqTWF0aC5mbG9vcigoMjEgLSBOKS8xMSkpO1xuICAgICAgICAgIHZhciBKID0geWVhciArIE1hdGguZmxvb3IoeWVhci80KSArIEkgKyAyIC0gQyArIE1hdGguZmxvb3IoQy80KTtcbiAgICAgICAgICBKID0gSiAtIDcqTWF0aC5mbG9vcihKLzcpO1xuICAgICAgICAgIHZhciBMID0gSSAtIEo7XG4gICAgICAgICAgdmFyIE0gPSAzICsgTWF0aC5mbG9vcigoTCArIDQwKS80NCk7XG4gICAgICAgICAgdmFyIEQgPSBMICsgMjggLSAzMSpNYXRoLmZsb29yKE0vNCk7XG4gICAgICAgICAgLyogfX19ICovXG5cbiAgICAgICAgICAvKiBDYWxjdWxhdGUgb3J0aG9kb3ggZWFzdGVyIHt7eyAqL1xuICAgICAgICAgIHZhciBvQSA9IHllYXIgJSA0O1xuICAgICAgICAgIHZhciBvQiA9IHllYXIgJSA3O1xuICAgICAgICAgIHZhciBvQyA9IHllYXIgJSAxOTtcbiAgICAgICAgICB2YXIgb0QgPSAoMTkqb0MgKyAxNSkgJSAzMDtcbiAgICAgICAgICB2YXIgb0UgPSAoMipvQSs0Km9CIC0gb0QgKyAzNCkgJSA3O1xuICAgICAgICAgIHZhciBvRiA9IG9EK29FO1xuXG4gICAgICAgICAgdmFyIG9EYXRlO1xuICAgICAgICAgIGlmIChvRiA8IDkpIHtcbiAgICAgICAgICAgICAgb0RhdGUgPSBuZXcgRGF0ZSh5ZWFyLCA0LTEsIG9GKzQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICgob0YrNCk8MzEpIHtcbiAgICAgICAgICAgICAgICAgIG9EYXRlID0gbmV3IERhdGUoeWVhciwgNC0xLCBvRis0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG9EYXRlID0gbmV3IERhdGUoeWVhciwgNS0xLCBvRi0yNik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLyogfX19ICovXG5cbiAgICAgICAgICAvKiBDYWxjdWxhdGUgbGFzdCBTdW5kYXkgaW4gRmVicnVhcnkge3t7ICovXG4gICAgICAgICAgdmFyIGxhc3RGZWJydWFyeURheSA9IG5ldyBEYXRlKHllYXIsIDIsIDApO1xuICAgICAgICAgIHZhciBsYXN0RmVicnVhcnlTdW5kYXkgPSBsYXN0RmVicnVhcnlEYXkuZ2V0RGF0ZSgpIC0gbGFzdEZlYnJ1YXJ5RGF5LmdldERheSgpO1xuICAgICAgICAgIC8qIH19fSAqL1xuXG4gICAgICAgICAgLyogQ2FsY3VsYXRlIFZpY3RvcmlhIERheS4gbGFzdCBNb25kYXkgYmVmb3JlIG9yIG9uIE1heSAyNCB7e3sgKi9cbiAgICAgICAgICB2YXIgbWF5XzI0ID0gbmV3IERhdGUoeWVhciwgNCwgMjQpO1xuICAgICAgICAgIHZhciB2aWN0b3JpYURheSA9IDI0ICAtICgoNiArIG1heV8yNC5nZXREYXkoKSkgJSA3KTtcbiAgICAgICAgICAvKiB9fX0gKi9cblxuICAgICAgICAgIC8qIENhbGN1bGF0ZSBDYW5hZGEgRGF5LiBKdWx5IDFzdCB1bmxlc3MgMXN0IGlzIG9uIFN1bmRheSwgdGhlbiBKdWx5IDIuIHt7eyAqL1xuICAgICAgICAgIHZhciBqdWx5XzEgPSBuZXcgRGF0ZSh5ZWFyLCA2LCAxKTtcbiAgICAgICAgICB2YXIgY2FuYWRhRGF5ID0ganVseV8xLmdldERheSgpID09PSAwID8gMiA6IDE7XG4gICAgICAgICAgLyogfX19ICovXG5cbiAgICAgICAgICAvKiBDYWxjdWxhdGlvbiBvZiB0aGUgc3ByaW5nIGFuZCBhdXR1bW5hbCBlcXVpbm94ZXMgKGZvciBQdWJsaWMgaG9saWRheXMgaW4gSmFwYW4pLiB7e3sgKi9cbiAgICAgICAgICBmdW5jdGlvbiBzcHJpbmdFcXVpbm94Q2FsYyh5ZWFyKXtcbiAgICAgICAgICAgICAgaWYoeWVhciA+PSAxOTAwICYmIHllYXIgPD0gMTkyMyl7XG4gICAgICAgICAgICAgICAgICBpZih5ZWFyICUgNCA9PT0gMykgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDIsIDIyKVxuICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gbmV3IERhdGUoeWVhciwgMiwgMjEpXG4gICAgICAgICAgICAgIH0gZWxzZSBpZih5ZWFyID49IDE5MjQgJiYgeWVhciA8PSAxOTU5KXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAyLCAyMSlcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKHllYXIgPj0gMTk2MCAmJiB5ZWFyIDw9IDE5OTEpe1xuICAgICAgICAgICAgICAgICAgaWYoeWVhciAlIDQgPT09IDApIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAyLCAyMClcbiAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDIsIDIxKVxuICAgICAgICAgICAgICB9IGVsc2UgaWYoeWVhciA+PSAxOTkyICYmIHllYXIgPD0gMjAyMyl7XG4gICAgICAgICAgICAgICAgICBpZih5ZWFyICUgNCA9PT0gMCB8fCB5ZWFyICUgNCA9PT0gMSkgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDIsIDIwKVxuICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gbmV3IERhdGUoeWVhciwgMiwgMjEpXG4gICAgICAgICAgICAgIH0gZWxzZSBpZih5ZWFyID49IDIwMjQgJiYgeWVhciA8PSAyMDU1KXtcbiAgICAgICAgICAgICAgICAgIGlmKHllYXIgJSA0ID09PSAzKSByZXR1cm4gbmV3IERhdGUoeWVhciwgMiwgMjEpXG4gICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAyLCAyMClcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKHllYXIgPj0gMjA1NiAmJiB5ZWFyIDw9IDIwOTEpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDIsIDIwKVxuICAgICAgICAgICAgICB9IGVsc2UgaWYoeWVhciA+PSAyMDkyICYmIHllYXIgPD0gMjA5OSl7XG4gICAgICAgICAgICAgICAgICBpZih5ZWFyICUgNCA9PT0gMCkgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDIsIDE5KVxuICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gbmV3IERhdGUoeWVhciwgMiwgMjApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBhdXR1bW5hbEVxdWlub3hDYWxjKHllYXIpe1xuICAgICAgICAgICAgICBpZih5ZWFyID49IDE5MDAgJiYgeWVhciA8PSAxOTE5KXtcbiAgICAgICAgICAgICAgICAgIGlmKHllYXIgJSA0ID09PSAwKSByZXR1cm4gbmV3IERhdGUoeWVhciwgOCwgMjMpXG4gICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCA4LCAyNClcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKHllYXIgPj0gMTkyMCAmJiB5ZWFyIDw9IDE5NDcpe1xuICAgICAgICAgICAgICAgICAgaWYoeWVhciAlIDQgPT09IDAgfHwgeWVhciAlIDQgPT09IDEpIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCA4LCAyMylcbiAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDgsIDI0KVxuICAgICAgICAgICAgICB9IGVsc2UgaWYoeWVhciA+PSAxOTQ4ICYmIHllYXIgPD0gMTk3OSl7XG4gICAgICAgICAgICAgICAgICBpZih5ZWFyICUgNCA9PT0gMykgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDgsIDI0KVxuICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gbmV3IERhdGUoeWVhciwgOCwgMjMpXG4gICAgICAgICAgICAgIH0gZWxzZSBpZih5ZWFyID49IDE5ODAgJiYgeWVhciA8PSAyMDExKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCA4LCAyMylcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKHllYXIgPj0gMjAxMiAmJiB5ZWFyIDw9IDIwNDMpe1xuICAgICAgICAgICAgICAgICAgaWYoeWVhciAlIDQgPT09IDApIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCA4LCAyMilcbiAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDgsIDIzKVxuICAgICAgICAgICAgICB9ICBlbHNlIGlmKHllYXIgPj0gMjA0NCAmJiB5ZWFyIDw9IDIwNzUpe1xuICAgICAgICAgICAgICAgICAgaWYoeWVhciAlIDQgPT09IDAgfHwgeWVhciAlIDQgPT09IDEpIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCA4LCAyMilcbiAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDgsIDIzKVxuICAgICAgICAgICAgICB9IGVsc2UgaWYoeWVhciA+PSAyMDc2ICYmIHllYXIgPD0gMjA5OSl7XG4gICAgICAgICAgICAgICAgICBpZih5ZWFyICUgNCA9PT0gMykgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDgsIDIzKVxuICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gbmV3IERhdGUoeWVhciwgOCwgMjIpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvKiBIZWxwZXIgZnVuY3Rpb25zIHt7eyAqL1xuICAgICAgICAgIGZ1bmN0aW9uIGZpcnN0V2Vla2RheU9mTW9udGgobW9udGgsIHdlZWtkYXkpe1xuICAgICAgICAgICAgICB2YXIgZmlyc3QgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSk7XG4gICAgICAgICAgICAgIHJldHVybiAxICsgKCg3ICsgd2Vla2RheSAtIGZpcnN0LmdldERheSgpKSAlIDcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGxhc3RXZWVrZGF5T2ZNb250aChtb250aCwgd2Vla2RheSl7XG4gICAgICAgICAgICAgIHZhciBsYXN0ID0gbmV3IERhdGUoeWVhciwgbW9udGgrMSwgMCk7XG4gICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAoKDcgKyBsYXN0LmdldERheSgpIC0gd2Vla2RheSkgJSA3KTtcbiAgICAgICAgICAgICAgcmV0dXJuIGxhc3QuZ2V0RGF0ZSgpIC0gb2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGdldERhdGVPZldlZWtkYXlJbkRhdGVSYW5nZSh3ZWVrZGF5LCBzdGFydF9kYXRlKXtcbiAgICAgICAgICAgICAgdmFyIGRheXNfdG9fZGVzdF9kYXRlID0gd2Vla2RheSAtIHN0YXJ0X2RhdGUuZ2V0RGF5KCk7XG4gICAgICAgICAgICAgIGlmIChkYXlzX3RvX2Rlc3RfZGF0ZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgIGRheXNfdG9fZGVzdF9kYXRlICs9IDc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RhcnRfZGF0ZS5zZXREYXRlKHN0YXJ0X2RhdGUuZ2V0RGF0ZSgpICsgZGF5c190b19kZXN0X2RhdGUpO1xuICAgICAgICAgICAgICByZXR1cm4gc3RhcnRfZGF0ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvKiBEYXRlIG9mIG5leHQgd2Vla2RheSByYW5nZS4ge3t7XG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiA6cGFyYW0gZmlyc3Rfd2Vla2RheTogRmlyc3Qgd2Vla2RheSBpbiByYW5nZSBvZiB3YW50ZWQgd2Vla2RheSAoMSBpcyBNbykuXG4gICAgICAgICAgICogOnBhcmFtIGxhc3Rfd2Vla2RheTogTGFzdCB3ZWVrZGF5IGluIHJhbmdlIG9mIHdhbnRlZCB3ZWVrZGF5ICgxIGlzIE1vKS5cbiAgICAgICAgICAgKiA6cGFyYW0gc3RhcnRfZGF0ZTogRWFybGllc3QgcG9zc2libGUgZGF0ZSB0byBjb25zaWRlci5cbiAgICAgICAgICAgKiA6cmV0dXJuczogc3RhcnRfZGF0ZSBpZiBpbiB3ZWVrZGF5IHJhbmdlLCBvdGhlcndpc2UgdGhlIG5leHQgZGF5IHdoaWNoIGlzIGluIHJhbmdlLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZ1bmN0aW9uIGdldERhdGVPZk5leHRXZWVrZGF5UmFuZ2UoZmlyc3Rfd2Vla2RheSwgbGFzdF93ZWVrZGF5LCBzdGFydF9kYXRlKXtcbiAgICAgICAgICAgICAgaWYgKGZpcnN0X3dlZWtkYXkgPj0gbGFzdF93ZWVrZGF5KSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRMaWJyYXJ5QnVnTWVzc2FnZSgnTm90IGltcGxlbWVudGVkIHlldC4nKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChmaXJzdF93ZWVrZGF5IDw9IHN0YXJ0X2RhdGUuZ2V0RGF5KCkgJiYgc3RhcnRfZGF0ZS5nZXREYXkoKSA8PSBsYXN0X3dlZWtkYXkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdGFydF9kYXRlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIGRheXNfdG9fZGVzdF9kYXRlID0gZmlyc3Rfd2Vla2RheSAtIHN0YXJ0X2RhdGUuZ2V0RGF5KCk7XG4gICAgICAgICAgICAgICAgICBpZiAoZGF5c190b19kZXN0X2RhdGUgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGF5c190b19kZXN0X2RhdGUgKz0gNztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHN0YXJ0X2RhdGUuc2V0RGF0ZShzdGFydF9kYXRlLmdldERhdGUoKSArIGRheXNfdG9fZGVzdF9kYXRlKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdGFydF9kYXRlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICAgICAgLyogfX19ICovXG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAnZWFzdGVyJyAgICAgICAgICAgICAgICA6IG5ldyBEYXRlKHllYXIsIE0gLSAxLCBEKSxcbiAgICAgICAgICAgICAgJ29ydGhvZG94IGVhc3RlcicgICAgICAgOiBvRGF0ZSxcbiAgICAgICAgICAgICAgJ3ZpY3RvcmlhRGF5JyAgICAgICAgICAgOiBuZXcgRGF0ZSh5ZWFyLCAgNCwgdmljdG9yaWFEYXkpLFxuICAgICAgICAgICAgICAnY2FuYWRhRGF5JyAgICAgICAgICAgICA6IG5ldyBEYXRlKHllYXIsICA2LCBjYW5hZGFEYXkpLFxuICAgICAgICAgICAgICAnZmlyc3RKYW51YXJ5TW9uZGF5JyAgICA6IG5ldyBEYXRlKHllYXIsICAwLCBmaXJzdFdlZWtkYXlPZk1vbnRoKDAsIDEpKSxcbiAgICAgICAgICAgICAgJ2ZpcnN0RmVicnVhcnlNb25kYXknICAgOiBuZXcgRGF0ZSh5ZWFyLCAgMSwgZmlyc3RXZWVrZGF5T2ZNb250aCgxLCAxKSksXG4gICAgICAgICAgICAgICdsYXN0RmVicnVhcnlTdW5kYXknICAgIDogbmV3IERhdGUoeWVhciwgIDEsIGxhc3RGZWJydWFyeVN1bmRheSksXG4gICAgICAgICAgICAgICdmaXJzdE1hcmNoTW9uZGF5JyAgICAgIDogbmV3IERhdGUoeWVhciwgIDIsIGZpcnN0V2Vla2RheU9mTW9udGgoMiwgMSkpLFxuICAgICAgICAgICAgICAnZmlyc3RBcHJpbE1vbmRheScgICAgICA6IG5ldyBEYXRlKHllYXIsICAzLCBmaXJzdFdlZWtkYXlPZk1vbnRoKDMsIDEpKSxcbiAgICAgICAgICAgICAgJ2ZpcnN0TWF5TW9uZGF5JyAgICAgICAgOiBuZXcgRGF0ZSh5ZWFyLCAgNCwgZmlyc3RXZWVrZGF5T2ZNb250aCg0LCAxKSksXG4gICAgICAgICAgICAgICdmaXJzdEp1bmVNb25kYXknICAgICAgIDogbmV3IERhdGUoeWVhciwgIDUsIGZpcnN0V2Vla2RheU9mTW9udGgoNSwgMSkpLFxuICAgICAgICAgICAgICAnZmlyc3RKdWx5TW9uZGF5JyAgICAgICA6IG5ldyBEYXRlKHllYXIsICA2LCBmaXJzdFdlZWtkYXlPZk1vbnRoKDYsIDEpKSxcbiAgICAgICAgICAgICAgJ2ZpcnN0QXVndXN0TW9uZGF5JyAgICAgOiBuZXcgRGF0ZSh5ZWFyLCAgNywgZmlyc3RXZWVrZGF5T2ZNb250aCg3LCAxKSksXG4gICAgICAgICAgICAgICdmaXJzdFNlcHRlbWJlck1vbmRheScgIDogbmV3IERhdGUoeWVhciwgIDgsIGZpcnN0V2Vla2RheU9mTW9udGgoOCwgMSkpLFxuICAgICAgICAgICAgICAnZmlyc3RTZXB0ZW1iZXJUdWVzZGF5JyA6IG5ldyBEYXRlKHllYXIsICA4LCBmaXJzdFdlZWtkYXlPZk1vbnRoKDgsIDIpKSxcbiAgICAgICAgICAgICAgJ2ZpcnN0U2VwdGVtYmVyU3VuZGF5JyAgOiBuZXcgRGF0ZSh5ZWFyLCAgOCwgZmlyc3RXZWVrZGF5T2ZNb250aCg4LCAwKSksXG4gICAgICAgICAgICAgICdmaXJzdE9jdG9iZXJNb25kYXknICAgIDogbmV3IERhdGUoeWVhciwgIDksIGZpcnN0V2Vla2RheU9mTW9udGgoOSwgMSkpLFxuICAgICAgICAgICAgICAnZmlyc3ROb3ZlbWJlck1vbmRheScgICA6IG5ldyBEYXRlKHllYXIsIDEwLCBmaXJzdFdlZWtkYXlPZk1vbnRoKDEwLCAxKSksXG4gICAgICAgICAgICAgICdmaXJzdE5vdmVtYmVyVHVlc2RheScgIDogbmV3IERhdGUoeWVhciwgMTAsIGZpcnN0V2Vla2RheU9mTW9udGgoMTAsIDIpKSxcbiAgICAgICAgICAgICAgJ2ZpcnN0TWFyY2hUdWVzZGF5JyAgICAgOiBuZXcgRGF0ZSh5ZWFyLCAgMiwgZmlyc3RXZWVrZGF5T2ZNb250aCgyLCAyKSksXG4gICAgICAgICAgICAgICdmaXJzdEF1Z3VzdFR1ZXNkYXknICAgIDogbmV3IERhdGUoeWVhciwgIDcsIGZpcnN0V2Vla2RheU9mTW9udGgoNywgMikpLFxuICAgICAgICAgICAgICAnZmlyc3RBdWd1c3RGcmlkYXknICAgICA6IG5ldyBEYXRlKHllYXIsICA3LCBmaXJzdFdlZWtkYXlPZk1vbnRoKDcsIDUpKSxcbiAgICAgICAgICAgICAgJ2ZpcnN0Tm92ZW1iZXJUaHVyc2RheScgOiBuZXcgRGF0ZSh5ZWFyLCAxMCwgZmlyc3RXZWVrZGF5T2ZNb250aCgxMCwgNCkpLFxuICAgICAgICAgICAgICAnbGFzdE1heU1vbmRheScgICAgICAgICA6IG5ldyBEYXRlKHllYXIsICA0LCBsYXN0V2Vla2RheU9mTW9udGgoNCwgMSkpLFxuICAgICAgICAgICAgICAnbGFzdE1hcmNoTW9uZGF5JyAgICAgICA6IG5ldyBEYXRlKHllYXIsICAyLCBsYXN0V2Vla2RheU9mTW9udGgoMiwgMSkpLFxuICAgICAgICAgICAgICAnbGFzdEFwcmlsTW9uZGF5JyAgICAgICA6IG5ldyBEYXRlKHllYXIsICAzLCBsYXN0V2Vla2RheU9mTW9udGgoMywgMSkpLFxuICAgICAgICAgICAgICAnbGFzdEFwcmlsRnJpZGF5JyAgICAgICA6IG5ldyBEYXRlKHllYXIsICAzLCBsYXN0V2Vla2RheU9mTW9udGgoMywgNSkpLFxuICAgICAgICAgICAgICAnbGFzdEF1Z3VzdE1vbmRheScgICAgICA6IG5ldyBEYXRlKHllYXIsICA3LCBsYXN0V2Vla2RheU9mTW9udGgoNywgMSkpLFxuICAgICAgICAgICAgICAnbGFzdFNlcHRlbWJlck1vbmRheScgICA6IG5ldyBEYXRlKHllYXIsICA4LCBsYXN0V2Vla2RheU9mTW9udGgoOCwgMSkpLFxuICAgICAgICAgICAgICAnbGFzdFNlcHRlbWJlckZyaWRheScgICA6IG5ldyBEYXRlKHllYXIsICA4LCBsYXN0V2Vla2RheU9mTW9udGgoOCwgNSkpLFxuICAgICAgICAgICAgICAnbGFzdE9jdG9iZXJNb25kYXknICAgICA6IG5ldyBEYXRlKHllYXIsICA5LCBsYXN0V2Vla2RheU9mTW9udGgoOSwgMSkpLFxuICAgICAgICAgICAgICAnbGFzdE9jdG9iZXJGcmlkYXknICAgICA6IG5ldyBEYXRlKHllYXIsICA5LCBsYXN0V2Vla2RheU9mTW9udGgoOSwgNSkpLFxuICAgICAgICAgICAgICAnbmV4dFNhdHVyZGF5MjBKdW4nICAgICA6IGdldERhdGVPZldlZWtkYXlJbkRhdGVSYW5nZSg2LCBuZXcgRGF0ZSh5ZWFyLCA1LCAyMCkpLFxuICAgICAgICAgICAgICAnbmV4dFNhdHVyZGF5MzFPY3QnICAgICA6IGdldERhdGVPZldlZWtkYXlJbkRhdGVSYW5nZSg2LCBuZXcgRGF0ZSh5ZWFyLCA5LCAzMSkpLFxuICAgICAgICAgICAgICAnbmV4dFdlZG5lc2RheTE2Tm92JyAgICA6IGdldERhdGVPZldlZWtkYXlJbkRhdGVSYW5nZSgzLCBuZXcgRGF0ZSh5ZWFyLCAxMCwgMTYpKSxcbiAgICAgICAgICAgICAgJ25leHRNby1GcjE3TWFyY2gnICAgICAgOiBnZXREYXRlT2ZOZXh0V2Vla2RheVJhbmdlKDEsIDUsIG5ldyBEYXRlKHllYXIsIDIsIDE3KSksXG4gICAgICAgICAgICAgICduZXh0TW8tU2EwMU1heScgICAgICAgIDogZ2V0RGF0ZU9mTmV4dFdlZWtkYXlSYW5nZSgxLCA2LCBuZXcgRGF0ZSh5ZWFyLCA0LCAxKSksXG4gICAgICAgICAgICAgICduZXh0TW8tU2EwN0F1Z3VzdCcgICAgIDogZ2V0RGF0ZU9mTmV4dFdlZWtkYXlSYW5nZSgxLCA2LCBuZXcgRGF0ZSh5ZWFyLCA3LCA3KSksXG4gICAgICAgICAgICAgICduZXh0TW8tU2EyNURlY2VtYmVyJyAgIDogZ2V0RGF0ZU9mTmV4dFdlZWtkYXlSYW5nZSgxLCA2LCBuZXcgRGF0ZSh5ZWFyLCAxMSwgMjUpKSxcbiAgICAgICAgICAgICAgJ3NwcmluZ0VxdWlub3gnICAgICAgICAgOiBzcHJpbmdFcXVpbm94Q2FsYyh5ZWFyKSxcbiAgICAgICAgICAgICAgJ2F1dHVtbmFsRXF1aW5veCcgICAgICAgOiBhdXR1bW5hbEVxdWlub3hDYWxjKHllYXIpLFxuICAgICAgICAgIH07XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgZnVuY3Rpb24gZ2V0QXBwbHlpbmdIb2xpZGF5c0ZvclllYXIoYXBwbHlpbmdfaG9saWRheXMsIHllYXIsIGFkZF9kYXlzKSB7XG4gICAgICAgICAgdmFyIG1vdmFibGVEYXlzID0gZ2V0TW92YWJsZUV2ZW50c0ZvclllYXIoeWVhcik7XG5cbiAgICAgICAgICB2YXIgc29ydGVkX2hvbGlkYXlzID0gW107XG4gICAgICAgICAgdmFyIG5leHRfaG9saWRheTtcblxuICAgICAgICAgIGFwcGx5aW5nX2hvbGlkYXlzLmZvckVhY2goZnVuY3Rpb24gKGhvbGlkYXlfaXRlbSkge1xuICAgICAgICAgICAgICBpZiAoJ2ZpeGVkX2RhdGUnIGluIGhvbGlkYXlfaXRlbSkge1xuICAgICAgICAgICAgICAgICAgbmV4dF9ob2xpZGF5ID0gbmV3IERhdGUoeWVhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaG9saWRheV9pdGVtLmZpeGVkX2RhdGVbMF0gLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBob2xpZGF5X2l0ZW0uZml4ZWRfZGF0ZVsxXVxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoJ3ZhcmlhYmxlX2RhdGUnIGluIGhvbGlkYXlfaXRlbSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkX21vdmFibGVEYXkgPSBtb3ZhYmxlRGF5c1tob2xpZGF5X2l0ZW0udmFyaWFibGVfZGF0ZV07XG4gICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGVkX21vdmFibGVEYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB0KCdtb3ZhYmxlIG5vIGZvcm11bGEnLCB7J25hbWUnOiBob2xpZGF5X2l0ZW0ubmFtZX0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIGRhdGVfb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICAgIGlmICgnb2Zmc2V0JyBpbiBob2xpZGF5X2l0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBkYXRlX29mZnNldCA9IGhvbGlkYXlfaXRlbS5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBuZXh0X2hvbGlkYXkgPSBuZXcgRGF0ZShzZWxlY3RlZF9tb3ZhYmxlRGF5LmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRfbW92YWJsZURheS5nZXRNb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX21vdmFibGVEYXkuZ2V0RGF0ZSgpICsgZGF0ZV9vZmZzZXRcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBpZiAoeWVhciAhPT0gbmV4dF9ob2xpZGF5LmdldEZ1bGxZZWFyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB0KCdtb3ZhYmxlIG5vdCBpbiB5ZWFyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGhvbGlkYXlfaXRlbS52YXJpYWJsZV9kYXRlLCAnZGF5cyc6IGRhdGVfb2Zmc2V0fSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRMaWJyYXJ5QnVnTWVzc2FnZSgnVW5leHBlY3RlZCBvYmplY3Q6ICcgKyBKU09OLnN0cmluZ2lmeShob2xpZGF5X2l0ZW0sIG51bGwsICcgICAgJykpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGFkZF9kYXlzWzBdKSB7XG4gICAgICAgICAgICAgICAgICBuZXh0X2hvbGlkYXkuc2V0RGF0ZShuZXh0X2hvbGlkYXkuZ2V0RGF0ZSgpICsgYWRkX2RheXNbMF0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc29ydGVkX2hvbGlkYXlzLnB1c2goWyBuZXh0X2hvbGlkYXksIGhvbGlkYXlfaXRlbS5uYW1lIF0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc29ydGVkX2hvbGlkYXlzID0gc29ydGVkX2hvbGlkYXlzLnNvcnQoZnVuY3Rpb24oYSxiKXtcbiAgICAgICAgICAgICAgaWYgKGFbMF0uZ2V0VGltZSgpIDwgYlswXS5nZXRUaW1lKCkpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgaWYgKGFbMF0uZ2V0VGltZSgpID4gYlswXS5nZXRUaW1lKCkpIHJldHVybiAxO1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBzb3J0ZWRfaG9saWRheXM7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBZZWFyIHJhbmdlIHBhcnNlciAoMjAxMywyMDE2LTIwMTgsMjAyMC8yKS4ge3t7XG4gICAgICAgKlxuICAgICAgICogOnBhcmFtIHRva2VuczogTGlzdCBvZiB0b2tlbiBvYmplY3RzLlxuICAgICAgICogOnBhcmFtIGF0OiBQb3NpdGlvbiB3aGVyZSB0byBzdGFydC5cbiAgICAgICAqIDpyZXR1cm5zOiBQb3NpdGlvbiBhdCB3aGljaCB0aGUgdG9rZW4gZG9lcyBub3QgYmVsb25nIHRvIHRoZSBzZWxlY3RvciBhbnltb3JlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBwYXJzZVllYXJSYW5nZSh0b2tlbnMsIGF0KSB7XG4gICAgICAgICAgdG9rZW5zW2F0XVszXSA9ICd5ZWFyJztcbiAgICAgICAgICBmb3IgKDsgYXQgPCB0b2tlbnMubGVuZ3RoOyBhdCsrKSB7XG4gICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAneWVhcicpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaXNfcmFuZ2UgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICBoYXNfcGVyaW9kLFxuICAgICAgICAgICAgICAgICAgICAgIHBlcmlvZDtcbiAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0KzEsICctJywgJ3llYXInLCAnLycsICdudW1iZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlzX3JhbmdlICAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIGhhc19wZXJpb2QgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIHBlcmlvZCA9IHBhcnNlSW50KHRva2Vuc1thdCs0XVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgY2hlY2tQZXJpb2QoYXQrNCwgcGVyaW9kLCAneWVhcicpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBpc19yYW5nZSAgID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdCsxLCAnLScsICd5ZWFyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgaGFzX3BlcmlvZCA9IG1hdGNoVG9rZW5zKHRva2VucywgYXQrMSwgJy8nLCAnbnVtYmVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc19wZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyaW9kID0gcGFyc2VJbnQodG9rZW5zW2F0KzJdWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tQZXJpb2QoYXQrMiwgcGVyaW9kLCAneWVhcicsICdub19lbmRfeWVhcicpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCsxLCAnKycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmlvZCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhhc19wZXJpb2QgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgdmFyIHllYXJfZnJvbSA9IHBhcnNlSW50KHRva2Vuc1thdF1bMF0pO1xuICAgICAgICAgICAgICAgICAgLy8gZXJyb3IgY2hlY2tpbmcge3t7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX3JhbmdlICYmIHRva2Vuc1thdCsyXVswXSA8PSB5ZWFyX2Zyb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHJldmVyc2VkIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbnNbYXQrMl1bMF0gPT09IHllYXJfZnJvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsIHQoJ3llYXIgcmFuZ2Ugb25lIHllYXInLCB7J3llYXInOiB5ZWFyX2Zyb20gfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsIHQoJ3llYXIgcmFuZ2UgcmV2ZXJzZScpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzX3JhbmdlICYmIHllYXJfZnJvbSA8IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzaW5nX3dhcm5pbmdzLnB1c2goWyBucnVsZSwgYXQsIHQoJ3llYXIgcGFzdCcpIF0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfcmFuZ2UgJiYgdG9rZW5zW2F0KzJdWzBdIDwgbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNpbmdfd2FybmluZ3MucHVzaChbIG5ydWxlLCBhdCsyLCB0KCd5ZWFyIHBhc3QnKSBdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvKiB9fX0gKi9cblxuICAgICAgICAgICAgICAgICAgcnVsZS55ZWFyLnB1c2goZnVuY3Rpb24odG9rZW5zLCBhdCwgeWVhcl9mcm9tLCBpc19yYW5nZSwgaGFzX3BlcmlvZCwgcGVyaW9kKSB7IHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIG91cnllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHllYXJfdG8gPSBpc19yYW5nZSA/IHBhcnNlSW50KHRva2Vuc1thdCsyXVswXSkgOiB5ZWFyX2Zyb207XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAob3VyeWVhciA8IHllYXJfZnJvbSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBuZXcgRGF0ZSh5ZWFyX2Zyb20sIDAsIDEpXTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc19wZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHllYXJfZnJvbSA8PSBvdXJ5ZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfcmFuZ2UgJiYgb3VyeWVhciA+IHllYXJfdG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVyaW9kID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgob3VyeWVhciAtIHllYXJfZnJvbSkgJSBwZXJpb2QgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBuZXcgRGF0ZShvdXJ5ZWFyICsgMSwgMCwgMSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIG5ldyBEYXRlKG91cnllYXIgKyBwZXJpb2QgLSAxLCAwLCAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc19yYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3VyeWVhciA8PSB5ZWFyX3RvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBuZXcgRGF0ZSh5ZWFyX3RvICsgMSwgMCwgMSldO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3VyeWVhciA9PT0geWVhcl9mcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZV07XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZV07XG5cbiAgICAgICAgICAgICAgICAgIH19KHRva2VucywgYXQsIHllYXJfZnJvbSwgaXNfcmFuZ2UsIGhhc19wZXJpb2QsIHBlcmlvZCkpO1xuXG4gICAgICAgICAgICAgICAgICBhdCArPSAxICsgKGlzX3JhbmdlID8gMiA6IDApICsgKGhhc19wZXJpb2QgPyAoaGFzX3BlcmlvZCA9PT0gMiA/IDEgOiAyKSA6IDApO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQgLSAxLCAnLCcpKSB7IC8vIGFkZGl0aW9uYWwgcnVsZVxuICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQgLSAxLCB0KCdhZGRpdGlvbmFsIHJ1bGUgbm8gc2Vuc2UnKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCwgdCgndW5leHBlY3RlZCB0b2tlbiB5ZWFyIHJhbmdlJywgeyd0b2tlbic6IHRva2Vuc1thdF1bMV19KSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIW1hdGNoVG9rZW5zKHRva2VucywgYXQsICcsJykpXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXQ7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogV2VlayByYW5nZSBwYXJzZXIgKHdlZWsgMTEtMjAsIHdlZWsgMS01My8yKS4ge3t7XG4gICAgICAgKlxuICAgICAgICogOnBhcmFtIHRva2VuczogTGlzdCBvZiB0b2tlbiBvYmplY3RzLlxuICAgICAgICogOnBhcmFtIGF0OiBQb3NpdGlvbiB3aGVyZSB0byBzdGFydC5cbiAgICAgICAqIDpyZXR1cm5zOiBQb3NpdGlvbiBhdCB3aGljaCB0aGUgdG9rZW4gZG9lcyBub3QgYmVsb25nIHRvIHRoZSBzZWxlY3RvciBhbnltb3JlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBwYXJzZVdlZWtSYW5nZSh0b2tlbnMsIGF0KSB7XG4gICAgICAgICAgZm9yICg7IGF0IDwgdG9rZW5zLmxlbmd0aDsgYXQrKykge1xuICAgICAgICAgICAgICBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ3dlZWsnKSkge1xuICAgICAgICAgICAgICAgICAgYXQrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ251bWJlcicpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaXNfcmFuZ2UgPSBtYXRjaFRva2Vucyh0b2tlbnMsIGF0KzEsICctJywgJ251bWJlcicpLCBwZXJpb2QgPSAwO1xuICAgICAgICAgICAgICAgICAgdmFyIHdlZWtfZnJvbSA9IHRva2Vuc1thdF1bMF07XG4gICAgICAgICAgICAgICAgICB2YXIgd2Vla190byAgID0gaXNfcmFuZ2UgPyB0b2tlbnNbYXQrMl1bMF0gOiB3ZWVrX2Zyb207XG4gICAgICAgICAgICAgICAgICBpZiAod2Vla19mcm9tID4gd2Vla190bykge1xuICAgICAgICAgICAgICAgICAgICAgIHRocm93IGZvcm1hdFdhcm5FcnJvck1lc3NhZ2UobnJ1bGUsIGF0KzIsIHQoJ3dlZWsgcmFuZ2UgcmV2ZXJzZScpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICh3ZWVrX2Zyb20gPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsIHQoJ3dlZWsgbmVnYXRpdmUnKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAod2Vla190byA+IDUzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgaXNfcmFuZ2UgPyBhdCsyIDogYXQsIHQoJ3dlZWsgZXhjZWVkJykpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKGlzX3JhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGVyaW9kID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdCszLCAnLycsICdudW1iZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmlvZCA9IHRva2Vuc1thdCs0XVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zW2F0KzRdWzRdID0gJ3Bvc2l0aXZlX251bWJlcic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJpb2QgPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCs0LCB0KCd3ZWVrIHBlcmlvZCBsZXNzIHRoYW4gMicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2Vla2Zyb20nOiB3ZWVrX2Zyb20sICd3ZWVrdG8nOiB3ZWVrX3RvLCAncGVyaW9kJzogcGVyaW9kfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBlcmlvZCA+IDI2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCs0LCB0KCd3ZWVrIHBlcmlvZCBncmVhdGVyIHRoYW4gMjYnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dlZWtmcm9tJzogd2Vla19mcm9tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmICh3ZWVrX3N0YWJsZSAmJiAoISh3ZWVrX2Zyb20gPD0gMSAmJiB3ZWVrX3RvID49IDUzKSB8fCBwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgd2Vla19zdGFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKCFwZXJpb2QgJiYgd2Vla19mcm9tID09PSAxICYmIHdlZWtfdG8gPT09IDUzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLyogU2hvcnRjdXQgYW5kIHdvcmsgYXJvdW5kIGJ1Zy4gKi9cbiAgICAgICAgICAgICAgICAgICAgICBydWxlLndlZWsucHVzaChmdW5jdGlvbigpIHsgcmV0dXJuIFt0cnVlXTsgfSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgcnVsZS53ZWVrLnB1c2goZnVuY3Rpb24od2Vla19mcm9tLCB3ZWVrX3RvLCBwZXJpb2QpIHsgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91cndlZWsgPSBnZXRXZWVrTnVtYmVyKGRhdGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwid2Vla19mcm9tOiAlcywgd2Vla190bzogJXNcIiwgd2Vla19mcm9tLCB3ZWVrX3RvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJvdXJ3ZWVrOiAlcywgZGF0ZTogJXNcIiwgb3Vyd2VlaywgZGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVmb3JlIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXJ3ZWVrIDwgd2Vla19mcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkJlZm9yZTogXCIgKyBnZXROZXh0RGF0ZU9mSVNPV2Vlayh3ZWVrX2Zyb20sIGRhdGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIGdldE5leHREYXRlT2ZJU09XZWVrKHdlZWtfZnJvbSwgZGF0ZSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgYWZ0ZXIgcmFuZ2UsIHNldCBjaGVjayBkYXRlIHRvIG5leHQgeWVhclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3Vyd2VlayA+IHdlZWtfdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQWZ0ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBnZXROZXh0RGF0ZU9mSVNPV2Vlayh3ZWVrX2Zyb20sIGRhdGUpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIGluIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbl9wZXJpb2QgPSAob3Vyd2VlayAtIHdlZWtfZnJvbSkgJSBwZXJpb2QgPT09IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5fcGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBnZXROZXh0RGF0ZU9mSVNPV2VlayhvdXJ3ZWVrICsgMSwgZGF0ZSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBnZXROZXh0RGF0ZU9mSVNPV2VlayhvdXJ3ZWVrICsgcGVyaW9kIC0gMSwgZGF0ZSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJNYXRjaFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBnZXROZXh0RGF0ZU9mSVNPV2Vlayh3ZWVrX3RvID09PSA1MyA/IDEgOiB3ZWVrX3RvICsgMSwgZGF0ZSldO1xuICAgICAgICAgICAgICAgICAgICAgIH19KHdlZWtfZnJvbSwgd2Vla190bywgcGVyaW9kKSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGF0ICs9IDEgKyAoaXNfcmFuZ2UgPyAyIDogMCkgKyAocGVyaW9kID8gMiA6IDApO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQgLSAxLCAnLCcpKSB7IC8vIGFkZGl0aW9uYWwgcnVsZVxuICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQgLSAxLCB0KCdhZGRpdGlvbmFsIHJ1bGUgbm8gc2Vuc2UnKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCwgdCgndW5leHBlY3RlZCB0b2tlbiB3ZWVrIHJhbmdlJywgeyd0b2tlbic6IHRva2Vuc1thdF1bMV19KSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIW1hdGNoVG9rZW5zKHRva2VucywgYXQsICcsJykpXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXQ7XG4gICAgICB9XG5cbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82MTE3ODg5XG4gICAgICAvKiBGb3IgYSBnaXZlbiBkYXRlLCBnZXQgdGhlIElTTyB3ZWVrIG51bWJlci5cbiAgICAgICAqXG4gICAgICAgKiBCYXNlZCBvbiBpbmZvcm1hdGlvbiBhdDpcbiAgICAgICAqXG4gICAgICAgKiAgICBodHRwOi8vd3d3Lm1lcmx5bi5kZW1vbi5jby51ay93ZWVrY2FsYy5odG0jV05SXG4gICAgICAgKlxuICAgICAgICogQWxnb3JpdGhtIGlzIHRvIGZpbmQgbmVhcmVzdCBUaHVyc2RheSwgaXQncyB5ZWFyXG4gICAgICAgKiBpcyB0aGUgeWVhciBvZiB0aGUgd2VlayBudW1iZXIuIFRoZW4gZ2V0IHdlZWtzXG4gICAgICAgKiBiZXR3ZWVuIHRoYXQgZGF0ZSBhbmQgdGhlIGZpcnN0IGRheSBvZiB0aGF0IHllYXIuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGF0IGRhdGVzIGluIG9uZSB5ZWFyIGNhbiBiZSB3ZWVrcyBvZiBwcmV2aW91c1xuICAgICAgICogb3IgbmV4dCB5ZWFyLCBvdmVybGFwIGlzIHVwIHRvIDMgZGF5cy5cbiAgICAgICAqXG4gICAgICAgKiBlLmcuIDIwMTQvMTIvMjkgaXMgTW9uZGF5IGluIHdlZWsgIDEgb2YgMjAxNVxuICAgICAgICogICAgICAyMDEyLzEvMSAgIGlzIFN1bmRheSBpbiB3ZWVrIDUyIG9mIDIwMTFcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2V0V2Vla051bWJlcihkKSB7XG4gICAgICAgICAgLy8gQ29weSBkYXRlIHNvIGRvbid0IG1vZGlmeSBvcmlnaW5hbFxuICAgICAgICAgIGQgPSBuZXcgRGF0ZSgrZCk7XG4gICAgICAgICAgZC5zZXRIb3VycygwLDAsMCwwKTtcbiAgICAgICAgICAvLyBTZXQgdG8gbmVhcmVzdCBUaHVyc2RheTogY3VycmVudCBkYXRlICsgNCAtIGN1cnJlbnQgZGF5IG51bWJlclxuICAgICAgICAgIC8vIE1ha2UgU3VuZGF5J3MgZGF5IG51bWJlciA3XG4gICAgICAgICAgZC5zZXREYXRlKGQuZ2V0RGF0ZSgpICsgNCAtIChkLmdldERheSgpfHw3KSk7XG4gICAgICAgICAgLy8gR2V0IGZpcnN0IGRheSBvZiB5ZWFyXG4gICAgICAgICAgdmFyIHllYXJTdGFydCA9IG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwwLDEpO1xuICAgICAgICAgIC8vIENhbGN1bGF0ZSBmdWxsIHdlZWtzIHRvIG5lYXJlc3QgVGh1cnNkYXlcbiAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKCggKCAoZCAtIHllYXJTdGFydCkgLyA4NjQwMDAwMCkgKyAxKS83KVxuICAgICAgfVxuICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NTkxMTc1XG4gICAgICBmdW5jdGlvbiBnZXREYXRlT2ZJU09XZWVrKHcsIHllYXIpIHtcbiAgICAgICAgICB2YXIgc2ltcGxlID0gbmV3IERhdGUoeWVhciwgMCwgMSArICh3IC0gMSkgKiA3KTtcbiAgICAgICAgICB2YXIgZG93ID0gc2ltcGxlLmdldERheSgpO1xuICAgICAgICAgIHZhciBJU093ZWVrU3RhcnQgPSBzaW1wbGU7XG4gICAgICAgICAgaWYgKGRvdyA8PSA0KVxuICAgICAgICAgICAgICBJU093ZWVrU3RhcnQuc2V0RGF0ZShzaW1wbGUuZ2V0RGF0ZSgpIC0gc2ltcGxlLmdldERheSgpICsgMSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBJU093ZWVrU3RhcnQuc2V0RGF0ZShzaW1wbGUuZ2V0RGF0ZSgpICsgOCAtIHNpbXBsZS5nZXREYXkoKSk7XG4gICAgICAgICAgcmV0dXJuIElTT3dlZWtTdGFydDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGdldE5leHREYXRlT2ZJU09XZWVrKHdlZWssIGRhdGUpIHtcbiAgICAgICAgICB2YXIgbmV4dF9kYXRlO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAtMTsgaSA8PSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgbmV4dF9kYXRlID0gZ2V0RGF0ZU9mSVNPV2Vlayh3ZWVrLCBkYXRlLmdldEZ1bGxZZWFyKCkgKyBpKTtcbiAgICAgICAgICAgICAgaWYgKG5leHRfZGF0ZS5nZXRUaW1lKCkgPiBkYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRfZGF0ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBmb3JtYXRMaWJyYXJ5QnVnTWVzc2FnZSgpO1xuICAgICAgfVxuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIE1vbnRoIHJhbmdlIHBhcnNlciAoSmFuLEZlYi1NYXIpLiB7e3tcbiAgICAgICAqXG4gICAgICAgKiA6cGFyYW0gdG9rZW5zOiBMaXN0IG9mIHRva2VuIG9iamVjdHMuXG4gICAgICAgKiA6cGFyYW0gYXQ6IFBvc2l0aW9uIHdoZXJlIHRvIHN0YXJ0LlxuICAgICAgICogOnBhcmFtIHB1c2hfdG9fbW9udGhkYXk6IFdpbGwgcHVzaCB0aGUgc2VsZWN0b3IgaW50byB0aGUgbW9udGhkYXkgc2VsZWN0b3IgYXJyYXkgd2hpY2ggaGFzIHRoZSBkZXNpcmVkIHNpZGUgZWZmZWN0IG9mIHdvcmtpbmcgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgbW9udGhkYXkgc2VsZWN0b3JzIChlaXRoZXIgdGhlIG1vbnRoIG1hdGNoIG9yIHRoZSBtb250aGRheSkuXG4gICAgICAgKiA6cmV0dXJuczogUG9zaXRpb24gYXQgd2hpY2ggdGhlIHRva2VuIGRvZXMgbm90IGJlbG9uZyB0byB0aGUgc2VsZWN0b3IgYW55bW9yZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcGFyc2VNb250aFJhbmdlKHRva2VucywgYXQsIHB1c2hfdG9fbW9udGhkYXksIGluX3NlbGVjdG9yKSB7XG4gICAgICAgICAgaWYgKCFpbl9zZWxlY3RvcilcbiAgICAgICAgICAgICAgdG9rZW5zW2F0XVszXSA9ICdtb250aCc7XG5cbiAgICAgICAgICBmb3IgKDsgYXQgPCB0b2tlbnMubGVuZ3RoOyBhdCsrKSB7XG4gICAgICAgICAgICAgIC8vIFVzZSBwYXJzZU1vbnRoZGF5UmFuZ2UgaWYgJzxtb250aD4gPGRheW51bT4nIGFuZCBub3QgJzxtb250aD4gPGhvdXI+OjxtaW51dGU+J1xuICAgICAgICAgICAgICBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ21vbnRoJywgJ251bWJlcicpICYmICFtYXRjaFRva2Vucyh0b2tlbnMsIGF0KzIsICd0aW1lc2VwJywgJ251bWJlcicpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VNb250aGRheVJhbmdlKHRva2VucywgYXQsIG5ydWxlLCB0cnVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnbW9udGgnKSkge1xuICAgICAgICAgICAgICAgICAgLy8gU2luZ2xlIG1vbnRoIChKYW4pIG9yIG1vbnRoIHJhbmdlIChGZWItTWFyKVxuICAgICAgICAgICAgICAgICAgdmFyIGlzX3JhbmdlID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdCsxLCAnLScsICdtb250aCcpO1xuXG4gICAgICAgICAgICAgICAgICB2YXIgbW9udGhfZnJvbSA9IHRva2Vuc1thdF1bMF07XG4gICAgICAgICAgICAgICAgICB2YXIgbW9udGhfdG8gPSBpc19yYW5nZSA/IHRva2Vuc1thdCsyXVswXSA6IG1vbnRoX2Zyb207XG5cbiAgICAgICAgICAgICAgICAgIGlmIChpc19yYW5nZSAmJiB3ZWVrX3N0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChtb250aF9mcm9tICE9PSAobW9udGhfdG8gKyAxKSAlIDEyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWVrX3N0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB3ZWVrX3N0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB2YXIgaW5zaWRlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHJldmVyc2VkIHJhbmdlXG4gICAgICAgICAgICAgICAgICBpZiAobW9udGhfdG8gPCBtb250aF9mcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IG1vbnRoX3RvO1xuICAgICAgICAgICAgICAgICAgICAgIG1vbnRoX3RvID0gbW9udGhfZnJvbSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgbW9udGhfZnJvbSA9IHRtcCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgaW5zaWRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uKG1vbnRoX2Zyb20sIG1vbnRoX3RvLCBpbnNpZGUpIHsgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgb3VybW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAobW9udGhfdG8gPCBtb250aF9mcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEhhbmRsZSBmdWxsIHJhbmdlLiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyFpbnNpZGVdO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXJtb250aCA8IG1vbnRoX2Zyb20gfHwgb3VybW9udGggPiBtb250aF90bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyFpbnNpZGUsIGRhdGVBdE5leHRNb250aChkYXRlLCBtb250aF9mcm9tKV07XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtpbnNpZGUsIGRhdGVBdE5leHRNb250aChkYXRlLCBtb250aF90byArIDEpXTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9fShtb250aF9mcm9tLCBtb250aF90bywgaW5zaWRlKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHB1c2hfdG9fbW9udGhkYXkgPT09IHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgcnVsZS5tb250aGRheS5wdXNoKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICBydWxlLm1vbnRoLnB1c2goc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgICBhdCArPSBpc19yYW5nZSA/IDMgOiAxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQsIHQoJ3VuZXhwZWN0ZWQgdG9rZW4gbW9udGggcmFuZ2UnLCB7J3Rva2VuJzogdG9rZW5zW2F0XVsxXX0pKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghbWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJywnKSlcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGF0ZUF0TmV4dE1vbnRoKGRhdGUsIG1vbnRoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgbW9udGggPCBkYXRlLmdldE1vbnRoKCkgPyBtb250aCArIDEyIDogbW9udGgpO1xuICAgICAgfVxuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIE1vbnRoIGRheSByYW5nZSBwYXJzZXIgKEphbiAyNi0zMTsgSmFuIDI2LUZlYiAyNikuIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB0b2tlbnM6IExpc3Qgb2YgdG9rZW4gb2JqZWN0cy5cbiAgICAgICAqIDpwYXJhbSBhdDogUG9zaXRpb24gd2hlcmUgdG8gc3RhcnQuXG4gICAgICAgKiA6cGFyYW0gbnJ1bGU6IFJ1bGUgbnVtYmVyIHN0YXJ0aW5nIHdpdGggMC5cbiAgICAgICAqIDpwYXJhbSBwdXNoX3RvX21vbnRoOiBXaWxsIHB1c2ggdGhlIHNlbGVjdG9yIGludG8gdGhlIG1vbnRoIHNlbGVjdG9yIGFycmF5IHdoaWNoIGhhcyB0aGUgZGVzaXJlZCBzaWRlIGVmZmVjdCBvZiB3b3JraW5nIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIG1vbnRoIHNlbGVjdG9ycyAoZWl0aGVyIHRoZSBtb250aCBtYXRjaCBvciB0aGUgbW9udGhkYXkpLlxuICAgICAgICogOnJldHVybnM6IFBvc2l0aW9uIGF0IHdoaWNoIHRoZSB0b2tlbiBkb2VzIG5vdCBiZWxvbmcgdG8gdGhlIHNlbGVjdG9yIGFueW1vcmUuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHBhcnNlTW9udGhkYXlSYW5nZSh0b2tlbnMsIGF0LCBucnVsZSwgcHVzaF90b19tb250aCkge1xuICAgICAgICAgIGlmICghcHVzaF90b19tb250aClcbiAgICAgICAgICAgICAgdG9rZW5zW2F0XVszXSA9ICdtb250aCc7XG5cbiAgICAgICAgICBmb3IgKDsgYXQgPCB0b2tlbnMubGVuZ3RoOyBhdCsrKSB7XG4gICAgICAgICAgICAgIHZhciBoYXNfeWVhciA9IFtdLCBoYXNfbW9udGggPSBbXSwgaGFzX2V2ZW50ID0gW10sIGhhc19jYWxjID0gW10sIGhhc19jb25zdHJhaW5lZF93ZWVrZGF5ID0gW107XG4gICAgICAgICAgICAgIGhhc195ZWFyWzBdICA9IG1hdGNoVG9rZW5zKHRva2VucywgYXQsICd5ZWFyJyk7XG4gICAgICAgICAgICAgIGhhc19tb250aFswXSA9IG1hdGNoVG9rZW5zKHRva2VucywgYXQraGFzX3llYXJbMF0sICdtb250aCcsICdudW1iZXInKTtcbiAgICAgICAgICAgICAgaGFzX2V2ZW50WzBdID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdCtoYXNfeWVhclswXSwgJ2V2ZW50Jyk7XG5cbiAgICAgICAgICAgICAgaWYgKGhhc19ldmVudFswXSlcbiAgICAgICAgICAgICAgICAgIGhhc19jYWxjWzBdID0gZ2V0TW92ZURheXModG9rZW5zLCBhdCtoYXNfeWVhclswXSsxLCAyMDAsICdldmVudCBsaWtlIGVhc3RlcicpO1xuXG4gICAgICAgICAgICAgIHZhciBhdF9yYW5nZV9zZXA7XG4gICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0K2hhc195ZWFyWzBdLCAnbW9udGgnLCAnd2Vla2RheScsICdbJykpIHtcbiAgICAgICAgICAgICAgICAgIGhhc19jb25zdHJhaW5lZF93ZWVrZGF5WzBdID0gZ2V0Q29uc3RyYWluZWRXZWVrZGF5KHRva2VucywgYXQraGFzX3llYXJbMF0rMyk7XG4gICAgICAgICAgICAgICAgICBoYXNfY2FsY1swXSA9IGdldE1vdmVEYXlzKHRva2VucywgaGFzX2NvbnN0cmFpbmVkX3dlZWtkYXlbMF1bMV0sIDYsICdjb25zdHJhaW5lZCB3ZWVrZGF5cycpO1xuICAgICAgICAgICAgICAgICAgYXRfcmFuZ2Vfc2VwID0gaGFzX2NvbnN0cmFpbmVkX3dlZWtkYXlbMF1bMV0gKyAodHlwZW9mIGhhc19jYWxjWzBdID09PSAnb2JqZWN0JyAmJiBoYXNfY2FsY1swXVsxXSA/IDMgOiAwKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGF0X3JhbmdlX3NlcCA9IGF0K2hhc195ZWFyWzBdXG4gICAgICAgICAgICAgICAgICAgICAgKyAoaGFzX2V2ZW50WzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKHR5cGVvZiBoYXNfY2FsY1swXSA9PT0gJ29iamVjdCcgJiYgaGFzX2NhbGNbMF1bMV0gPyA0IDogMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAyKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBhdF9zZWNfZXZlbnRfb3JfbW9udGg7XG4gICAgICAgICAgICAgIGlmICgoaGFzX21vbnRoWzBdIHx8IGhhc19ldmVudFswXSB8fCBoYXNfY29uc3RyYWluZWRfd2Vla2RheVswXSkgJiYgbWF0Y2hUb2tlbnModG9rZW5zLCBhdF9yYW5nZV9zZXAsICctJykpIHtcbiAgICAgICAgICAgICAgICAgIGhhc195ZWFyWzFdID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdF9yYW5nZV9zZXArMSwgJ3llYXInKTtcbiAgICAgICAgICAgICAgICAgIGF0X3NlY19ldmVudF9vcl9tb250aCA9IGF0X3JhbmdlX3NlcCsxK2hhc195ZWFyWzFdO1xuICAgICAgICAgICAgICAgICAgaGFzX21vbnRoWzFdID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdF9zZWNfZXZlbnRfb3JfbW9udGgsICdtb250aCcsICdudW1iZXInKTtcbiAgICAgICAgICAgICAgICAgIGlmICghaGFzX21vbnRoWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaGFzX2V2ZW50WzFdID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdF9zZWNfZXZlbnRfb3JfbW9udGgsICdldmVudCcpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNfZXZlbnRbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzX2NhbGNbMV0gPSBnZXRNb3ZlRGF5cyh0b2tlbnMsIGF0X3NlY19ldmVudF9vcl9tb250aCsxLCAzNjYsICdldmVudCBsaWtlIGVhc3RlcicpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdF9zZWNfZXZlbnRfb3JfbW9udGgsICdtb250aCcsICd3ZWVrZGF5JywgJ1snKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNfY29uc3RyYWluZWRfd2Vla2RheVsxXSA9IGdldENvbnN0cmFpbmVkV2Vla2RheSh0b2tlbnMsIGF0X3NlY19ldmVudF9vcl9tb250aCszKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzX2NhbGNbMV0gPSBnZXRNb3ZlRGF5cyh0b2tlbnMsIGhhc19jb25zdHJhaW5lZF93ZWVrZGF5WzFdWzFdLCA2LCAnY29uc3RyYWluZWQgd2Vla2RheXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBtb250aGRheSByYW5nZSBsaWtlIEphbiAyNi1GZWIgMjYge3t7XG4gICAgICAgICAgICAgIGlmIChoYXNfeWVhclswXSA9PT0gaGFzX3llYXJbMV0gJiYgKGhhc19tb250aFsxXSB8fCBoYXNfZXZlbnRbMV0gfHwgaGFzX2NvbnN0cmFpbmVkX3dlZWtkYXlbMV0pKSB7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChoYXNfbW9udGhbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgY2hlY2tJZkRhdGVJc1ZhbGlkKHRva2Vuc1thdCtoYXNfeWVhclswXV1bMF0sIHRva2Vuc1thdCtoYXNfeWVhclswXSsxXVswXSwgbnJ1bGUsIGF0K2hhc195ZWFyWzBdKzEpO1xuICAgICAgICAgICAgICAgICAgaWYgKGhhc19tb250aFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICBjaGVja0lmRGF0ZUlzVmFsaWQodG9rZW5zW2F0X3NlY19ldmVudF9vcl9tb250aF1bMF0sIHRva2Vuc1thdF9zZWNfZXZlbnRfb3JfbW9udGgrMV1bMF0sIG5ydWxlLCBhdF9zZWNfZXZlbnRfb3JfbW9udGgrMSk7XG5cbiAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uKHRva2VucywgYXQsIG5ydWxlLCBoYXNfeWVhciwgaGFzX2V2ZW50LCBoYXNfY2FsYywgYXRfc2VjX2V2ZW50X29yX21vbnRoLCBoYXNfY29uc3RyYWluZWRfd2Vla2RheSkgeyByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydF9vZl9uZXh0X3llYXIgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCkgKyAxLCAwLCAxKTtcblxuICAgICAgICAgICAgICAgICAgICAgIHZhciBtb3ZhYmxlRGF5cywgZnJvbV9kYXRlO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNfZXZlbnRbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW92YWJsZURheXMgPSBnZXRNb3ZhYmxlRXZlbnRzRm9yWWVhcihoYXNfeWVhclswXSA/IHBhcnNlSW50KHRva2Vuc1thdF1bMF0pIDogZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbV9kYXRlID0gbW92YWJsZURheXNbdG9rZW5zW2F0K2hhc195ZWFyWzBdXVswXV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBoYXNfY2FsY1swXSA9PT0gJ29iamVjdCcgJiYgaGFzX2NhbGNbMF1bMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcm9tX3llYXJfYmVmb3JlX2NhbGMgPSBmcm9tX2RhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fZGF0ZS5zZXREYXRlKGZyb21fZGF0ZS5nZXREYXRlKCkgKyBoYXNfY2FsY1swXVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbV95ZWFyX2JlZm9yZV9jYWxjICE9PSBmcm9tX2RhdGUuZ2V0RnVsbFllYXIoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCtoYXNfeWVhclswXStoYXNfY2FsY1swXVsxXSozLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0KCdtb3ZhYmxlIG5vdCBpbiB5ZWFyJywgeyduYW1lJzogdG9rZW5zW2F0K2hhc195ZWFyWzBdXVswXSwgJ2RheXMnOiBoYXNfY2FsY1swXVswXX0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzX2NvbnN0cmFpbmVkX3dlZWtkYXlbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbV9kYXRlID0gZ2V0RGF0ZUZvckNvbnN0cmFpbmVkV2Vla2RheSgoaGFzX3llYXJbMF0gPyB0b2tlbnNbYXRdWzBdIDogZGF0ZS5nZXRGdWxsWWVhcigpKSwgLy8geWVhclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zW2F0K2hhc195ZWFyWzBdXVswXSwgLy8gbW9udGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2Vuc1thdCtoYXNfeWVhclswXSsxXVswXSwgLy8gd2Vla2RheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzX2NvbnN0cmFpbmVkX3dlZWtkYXlbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNfY2FsY1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbV9kYXRlID0gbmV3IERhdGUoKGhhc195ZWFyWzBdID8gdG9rZW5zW2F0XVswXSA6IGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnNbYXQraGFzX3llYXJbMF1dWzBdLCB0b2tlbnNbYXQraGFzX3llYXJbMF0rMV1bMF0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIHZhciB0b19kYXRlO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNfZXZlbnRbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW92YWJsZURheXMgPSBnZXRNb3ZhYmxlRXZlbnRzRm9yWWVhcihoYXNfeWVhclsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHRva2Vuc1thdF9zZWNfZXZlbnRfb3JfbW9udGgtMV1bMF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9fZGF0ZSA9IG1vdmFibGVEYXlzW3Rva2Vuc1thdF9zZWNfZXZlbnRfb3JfbW9udGhdWzBdXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhc19jYWxjWzFdID09PSAnb2JqZWN0JyAmJiBoYXNfY2FsY1sxXVsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvX3llYXJfYmVmb3JlX2NhbGMgPSB0b19kYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b19kYXRlLnNldERhdGUodG9fZGF0ZS5nZXREYXRlKCkgKyBoYXNfY2FsY1sxXVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9feWVhcl9iZWZvcmVfY2FsYyAhPT0gdG9fZGF0ZS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXRfc2VjX2V2ZW50X29yX21vbnRoK2hhc19jYWxjWzFdWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0KCdtb3ZhYmxlIG5vdCBpbiB5ZWFyJywgeyduYW1lJzogdG9rZW5zW2F0X3NlY19ldmVudF9vcl9tb250aF1bMF0sICdkYXlzJzogIGhhc19jYWxjWzFdWzBdIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzX2NvbnN0cmFpbmVkX3dlZWtkYXlbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9fZGF0ZSA9IGdldERhdGVGb3JDb25zdHJhaW5lZFdlZWtkYXkoKGhhc195ZWFyWzFdID8gdG9rZW5zW2F0X3NlY19ldmVudF9vcl9tb250aC0xXVswXSA6IGRhdGUuZ2V0RnVsbFllYXIoKSksIC8vIHllYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2Vuc1thdF9zZWNfZXZlbnRfb3JfbW9udGhdWzBdLCAgIC8vIG1vbnRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnNbYXRfc2VjX2V2ZW50X29yX21vbnRoKzFdWzBdLCAvLyB3ZWVrZGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNfY29uc3RyYWluZWRfd2Vla2RheVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc19jYWxjWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0b19kYXRlID0gbmV3IERhdGUoKGhhc195ZWFyWzFdID8gdG9rZW5zW2F0X3NlY19ldmVudF9vcl9tb250aC0xXVswXSA6IGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnNbYXRfc2VjX2V2ZW50X29yX21vbnRoXVswXSwgdG9rZW5zW2F0X3NlY19ldmVudF9vcl9tb250aCsxXVswXSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnNpZGUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRvX2RhdGUgPCBmcm9tX2RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IHRvX2RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRvX2RhdGUgPSBmcm9tX2RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fZGF0ZSA9IHRtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zaWRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUuZ2V0VGltZSgpIDwgZnJvbV9kYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyFpbnNpZGUsIGZyb21fZGF0ZV07XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA8IHRvX2RhdGUuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbaW5zaWRlLCB0b19kYXRlXTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzX3llYXJbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIWluc2lkZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyFpbnNpZGUsIHN0YXJ0X29mX25leHRfeWVhcl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9fSh0b2tlbnMsIGF0LCBucnVsZSwgaGFzX3llYXIsIGhhc19ldmVudCwgaGFzX2NhbGMsIGF0X3NlY19ldmVudF9vcl9tb250aCwgaGFzX2NvbnN0cmFpbmVkX3dlZWtkYXkpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAocHVzaF90b19tb250aCA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICBydWxlLm1vbnRoLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgIHJ1bGUubW9udGhkYXkucHVzaChzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgICAgICAgIGF0ID0gKGhhc19jb25zdHJhaW5lZF93ZWVrZGF5WzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gaGFzX2NvbnN0cmFpbmVkX3dlZWtkYXlbMV1bMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhdF9zZWNfZXZlbnRfb3JfbW9udGggKyAoaGFzX2V2ZW50WzFdID8gMSA6IDIpKVxuICAgICAgICAgICAgICAgICAgICAgICsgKHR5cGVvZiBoYXNfY2FsY1sxXSA9PT0gJ29iamVjdCcgPyBoYXNfY2FsY1sxXVsxXSA6IDApO1xuXG4gICAgICAgICAgICAgICAgICAvKiB9fX0gKi9cbiAgICAgICAgICAgICAgICAgIC8vIE1vbnRoZGF5IHJhbmdlIGxpa2UgSmFuIDI2LTMxIHt7e1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc19tb250aFswXSkge1xuXG4gICAgICAgICAgICAgICAgICBoYXNfeWVhciA9IGhhc195ZWFyWzBdO1xuICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSB0b2tlbnNbYXRdWzBdOyAvLyBDb3VsZCBiZSBtb250aCBpZiBoYXMgbm8geWVhci4gVGVzdGVkIGxhdGVyLlxuICAgICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gdG9rZW5zW2F0K2hhc195ZWFyXVswXTtcblxuICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0X3JvdW5kID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5nZV9mcm9tID0gdG9rZW5zW2F0KzEgKyBoYXNfeWVhcl1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGlzX3JhbmdlID0gbWF0Y2hUb2tlbnModG9rZW5zLCBhdCsyK2hhc195ZWFyLCAnLScsICdudW1iZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVyaW9kID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5nZV90byA9IHRva2Vuc1thdCtoYXNfeWVhcisoaXNfcmFuZ2UgPyAzIDogMSldWzBdICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfcmFuZ2UgJiYgbWF0Y2hUb2tlbnModG9rZW5zLCBhdCtoYXNfeWVhcis0LCAnLycsICdudW1iZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJpb2QgPSB0b2tlbnNbYXQraGFzX3llYXIrNV1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRva2Vuc1thdCtoYXNfeWVhcis1XVs0XSA9ICdwb3NpdGl2ZV9udW1iZXInO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1BlcmlvZChhdCtoYXNfeWVhcis1LCBwZXJpb2QsICdkYXknKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3Rfcm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0X3RpbWVzZXBfaWZfbW9udGhSYW5nZSA9IGF0ICsgaGFzX3llYXIgKyAxIC8vIGF0IG1vbnRoIG51bWJlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoaXNfcmFuZ2UgPyAyIDogMCkgKyAocGVyaW9kID8gMiA6IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICEoaXNfcmFuZ2UgfHwgcGVyaW9kKTsgLy8gaWYgbm90IHJhbmdlIG5vciBoYXMgcGVyaW9kLCBhZGQgb25lXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yICc8bW9udGg+IDx0aW1lc3Bhbj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0X3RpbWVzZXBfaWZfbW9udGhSYW5nZSwgJ3RpbWVzZXAnLCAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdF90aW1lc2VwX2lmX21vbnRoUmFuZ2UrMiwgJysnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBtYXRjaFRva2Vucyh0b2tlbnMsIGF0X3RpbWVzZXBfaWZfbW9udGhSYW5nZSsyLCAnLScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IG9oX21vZGUgIT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VNb250aFJhbmdlKHRva2VucywgYXQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3IgY2hlY2tpbmcge3t7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlX3RvIDwgcmFuZ2VfZnJvbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZm9ybWF0V2FybkVycm9yTWVzc2FnZShucnVsZSwgYXQraGFzX3llYXIrMywgdCgnZGF5IHJhbmdlIHJldmVyc2UnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjaGVja0lmRGF0ZUlzVmFsaWQobW9udGgsIHJhbmdlX2Zyb20sIG5ydWxlLCBhdCsxICsgaGFzX3llYXIpO1xuICAgICAgICAgICAgICAgICAgICAgIGNoZWNrSWZEYXRlSXNWYWxpZChtb250aCwgcmFuZ2VfdG8gLSAxIC8qIGFkZGVkIHByZXZpb3VzbHkgKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ydWxlLCBhdCtoYXNfeWVhcisoaXNfcmFuZ2UgPyAzIDogMSkpO1xuICAgICAgICAgICAgICAgICAgICAgIC8qIH19fSAqL1xuXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gZnVuY3Rpb24oeWVhciwgaGFzX3llYXIsIG1vbnRoLCByYW5nZV9mcm9tLCByYW5nZV90bywgcGVyaW9kKSB7IHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydF9vZl9uZXh0X3llYXIgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCkgKyAxLCAwLCAxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbV9kYXRlID0gbmV3IERhdGUoaGFzX3llYXIgPyB5ZWFyIDogZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9udGgsIHJhbmdlX2Zyb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9udGggPT09IDEgJiYgcmFuZ2VfZnJvbSAhPT0gZnJvbV9kYXRlLmdldERhdGUoKSkgLy8gT25seSBvbiBsZWFwIHllYXJzIGRvZXMgdGhpcyBkYXkgZXhpc3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlXTsgLy8gSWYgZGF5IDI5IGRvZXMgbm90IGV4aXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gdGhlIGRhdGUgb2JqZWN0IGFkZHMgb25lIGRheSB0byBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHRoaXMgc2VsZWN0b3Igc2hvdWxkIG5vdCBtYXRjaC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvX2RhdGUgICA9IG5ldyBEYXRlKGZyb21fZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9udGgsIHJhbmdlX3RvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vbnRoID09PSAxICYmIGlzX3JhbmdlICYmIHJhbmdlX3RvICE9PSB0b19kYXRlLmdldERhdGUoKSkgLy8gT25seSBvbiBsZWFwIHllYXJzIGRvZXMgdGhpcyBkYXkgZXhpc3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZS5nZXRUaW1lKCkgPCBmcm9tX2RhdGUuZ2V0VGltZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgZnJvbV9kYXRlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gdG9fZGF0ZS5nZXRUaW1lKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBzdGFydF9vZl9uZXh0X3llYXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghcGVyaW9kKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCB0b19kYXRlXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmRheSA9IE1hdGguZmxvb3IoKGRhdGUuZ2V0VGltZSgpIC0gZnJvbV9kYXRlLmdldFRpbWUoKSkgLyBtc2VjX2luX2RheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbl9wZXJpb2QgPSBuZGF5ICUgcGVyaW9kO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbl9wZXJpb2QgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RydWUsIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSArIDEpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpICsgcGVyaW9kIC0gaW5fcGVyaW9kKV07XG5cbiAgICAgICAgICAgICAgICAgICAgICB9fSh5ZWFyLCBoYXNfeWVhciwgbW9udGgsIHJhbmdlX2Zyb20sIHJhbmdlX3RvLCBwZXJpb2QpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHB1c2hfdG9fbW9udGggPT09IHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUubW9udGgucHVzaChzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLm1vbnRoZGF5LnB1c2goc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgYXQgKz0gMiArIGhhc195ZWFyICsgKGlzX3JhbmdlID8gMiA6IDApICsgKHBlcmlvZCA/IDIgOiAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X3JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB3aGlsZSAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJywnLCAnbnVtYmVyJykpXG5cblxuICAgICAgICAgICAgICAgICAgLyogfX19ICovXG4gICAgICAgICAgICAgICAgICAvLyBPbmx5IGV2ZW50IGxpa2UgZWFzdGVyIHt7e1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc19ldmVudFswXSkge1xuXG4gICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBmdW5jdGlvbih0b2tlbnMsIGF0LCBucnVsZSwgaGFzX3llYXIsIGFkZF9kYXlzKSB7IHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXIgc2VsZWN0b3Igd2l0aCBkYXRlOiAnICsgZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIG1vdmFibGVEYXlzID0gZ2V0TW92YWJsZUV2ZW50c0ZvclllYXIoKGhhc195ZWFyID8gdG9rZW5zW2F0XVswXSA6IGRhdGUuZ2V0RnVsbFllYXIoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudF9kYXRlID0gbW92YWJsZURheXNbdG9rZW5zW2F0K2hhc195ZWFyXVswXV07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudF9kYXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB0KCdtb3ZhYmxlIG5vIGZvcm11bGEnLCB7J25hbWUnOiB0b2tlbnNbYXQraGFzX3llYXJdWzBdfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkX2RheXNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRfZGF0ZS5zZXREYXRlKGV2ZW50X2RhdGUuZ2V0RGF0ZSgpICsgYWRkX2RheXNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZS5nZXRGdWxsWWVhcigpICE9PSBldmVudF9kYXRlLmdldEZ1bGxZZWFyKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBmb3JtYXRXYXJuRXJyb3JNZXNzYWdlKG5ydWxlLCBhdCtoYXNfeWVhcithZGRfZGF5c1sxXSwgdCgnbW92YWJsZSBub3QgaW4geWVhcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IHRva2Vuc1thdCtoYXNfeWVhcl1bMF0sICdkYXlzJzogYWRkX2RheXNbMF19KSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGUuZ2V0VGltZSgpIDwgZXZlbnRfZGF0ZS5nZXRUaW1lKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIGV2ZW50X2RhdGVdO1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpIDwgZXZlbnRfZGF0ZS5nZXRUaW1lKCkgKyBtc2VjX2luX2RheSkgLy8gZG9lcyBub3Qgd29yayBiZWNhdXNlIG9mIGRheWxpZ2h0IHNhdmluZyB0aW1lc1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50X2RhdGUuZ2V0TW9udGgoKSAqIDEwMCArIGV2ZW50X2RhdGUuZ2V0RGF0ZSgpID09PSBkYXRlLmdldE1vbnRoKCkgKiAxMDAgKyBkYXRlLmdldERhdGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkgKyAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCkgKyAxLCAwLCAxKV07XG5cbiAgICAgICAgICAgICAgICAgIH19KHRva2VucywgYXQsIG5ydWxlLCBoYXNfeWVhclswXSwgaGFzX2NhbGNbMF0pO1xuXG4gICAgICAgICAgICAgICAgICBpZiAocHVzaF90b19tb250aCA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICBydWxlLm1vbnRoLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgIHJ1bGUubW9udGhkYXkucHVzaChzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgICAgICAgIGF0ICs9IGhhc195ZWFyWzBdICsgaGFzX2V2ZW50WzBdICsgKHR5cGVvZiBoYXNfY2FsY1swXVsxXSA9PT0gJ251bWJlcicgJiYgaGFzX2NhbGNbMF1bMV0gPyAzIDogMCk7XG4gICAgICAgICAgICAgICAgICAvKiB9fX0gKi9cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNfY29uc3RyYWluZWRfd2Vla2RheVswXSkge1xuICAgICAgICAgICAgICAgICAgYXQgPSBwYXJzZU1vbnRoUmFuZ2UodG9rZW5zLCBhdCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ21vbnRoJykpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZU1vbnRoUmFuZ2UodG9rZW5zLCBhdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyB0aHJvdyAnVW5leHBlY3RlZCB0b2tlbiBpbiBtb250aGRheSByYW5nZTogXCInICsgdG9rZW5zW2F0XSArICdcIic7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYXQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIW1hdGNoVG9rZW5zKHRva2VucywgYXQsICcsJykpXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXQ7XG4gICAgICB9XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogTWFpbiBzZWxlY3RvciB0cmF2ZXJzYWwgZnVuY3Rpb24gKHJldHVybiBzdGF0ZSBhcnJheSBmb3IgZGF0ZSkuIHt7e1xuICAgICAgICogQ2hlY2tzIGZvciBnaXZlbiBkYXRlIHdoaWNoIHJ1bGUgYW5kIHRob3NlIHdoaWNoIHN0YXRlIGFuZCBjb21tZW50IGFwcGxpZXMuXG4gICAgICAgKlxuICAgICAgICogOnBhcmFtIGRhdGU6IERhdGUgb2JqZWN0LlxuICAgICAgICogOnJldHVybnM6IEFycmF5OlxuICAgICAgICogICAgICAgICAgICAwLiByZXN1bHRzdGF0ZTogU3RhdGU6IHRydWUgZm9yICdvcGVuJywgZmFsc2UgZm9yICdjbG9zZWQnLlxuICAgICAgICogICAgICAgICAgICAxLiBjaGFuZ2VkYXRlOiBOZXh0IGNoYW5nZSBhcyBkYXRlIG9iamVjdC5cbiAgICAgICAqICAgICAgICAgICAgMi4gdW5rbm93bjogdHJ1ZSBpZiBzdGF0ZSBvcGVuIGlzIG5vdCBzdXJlLlxuICAgICAgICogICAgICAgICAgICAzLiBjb21tZW50OiBDb21tZW50IHdoaWNoIGFwcGxpZXMgZm9yIHRoaXMgdGltZSByYW5nZSAoZnJvbSBkYXRlIHRvIGNoYW5nZWRhdGUpLlxuICAgICAgICogICAgICAgICAgICA0LiBtYXRjaF9ydWxlOiBSdWxlIG51bWJlciBzdGFydGluZyB3aXRoIDAgKG5ydWxlKS5cbiAgICAgICAqL1xuICAgICAgdGhpcy5nZXRTdGF0ZVBhaXIgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdHN0YXRlID0gZmFsc2U7XG4gICAgICAgICAgdmFyIGNoYW5nZWRhdGU7XG4gICAgICAgICAgdmFyIHVua25vd24gPSBmYWxzZTtcbiAgICAgICAgICB2YXIgY29tbWVudDtcbiAgICAgICAgICB2YXIgbWF0Y2hfcnVsZTtcblxuICAgICAgICAgIHZhciBkYXRlX21hdGNoaW5nX3J1bGVzID0gW107XG5cbiAgICAgICAgICAvKiBHbyB0aG91Z2ggYWxsIGRhdGUgc2VsZWN0b3JzIGFuZCBjaGVjayBpZiB0aGV5IHJldHVybiBzb21ldGhpbmdcbiAgICAgICAgICAgKiBlbHNlIHRoYW4gY2xvc2VkIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmb3IgKHZhciBucnVsZSA9IDA7IG5ydWxlIDwgcnVsZXMubGVuZ3RoOyBucnVsZSsrKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRjaGluZ19kYXRlX3J1bGUgPSB0cnVlO1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhucnVsZSwgJ2xlbmd0aCcsICBydWxlc1tucnVsZV0uZGF0ZS5sZW5ndGgpO1xuXG4gICAgICAgICAgICAgIC8qIFRyeSBlYWNoIGRhdGUgc2VsZWN0b3IgdHlwZS4gKi9cbiAgICAgICAgICAgICAgZm9yICh2YXIgbmRhdGVzZWxlY3RvciA9IDA7IG5kYXRlc2VsZWN0b3IgPCBydWxlc1tucnVsZV0uZGF0ZS5sZW5ndGg7IG5kYXRlc2VsZWN0b3IrKykge1xuICAgICAgICAgICAgICAgICAgdmFyIGRhdGVzZWxlY3RvcnMgPSBydWxlc1tucnVsZV0uZGF0ZVtuZGF0ZXNlbGVjdG9yXTtcbiAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG5ydWxlLCBuZGF0ZXNlbGVjdG9yKTtcblxuICAgICAgICAgICAgICAgICAgdmFyIGhhc19tYXRjaGluZ19zZWxlY3RvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZGF0ZXNlbCA9IDA7IGRhdGVzZWwgPCBkYXRlc2VsZWN0b3JzLmxlbmd0aDsgZGF0ZXNlbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IGRhdGVzZWxlY3RvcnNbZGF0ZXNlbF0oZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNfbWF0Y2hpbmdfc2VsZWN0b3IgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzWzJdID09PSAnc3RyaW5nJykgeyAvLyBob2xpZGF5IG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBbIHJlc1syXSwgbnJ1bGUgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2hhbmdlZGF0ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgKHR5cGVvZiByZXNbMV0gPT09ICdvYmplY3QnICYmIHJlc1sxXS5nZXRUaW1lKCkgPCBjaGFuZ2VkYXRlLmdldFRpbWUoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWRhdGUgPSByZXNbMV07XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmICghaGFzX21hdGNoaW5nX3NlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmdfZGF0ZV9ydWxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuIGlnbm9yZSBvdGhlciBkYXRlIHNlbGVjdG9ycywgYXMgdGhlIHN0YXRlIHdvbid0IGNoYW5nZVxuICAgICAgICAgICAgICAgICAgICAgIC8vIGFueXdheSB1bnRpbCBUSElTIHNlbGVjdG9yIG1hdGNoZXMgKGR1ZSB0byBjb25qdW5jdGlvbiBvZiBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgLy8gc2VsZWN0b3JzIG9mIGRpZmZlcmVudCB0eXBlcykuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbHNvIGFuIG9wdGltaXphdGlvbiwgaWYgd2lkZXN0IGRhdGUgc2VsZWN0b3IgdHlwZXNcbiAgICAgICAgICAgICAgICAgICAgICAvLyBhcmUgY2hlY2tlZCBmaXJzdC5cbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChtYXRjaGluZ19kYXRlX3J1bGUpIHtcbiAgICAgICAgICAgICAgICAgIC8qIFRoZSBmb2xsb3dpbmcgbGluZXMgaW1wbGVtZW50IGRhdGUgb3ZlcndyaXRpbmcgbG9naWMgKGUuZy4gZm9yXG4gICAgICAgICAgICAgICAgICAgKiBcIk1vLUZyIDEwOjAwLTIwOjAwOyBXZSAxMDowMC0xNjowMFwiLCBXZSBydWxlIG92ZXJyaWRlcyBNby1GciBydWxlIHBhcnRseSAoV2UpLlxuICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAqIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIGJlIGNvbnNpc3RlbnQuIEkgdGhvdWdodCBhYm91dCAoXCIyMjowMC0wMjowMDsgVHUgMTI6MDAtMTQ6MDBcIikgbGV0dGluZyBUaCBvdmVycmlkZSAyMjowMC0wMjowMCBwYXJ0bHk6XG4gICAgICAgICAgICAgICAgICAgKiBMaWtlOiBUaCAwMDowMC0wMjowMCwxMjowMC0xNDowMCBidXQgdGhpcyB3b3VsZCByZXN1bHQgaW4gaW5jbHVkaW5nIDIyOjAwLTAwOjAwIGZvciBUaCB3aGljaCBpcyBwcm9iYWJseSBub3Qgd2hhdCB5b3Ugd2FudC5cbiAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgaWYgKChydWxlc1tucnVsZV0uZGF0ZS5sZW5ndGggPiAwIHx8IG5ydWxlID4gMCAmJiBydWxlc1tucnVsZV0ubWVhbmluZyAmJiBydWxlc1tucnVsZS0xXS5kYXRlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKHJ1bGVzW25ydWxlXS5tZWFuaW5nIHx8IHJ1bGVzW25ydWxlXS51bmtub3duKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAhcnVsZXNbbnJ1bGVdLndyYXBwZWQgJiYgIXJ1bGVzW25ydWxlXS5hZGRpdGlvbmFsICYmICFydWxlc1tucnVsZV0uZmFsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgIC8vIHZhciBvbGRfZGF0ZV9tYXRjaGluZ19ydWxlcyA9IGRhdGVfbWF0Y2hpbmdfcnVsZXM7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0ZV9tYXRjaGluZ19ydWxlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciAodmFyIG5ydWxlID0gMDsgbnJ1bGUgPCBvbGRfZGF0ZV9tYXRjaGluZ19ydWxlcy5sZW5ndGg7IG5ydWxlKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYgKCFydWxlc1tvbGRfZGF0ZV9tYXRjaGluZ19ydWxlc1tucnVsZV1dLndyYXBwZWQpXG4gICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBkYXRlX21hdGNoaW5nX3J1bGVzLnB1c2gobnJ1bGUpO1xuICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGRhdGVfbWF0Y2hpbmdfcnVsZXMucHVzaChucnVsZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRlX21hdGNoaW5nX3J1bGVzKTtcbiAgICAgICAgICBmb3IgKHZhciBucnVsZSA9IDA7IG5ydWxlIDwgZGF0ZV9tYXRjaGluZ19ydWxlcy5sZW5ndGg7IG5ydWxlKyspIHtcbiAgICAgICAgICAgICAgdmFyIHJ1bGUgPSBkYXRlX21hdGNoaW5nX3J1bGVzW25ydWxlXTtcblxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnUHJvY2Vzc2luZyBydWxlICcgKyBydWxlICsgJzogd2l0aCBkYXRlICcgKyBkYXRlXG4gICAgICAgICAgICAgICAgICAvLyArICcgYW5kICcgKyBydWxlc1tydWxlXS50aW1lLmxlbmd0aCArICcgdGltZSBzZWxlY3RvcnMgKGNvbW1lbnQ6IFwiJyArIHJ1bGVzW3J1bGVdLmNvbW1lbnQgKyAnXCIpLicpO1xuXG4gICAgICAgICAgICAgIC8qIFRoZXJlIGlzIG5vIHRpbWUgc3BlY2lmaWVkLCBzdGF0ZSBhcHBsaWVzIHRvIHRoZSB3aG9sZSBkYXkuICovXG4gICAgICAgICAgICAgIGlmIChydWxlc1tydWxlXS50aW1lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3RoZXJlIGlzIG5vIHRpbWUnLCBkYXRlKTtcbiAgICAgICAgICAgICAgICAgIGlmICghcnVsZXNbcnVsZV0uZmFsbGJhY2sgfHwgKHJ1bGVzW3J1bGVdLmZhbGxiYWNrICYmICEocmVzdWx0c3RhdGUgfHwgdW5rbm93bikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c3RhdGUgPSBydWxlc1tydWxlXS5tZWFuaW5nO1xuICAgICAgICAgICAgICAgICAgICAgIHVua25vd24gICAgID0gcnVsZXNbcnVsZV0udW5rbm93bjtcbiAgICAgICAgICAgICAgICAgICAgICBtYXRjaF9ydWxlICA9IHJ1bGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAocnVsZXNbcnVsZV0uZmFsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyZWFrIHJ1bGU7IC8vIGZhbGxiYWNrIHJ1bGUgbWF0Y2hlZCwgbm8gbmVlZCBmb3IgY2hlY2tpbmcgdGhlIHJlc3RcbiAgICAgICAgICAgICAgICAgICAgICAvLyBXUk9ORzogV2hhdCBpZiBjbG9zaW5nIHJ1bGVzIGZvbGxvdz9cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZvciAodmFyIHRpbWVzZWwgPSAwOyB0aW1lc2VsIDwgcnVsZXNbcnVsZV0udGltZS5sZW5ndGg7IHRpbWVzZWwrKykge1xuICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJ1bGVzW3J1bGVdLnRpbWVbdGltZXNlbF0oZGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdyZXM6JywgcmVzKTtcbiAgICAgICAgICAgICAgICAgIGlmIChyZXNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGVzW3J1bGVdLmZhbGxiYWNrIHx8IChydWxlc1tydWxlXS5mYWxsYmFjayAmJiAhKHJlc3VsdHN0YXRlIHx8IHVua25vd24pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzdGF0ZSA9IHJ1bGVzW3J1bGVdLm1lYW5pbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVua25vd24gICAgID0gcnVsZXNbcnVsZV0udW5rbm93bjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hfcnVsZSAgPSBydWxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJlc2V0IG9wZW4gZW5kIGNvbW1lbnQgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21tZW50ID09PSAnb2JqZWN0JyAmJiBjb21tZW50WzBdID09PSB0KCdvcGVuIGVuZCcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvcGVuIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzWzJdID09PSB0cnVlICYmIChyZXN1bHRzdGF0ZSB8fCB1bmtub3duKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IFsgdCgnb3BlbiBlbmQnKSwgbWF0Y2hfcnVsZSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzdGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5rbm93biAgICAgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBIYWNrIHRvIG1ha2Ugc2Vjb25kIHJ1bGUgaW4gJzA3OjAwKywxMjowMC0xNjowMDsgMTY6MDAtMjQ6MDAgY2xvc2VkIFwibmVlZGVkIGJlY2F1c2Ugb2Ygb3BlbiBlbmRcIicgb2Jzb2xldGUge3t7ICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJ1bGVzW3J1bGVdLnRpbWVbdGltZXNlbCsxXSA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRfcmVzID0gcnVsZXNbcnVsZV0udGltZVt0aW1lc2VsKzFdKGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggICFuZXh0X3Jlc1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAmJiBuZXh0X3Jlc1syXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgbmV4dF9yZXNbMV0gPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICYmIGdldFZhbHVlRm9yRGF0ZShuZXh0X3Jlc1sxXSwgdHJ1ZSkgIT09IGdldFZhbHVlRm9yRGF0ZShkYXRlLCB0cnVlKSAvLyBKdXN0IHRvIGJlIHN1cmUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHJ1bGVzW3J1bGVdLnRpbWVbdGltZXNlbF0obmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgLSAxKSlbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogVG8gZGlzdGluZ3Vpc2ggdGhlIGZvbGxvd2luZyB0d28gdmFsdWVzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgICAgJ3N1bnJpc2UtMTQ6MDAsMTQ6MDArJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICAnMDc6MDArLDEyOjAwLTE2OjAwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiMDc6MDArLDEyOjAwLTE2OjAwIG1hdGNoZWQuXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHN0YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVua25vd24gICAgID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogfX19ICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVsZXNbcnVsZV0uZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2hhbmdlZGF0ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgKHR5cGVvZiByZXNbMV0gIT09ICd1bmRlZmluZWQnICYmIHJlc1sxXSA8IGNoYW5nZWRhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRklYTUU6IENoYW5naW5nIHVuZGVmaW5lZCBkb2VzIG5vdCBicmVhayB0aGUgdGVzdCBmcmFtZXdvcmsuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZGF0ZSA9IHJlc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJlYWsgcnVsZTsgLy8gRmFsbGJhY2sgcnVsZSBtYXRjaGVkLCBubyBuZWVkIGZvciBjaGVja2luZyB0aGUgcmVzdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdST05HOiBXaGF0IGlmICdvZmYnIGlzIHVzZWQgYWZ0ZXIgZmFsbGJhY2sgcnVsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2hhbmdlZGF0ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgKHR5cGVvZiByZXNbMV0gPT09ICdvYmplY3QnICYmIHJlc1sxXSA8IGNoYW5nZWRhdGUpKVxuICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWRhdGUgPSByZXNbMV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHJ1bGVzW21hdGNoX3J1bGVdID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcnVsZXNbbWF0Y2hfcnVsZV0uY29tbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgLyogT25seSB1c2UgY29tbWVudCBpZiBvbmUgaXMgZXhwbGljaXRseSBzcGVjaWZpZWQuICovXG4gICAgICAgICAgICAgIGNvbW1lbnQgPSBydWxlc1ttYXRjaF9ydWxlXS5jb21tZW50O1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbW1lbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGlmIChjb21tZW50WzFdID09PSBtYXRjaF9ydWxlKSB7XG4gICAgICAgICAgICAgICAgICBjb21tZW50ID0gY29tbWVudFswXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2hhbmdlZGF0ZScsIGNoYW5nZWRhdGUsIHJlc3VsdHN0YXRlLCBjb21tZW50LCBtYXRjaF9ydWxlKTtcbiAgICAgICAgICByZXR1cm4gWyByZXN1bHRzdGF0ZSwgY2hhbmdlZGF0ZSwgdW5rbm93biwgY29tbWVudCwgbWF0Y2hfcnVsZSBdO1xuICAgICAgfTtcbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBHZW5lcmF0ZSBwcmV0dGlmaWVkIHZhbHVlIGZvciBzZWxlY3RvciBiYXNlZCBvbiB0b2tlbnMuIHt7e1xuICAgICAgICpcbiAgICAgICAqIDpwYXJhbSB0b2tlbnM6IExpc3Qgb2YgdG9rZW4gb2JqZWN0cy5cbiAgICAgICAqIDpwYXJhbSBhdDogUG9zaXRpb24gd2hlcmUgdG8gc3RhcnQuXG4gICAgICAgKiA6cGFyYW0gbGFzdF9hdDogUG9zaXRpb24gd2hlcmUgdG8gc3RvcC5cbiAgICAgICAqIDpwYXJhbSBjb25mOiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gICAgICAgKiA6cmV0dXJuczogUHJldHRpZmllZCB2YWx1ZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcHJldHRpZnlTZWxlY3Rvcih0b2tlbnMsIHNlbGVjdG9yX3N0YXJ0LCBzZWxlY3Rvcl9lbmQsIHNlbGVjdG9yX3R5cGUsIGNvbmYpIHtcblxuICAgICAgICAgIHZhciBwcmV0dGlmaWVkX3ZhbHVlID0gJyc7XG4gICAgICAgICAgdmFyIGF0ID0gc2VsZWN0b3Jfc3RhcnQ7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coc2VsZWN0b3JfdHlwZSk7XG4gICAgICAgICAgd2hpbGUgKGF0IDw9IHNlbGVjdG9yX2VuZCkge1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQXQ6ICcgKyBhdCArICcsIHRva2VuOiAnICsgdG9rZW5zW2F0XSk7XG4gICAgICAgICAgICAgIGlmIChtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnd2Vla2RheScpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWNvbmYubGVhdmVfd2Vla2RheV9zZXBfb25lX2RheV9iZXR3XG4gICAgICAgICAgICAgICAgICAgICAgJiYgYXQgLSBzZWxlY3Rvcl9zdGFydCA+IDEgJiYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQtMSwgJywnKSB8fCBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LTEsICctJykpXG4gICAgICAgICAgICAgICAgICAgICAgJiYgbWF0Y2hUb2tlbnModG9rZW5zLCBhdC0yLCAnd2Vla2RheScpXG4gICAgICAgICAgICAgICAgICAgICAgJiYgdG9rZW5zW2F0XVswXSA9PT0gKHRva2Vuc1thdC0yXVswXSArIDEpICUgNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX3ZhbHVlID0gcHJldHRpZmllZF92YWx1ZS5zdWJzdHJpbmcoMCwgcHJldHRpZmllZF92YWx1ZS5sZW5ndGggLSAxKSArIGNvbmYuc2VwX29uZV9kYXlfYmV0d2VlbjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHByZXR0aWZpZWRfdmFsdWUgKz0gd2Vla2RheXNbdG9rZW5zW2F0XVswXV07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXQgLSBzZWxlY3Rvcl9zdGFydCA+IDAgLy8gZS5nLiAnMDk6MCcgLT4gJzA5OjAwJ1xuICAgICAgICAgICAgICAgICAgICAgICYmIHNlbGVjdG9yX3R5cGUgPT09ICd0aW1lJ1xuICAgICAgICAgICAgICAgICAgICAgICYmIG1hdGNoVG9rZW5zKHRva2VucywgYXQtMSwgJ3RpbWVzZXAnKVxuICAgICAgICAgICAgICAgICAgICAgICYmIG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdudW1iZXInKSkge1xuICAgICAgICAgICAgICAgICAgcHJldHRpZmllZF92YWx1ZSArPSAodG9rZW5zW2F0XVswXSA8IDEwID8gJzAnIDogJycpICsgdG9rZW5zW2F0XVswXS50b1N0cmluZygpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yX3R5cGUgPT09ICd0aW1lJyAvLyBlLmcuICc5OjAwJyAtPiAnIDA5OjAwJ1xuICAgICAgICAgICAgICAgICAgICAgICYmIGNvbmYuemVyb19wYWRfaG91clxuICAgICAgICAgICAgICAgICAgICAgICYmIGF0ICE9PSB0b2tlbnMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgJiYgbWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgICAgJiYgbWF0Y2hUb2tlbnModG9rZW5zLCBhdCsxLCAndGltZXNlcCcpKSB7XG4gICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX3ZhbHVlICs9IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zW2F0XVswXSA8IDEwID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0b2tlbnNbYXRdWzBdID09PSAwICYmIGNvbmYub25lX3plcm9faWZfaG91cl96ZXJvID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJyA6ICcwJykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJycpICsgdG9rZW5zW2F0XVswXS50b1N0cmluZygpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yX3R5cGUgPT09ICd0aW1lJyAvLyBlLmcuICc5LTE4JyAtPiAnMDk6MDAtMTg6MDAnXG4gICAgICAgICAgICAgICAgICAgICAgJiYgYXQgKyAyIDw9IHNlbGVjdG9yX2VuZFxuICAgICAgICAgICAgICAgICAgICAgICYmIG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICAgICYmIG1hdGNoVG9rZW5zKHRva2VucywgYXQrMSwgJy0nKVxuICAgICAgICAgICAgICAgICAgICAgICYmIG1hdGNoVG9rZW5zKHRva2VucywgYXQrMiwgJ251bWJlcicpKSB7XG4gICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX3ZhbHVlICs9ICh0b2tlbnNbYXRdWzBdIDwgMTAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAodG9rZW5zW2F0XVswXSA9PT0gMCAmJiBjb25mLm9uZV96ZXJvX2lmX2hvdXJfemVybyA/ICcnIDogJzAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSArIHRva2Vuc1thdF1bMF0udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgIHByZXR0aWZpZWRfdmFsdWUgKz0gJzowMC0nXG4gICAgICAgICAgICAgICAgICAgICAgKyAodG9rZW5zW2F0KzJdWzBdIDwgMTAgPyAnMCcgOiAnJykgKyB0b2tlbnNbYXQrMl1bMF0udG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAgICsgJzowMCc7XG4gICAgICAgICAgICAgICAgICBhdCArPSAyO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdjb21tZW50JykpIHtcbiAgICAgICAgICAgICAgICAgIHByZXR0aWZpZWRfdmFsdWUgKz0gJ1wiJyArIHRva2Vuc1thdF1bMF0udG9TdHJpbmcoKSArICdcIic7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJ2Nsb3NlZCcpKSB7XG4gICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX3ZhbHVlICs9IChjb25mLmxlYXZlX29mZl9jbG9zZWQgPyB0b2tlbnNbYXRdWzBdIDogY29uZi5rZXl3b3JkX2Zvcl9vZmZfY2xvc2VkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdCAtIHNlbGVjdG9yX3N0YXJ0ID4gMCAmJiBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgICAmJiAoc2VsZWN0b3JfdHlwZSA9PT0gJ21vbnRoJyB8fCBzZWxlY3Rvcl90eXBlID09PSAnd2VlaycpKSB7XG4gICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX3ZhbHVlICs9XG4gICAgICAgICAgICAgICAgICAgICAgKG1hdGNoVG9rZW5zKHRva2VucywgYXQtMSwgJ21vbnRoJykgfHwgbWF0Y2hUb2tlbnModG9rZW5zLCBhdC0xLCAnd2VlaycpID8gJyAnIDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgKyAoY29uZi56ZXJvX3BhZF9tb250aF9hbmRfd2Vla19udW1iZXJzICYmIHRva2Vuc1thdF1bNF0gIT09ICdwb3NpdGl2ZV9udW1iZXInICYmIHRva2Vuc1thdF1bMF0gPCAxMCA/ICcwJyA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICsgdG9rZW5zW2F0XVswXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdCAtIHNlbGVjdG9yX3N0YXJ0ID4gMCAmJiBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnbW9udGgnKVxuICAgICAgICAgICAgICAgICAgICAgICYmIG1hdGNoVG9rZW5zKHRva2VucywgYXQtMSwgJ3llYXInKSkge1xuICAgICAgICAgICAgICAgICAgcHJldHRpZmllZF92YWx1ZSArPSAnICcgKyBtb250aHNbW3Rva2Vuc1thdF1bMF1dXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdCAtIHNlbGVjdG9yX3N0YXJ0ID4gMCAmJiBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnZXZlbnQnKVxuICAgICAgICAgICAgICAgICAgICAgICYmIG1hdGNoVG9rZW5zKHRva2VucywgYXQtMSwgJ3llYXInKSkge1xuICAgICAgICAgICAgICAgICAgcHJldHRpZmllZF92YWx1ZSArPSAnICcgKyB0b2tlbnNbYXRdWzBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVG9rZW5zKHRva2VucywgYXQsICdtb250aCcpKSB7XG4gICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX3ZhbHVlICs9IG1vbnRoc1tbdG9rZW5zW2F0XVswXV1dO1xuICAgICAgICAgICAgICAgICAgaWYgKGF0ICsgMSA8PSBzZWxlY3Rvcl9lbmQgJiYgbWF0Y2hUb2tlbnModG9rZW5zLCBhdCsxLCAnd2Vla2RheScpKVxuICAgICAgICAgICAgICAgICAgICAgIHByZXR0aWZpZWRfdmFsdWUgKz0gJyAnO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0ICsgMiA8PSBzZWxlY3Rvcl9lbmRcbiAgICAgICAgICAgICAgICAgICAgICAmJiAobWF0Y2hUb2tlbnModG9rZW5zLCBhdCwgJy0nKSB8fCBtYXRjaFRva2Vucyh0b2tlbnMsIGF0LCAnKycpKVxuICAgICAgICAgICAgICAgICAgICAgICYmIG1hdGNoVG9rZW5zKHRva2VucywgYXQrMSwgJ251bWJlcicsICdjYWxjZGF5JykpIHtcbiAgICAgICAgICAgICAgICAgIHByZXR0aWZpZWRfdmFsdWUgKz0gJyAnICsgdG9rZW5zW2F0XVswXSArIHRva2Vuc1thdCsxXVswXSArICcgZGF5JyArIChNYXRoLmFicyh0b2tlbnNbYXQrMV1bMF0pID09PSAxID8gJycgOiAncycpO1xuICAgICAgICAgICAgICAgICAgYXQgKz0gMjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdCA9PT0gc2VsZWN0b3JfZW5kXG4gICAgICAgICAgICAgICAgICAgICAgJiYgc2VsZWN0b3JfdHlwZSA9PT0gJ3dlZWtkYXknXG4gICAgICAgICAgICAgICAgICAgICAgJiYgdG9rZW5zW2F0XVswXSA9PT0gJzonKSA7IGVsc2UgaWYgKGF0ID09PSBzZWxlY3Rvcl9lbmRcbiAgICAgICAgICAgICAgICAgICAgICAmJiBzZWxlY3Rvcl90eXBlID09PSAndGltZSdcbiAgICAgICAgICAgICAgICAgICAgICAmJiB0b2tlbnNbYXRdWzBdID09PSAnLCcpIDsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwcmV0dGlmaWVkX3ZhbHVlICs9IHRva2Vuc1thdF1bMF0udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhdCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcHJldHRpZmllZF92YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIC8vIFB1YmxpYyBpbnRlcmZhY2Uge3t7XG4gICAgICAvLyBBbGwgZnVuY3Rpb25zIGJlbG93IGFyZSBjb25zaWRlcmVkIHB1YmxpYy5cbiAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgICAvLyBTaW1wbGUgQVBJIHt7e1xuXG4gICAgICB0aGlzLmdldFN0YXRlID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHZhciBpdCA9IHRoaXMuZ2V0SXRlcmF0b3IoZGF0ZSk7XG4gICAgICAgICAgcmV0dXJuIGl0LmdldFN0YXRlKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmdldFVua25vd24gPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgdmFyIGl0ID0gdGhpcy5nZXRJdGVyYXRvcihkYXRlKTtcbiAgICAgICAgICByZXR1cm4gaXQuZ2V0VW5rbm93bigpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5nZXRTdGF0ZVN0cmluZyA9IGZ1bmN0aW9uKGRhdGUsIHBhc3QpIHtcbiAgICAgICAgICB2YXIgaXQgPSB0aGlzLmdldEl0ZXJhdG9yKGRhdGUpO1xuICAgICAgICAgIHJldHVybiBpdC5nZXRTdGF0ZVN0cmluZyhwYXN0KTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZ2V0Q29tbWVudCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB2YXIgaXQgPSB0aGlzLmdldEl0ZXJhdG9yKGRhdGUpO1xuICAgICAgICAgIHJldHVybiBpdC5nZXRDb21tZW50KCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmdldE1hdGNoaW5nUnVsZSA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB2YXIgaXQgPSB0aGlzLmdldEl0ZXJhdG9yKGRhdGUpO1xuICAgICAgICAgIHJldHVybiBpdC5nZXRNYXRjaGluZ1J1bGUoKTtcbiAgICAgIH07XG5cbiAgICAgIC8qIE5vdCBhdmFpbGFibGUgZm9yIGl0ZXJhdG9yIEFQSSB7e3sgKi9cbiAgICAgIC8qIGdldFdhcm5pbmdzOiBHZXQgd2FybmluZ3MsIGVtcHR5IGxpc3QgaWYgbm9uZSB7e3sgKi9cbiAgICAgIHRoaXMuZ2V0V2FybmluZ3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaXQgPSB0aGlzLmdldEl0ZXJhdG9yKCk7XG4gICAgICAgICAgcmV0dXJuIGdldFdhcm5pbmdzKGl0KTtcbiAgICAgIH07XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogcHJldHRpZnlWYWx1ZTogR2V0IGEgbmljZWx5IGZvcm1hdGVkIHZhbHVlIHt7eyAqL1xuICAgICAgdGhpcy5wcmV0dGlmeVZhbHVlID0gZnVuY3Rpb24oYXJndW1lbnRfaGFzaCkge1xuICAgICAgICAgIHRoaXMuZ2V0V2FybmluZ3MoKTtcbiAgICAgICAgICAvKiBnZXRXYXJuaW5ncyBoYXMgdG8gYmUgcnVuIGJlZm9yZSBwcmV0dGlmeVZhbHVlIGJlY2F1c2Ugc29tZVxuICAgICAgICAgICAqIGRlY2lzaW9ucyBpZiBjZXJ0YWluIGFzcGVjdHMgbWFrZXMgc2Vuc2UgdG8gcHJldHRpZnkgb3Igbm90XG4gICAgICAgICAgICogYXJlIGluZmx1ZW5jZWQgYnkgd2FybmluZ3MuXG4gICAgICAgICAgICogQmFzaWNhbGx5LCBib3RoIGZ1bmN0aW9ucyBkZXBlbmQgb24gZWFjaCBvdGhlciBpbiBzb21lIHdheSA6KFxuICAgICAgICAgICAqIFNlZSBkb25lX3dpdGhfc2VsZWN0b3JfcmVvcmRlcmluZy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZXR1cm4gcHJldHRpZnlWYWx1ZShhcmd1bWVudF9oYXNoKTtcbiAgICAgIH07XG4gICAgICAvKiB9fX0gKi9cblxuICAgICAgLyogZ2V0TmV4dENoYW5nZTogR2V0IHRpbWUgb2YgbmV4dCBzdGF0dXMgY2hhbmdlIHt7eyAqL1xuICAgICAgdGhpcy5nZXROZXh0Q2hhbmdlID0gZnVuY3Rpb24oZGF0ZSwgbWF4ZGF0ZSkge1xuICAgICAgICAgIHZhciBpdCA9IHRoaXMuZ2V0SXRlcmF0b3IoZGF0ZSk7XG4gICAgICAgICAgaWYgKCFpdC5hZHZhbmNlKG1heGRhdGUpKVxuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgIHJldHVybiBpdC5nZXREYXRlKCk7XG4gICAgICB9O1xuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIGlzV2Vla1N0YWJsZTogQ2hlY2tzIHdoZXRoZXIgb3BlbiBpbnRlcnZhbHMgYXJlIHNhbWUgZm9yIGV2ZXJ5IHdlZWsuIHt7eyAqL1xuICAgICAgdGhpcy5pc1dlZWtTdGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gd2Vla19zdGFibGU7XG4gICAgICB9O1xuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8qIGlzRXF1YWxUbzogQ2hlY2sgaWYgdGhpcyBvcGVuaW5nX2hvdXJzIG9iamVjdCBoYXMgdGhlIHNhbWUgbWVhbmluZyBhcyB0aGUgZ2l2ZW4gb3BlbmluZ19ob3VycyBvYmplY3QuIHt7eyAqL1xuICAgICAgdGhpcy5pc0VxdWFsVG8gPSBmdW5jdGlvbihzZWNvbmRfb2hfb2JqZWN0LCBzdGFydF9kYXRlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzdGFydF9kYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB2YXIgc3RhcnRfZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBkYXRlbGltaXQ7XG5cbiAgICAgICAgICBpZiAodGhpcy5pc1dlZWtTdGFibGUoKSAmJiBzZWNvbmRfb2hfb2JqZWN0LmlzV2Vla1N0YWJsZSgpKSB7XG4gICAgICAgICAgICAgIGRhdGVsaW1pdCA9IG5ldyBEYXRlKHN0YXJ0X2RhdGUuZ2V0VGltZSgpICsgbXNlY19pbl9kYXkgKiAxMCk7XG4gICAgICAgICAgLy8gfSBlbHNlIGlmICh0aGlzLmlzV2Vla1N0YWJsZSgpICE9PSBzZWNvbmRfb2hfb2JqZWN0LmlzV2Vla1N0YWJsZSgpKSB7XG4gICAgICAgICAgLy8gICAgIHJldHVybiBbIGZhbHNlLFxuICAgICAgICAgIC8vICAgICAgICAge1xuICAgICAgICAgIC8vICAgICAgICAgICAgICdyZWFzb24nOiAnaXNXZWVrU3RhYmxlIGRvIG5vdCBtYXRjaCcsXG4gICAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgICAgLy8gICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGF0ZWxpbWl0ID0gbmV3IERhdGUoc3RhcnRfZGF0ZS5nZXRUaW1lKCkgKyBtc2VjX2luX2RheSAqIDM2NiAqIDUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBmaXJzdF9pdCA9IHRoaXMuZ2V0SXRlcmF0b3Ioc3RhcnRfZGF0ZSk7XG4gICAgICAgICAgdmFyIHNlY29uZF9pdCA9IHNlY29uZF9vaF9vYmplY3QuZ2V0SXRlcmF0b3Ioc3RhcnRfZGF0ZSk7XG5cbiAgICAgICAgICB3aGlsZSAoZmlyc3RfaXQuYWR2YW5jZShkYXRlbGltaXQpKSB7XG4gICAgICAgICAgICAgIHNlY29uZF9pdC5hZHZhbmNlKGRhdGVsaW1pdCk7XG5cbiAgICAgICAgICAgICAgdmFyIG5vdF9lcXVhbCA9IFtdO1xuXG4gICAgICAgICAgICAgIGlmIChmaXJzdF9pdC5nZXREYXRlKCkuZ2V0VGltZSgpICE9PSBzZWNvbmRfaXQuZ2V0RGF0ZSgpLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgbm90X2VxdWFsLnB1c2goJ2dldERhdGUnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChmaXJzdF9pdC5nZXRTdGF0ZSgpICE9PSBzZWNvbmRfaXQuZ2V0U3RhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgbm90X2VxdWFsLnB1c2goJ2dldFN0YXRlJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZmlyc3RfaXQuZ2V0VW5rbm93bigpICE9PSBzZWNvbmRfaXQuZ2V0VW5rbm93bigpKSB7XG4gICAgICAgICAgICAgICAgICBub3RfZXF1YWwucHVzaCgnZ2V0VW5rbm93bicpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGZpcnN0X2l0LmdldENvbW1lbnQoKSAhPT0gc2Vjb25kX2l0LmdldENvbW1lbnQoKSkge1xuICAgICAgICAgICAgICAgICAgbm90X2VxdWFsLnB1c2goJ2dldENvbW1lbnQnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChub3RfZXF1YWwubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZGV2aWF0aW9uX2Zvcl90aW1lID0ge307XG4gICAgICAgICAgICAgICAgICBkZXZpYXRpb25fZm9yX3RpbWVbZmlyc3RfaXQuZ2V0RGF0ZSgpLmdldFRpbWUoKV0gPSBub3RfZXF1YWw7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gWyBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICdtYXRjaGluZ19ydWxlJzogZmlyc3RfaXQuZ2V0TWF0Y2hpbmdSdWxlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdtYXRjaGluZ19ydWxlX290aGVyJzogc2Vjb25kX2l0LmdldE1hdGNoaW5nUnVsZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWF0aW9uX2Zvcl90aW1lJzogZGV2aWF0aW9uX2Zvcl90aW1lLFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gWyB0cnVlIF07XG4gICAgICB9O1xuICAgICAgLyogfX19ICovXG4gICAgICAvKiB9fX0gKi9cbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvLyBIaWdoLWxldmVsIEFQSSB7e3tcbiAgICAgIC8qIGdldE9wZW5JbnRlcnZhbHM6IEdldCBhcnJheSBvZiBvcGVuIGludGVydmFscyBiZXR3ZWVuIHR3byBkYXRlcyB7e3sgKi9cbiAgICAgIHRoaXMuZ2V0T3BlbkludGVydmFscyA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gICAgICAgICAgdmFyIHJlcyA9IFtdO1xuXG4gICAgICAgICAgdmFyIGl0ID0gdGhpcy5nZXRJdGVyYXRvcihmcm9tKTtcblxuICAgICAgICAgIGlmIChpdC5nZXRTdGF0ZSgpIHx8IGl0LmdldFVua25vd24oKSkge1xuICAgICAgICAgICAgICByZXMucHVzaChbZnJvbSwgdW5kZWZpbmVkLCBpdC5nZXRVbmtub3duKCksIGl0LmdldENvbW1lbnQoKV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoaWxlIChpdC5hZHZhbmNlKHRvKSkge1xuICAgICAgICAgICAgICBpZiAoaXQuZ2V0U3RhdGUoKSB8fCBpdC5nZXRVbmtub3duKCkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoICE9PSAwICYmIHR5cGVvZiByZXNbcmVzLmxlbmd0aCAtIDFdWzFdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGxhc3Qgc3RhdGUgd2FzIGFsc28gb3BlbiBvciB1bmtub3duXG4gICAgICAgICAgICAgICAgICAgICAgcmVzW3Jlcy5sZW5ndGggLSAxXVsxXSA9IGl0LmdldERhdGUoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKFtpdC5nZXREYXRlKCksIHVuZGVmaW5lZCwgaXQuZ2V0VW5rbm93bigpLCBpdC5nZXRDb21tZW50KCldKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoICE9PSAwICYmIHR5cGVvZiByZXNbcmVzLmxlbmd0aCAtIDFdWzFdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgdXNlIHRoZSBmaXJzdCB0aW1lIGFzIGNsb3NpbmcvY2hhbmdlIHRpbWUgYW5kIGlnbm9yZSBjbG9zaW5nIHRpbWVzIHdoaWNoIG1pZ2h0IGZvbGxvd1xuICAgICAgICAgICAgICAgICAgICAgIHJlc1tyZXMubGVuZ3RoIC0gMV1bMV0gPSBpdC5nZXREYXRlKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIHJlc1tyZXMubGVuZ3RoIC0gMV1bMV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHJlc1tyZXMubGVuZ3RoIC0gMV1bMV0gPSB0bztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfTtcbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiBnZXRPcGVuRHVyYXRpb246IEdldCB0b3RhbCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGEgZmFjaWxpdHkgaXMgb3Blbix1bmtub3duIHdpdGhpbiBhIGdpdmVuIGRhdGUgcmFuZ2Uge3t7ICovXG4gICAgICB0aGlzLmdldE9wZW5EdXJhdGlvbiA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG5cbiAgICAgICAgICB2YXIgb3BlbiAgICA9IDA7XG4gICAgICAgICAgdmFyIHVua25vd24gPSAwO1xuXG4gICAgICAgICAgdmFyIGl0ID0gdGhpcy5nZXRJdGVyYXRvcihmcm9tKTtcbiAgICAgICAgICB2YXIgcHJldmRhdGUgICAgPSAoaXQuZ2V0U3RhdGUoKSB8fCBpdC5nZXRVbmtub3duKCkpID8gZnJvbSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB2YXIgcHJldnN0YXRlICAgPSBpdC5nZXRTdGF0ZSgpO1xuICAgICAgICAgIHZhciBwcmV2dW5rbm93biA9IGl0LmdldFVua25vd24oKTtcblxuICAgICAgICAgIHdoaWxlIChpdC5hZHZhbmNlKHRvKSkge1xuICAgICAgICAgICAgICBpZiAoaXQuZ2V0U3RhdGUoKSB8fCBpdC5nZXRVbmtub3duKCkpIHtcblxuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmV2ZGF0ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBsYXN0IHN0YXRlIHdhcyBhbHNvIG9wZW4gb3IgdW5rbm93blxuICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2dW5rbm93bikgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdW5rbm93biArPSBpdC5nZXREYXRlKCkuZ2V0VGltZSgpIC0gcHJldmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZXZzdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbiAgICArPSBpdC5nZXREYXRlKCkuZ2V0VGltZSgpIC0gcHJldmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBwcmV2ZGF0ZSAgICA9IGl0LmdldERhdGUoKTtcbiAgICAgICAgICAgICAgICAgIHByZXZzdGF0ZSAgID0gaXQuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgIHByZXZ1bmtub3duID0gaXQuZ2V0VW5rbm93bigpO1xuICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2lmJywgcHJldmRhdGUsIG9wZW4gLyAoMTAwMCAqIDYwICogNjApLCB1bmtub3duIC8gKDEwMDAgKiA2MCAqIDYwKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZWxzZScsIHByZXZkYXRlKTtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJldmRhdGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZ1bmtub3duKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB1bmtub3duICs9IGl0LmdldERhdGUoKS5nZXRUaW1lKCkgLSBwcmV2ZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuICAgICs9IGl0LmdldERhdGUoKS5nZXRUaW1lKCkgLSBwcmV2ZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgcHJldmRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHByZXZkYXRlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICBpZiAocHJldnVua25vd24pXG4gICAgICAgICAgICAgICAgICB1bmtub3duICs9IHRvLmdldFRpbWUoKSAtIHByZXZkYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgb3BlbiAgICArPSB0by5nZXRUaW1lKCkgLSBwcmV2ZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFsgb3BlbiwgdW5rbm93biBdO1xuICAgICAgfTtcbiAgICAgIC8qIH19fSAqL1xuICAgICAgLyogfX19ICovXG5cbiAgICAgIC8vIEl0ZXJhdG9yIEFQSSB7e3tcbiAgICAgIHRoaXMuZ2V0SXRlcmF0b3IgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBmdW5jdGlvbihvaCkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGUgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgICAgdmFyIHByZXZzdGF0ZSA9IFsgdW5kZWZpbmVkLCBkYXRlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkIF07XG4gICAgICAgICAgICAgIHZhciBzdGF0ZSA9IG9oLmdldFN0YXRlUGFpcihkYXRlKTtcblxuICAgICAgICAgICAgICAvKiBnZXREYXRlIHt7eyAqL1xuICAgICAgICAgICAgICB0aGlzLmdldERhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2c3RhdGVbMV07XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIC8qIH19fSAqL1xuXG4gICAgICAgICAgICAgIC8qIHNldERhdGUge3t7ICovXG4gICAgICAgICAgICAgIHRoaXMuc2V0RGF0ZSA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0ZSAhPT0gJ29iamVjdCcpXG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgdCgnZGF0ZSBwYXJhbWV0ZXIgbmVlZGVkJyk7XG5cbiAgICAgICAgICAgICAgICAgIHByZXZzdGF0ZSA9IFsgdW5kZWZpbmVkLCBkYXRlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkIF07XG4gICAgICAgICAgICAgICAgICBzdGF0ZSAgICAgPSBvaC5nZXRTdGF0ZVBhaXIoZGF0ZSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIC8qIH19fSAqL1xuXG4gICAgICAgICAgICAgIC8qIGdldFN0YXRlOiBDaGVjayB3aGV0aGVyIGZhY2lsaXR5IGlzIGBvcGVuJyB7e3sgKi9cbiAgICAgICAgICAgICAgdGhpcy5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlWzBdO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAvKiB9fX0gKi9cblxuICAgICAgICAgICAgICAvKiBnZXRVbmtub3duOiBDaGVja3Mgd2hldGhlciB0aGUgb3BlbmluZyBzdGF0ZSBpcyBjb25kaXRpb25hbCBvciB1bmtub3duIHt7eyAqL1xuICAgICAgICAgICAgICB0aGlzLmdldFVua25vd24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZVsyXTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgLyogfX19ICovXG5cbiAgICAgICAgICAgICAgLyogZ2V0U3RhdGVTdHJpbmc6IEdldCBzdGF0ZSBzdHJpbmcuIEVpdGhlciAnb3BlbicsICd1bmtub3duJyBvciAnY2xvc2VkJyB7e3sgKi9cbiAgICAgICAgICAgICAgdGhpcy5nZXRTdGF0ZVN0cmluZyA9IGZ1bmN0aW9uKHBhc3QpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoc3RhdGVbMF0gPyAnb3BlbicgOiAoc3RhdGVbMl0gPyAndW5rbm93bicgOiAocGFzdCA/ICdjbG9zZWQnIDogJ2Nsb3NlJykpKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgLyogfX19ICovXG5cbiAgICAgICAgICAgICAgLyogZ2V0Q29tbWVudDogR2V0IHRoZSBjb21tZW50LCB1bmRlZmluZWQgaW4gbm9uZSB7e3sgKi9cbiAgICAgICAgICAgICAgdGhpcy5nZXRDb21tZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVbM107XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIC8qIH19fSAqL1xuXG4gICAgICAgICAgICAgIC8qIGdldE1hdGNoaW5nUnVsZTogR2V0IHRoZSBydWxlIHdoaWNoIG1hdGNoZWQgdGh1cyBkZXRlcnJlbnRzIHRoZSBjdXJyZW50IHN0YXRlIHt7eyAqL1xuICAgICAgICAgICAgICB0aGlzLmdldE1hdGNoaW5nUnVsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZVs0XSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVzW3N0YXRlWzRdXS5idWlsZF9mcm9tX3Rva2VuX3J1bGVbMl07XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIC8qIH19fSAqL1xuXG4gICAgICAgICAgICAgIC8qIGFkdmFuY2U6IEFkdmFuY2VzIHRvIHRoZSBuZXh0IHBvc2l0aW9uIHt7eyAqL1xuICAgICAgICAgICAgICB0aGlzLmFkdmFuY2UgPSBmdW5jdGlvbihkYXRlbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0ZWxpbWl0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgIGRhdGVsaW1pdCA9IG5ldyBEYXRlKHByZXZzdGF0ZVsxXS5nZXRUaW1lKCkgKyBtc2VjX2luX2RheSAqIDM2NiAqIDUpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRlbGltaXQuZ2V0VGltZSgpIDw9IHByZXZzdGF0ZVsxXS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8qIFRoZSBsaW1pdCBmb3IgYWR2YW5jZSBuZWVkcyB0byBiZSBhZnRlciB0aGUgY3VycmVudCB0aW1lLiAqL1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZVsxXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvKiBvcGVuIHJhbmdlLCB3ZSB3b24ndCBiZSBhYmxlIHRvIGFkdmFuY2UgKi9cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnXFxuJyArICdwcmV2aW91cyBjaGVjayB0aW1lOicsIHByZXZzdGF0ZVsxXVxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgICArICcsIGN1cnJlbnQgY2hlY2sgdGltZTonLFxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBzdGF0ZVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgKHN0YXRlWzBdID8gJ29wZW4nIDogKHN0YXRlWzJdID8gJ3Vua25vd24nIDogJ2Nsb3NlZCcpKVxuICAgICAgICAgICAgICAgICAgICAgIC8vICAgICArICcsIGNvbW1lbnQ6Jywgc3RhdGVbM11cbiAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgKyAnLCBtYXRjaF9ydWxlOicsIHN0YXRlWzRdKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZVsxXS5nZXRUaW1lKCkgPD0gcHJldnN0YXRlWzFdLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBXZSdyZSBnb2luZyBiYWNrd2FyZHMgb3Igc3RheWluZyBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBUaGlzIG1vc3QgbGlrZWx5IGluZGljYXRlcyBhbiBlcnJvciBpbiBhIHNlbGVjdG9yIGNvZGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAnRmF0YWw6IGluZmluaXRlIGxvb3AgaW4gbmV4dENoYW5nZSc7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlWzFdLmdldFRpbWUoKSA+PSBkYXRlbGltaXQuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIERvbid0IGFkdmFuY2UgYmV5b25kIGxpbWl0cy4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIC8vIGRvIGFkdmFuY2VcbiAgICAgICAgICAgICAgICAgICAgICBwcmV2c3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IG9oLmdldFN0YXRlUGFpcihwcmV2c3RhdGVbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHN0YXRlWzBdID09PSBwcmV2c3RhdGVbMF0gJiYgc3RhdGVbMl0gPT09IHByZXZzdGF0ZVsyXSAmJiBzdGF0ZVszXSA9PT0gcHJldnN0YXRlWzNdKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAvKiB9fX0gKi9cbiAgICAgICAgICB9KHRoaXMpO1xuICAgICAgfTtcbiAgICAgIC8qIH19fSAqL1xuXG4gICAgICAvKiB9fX0gKi9cbiAgfVxuXG4gIC8qIHZpbTogc2V0IHRzPTQgc3c9NCB0dz0wIGV0IGZvbGRtYXJrZXI9e3t7LH19fSBmb2xkbGV2ZWw9MCBmb2xkbWV0aG9kPW1hcmtlciA6ICovXG5cbiAgcmV0dXJuIGluZGV4O1xuXG59KSk7XG4iLCIvKlxuIChjKSAyMDExLTIwMTUsIFZsYWRpbWlyIEFnYWZvbmtpblxuIFN1bkNhbGMgaXMgYSBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIGNhbGN1bGF0aW5nIHN1bi9tb29uIHBvc2l0aW9uIGFuZCBsaWdodCBwaGFzZXMuXG4gaHR0cHM6Ly9naXRodWIuY29tL21vdXJuZXIvc3VuY2FsY1xuKi9cblxuKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4vLyBzaG9ydGN1dHMgZm9yIGVhc2llciB0byByZWFkIGZvcm11bGFzXG5cbnZhciBQSSAgID0gTWF0aC5QSSxcbiAgICBzaW4gID0gTWF0aC5zaW4sXG4gICAgY29zICA9IE1hdGguY29zLFxuICAgIHRhbiAgPSBNYXRoLnRhbixcbiAgICBhc2luID0gTWF0aC5hc2luLFxuICAgIGF0YW4gPSBNYXRoLmF0YW4yLFxuICAgIGFjb3MgPSBNYXRoLmFjb3MsXG4gICAgcmFkICA9IFBJIC8gMTgwO1xuXG4vLyBzdW4gY2FsY3VsYXRpb25zIGFyZSBiYXNlZCBvbiBodHRwOi8vYWEucXVhZS5ubC9lbi9yZWtlbi96b25wb3NpdGllLmh0bWwgZm9ybXVsYXNcblxuXG4vLyBkYXRlL3RpbWUgY29uc3RhbnRzIGFuZCBjb252ZXJzaW9uc1xuXG52YXIgZGF5TXMgPSAxMDAwICogNjAgKiA2MCAqIDI0LFxuICAgIEoxOTcwID0gMjQ0MDU4OCxcbiAgICBKMjAwMCA9IDI0NTE1NDU7XG5cbmZ1bmN0aW9uIHRvSnVsaWFuKGRhdGUpIHsgcmV0dXJuIGRhdGUudmFsdWVPZigpIC8gZGF5TXMgLSAwLjUgKyBKMTk3MDsgfVxuZnVuY3Rpb24gZnJvbUp1bGlhbihqKSAgeyByZXR1cm4gbmV3IERhdGUoKGogKyAwLjUgLSBKMTk3MCkgKiBkYXlNcyk7IH1cbmZ1bmN0aW9uIHRvRGF5cyhkYXRlKSAgIHsgcmV0dXJuIHRvSnVsaWFuKGRhdGUpIC0gSjIwMDA7IH1cblxuXG4vLyBnZW5lcmFsIGNhbGN1bGF0aW9ucyBmb3IgcG9zaXRpb25cblxudmFyIGUgPSByYWQgKiAyMy40Mzk3OyAvLyBvYmxpcXVpdHkgb2YgdGhlIEVhcnRoXG5cbmZ1bmN0aW9uIHJpZ2h0QXNjZW5zaW9uKGwsIGIpIHsgcmV0dXJuIGF0YW4oc2luKGwpICogY29zKGUpIC0gdGFuKGIpICogc2luKGUpLCBjb3MobCkpOyB9XG5mdW5jdGlvbiBkZWNsaW5hdGlvbihsLCBiKSAgICB7IHJldHVybiBhc2luKHNpbihiKSAqIGNvcyhlKSArIGNvcyhiKSAqIHNpbihlKSAqIHNpbihsKSk7IH1cblxuZnVuY3Rpb24gYXppbXV0aChILCBwaGksIGRlYykgIHsgcmV0dXJuIGF0YW4oc2luKEgpLCBjb3MoSCkgKiBzaW4ocGhpKSAtIHRhbihkZWMpICogY29zKHBoaSkpOyB9XG5mdW5jdGlvbiBhbHRpdHVkZShILCBwaGksIGRlYykgeyByZXR1cm4gYXNpbihzaW4ocGhpKSAqIHNpbihkZWMpICsgY29zKHBoaSkgKiBjb3MoZGVjKSAqIGNvcyhIKSk7IH1cblxuZnVuY3Rpb24gc2lkZXJlYWxUaW1lKGQsIGx3KSB7IHJldHVybiByYWQgKiAoMjgwLjE2ICsgMzYwLjk4NTYyMzUgKiBkKSAtIGx3OyB9XG5cbmZ1bmN0aW9uIGFzdHJvUmVmcmFjdGlvbihoKSB7XG4gICAgaWYgKGggPCAwKSAvLyB0aGUgZm9sbG93aW5nIGZvcm11bGEgd29ya3MgZm9yIHBvc2l0aXZlIGFsdGl0dWRlcyBvbmx5LlxuICAgICAgICBoID0gMDsgLy8gaWYgaCA9IC0wLjA4OTAxMTc5IGEgZGl2LzAgd291bGQgb2NjdXIuXG5cbiAgICAvLyBmb3JtdWxhIDE2LjQgb2YgXCJBc3Ryb25vbWljYWwgQWxnb3JpdGhtc1wiIDJuZCBlZGl0aW9uIGJ5IEplYW4gTWVldXMgKFdpbGxtYW5uLUJlbGwsIFJpY2htb25kKSAxOTk4LlxuICAgIC8vIDEuMDIgLyB0YW4oaCArIDEwLjI2IC8gKGggKyA1LjEwKSkgaCBpbiBkZWdyZWVzLCByZXN1bHQgaW4gYXJjIG1pbnV0ZXMgLT4gY29udmVydGVkIHRvIHJhZDpcbiAgICByZXR1cm4gMC4wMDAyOTY3IC8gTWF0aC50YW4oaCArIDAuMDAzMTI1MzYgLyAoaCArIDAuMDg5MDExNzkpKTtcbn1cblxuLy8gZ2VuZXJhbCBzdW4gY2FsY3VsYXRpb25zXG5cbmZ1bmN0aW9uIHNvbGFyTWVhbkFub21hbHkoZCkgeyByZXR1cm4gcmFkICogKDM1Ny41MjkxICsgMC45ODU2MDAyOCAqIGQpOyB9XG5cbmZ1bmN0aW9uIGVjbGlwdGljTG9uZ2l0dWRlKE0pIHtcblxuICAgIHZhciBDID0gcmFkICogKDEuOTE0OCAqIHNpbihNKSArIDAuMDIgKiBzaW4oMiAqIE0pICsgMC4wMDAzICogc2luKDMgKiBNKSksIC8vIGVxdWF0aW9uIG9mIGNlbnRlclxuICAgICAgICBQID0gcmFkICogMTAyLjkzNzI7IC8vIHBlcmloZWxpb24gb2YgdGhlIEVhcnRoXG5cbiAgICByZXR1cm4gTSArIEMgKyBQICsgUEk7XG59XG5cbmZ1bmN0aW9uIHN1bkNvb3JkcyhkKSB7XG5cbiAgICB2YXIgTSA9IHNvbGFyTWVhbkFub21hbHkoZCksXG4gICAgICAgIEwgPSBlY2xpcHRpY0xvbmdpdHVkZShNKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlYzogZGVjbGluYXRpb24oTCwgMCksXG4gICAgICAgIHJhOiByaWdodEFzY2Vuc2lvbihMLCAwKVxuICAgIH07XG59XG5cblxudmFyIFN1bkNhbGMgPSB7fTtcblxuXG4vLyBjYWxjdWxhdGVzIHN1biBwb3NpdGlvbiBmb3IgYSBnaXZlbiBkYXRlIGFuZCBsYXRpdHVkZS9sb25naXR1ZGVcblxuU3VuQ2FsYy5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChkYXRlLCBsYXQsIGxuZykge1xuXG4gICAgdmFyIGx3ICA9IHJhZCAqIC1sbmcsXG4gICAgICAgIHBoaSA9IHJhZCAqIGxhdCxcbiAgICAgICAgZCAgID0gdG9EYXlzKGRhdGUpLFxuXG4gICAgICAgIGMgID0gc3VuQ29vcmRzKGQpLFxuICAgICAgICBIICA9IHNpZGVyZWFsVGltZShkLCBsdykgLSBjLnJhO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXppbXV0aDogYXppbXV0aChILCBwaGksIGMuZGVjKSxcbiAgICAgICAgYWx0aXR1ZGU6IGFsdGl0dWRlKEgsIHBoaSwgYy5kZWMpXG4gICAgfTtcbn07XG5cblxuLy8gc3VuIHRpbWVzIGNvbmZpZ3VyYXRpb24gKGFuZ2xlLCBtb3JuaW5nIG5hbWUsIGV2ZW5pbmcgbmFtZSlcblxudmFyIHRpbWVzID0gU3VuQ2FsYy50aW1lcyA9IFtcbiAgICBbLTAuODMzLCAnc3VucmlzZScsICAgICAgICdzdW5zZXQnICAgICAgXSxcbiAgICBbICAtMC4zLCAnc3VucmlzZUVuZCcsICAgICdzdW5zZXRTdGFydCcgXSxcbiAgICBbICAgIC02LCAnZGF3bicsICAgICAgICAgICdkdXNrJyAgICAgICAgXSxcbiAgICBbICAgLTEyLCAnbmF1dGljYWxEYXduJywgICduYXV0aWNhbER1c2snXSxcbiAgICBbICAgLTE4LCAnbmlnaHRFbmQnLCAgICAgICduaWdodCcgICAgICAgXSxcbiAgICBbICAgICA2LCAnZ29sZGVuSG91ckVuZCcsICdnb2xkZW5Ib3VyJyAgXVxuXTtcblxuLy8gYWRkcyBhIGN1c3RvbSB0aW1lIHRvIHRoZSB0aW1lcyBjb25maWdcblxuU3VuQ2FsYy5hZGRUaW1lID0gZnVuY3Rpb24gKGFuZ2xlLCByaXNlTmFtZSwgc2V0TmFtZSkge1xuICAgIHRpbWVzLnB1c2goW2FuZ2xlLCByaXNlTmFtZSwgc2V0TmFtZV0pO1xufTtcblxuXG4vLyBjYWxjdWxhdGlvbnMgZm9yIHN1biB0aW1lc1xuXG52YXIgSjAgPSAwLjAwMDk7XG5cbmZ1bmN0aW9uIGp1bGlhbkN5Y2xlKGQsIGx3KSB7IHJldHVybiBNYXRoLnJvdW5kKGQgLSBKMCAtIGx3IC8gKDIgKiBQSSkpOyB9XG5cbmZ1bmN0aW9uIGFwcHJveFRyYW5zaXQoSHQsIGx3LCBuKSB7IHJldHVybiBKMCArIChIdCArIGx3KSAvICgyICogUEkpICsgbjsgfVxuZnVuY3Rpb24gc29sYXJUcmFuc2l0SihkcywgTSwgTCkgIHsgcmV0dXJuIEoyMDAwICsgZHMgKyAwLjAwNTMgKiBzaW4oTSkgLSAwLjAwNjkgKiBzaW4oMiAqIEwpOyB9XG5cbmZ1bmN0aW9uIGhvdXJBbmdsZShoLCBwaGksIGQpIHsgcmV0dXJuIGFjb3MoKHNpbihoKSAtIHNpbihwaGkpICogc2luKGQpKSAvIChjb3MocGhpKSAqIGNvcyhkKSkpOyB9XG5mdW5jdGlvbiBvYnNlcnZlckFuZ2xlKGhlaWdodCkgeyByZXR1cm4gLTIuMDc2ICogTWF0aC5zcXJ0KGhlaWdodCkgLyA2MDsgfVxuXG4vLyByZXR1cm5zIHNldCB0aW1lIGZvciB0aGUgZ2l2ZW4gc3VuIGFsdGl0dWRlXG5mdW5jdGlvbiBnZXRTZXRKKGgsIGx3LCBwaGksIGRlYywgbiwgTSwgTCkge1xuXG4gICAgdmFyIHcgPSBob3VyQW5nbGUoaCwgcGhpLCBkZWMpLFxuICAgICAgICBhID0gYXBwcm94VHJhbnNpdCh3LCBsdywgbik7XG4gICAgcmV0dXJuIHNvbGFyVHJhbnNpdEooYSwgTSwgTCk7XG59XG5cblxuLy8gY2FsY3VsYXRlcyBzdW4gdGltZXMgZm9yIGEgZ2l2ZW4gZGF0ZSwgbGF0aXR1ZGUvbG9uZ2l0dWRlLCBhbmQsIG9wdGlvbmFsbHksXG4vLyB0aGUgb2JzZXJ2ZXIgaGVpZ2h0IChpbiBtZXRlcnMpIHJlbGF0aXZlIHRvIHRoZSBob3Jpem9uXG5cblN1bkNhbGMuZ2V0VGltZXMgPSBmdW5jdGlvbiAoZGF0ZSwgbGF0LCBsbmcsIGhlaWdodCkge1xuXG4gICAgaGVpZ2h0ID0gaGVpZ2h0IHx8IDA7XG5cbiAgICB2YXIgbHcgPSByYWQgKiAtbG5nLFxuICAgICAgICBwaGkgPSByYWQgKiBsYXQsXG5cbiAgICAgICAgZGggPSBvYnNlcnZlckFuZ2xlKGhlaWdodCksXG5cbiAgICAgICAgZCA9IHRvRGF5cyhkYXRlKSxcbiAgICAgICAgbiA9IGp1bGlhbkN5Y2xlKGQsIGx3KSxcbiAgICAgICAgZHMgPSBhcHByb3hUcmFuc2l0KDAsIGx3LCBuKSxcblxuICAgICAgICBNID0gc29sYXJNZWFuQW5vbWFseShkcyksXG4gICAgICAgIEwgPSBlY2xpcHRpY0xvbmdpdHVkZShNKSxcbiAgICAgICAgZGVjID0gZGVjbGluYXRpb24oTCwgMCksXG5cbiAgICAgICAgSm5vb24gPSBzb2xhclRyYW5zaXRKKGRzLCBNLCBMKSxcblxuICAgICAgICBpLCBsZW4sIHRpbWUsIGgwLCBKc2V0LCBKcmlzZTtcblxuXG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc29sYXJOb29uOiBmcm9tSnVsaWFuKEpub29uKSxcbiAgICAgICAgbmFkaXI6IGZyb21KdWxpYW4oSm5vb24gLSAwLjUpXG4gICAgfTtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IHRpbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRpbWUgPSB0aW1lc1tpXTtcbiAgICAgICAgaDAgPSAodGltZVswXSArIGRoKSAqIHJhZDtcblxuICAgICAgICBKc2V0ID0gZ2V0U2V0SihoMCwgbHcsIHBoaSwgZGVjLCBuLCBNLCBMKTtcbiAgICAgICAgSnJpc2UgPSBKbm9vbiAtIChKc2V0IC0gSm5vb24pO1xuXG4gICAgICAgIHJlc3VsdFt0aW1lWzFdXSA9IGZyb21KdWxpYW4oSnJpc2UpO1xuICAgICAgICByZXN1bHRbdGltZVsyXV0gPSBmcm9tSnVsaWFuKEpzZXQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8vIG1vb24gY2FsY3VsYXRpb25zLCBiYXNlZCBvbiBodHRwOi8vYWEucXVhZS5ubC9lbi9yZWtlbi9oZW1lbHBvc2l0aWUuaHRtbCBmb3JtdWxhc1xuXG5mdW5jdGlvbiBtb29uQ29vcmRzKGQpIHsgLy8gZ2VvY2VudHJpYyBlY2xpcHRpYyBjb29yZGluYXRlcyBvZiB0aGUgbW9vblxuXG4gICAgdmFyIEwgPSByYWQgKiAoMjE4LjMxNiArIDEzLjE3NjM5NiAqIGQpLCAvLyBlY2xpcHRpYyBsb25naXR1ZGVcbiAgICAgICAgTSA9IHJhZCAqICgxMzQuOTYzICsgMTMuMDY0OTkzICogZCksIC8vIG1lYW4gYW5vbWFseVxuICAgICAgICBGID0gcmFkICogKDkzLjI3MiArIDEzLjIyOTM1MCAqIGQpLCAgLy8gbWVhbiBkaXN0YW5jZVxuXG4gICAgICAgIGwgID0gTCArIHJhZCAqIDYuMjg5ICogc2luKE0pLCAvLyBsb25naXR1ZGVcbiAgICAgICAgYiAgPSByYWQgKiA1LjEyOCAqIHNpbihGKSwgICAgIC8vIGxhdGl0dWRlXG4gICAgICAgIGR0ID0gMzg1MDAxIC0gMjA5MDUgKiBjb3MoTSk7ICAvLyBkaXN0YW5jZSB0byB0aGUgbW9vbiBpbiBrbVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmE6IHJpZ2h0QXNjZW5zaW9uKGwsIGIpLFxuICAgICAgICBkZWM6IGRlY2xpbmF0aW9uKGwsIGIpLFxuICAgICAgICBkaXN0OiBkdFxuICAgIH07XG59XG5cblN1bkNhbGMuZ2V0TW9vblBvc2l0aW9uID0gZnVuY3Rpb24gKGRhdGUsIGxhdCwgbG5nKSB7XG5cbiAgICB2YXIgbHcgID0gcmFkICogLWxuZyxcbiAgICAgICAgcGhpID0gcmFkICogbGF0LFxuICAgICAgICBkICAgPSB0b0RheXMoZGF0ZSksXG5cbiAgICAgICAgYyA9IG1vb25Db29yZHMoZCksXG4gICAgICAgIEggPSBzaWRlcmVhbFRpbWUoZCwgbHcpIC0gYy5yYSxcbiAgICAgICAgaCA9IGFsdGl0dWRlKEgsIHBoaSwgYy5kZWMpLFxuICAgICAgICAvLyBmb3JtdWxhIDE0LjEgb2YgXCJBc3Ryb25vbWljYWwgQWxnb3JpdGhtc1wiIDJuZCBlZGl0aW9uIGJ5IEplYW4gTWVldXMgKFdpbGxtYW5uLUJlbGwsIFJpY2htb25kKSAxOTk4LlxuICAgICAgICBwYSA9IGF0YW4oc2luKEgpLCB0YW4ocGhpKSAqIGNvcyhjLmRlYykgLSBzaW4oYy5kZWMpICogY29zKEgpKTtcblxuICAgIGggPSBoICsgYXN0cm9SZWZyYWN0aW9uKGgpOyAvLyBhbHRpdHVkZSBjb3JyZWN0aW9uIGZvciByZWZyYWN0aW9uXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhemltdXRoOiBhemltdXRoKEgsIHBoaSwgYy5kZWMpLFxuICAgICAgICBhbHRpdHVkZTogaCxcbiAgICAgICAgZGlzdGFuY2U6IGMuZGlzdCxcbiAgICAgICAgcGFyYWxsYWN0aWNBbmdsZTogcGFcbiAgICB9O1xufTtcblxuXG4vLyBjYWxjdWxhdGlvbnMgZm9yIGlsbHVtaW5hdGlvbiBwYXJhbWV0ZXJzIG9mIHRoZSBtb29uLFxuLy8gYmFzZWQgb24gaHR0cDovL2lkbGFzdHJvLmdzZmMubmFzYS5nb3YvZnRwL3Byby9hc3Ryby9tcGhhc2UucHJvIGZvcm11bGFzIGFuZFxuLy8gQ2hhcHRlciA0OCBvZiBcIkFzdHJvbm9taWNhbCBBbGdvcml0aG1zXCIgMm5kIGVkaXRpb24gYnkgSmVhbiBNZWV1cyAoV2lsbG1hbm4tQmVsbCwgUmljaG1vbmQpIDE5OTguXG5cblN1bkNhbGMuZ2V0TW9vbklsbHVtaW5hdGlvbiA9IGZ1bmN0aW9uIChkYXRlKSB7XG5cbiAgICB2YXIgZCA9IHRvRGF5cyhkYXRlIHx8IG5ldyBEYXRlKCkpLFxuICAgICAgICBzID0gc3VuQ29vcmRzKGQpLFxuICAgICAgICBtID0gbW9vbkNvb3JkcyhkKSxcblxuICAgICAgICBzZGlzdCA9IDE0OTU5ODAwMCwgLy8gZGlzdGFuY2UgZnJvbSBFYXJ0aCB0byBTdW4gaW4ga21cblxuICAgICAgICBwaGkgPSBhY29zKHNpbihzLmRlYykgKiBzaW4obS5kZWMpICsgY29zKHMuZGVjKSAqIGNvcyhtLmRlYykgKiBjb3Mocy5yYSAtIG0ucmEpKSxcbiAgICAgICAgaW5jID0gYXRhbihzZGlzdCAqIHNpbihwaGkpLCBtLmRpc3QgLSBzZGlzdCAqIGNvcyhwaGkpKSxcbiAgICAgICAgYW5nbGUgPSBhdGFuKGNvcyhzLmRlYykgKiBzaW4ocy5yYSAtIG0ucmEpLCBzaW4ocy5kZWMpICogY29zKG0uZGVjKSAtXG4gICAgICAgICAgICAgICAgY29zKHMuZGVjKSAqIHNpbihtLmRlYykgKiBjb3Mocy5yYSAtIG0ucmEpKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGZyYWN0aW9uOiAoMSArIGNvcyhpbmMpKSAvIDIsXG4gICAgICAgIHBoYXNlOiAwLjUgKyAwLjUgKiBpbmMgKiAoYW5nbGUgPCAwID8gLTEgOiAxKSAvIE1hdGguUEksXG4gICAgICAgIGFuZ2xlOiBhbmdsZVxuICAgIH07XG59O1xuXG5cbmZ1bmN0aW9uIGhvdXJzTGF0ZXIoZGF0ZSwgaCkge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSArIGggKiBkYXlNcyAvIDI0KTtcbn1cblxuLy8gY2FsY3VsYXRpb25zIGZvciBtb29uIHJpc2Uvc2V0IHRpbWVzIGFyZSBiYXNlZCBvbiBodHRwOi8vd3d3LnN0YXJnYXppbmcubmV0L2tlcGxlci9tb29ucmlzZS5odG1sIGFydGljbGVcblxuU3VuQ2FsYy5nZXRNb29uVGltZXMgPSBmdW5jdGlvbiAoZGF0ZSwgbGF0LCBsbmcsIGluVVRDKSB7XG4gICAgdmFyIHQgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICBpZiAoaW5VVEMpIHQuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgZWxzZSB0LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuXG4gICAgdmFyIGhjID0gMC4xMzMgKiByYWQsXG4gICAgICAgIGgwID0gU3VuQ2FsYy5nZXRNb29uUG9zaXRpb24odCwgbGF0LCBsbmcpLmFsdGl0dWRlIC0gaGMsXG4gICAgICAgIGgxLCBoMiwgcmlzZSwgc2V0LCBhLCBiLCB4ZSwgeWUsIGQsIHJvb3RzLCB4MSwgeDIsIGR4O1xuXG4gICAgLy8gZ28gaW4gMi1ob3VyIGNodW5rcywgZWFjaCB0aW1lIHNlZWluZyBpZiBhIDMtcG9pbnQgcXVhZHJhdGljIGN1cnZlIGNyb3NzZXMgemVybyAod2hpY2ggbWVhbnMgcmlzZSBvciBzZXQpXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMjQ7IGkgKz0gMikge1xuICAgICAgICBoMSA9IFN1bkNhbGMuZ2V0TW9vblBvc2l0aW9uKGhvdXJzTGF0ZXIodCwgaSksIGxhdCwgbG5nKS5hbHRpdHVkZSAtIGhjO1xuICAgICAgICBoMiA9IFN1bkNhbGMuZ2V0TW9vblBvc2l0aW9uKGhvdXJzTGF0ZXIodCwgaSArIDEpLCBsYXQsIGxuZykuYWx0aXR1ZGUgLSBoYztcblxuICAgICAgICBhID0gKGgwICsgaDIpIC8gMiAtIGgxO1xuICAgICAgICBiID0gKGgyIC0gaDApIC8gMjtcbiAgICAgICAgeGUgPSAtYiAvICgyICogYSk7XG4gICAgICAgIHllID0gKGEgKiB4ZSArIGIpICogeGUgKyBoMTtcbiAgICAgICAgZCA9IGIgKiBiIC0gNCAqIGEgKiBoMTtcbiAgICAgICAgcm9vdHMgPSAwO1xuXG4gICAgICAgIGlmIChkID49IDApIHtcbiAgICAgICAgICAgIGR4ID0gTWF0aC5zcXJ0KGQpIC8gKE1hdGguYWJzKGEpICogMik7XG4gICAgICAgICAgICB4MSA9IHhlIC0gZHg7XG4gICAgICAgICAgICB4MiA9IHhlICsgZHg7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoeDEpIDw9IDEpIHJvb3RzKys7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoeDIpIDw9IDEpIHJvb3RzKys7XG4gICAgICAgICAgICBpZiAoeDEgPCAtMSkgeDEgPSB4MjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb290cyA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKGgwIDwgMCkgcmlzZSA9IGkgKyB4MTtcbiAgICAgICAgICAgIGVsc2Ugc2V0ID0gaSArIHgxO1xuXG4gICAgICAgIH0gZWxzZSBpZiAocm9vdHMgPT09IDIpIHtcbiAgICAgICAgICAgIHJpc2UgPSBpICsgKHllIDwgMCA/IHgyIDogeDEpO1xuICAgICAgICAgICAgc2V0ID0gaSArICh5ZSA8IDAgPyB4MSA6IHgyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyaXNlICYmIHNldCkgYnJlYWs7XG5cbiAgICAgICAgaDAgPSBoMjtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBpZiAocmlzZSkgcmVzdWx0LnJpc2UgPSBob3Vyc0xhdGVyKHQsIHJpc2UpO1xuICAgIGlmIChzZXQpIHJlc3VsdC5zZXQgPSBob3Vyc0xhdGVyKHQsIHNldCk7XG5cbiAgICBpZiAoIXJpc2UgJiYgIXNldCkgcmVzdWx0W3llID4gMCA/ICdhbHdheXNVcCcgOiAnYWx3YXlzRG93biddID0gdHJ1ZTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8vIGV4cG9ydCBhcyBOb2RlIG1vZHVsZSAvIEFNRCBtb2R1bGUgLyBicm93c2VyIHZhcmlhYmxlXG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSBtb2R1bGUuZXhwb3J0cyA9IFN1bkNhbGM7XG5lbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShTdW5DYWxjKTtcbmVsc2Ugd2luZG93LlN1bkNhbGMgPSBTdW5DYWxjO1xuXG59KCkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9